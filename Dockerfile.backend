# Build stage
FROM node:24.4.0-alpine AS builder

# Install pnpm and TypeScript globally with specific versions
ENV PNPM_VERSION=10.13.1
ENV TYPESCRIPT_VERSION=5.9.2
RUN npm install -g pnpm@${PNPM_VERSION} typescript@${TYPESCRIPT_VERSION}

# Set working directory
WORKDIR /app

# Copy package files for better caching
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY shared-config/package.json ./shared-config/

# Copy backend package.json files
COPY backend/packages/api/package.json ./backend/packages/api/
COPY backend/packages/config/package.json ./backend/packages/config/
COPY backend/packages/database/package.json ./backend/packages/database/
COPY backend/packages/domain/package.json ./backend/packages/domain/
COPY backend/packages/generated/package.json ./backend/packages/generated/
COPY backend/packages/infrastructure/package.json ./backend/packages/infrastructure/
COPY backend/packages/utility/package.json ./backend/packages/utility/

# Copy backend apps package.json files
COPY backend/apps/server/package.json ./backend/apps/server/

# Copy specs package.json
COPY specs/package.json ./specs/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build backend packages
RUN pnpm --filter "./backend/**" run build:prod

# Development stage
FROM node:24.4.0-alpine AS development

# Install pnpm globally and development tools
ENV PNPM_VERSION=10.13.1
RUN apk add --no-cache bash wget && \
    npm install -g pnpm@${PNPM_VERSION}

# Create non-root user
RUN adduser -D -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy root package.json first to get packageManager
COPY --chown=appuser:appuser package.json ./

# Copy everything for development
COPY --chown=appuser:appuser . .

# Install all dependencies (including dev)
RUN pnpm install --frozen-lockfile

# Setup pnpm and install TypeScript globally for the build process
ENV PNPM_HOME=/usr/local/bin
RUN npm install -g typescript

# Build all packages in development for tsx to work properly
RUN pnpm --filter "./backend/packages/**" run build:prod

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Default command for development
CMD ["pnpm", "--filter", "@beauty-salon-backend/server", "dev"]

# Production stage
FROM node:24.4.0-alpine AS production

# Install pnpm globally and runtime dependencies
ENV PNPM_VERSION=10.13.1
RUN apk add --no-cache bash wget && \
    npm install -g pnpm@${PNPM_VERSION}

# Create non-root user
RUN adduser -D -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy remaining package files
COPY --chown=appuser:appuser package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY --chown=appuser:appuser shared-config/package.json ./shared-config/

# Copy backend package.json files
COPY --chown=appuser:appuser backend/packages/api/package.json ./backend/packages/api/
COPY --chown=appuser:appuser backend/packages/config/package.json ./backend/packages/config/
COPY --chown=appuser:appuser backend/packages/database/package.json ./backend/packages/database/
COPY --chown=appuser:appuser backend/packages/domain/package.json ./backend/packages/domain/
COPY --chown=appuser:appuser backend/packages/generated/package.json ./backend/packages/generated/
COPY --chown=appuser:appuser backend/packages/infrastructure/package.json ./backend/packages/infrastructure/
COPY --chown=appuser:appuser backend/packages/utility/package.json ./backend/packages/utility/

# Copy backend apps package.json files
COPY --chown=appuser:appuser backend/apps/server/package.json ./backend/apps/server/

# Copy specs package.json
COPY --chown=appuser:appuser specs/package.json ./specs/

# Install production dependencies only
RUN pnpm install --prod --frozen-lockfile

# Copy built artifacts from builder
COPY --from=builder --chown=appuser:appuser /app/backend/packages/*/dist ./backend/packages/*/dist/
COPY --from=builder --chown=appuser:appuser /app/backend/apps/*/dist ./backend/apps/*/dist/

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1

# Production command
CMD ["node", "backend/apps/server/dist/index.js"]