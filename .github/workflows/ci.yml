name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "24.4.0"
  PNPM_VERSION: "10.13.1"
  TYPESCRIPT_VERSION: "5.9.2"

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate API specifications and types
        run: pnpm generate

      - name: Build all packages
        run: pnpm run --recursive --workspace-concurrency=1 build:prod

      - name: Run Biome lint
        run: pnpm lint

      - name: Check formatting
        run: pnpm format

      - name: Run type check
        run: pnpm typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: beauty_salon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate API specifications and types
        run: pnpm generate

      - name: Build packages for tests
        run: pnpm run --recursive --workspace-concurrency=1 build:prod

      - name: Copy test environment variables
        run: cp .env.test.example .env.test

      - name: Setup test database extensions
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d beauty_salon_test -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d beauty_salon_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      - name: Run backend tests
        run: |
          CI=true NODE_ENV=test pnpm --filter "@beauty-salon-backend/api" --filter "@beauty-salon-backend/utility" test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/beauty_salon_test
          CI: true
          NODE_ENV: test

      - name: Run frontend tests
        run: |
          CI=true NODE_ENV=test pnpm --filter "@beauty-salon-frontend/*" test
          CI=true NODE_ENV=test pnpm --filter "@beauty-salon/portal-app" test
          CI=true NODE_ENV=test pnpm --filter "@beauty-salon/dashboard-app" test
          CI=true NODE_ENV=test pnpm --filter "@beauty-salon/admin-app" test
        env:
          CI: true
          NODE_ENV: test

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, test, stg, prod]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate API specifications and types
        run: pnpm generate

      - name: Build for ${{ matrix.environment }}
        run: pnpm run --recursive --workspace-concurrency=1 build:${{ matrix.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: |
            backend/dist
            backend/packages/*/dist
            backend/apps/*/dist
            frontend/apps/*/dist
          retention-days: 7

  api-spec:
    name: API Specification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate API specification
        run: pnpm generate:spec

      - name: Verify API client generation
        run: pnpm generate:api

      - name: Verify backend types generation
        run: pnpm generate:backend

      - name: Upload API specification
        uses: actions/upload-artifact@v4
        with:
          name: api-spec
          path: specs/tsp-output/@typespec/openapi3/generated/openapi.yaml
          retention-days: 30

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    strategy:
      fail-fast: false
      matrix:
        dockerfile:
          - name: backend
            file: Dockerfile.backend
            target: builder
          - name: frontend-admin
            file: Dockerfile.frontend.admin
            target: builder
          - name: frontend-portal
            file: Dockerfile.frontend.portal
            target: builder
          - name: frontend-dashboard
            file: Dockerfile.frontend.dashboard
            target: builder

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.dockerfile.name }} Docker image (test)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.dockerfile.file }}
          target: ${{ matrix.dockerfile.target }}
          push: false
          load: true
          tags: test-${{ matrix.dockerfile.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=test
            PNPM_VERSION=${{ env.PNPM_VERSION }}
            TYPESCRIPT_VERSION=${{ env.TYPESCRIPT_VERSION }}

      - name: Verify ${{ matrix.dockerfile.name }} image built successfully
        run: |
          echo "âœ… ${{ matrix.dockerfile.name }} Docker image built successfully"
          docker images | grep test-${{ matrix.dockerfile.name }}

  docker-backend:
    name: Docker Build - Backend
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, docker-build-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  docker-frontend-apps:
    name: Docker Build - Frontend Apps
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, docker-build-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        app:
          - name: admin
            dockerfile: Dockerfile.frontend.admin
            port: 4001
          - name: portal
            dockerfile: Dockerfile.frontend.portal
            port: 4002
          - name: dashboard
            dockerfile: Dockerfile.frontend.dashboard
            port: 4003

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.app.name }} app
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-frontend-${{ matrix.app.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.app.name }} Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.app.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_PORT=${{ matrix.app.port }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=high
