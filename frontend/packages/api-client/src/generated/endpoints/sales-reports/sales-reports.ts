/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Beauty Salon API
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  SalesReportOperationsExportSalesReport200,
  SalesReportOperationsExportSalesReportBody,
  SalesReportOperationsGetDailySales200,
  SalesReportOperationsGetDailySalesParams,
  SalesReportOperationsGetSalesByCategory200,
  SalesReportOperationsGetSalesByCategoryParams,
  SalesReportOperationsGetSalesByStaff200,
  SalesReportOperationsGetSalesByStaffParams,
  SalesReportOperationsGetSalesReport200,
  SalesReportOperationsGetSalesReportParams,
  SalesReportOperationsGetSalesTrends200,
  SalesReportOperationsGetSalesTrendsParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Get sales report for a period
 */
export type salesReportOperationsGetSalesReportResponse200 = {
  data: SalesReportOperationsGetSalesReport200
  status: 200
}

export type salesReportOperationsGetSalesReportResponseComposite =
  salesReportOperationsGetSalesReportResponse200

export type salesReportOperationsGetSalesReportResponse =
  salesReportOperationsGetSalesReportResponseComposite & {
    headers: Headers
  }

export const getSalesReportOperationsGetSalesReportUrl = (
  params: SalesReportOperationsGetSalesReportParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/sales-reports?${stringifiedParams}`
    : `/sales-reports`
}

export const salesReportOperationsGetSalesReport = async (
  params: SalesReportOperationsGetSalesReportParams,
  options?: RequestInit
): Promise<salesReportOperationsGetSalesReportResponse> => {
  return customInstance<salesReportOperationsGetSalesReportResponse>(
    getSalesReportOperationsGetSalesReportUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalesReportOperationsGetSalesReportQueryKey = (
  params?: SalesReportOperationsGetSalesReportParams
) => {
  return [`/sales-reports`, ...(params ? [params] : [])] as const
}

export const getSalesReportOperationsGetSalesReportQueryOptions = <
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalesReportOperationsGetSalesReportQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>
  > = ({ signal }) =>
    salesReportOperationsGetSalesReport(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalesReportOperationsGetSalesReportQueryResult = NonNullable<
  Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>
>
export type SalesReportOperationsGetSalesReportQueryError = unknown

export function useSalesReportOperationsGetSalesReport<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesReportParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesReport<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesReport<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useSalesReportOperationsGetSalesReport<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesReport>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalesReportOperationsGetSalesReportQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get sales by service category
 */
export type salesReportOperationsGetSalesByCategoryResponse200 = {
  data: SalesReportOperationsGetSalesByCategory200
  status: 200
}

export type salesReportOperationsGetSalesByCategoryResponseComposite =
  salesReportOperationsGetSalesByCategoryResponse200

export type salesReportOperationsGetSalesByCategoryResponse =
  salesReportOperationsGetSalesByCategoryResponseComposite & {
    headers: Headers
  }

export const getSalesReportOperationsGetSalesByCategoryUrl = (
  params: SalesReportOperationsGetSalesByCategoryParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/sales-reports/by-category?${stringifiedParams}`
    : `/sales-reports/by-category`
}

export const salesReportOperationsGetSalesByCategory = async (
  params: SalesReportOperationsGetSalesByCategoryParams,
  options?: RequestInit
): Promise<salesReportOperationsGetSalesByCategoryResponse> => {
  return customInstance<salesReportOperationsGetSalesByCategoryResponse>(
    getSalesReportOperationsGetSalesByCategoryUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalesReportOperationsGetSalesByCategoryQueryKey = (
  params?: SalesReportOperationsGetSalesByCategoryParams
) => {
  return [`/sales-reports/by-category`, ...(params ? [params] : [])] as const
}

export const getSalesReportOperationsGetSalesByCategoryQueryOptions = <
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalesReportOperationsGetSalesByCategoryQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>
  > = ({ signal }) =>
    salesReportOperationsGetSalesByCategory(params, {
      signal,
      ...requestOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalesReportOperationsGetSalesByCategoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>
>
export type SalesReportOperationsGetSalesByCategoryQueryError = unknown

export function useSalesReportOperationsGetSalesByCategory<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByCategoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesByCategory<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesByCategory<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useSalesReportOperationsGetSalesByCategory<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByCategory>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalesReportOperationsGetSalesByCategoryQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get sales by staff
 */
export type salesReportOperationsGetSalesByStaffResponse200 = {
  data: SalesReportOperationsGetSalesByStaff200
  status: 200
}

export type salesReportOperationsGetSalesByStaffResponseComposite =
  salesReportOperationsGetSalesByStaffResponse200

export type salesReportOperationsGetSalesByStaffResponse =
  salesReportOperationsGetSalesByStaffResponseComposite & {
    headers: Headers
  }

export const getSalesReportOperationsGetSalesByStaffUrl = (
  params: SalesReportOperationsGetSalesByStaffParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/sales-reports/by-staff?${stringifiedParams}`
    : `/sales-reports/by-staff`
}

export const salesReportOperationsGetSalesByStaff = async (
  params: SalesReportOperationsGetSalesByStaffParams,
  options?: RequestInit
): Promise<salesReportOperationsGetSalesByStaffResponse> => {
  return customInstance<salesReportOperationsGetSalesByStaffResponse>(
    getSalesReportOperationsGetSalesByStaffUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalesReportOperationsGetSalesByStaffQueryKey = (
  params?: SalesReportOperationsGetSalesByStaffParams
) => {
  return [`/sales-reports/by-staff`, ...(params ? [params] : [])] as const
}

export const getSalesReportOperationsGetSalesByStaffQueryOptions = <
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalesReportOperationsGetSalesByStaffQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>
  > = ({ signal }) =>
    salesReportOperationsGetSalesByStaff(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalesReportOperationsGetSalesByStaffQueryResult = NonNullable<
  Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>
>
export type SalesReportOperationsGetSalesByStaffQueryError = unknown

export function useSalesReportOperationsGetSalesByStaff<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByStaffParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesByStaff<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesByStaff<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useSalesReportOperationsGetSalesByStaff<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesByStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesByStaff>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalesReportOperationsGetSalesByStaffQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get daily sales summary
 */
export type salesReportOperationsGetDailySalesResponse200 = {
  data: SalesReportOperationsGetDailySales200
  status: 200
}

export type salesReportOperationsGetDailySalesResponseComposite =
  salesReportOperationsGetDailySalesResponse200

export type salesReportOperationsGetDailySalesResponse =
  salesReportOperationsGetDailySalesResponseComposite & {
    headers: Headers
  }

export const getSalesReportOperationsGetDailySalesUrl = (
  params: SalesReportOperationsGetDailySalesParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/sales-reports/daily?${stringifiedParams}`
    : `/sales-reports/daily`
}

export const salesReportOperationsGetDailySales = async (
  params: SalesReportOperationsGetDailySalesParams,
  options?: RequestInit
): Promise<salesReportOperationsGetDailySalesResponse> => {
  return customInstance<salesReportOperationsGetDailySalesResponse>(
    getSalesReportOperationsGetDailySalesUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalesReportOperationsGetDailySalesQueryKey = (
  params?: SalesReportOperationsGetDailySalesParams
) => {
  return [`/sales-reports/daily`, ...(params ? [params] : [])] as const
}

export const getSalesReportOperationsGetDailySalesQueryOptions = <
  TData = Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetDailySalesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalesReportOperationsGetDailySalesQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>
  > = ({ signal }) =>
    salesReportOperationsGetDailySales(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalesReportOperationsGetDailySalesQueryResult = NonNullable<
  Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>
>
export type SalesReportOperationsGetDailySalesQueryError = unknown

export function useSalesReportOperationsGetDailySales<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetDailySalesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetDailySales<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetDailySalesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetDailySales<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetDailySalesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useSalesReportOperationsGetDailySales<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetDailySalesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetDailySales>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalesReportOperationsGetDailySalesQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Export sales report
 */
export type salesReportOperationsExportSalesReportResponse200 = {
  data: SalesReportOperationsExportSalesReport200
  status: 200
}

export type salesReportOperationsExportSalesReportResponseComposite =
  salesReportOperationsExportSalesReportResponse200

export type salesReportOperationsExportSalesReportResponse =
  salesReportOperationsExportSalesReportResponseComposite & {
    headers: Headers
  }

export const getSalesReportOperationsExportSalesReportUrl = () => {
  return `/sales-reports/export`
}

export const salesReportOperationsExportSalesReport = async (
  salesReportOperationsExportSalesReportBody: SalesReportOperationsExportSalesReportBody,
  options?: RequestInit
): Promise<salesReportOperationsExportSalesReportResponse> => {
  return customInstance<salesReportOperationsExportSalesReportResponse>(
    getSalesReportOperationsExportSalesReportUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(salesReportOperationsExportSalesReportBody),
    }
  )
}

export const getSalesReportOperationsExportSalesReportMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salesReportOperationsExportSalesReport>>,
    TError,
    { data: SalesReportOperationsExportSalesReportBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salesReportOperationsExportSalesReport>>,
  TError,
  { data: SalesReportOperationsExportSalesReportBody },
  TContext
> => {
  const mutationKey = ['salesReportOperationsExportSalesReport']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salesReportOperationsExportSalesReport>>,
    { data: SalesReportOperationsExportSalesReportBody }
  > = (props) => {
    const { data } = props ?? {}

    return salesReportOperationsExportSalesReport(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalesReportOperationsExportSalesReportMutationResult = NonNullable<
  Awaited<ReturnType<typeof salesReportOperationsExportSalesReport>>
>
export type SalesReportOperationsExportSalesReportMutationBody =
  SalesReportOperationsExportSalesReportBody
export type SalesReportOperationsExportSalesReportMutationError = unknown

export const useSalesReportOperationsExportSalesReport = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salesReportOperationsExportSalesReport>>,
      TError,
      { data: SalesReportOperationsExportSalesReportBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salesReportOperationsExportSalesReport>>,
  TError,
  { data: SalesReportOperationsExportSalesReportBody },
  TContext
> => {
  const mutationOptions =
    getSalesReportOperationsExportSalesReportMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Get sales trends
 */
export type salesReportOperationsGetSalesTrendsResponse200 = {
  data: SalesReportOperationsGetSalesTrends200
  status: 200
}

export type salesReportOperationsGetSalesTrendsResponseComposite =
  salesReportOperationsGetSalesTrendsResponse200

export type salesReportOperationsGetSalesTrendsResponse =
  salesReportOperationsGetSalesTrendsResponseComposite & {
    headers: Headers
  }

export const getSalesReportOperationsGetSalesTrendsUrl = (
  params: SalesReportOperationsGetSalesTrendsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/sales-reports/trends?${stringifiedParams}`
    : `/sales-reports/trends`
}

export const salesReportOperationsGetSalesTrends = async (
  params: SalesReportOperationsGetSalesTrendsParams,
  options?: RequestInit
): Promise<salesReportOperationsGetSalesTrendsResponse> => {
  return customInstance<salesReportOperationsGetSalesTrendsResponse>(
    getSalesReportOperationsGetSalesTrendsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalesReportOperationsGetSalesTrendsQueryKey = (
  params?: SalesReportOperationsGetSalesTrendsParams
) => {
  return [`/sales-reports/trends`, ...(params ? [params] : [])] as const
}

export const getSalesReportOperationsGetSalesTrendsQueryOptions = <
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesTrendsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalesReportOperationsGetSalesTrendsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>
  > = ({ signal }) =>
    salesReportOperationsGetSalesTrends(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalesReportOperationsGetSalesTrendsQueryResult = NonNullable<
  Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>
>
export type SalesReportOperationsGetSalesTrendsQueryError = unknown

export function useSalesReportOperationsGetSalesTrends<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesTrendsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesTrends<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesTrendsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
          TError,
          Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalesReportOperationsGetSalesTrends<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesTrendsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useSalesReportOperationsGetSalesTrends<
  TData = Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
  TError = unknown,
>(
  params: SalesReportOperationsGetSalesTrendsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salesReportOperationsGetSalesTrends>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalesReportOperationsGetSalesTrendsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
