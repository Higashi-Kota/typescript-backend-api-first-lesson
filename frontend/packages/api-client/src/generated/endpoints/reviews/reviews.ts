/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Beauty Salon API
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ModelsCreateReviewRequest,
  ModelsError,
  ModelsReview,
  ModelsReviewId,
  ModelsReviewSummary,
  ModelsSalonId,
  ModelsStaffId,
  ModelsUpdateReviewRequest,
  ReviewOperationsList200,
  ReviewOperationsListParams,
  ReviewOperationsMarkHelpful200,
  ReviewOperationsReport200,
  ReviewOperationsReportBody,
  SalonReviewOperationsGetSalonReviews200,
  SalonReviewOperationsGetSalonReviewsParams,
  StaffReviewOperationsGetStaffReviews200,
  StaffReviewOperationsGetStaffReviewsParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * È°ßÂÆ¢„ÇÑ„Çπ„Çø„ÉÉ„Éï„ÄÅË©ï‰æ°ÁÇπ„Åß„É¨„Éì„É•„Éº„ÇíÁµû„ÇäËæº„Åø„ÄÅÂ∫óËàóÈÅãÂñ∂„ÅÆÊîπÂñÑÊùêÊñô„ÇíÊäΩÂá∫„Åó„Åæ„Åô„ÄÇ
 * @summary List reviews
 */
export type reviewOperationsListResponse200 = {
  data: ReviewOperationsList200
  status: 200
}

export type reviewOperationsListResponseComposite =
  reviewOperationsListResponse200

export type reviewOperationsListResponse =
  reviewOperationsListResponseComposite & {
    headers: Headers
  }

export const getReviewOperationsListUrl = (
  params?: ReviewOperationsListParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/reviews?${stringifiedParams}`
    : `/api/v1/reviews`
}

export const reviewOperationsList = async (
  params?: ReviewOperationsListParams,
  options?: RequestInit
): Promise<reviewOperationsListResponse> => {
  return customInstance<reviewOperationsListResponse>(
    getReviewOperationsListUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getReviewOperationsListQueryKey = (
  params?: ReviewOperationsListParams
) => {
  return [`/api/v1/reviews`, ...(params ? [params] : [])] as const
}

export const getReviewOperationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof reviewOperationsList>>,
  TError = unknown,
>(
  params?: ReviewOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getReviewOperationsListQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof reviewOperationsList>>
  > = ({ signal }) =>
    reviewOperationsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof reviewOperationsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReviewOperationsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof reviewOperationsList>>
>
export type ReviewOperationsListQueryError = unknown

export function useReviewOperationsList<
  TData = Awaited<ReturnType<typeof reviewOperationsList>>,
  TError = unknown,
>(
  params: undefined | ReviewOperationsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewOperationsList>>,
          TError,
          Awaited<ReturnType<typeof reviewOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useReviewOperationsList<
  TData = Awaited<ReturnType<typeof reviewOperationsList>>,
  TError = unknown,
>(
  params?: ReviewOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewOperationsList>>,
          TError,
          Awaited<ReturnType<typeof reviewOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useReviewOperationsList<
  TData = Awaited<ReturnType<typeof reviewOperationsList>>,
  TError = unknown,
>(
  params?: ReviewOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List reviews
 */

export function useReviewOperationsList<
  TData = Awaited<ReturnType<typeof reviewOperationsList>>,
  TError = unknown,
>(
  params?: ReviewOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getReviewOperationsListQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÊñΩË°ìÂÆå‰∫ÜÂæå„Å´È°ßÂÆ¢„Åå„É¨„Éì„É•„Éº„ÇíÊäïÁ®ø„Åó„ÄÅ„Çµ„Éº„Éì„ÇπÂìÅË≥™„ÅÆÂèØË¶ñÂåñ„Å®‰ø°È†ºÁç≤Âæó„Å´„Å§„Å™„Åí„Åæ„Åô„ÄÇ
 * @summary Create review
 */
export type reviewOperationsCreateResponse201 = {
  data: ModelsReview
  status: 201
}

export type reviewOperationsCreateResponse400 = {
  data: ModelsError
  status: 400
}

export type reviewOperationsCreateResponseComposite =
  | reviewOperationsCreateResponse201
  | reviewOperationsCreateResponse400

export type reviewOperationsCreateResponse =
  reviewOperationsCreateResponseComposite & {
    headers: Headers
  }

export const getReviewOperationsCreateUrl = () => {
  return `/api/v1/reviews`
}

export const reviewOperationsCreate = async (
  modelsCreateReviewRequest: ModelsCreateReviewRequest,
  options?: RequestInit
): Promise<reviewOperationsCreateResponse> => {
  return customInstance<reviewOperationsCreateResponse>(
    getReviewOperationsCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsCreateReviewRequest),
    }
  )
}

export const getReviewOperationsCreateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewOperationsCreate>>,
    TError,
    { data: ModelsCreateReviewRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewOperationsCreate>>,
  TError,
  { data: ModelsCreateReviewRequest },
  TContext
> => {
  const mutationKey = ['reviewOperationsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewOperationsCreate>>,
    { data: ModelsCreateReviewRequest }
  > = (props) => {
    const { data } = props ?? {}

    return reviewOperationsCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReviewOperationsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewOperationsCreate>>
>
export type ReviewOperationsCreateMutationBody = ModelsCreateReviewRequest
export type ReviewOperationsCreateMutationError = ModelsError

/**
 * @summary Create review
 */
export const useReviewOperationsCreate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reviewOperationsCreate>>,
      TError,
      { data: ModelsCreateReviewRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reviewOperationsCreate>>,
  TError,
  { data: ModelsCreateReviewRequest },
  TContext
> => {
  const mutationOptions = getReviewOperationsCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Âçò‰∏Ä„É¨„Éì„É•„Éº„ÅÆË©≥Á¥∞„ÇíË°®Á§∫„Åó„ÄÅ„Ç≥„É°„É≥„ÉàÂÜÖÂÆπ„ÇÑË©ï‰æ°ÊåáÊ®ô„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÄÇ
 * @summary Get review
 */
export type reviewOperationsGetResponse200 = {
  data: ModelsReview
  status: 200
}

export type reviewOperationsGetResponse404 = {
  data: ModelsError
  status: 404
}

export type reviewOperationsGetResponseComposite =
  | reviewOperationsGetResponse200
  | reviewOperationsGetResponse404

export type reviewOperationsGetResponse =
  reviewOperationsGetResponseComposite & {
    headers: Headers
  }

export const getReviewOperationsGetUrl = (id: ModelsReviewId) => {
  return `/api/v1/reviews/${id}`
}

export const reviewOperationsGet = async (
  id: ModelsReviewId,
  options?: RequestInit
): Promise<reviewOperationsGetResponse> => {
  return customInstance<reviewOperationsGetResponse>(
    getReviewOperationsGetUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getReviewOperationsGetQueryKey = (id: ModelsReviewId) => {
  return [`/api/v1/reviews/${id}`] as const
}

export const getReviewOperationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof reviewOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsReviewId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getReviewOperationsGetQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof reviewOperationsGet>>
  > = ({ signal }) => reviewOperationsGet(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof reviewOperationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReviewOperationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof reviewOperationsGet>>
>
export type ReviewOperationsGetQueryError = ModelsError

export function useReviewOperationsGet<
  TData = Awaited<ReturnType<typeof reviewOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsReviewId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof reviewOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useReviewOperationsGet<
  TData = Awaited<ReturnType<typeof reviewOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsReviewId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof reviewOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof reviewOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useReviewOperationsGet<
  TData = Awaited<ReturnType<typeof reviewOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsReviewId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get review
 */

export function useReviewOperationsGet<
  TData = Awaited<ReturnType<typeof reviewOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsReviewId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof reviewOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getReviewOperationsGetQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * È°ßÂÆ¢„ÅåÊäïÁ®øÂæå„ÅÆ„É¨„Éì„É•„Éº„Çí‰øÆÊ≠£„Åó„ÄÅË™§Ë®ò‰øÆÊ≠£„ÇÑËøΩË®ò„ÇíÂèçÊò†„Åó„Åæ„Åô„ÄÇ
 * @summary Update review
 */
export type reviewOperationsUpdateResponse200 = {
  data: ModelsReview
  status: 200
}

export type reviewOperationsUpdateResponse403 = {
  data: ModelsError
  status: 403
}

export type reviewOperationsUpdateResponseComposite =
  | reviewOperationsUpdateResponse200
  | reviewOperationsUpdateResponse403

export type reviewOperationsUpdateResponse =
  reviewOperationsUpdateResponseComposite & {
    headers: Headers
  }

export const getReviewOperationsUpdateUrl = (id: ModelsReviewId) => {
  return `/api/v1/reviews/${id}`
}

export const reviewOperationsUpdate = async (
  id: ModelsReviewId,
  modelsUpdateReviewRequest: ModelsUpdateReviewRequest,
  options?: RequestInit
): Promise<reviewOperationsUpdateResponse> => {
  return customInstance<reviewOperationsUpdateResponse>(
    getReviewOperationsUpdateUrl(id),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUpdateReviewRequest),
    }
  )
}

export const getReviewOperationsUpdateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewOperationsUpdate>>,
    TError,
    { id: ModelsReviewId; data: ModelsUpdateReviewRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewOperationsUpdate>>,
  TError,
  { id: ModelsReviewId; data: ModelsUpdateReviewRequest },
  TContext
> => {
  const mutationKey = ['reviewOperationsUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewOperationsUpdate>>,
    { id: ModelsReviewId; data: ModelsUpdateReviewRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return reviewOperationsUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReviewOperationsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewOperationsUpdate>>
>
export type ReviewOperationsUpdateMutationBody = ModelsUpdateReviewRequest
export type ReviewOperationsUpdateMutationError = ModelsError

/**
 * @summary Update review
 */
export const useReviewOperationsUpdate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reviewOperationsUpdate>>,
      TError,
      { id: ModelsReviewId; data: ModelsUpdateReviewRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reviewOperationsUpdate>>,
  TError,
  { id: ModelsReviewId; data: ModelsUpdateReviewRequest },
  TContext
> => {
  const mutationOptions = getReviewOperationsUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * „É¨„Éì„É•„Éº„ÅÆÂâäÈô§Ë¶ÅË´ã„Å´Âøú„Åò„Å¶ÊäïÁ®ø„ÇíÈùûË°®Á§∫„Åæ„Åü„ÅØÈô§Âéª„Åó„ÄÅ„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„Çπ„ÇíÁ∂≠ÊåÅ„Åó„Åæ„Åô„ÄÇ
 * @summary Delete review
 */
export type reviewOperationsDeleteResponse204 = {
  data: void
  status: 204
}

export type reviewOperationsDeleteResponse403 = {
  data: ModelsError
  status: 403
}

export type reviewOperationsDeleteResponseComposite =
  | reviewOperationsDeleteResponse204
  | reviewOperationsDeleteResponse403

export type reviewOperationsDeleteResponse =
  reviewOperationsDeleteResponseComposite & {
    headers: Headers
  }

export const getReviewOperationsDeleteUrl = (id: ModelsReviewId) => {
  return `/api/v1/reviews/${id}`
}

export const reviewOperationsDelete = async (
  id: ModelsReviewId,
  options?: RequestInit
): Promise<reviewOperationsDeleteResponse> => {
  return customInstance<reviewOperationsDeleteResponse>(
    getReviewOperationsDeleteUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getReviewOperationsDeleteMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewOperationsDelete>>,
    TError,
    { id: ModelsReviewId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewOperationsDelete>>,
  TError,
  { id: ModelsReviewId },
  TContext
> => {
  const mutationKey = ['reviewOperationsDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewOperationsDelete>>,
    { id: ModelsReviewId }
  > = (props) => {
    const { id } = props ?? {}

    return reviewOperationsDelete(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReviewOperationsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewOperationsDelete>>
>

export type ReviewOperationsDeleteMutationError = ModelsError

/**
 * @summary Delete review
 */
export const useReviewOperationsDelete = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reviewOperationsDelete>>,
      TError,
      { id: ModelsReviewId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reviewOperationsDelete>>,
  TError,
  { id: ModelsReviewId },
  TContext
> => {
  const mutationOptions = getReviewOperationsDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * ‰ªñ„ÅÆÂà©Áî®ËÄÖ„Å´ÂΩπÁ´ã„Å§„É¨„Éì„É•„Éº„Çí„Éû„Éº„Ç≠„É≥„Ç∞„Åó„ÄÅ‰ø°È†ºÊÄß„ÅÆÈ´ò„ÅÑÂ£∞„ÇíÂº∑Ë™ø„Åó„Åæ„Åô„ÄÇ
 * @summary Mark review as helpful
 */
export type reviewOperationsMarkHelpfulResponse200 = {
  data: ReviewOperationsMarkHelpful200
  status: 200
}

export type reviewOperationsMarkHelpfulResponse404 = {
  data: ModelsError
  status: 404
}

export type reviewOperationsMarkHelpfulResponseComposite =
  | reviewOperationsMarkHelpfulResponse200
  | reviewOperationsMarkHelpfulResponse404

export type reviewOperationsMarkHelpfulResponse =
  reviewOperationsMarkHelpfulResponseComposite & {
    headers: Headers
  }

export const getReviewOperationsMarkHelpfulUrl = (id: ModelsReviewId) => {
  return `/api/v1/reviews/${id}/helpful`
}

export const reviewOperationsMarkHelpful = async (
  id: ModelsReviewId,
  options?: RequestInit
): Promise<reviewOperationsMarkHelpfulResponse> => {
  return customInstance<reviewOperationsMarkHelpfulResponse>(
    getReviewOperationsMarkHelpfulUrl(id),
    {
      ...options,
      method: 'POST',
    }
  )
}

export const getReviewOperationsMarkHelpfulMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewOperationsMarkHelpful>>,
    TError,
    { id: ModelsReviewId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewOperationsMarkHelpful>>,
  TError,
  { id: ModelsReviewId },
  TContext
> => {
  const mutationKey = ['reviewOperationsMarkHelpful']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewOperationsMarkHelpful>>,
    { id: ModelsReviewId }
  > = (props) => {
    const { id } = props ?? {}

    return reviewOperationsMarkHelpful(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReviewOperationsMarkHelpfulMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewOperationsMarkHelpful>>
>

export type ReviewOperationsMarkHelpfulMutationError = ModelsError

/**
 * @summary Mark review as helpful
 */
export const useReviewOperationsMarkHelpful = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reviewOperationsMarkHelpful>>,
      TError,
      { id: ModelsReviewId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reviewOperationsMarkHelpful>>,
  TError,
  { id: ModelsReviewId },
  TContext
> => {
  const mutationOptions = getReviewOperationsMarkHelpfulMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * ‰∏çÈÅ©Âàá„Å™ÂÜÖÂÆπ„ÇÑËôöÂÅΩ„ÅåÁñë„Çè„Çå„Çã„É¨„Éì„É•„Éº„ÇíÈÄöÂ†±„Åó„ÄÅÈÅãÂñ∂„Å´„Çà„ÇãÂØæÂøú„Éï„É≠„Éº„Å∏ÈÄÅ„Çä„Åæ„Åô„ÄÇ
 * @summary Report review
 */
export type reviewOperationsReportResponse200 = {
  data: ReviewOperationsReport200
  status: 200
}

export type reviewOperationsReportResponse404 = {
  data: ModelsError
  status: 404
}

export type reviewOperationsReportResponseComposite =
  | reviewOperationsReportResponse200
  | reviewOperationsReportResponse404

export type reviewOperationsReportResponse =
  reviewOperationsReportResponseComposite & {
    headers: Headers
  }

export const getReviewOperationsReportUrl = (id: ModelsReviewId) => {
  return `/api/v1/reviews/${id}/report`
}

export const reviewOperationsReport = async (
  id: ModelsReviewId,
  reviewOperationsReportBody: ReviewOperationsReportBody,
  options?: RequestInit
): Promise<reviewOperationsReportResponse> => {
  return customInstance<reviewOperationsReportResponse>(
    getReviewOperationsReportUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(reviewOperationsReportBody),
    }
  )
}

export const getReviewOperationsReportMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewOperationsReport>>,
    TError,
    { id: ModelsReviewId; data: ReviewOperationsReportBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewOperationsReport>>,
  TError,
  { id: ModelsReviewId; data: ReviewOperationsReportBody },
  TContext
> => {
  const mutationKey = ['reviewOperationsReport']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewOperationsReport>>,
    { id: ModelsReviewId; data: ReviewOperationsReportBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return reviewOperationsReport(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ReviewOperationsReportMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewOperationsReport>>
>
export type ReviewOperationsReportMutationBody = ReviewOperationsReportBody
export type ReviewOperationsReportMutationError = ModelsError

/**
 * @summary Report review
 */
export const useReviewOperationsReport = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reviewOperationsReport>>,
      TError,
      { id: ModelsReviewId; data: ReviewOperationsReportBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof reviewOperationsReport>>,
  TError,
  { id: ModelsReviewId; data: ReviewOperationsReportBody },
  TContext
> => {
  const mutationOptions = getReviewOperationsReportMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * „Çµ„É≠„É≥„Å´Á¥ê„Å•„Åè„É¨„Éì„É•„Éº‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„ÄÅ‰∏¶„Å≥Êõø„ÅàÊù°‰ª∂„Å´Âøú„Åò„Å¶È°ßÂÆ¢„ÅÆÂ£∞„ÇíÊèêÁ§∫„Åó„Åæ„Åô„ÄÇ
 * @summary Get salon reviews
 */
export type salonReviewOperationsGetSalonReviewsResponse200 = {
  data: SalonReviewOperationsGetSalonReviews200
  status: 200
}

export type salonReviewOperationsGetSalonReviewsResponseComposite =
  salonReviewOperationsGetSalonReviewsResponse200

export type salonReviewOperationsGetSalonReviewsResponse =
  salonReviewOperationsGetSalonReviewsResponseComposite & {
    headers: Headers
  }

export const getSalonReviewOperationsGetSalonReviewsUrl = (
  salonId: ModelsSalonId,
  params?: SalonReviewOperationsGetSalonReviewsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${salonId}/reviews?${stringifiedParams}`
    : `/api/v1/salons/${salonId}/reviews`
}

export const salonReviewOperationsGetSalonReviews = async (
  salonId: ModelsSalonId,
  params?: SalonReviewOperationsGetSalonReviewsParams,
  options?: RequestInit
): Promise<salonReviewOperationsGetSalonReviewsResponse> => {
  return customInstance<salonReviewOperationsGetSalonReviewsResponse>(
    getSalonReviewOperationsGetSalonReviewsUrl(salonId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonReviewOperationsGetSalonReviewsQueryKey = (
  salonId: ModelsSalonId,
  params?: SalonReviewOperationsGetSalonReviewsParams
) => {
  return [
    `/api/v1/salons/${salonId}/reviews`,
    ...(params ? [params] : []),
  ] as const
}

export const getSalonReviewOperationsGetSalonReviewsQueryOptions = <
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: SalonReviewOperationsGetSalonReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalonReviewOperationsGetSalonReviewsQueryKey(salonId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>
  > = ({ signal }) =>
    salonReviewOperationsGetSalonReviews(salonId, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!salonId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonReviewOperationsGetSalonReviewsQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>
>
export type SalonReviewOperationsGetSalonReviewsQueryError = unknown

export function useSalonReviewOperationsGetSalonReviews<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params: undefined | SalonReviewOperationsGetSalonReviewsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
          TError,
          Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonReviewOperationsGetSalonReviews<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: SalonReviewOperationsGetSalonReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
          TError,
          Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonReviewOperationsGetSalonReviews<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: SalonReviewOperationsGetSalonReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get salon reviews
 */

export function useSalonReviewOperationsGetSalonReviews<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: SalonReviewOperationsGetSalonReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSalonReviews>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonReviewOperationsGetSalonReviewsQueryOptions(
    salonId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * „Çµ„É≠„É≥ÂÖ®‰Ωì„ÅÆÂπ≥ÂùáË©ï‰æ°„ÇÑ‰ª∂Êï∞„Å™„Å©„ÅÆÊ¶ÇË¶ÅÊåáÊ®ô„ÇíÂèñÂæó„Åó„ÄÅ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâË°®Á§∫„Å´Âà©Áî®„Åó„Åæ„Åô„ÄÇ
 * @summary Get salon reviews summary
 */
export type salonReviewOperationsGetSummaryResponse200 = {
  data: ModelsReviewSummary
  status: 200
}

export type salonReviewOperationsGetSummaryResponseComposite =
  salonReviewOperationsGetSummaryResponse200

export type salonReviewOperationsGetSummaryResponse =
  salonReviewOperationsGetSummaryResponseComposite & {
    headers: Headers
  }

export const getSalonReviewOperationsGetSummaryUrl = (
  salonId: ModelsSalonId
) => {
  return `/api/v1/salons/${salonId}/reviews/summary`
}

export const salonReviewOperationsGetSummary = async (
  salonId: ModelsSalonId,
  options?: RequestInit
): Promise<salonReviewOperationsGetSummaryResponse> => {
  return customInstance<salonReviewOperationsGetSummaryResponse>(
    getSalonReviewOperationsGetSummaryUrl(salonId),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonReviewOperationsGetSummaryQueryKey = (
  salonId: ModelsSalonId
) => {
  return [`/api/v1/salons/${salonId}/reviews/summary`] as const
}

export const getSalonReviewOperationsGetSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalonReviewOperationsGetSummaryQueryKey(salonId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>
  > = ({ signal }) =>
    salonReviewOperationsGetSummary(salonId, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!salonId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonReviewOperationsGetSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>
>
export type SalonReviewOperationsGetSummaryQueryError = unknown

export function useSalonReviewOperationsGetSummary<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
          TError,
          Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonReviewOperationsGetSummary<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
          TError,
          Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonReviewOperationsGetSummary<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get salon reviews summary
 */

export function useSalonReviewOperationsGetSummary<
  TData = Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonReviewOperationsGetSummary>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonReviewOperationsGetSummaryQueryOptions(
    salonId,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÁâπÂÆö„Çπ„Çø„ÉÉ„Éï„Å´Á¥ê„Å•„Åè„É¨„Éì„É•„Éº‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„ÄÅÂÄãÂà•„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Å®„Åó„Å¶Ê¥ªÁî®„Åó„Åæ„Åô„ÄÇ
 * @summary Get staff reviews
 */
export type staffReviewOperationsGetStaffReviewsResponse200 = {
  data: StaffReviewOperationsGetStaffReviews200
  status: 200
}

export type staffReviewOperationsGetStaffReviewsResponseComposite =
  staffReviewOperationsGetStaffReviewsResponse200

export type staffReviewOperationsGetStaffReviewsResponse =
  staffReviewOperationsGetStaffReviewsResponseComposite & {
    headers: Headers
  }

export const getStaffReviewOperationsGetStaffReviewsUrl = (
  staffId: ModelsStaffId,
  params?: StaffReviewOperationsGetStaffReviewsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/staff/${staffId}/reviews?${stringifiedParams}`
    : `/api/v1/staff/${staffId}/reviews`
}

export const staffReviewOperationsGetStaffReviews = async (
  staffId: ModelsStaffId,
  params?: StaffReviewOperationsGetStaffReviewsParams,
  options?: RequestInit
): Promise<staffReviewOperationsGetStaffReviewsResponse> => {
  return customInstance<staffReviewOperationsGetStaffReviewsResponse>(
    getStaffReviewOperationsGetStaffReviewsUrl(staffId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getStaffReviewOperationsGetStaffReviewsQueryKey = (
  staffId: ModelsStaffId,
  params?: StaffReviewOperationsGetStaffReviewsParams
) => {
  return [
    `/api/v1/staff/${staffId}/reviews`,
    ...(params ? [params] : []),
  ] as const
}

export const getStaffReviewOperationsGetStaffReviewsQueryOptions = <
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: StaffReviewOperationsGetStaffReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getStaffReviewOperationsGetStaffReviewsQueryKey(staffId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>
  > = ({ signal }) =>
    staffReviewOperationsGetStaffReviews(staffId, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!staffId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StaffReviewOperationsGetStaffReviewsQueryResult = NonNullable<
  Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>
>
export type StaffReviewOperationsGetStaffReviewsQueryError = unknown

export function useStaffReviewOperationsGetStaffReviews<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params: undefined | StaffReviewOperationsGetStaffReviewsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
          TError,
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffReviewOperationsGetStaffReviews<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: StaffReviewOperationsGetStaffReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
          TError,
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffReviewOperationsGetStaffReviews<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: StaffReviewOperationsGetStaffReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get staff reviews
 */

export function useStaffReviewOperationsGetStaffReviews<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: StaffReviewOperationsGetStaffReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffReviews>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getStaffReviewOperationsGetStaffReviewsQueryOptions(
    staffId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * „Çπ„Çø„ÉÉ„ÉïÂà•„ÅÆÂπ≥ÂùáË©ï‰æ°„ÇÑ„É¨„Éì„É•„ÉºÊï∞„ÇíÈõÜË®à„Åó„ÄÅ‰∫∫‰∫ãË©ï‰æ°„ÇÑË°®ÂΩ∞„Å´Áî®„ÅÑ„Åæ„Åô„ÄÇ
 * @summary Get staff reviews summary
 */
export type staffReviewOperationsGetStaffSummaryResponse200 = {
  data: ModelsReviewSummary
  status: 200
}

export type staffReviewOperationsGetStaffSummaryResponseComposite =
  staffReviewOperationsGetStaffSummaryResponse200

export type staffReviewOperationsGetStaffSummaryResponse =
  staffReviewOperationsGetStaffSummaryResponseComposite & {
    headers: Headers
  }

export const getStaffReviewOperationsGetStaffSummaryUrl = (
  staffId: ModelsStaffId
) => {
  return `/api/v1/staff/${staffId}/reviews/summary`
}

export const staffReviewOperationsGetStaffSummary = async (
  staffId: ModelsStaffId,
  options?: RequestInit
): Promise<staffReviewOperationsGetStaffSummaryResponse> => {
  return customInstance<staffReviewOperationsGetStaffSummaryResponse>(
    getStaffReviewOperationsGetStaffSummaryUrl(staffId),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getStaffReviewOperationsGetStaffSummaryQueryKey = (
  staffId: ModelsStaffId
) => {
  return [`/api/v1/staff/${staffId}/reviews/summary`] as const
}

export const getStaffReviewOperationsGetStaffSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getStaffReviewOperationsGetStaffSummaryQueryKey(staffId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>
  > = ({ signal }) =>
    staffReviewOperationsGetStaffSummary(staffId, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!staffId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StaffReviewOperationsGetStaffSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>
>
export type StaffReviewOperationsGetStaffSummaryQueryError = unknown

export function useStaffReviewOperationsGetStaffSummary<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
          TError,
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffReviewOperationsGetStaffSummary<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
          TError,
          Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffReviewOperationsGetStaffSummary<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get staff reviews summary
 */

export function useStaffReviewOperationsGetStaffSummary<
  TData = Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffReviewOperationsGetStaffSummary>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getStaffReviewOperationsGetStaffSummaryQueryOptions(
    staffId,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
