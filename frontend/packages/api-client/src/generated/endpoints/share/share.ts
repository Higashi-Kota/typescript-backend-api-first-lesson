/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * (title)
 * Comprehensive API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, and reviews.
 * OpenAPI spec version: 0.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ShareOperationsDownloadSharedFile200,
  ShareOperationsDownloadSharedFileParams,
  ShareOperationsGetSharedFile200,
  ShareOperationsGetSharedFileParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ÂÖ±Êúâ„É™„É≥„ÇØ„Åã„Çâ„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíÂèñÂæó
 */
export type shareOperationsGetSharedFileResponse200 = {
  data: ShareOperationsGetSharedFile200
  status: 200
}

export type shareOperationsGetSharedFileResponseComposite =
  shareOperationsGetSharedFileResponse200

export type shareOperationsGetSharedFileResponse =
  shareOperationsGetSharedFileResponseComposite & {
    headers: Headers
  }

export const getShareOperationsGetSharedFileUrl = (
  shareToken: string,
  params?: ShareOperationsGetSharedFileParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/share/${shareToken}?${stringifiedParams}`
    : `/share/${shareToken}`
}

export const shareOperationsGetSharedFile = async (
  shareToken: string,
  params?: ShareOperationsGetSharedFileParams,
  options?: RequestInit
): Promise<shareOperationsGetSharedFileResponse> => {
  return customInstance<shareOperationsGetSharedFileResponse>(
    getShareOperationsGetSharedFileUrl(shareToken, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getShareOperationsGetSharedFileQueryKey = (
  shareToken: string,
  params?: ShareOperationsGetSharedFileParams
) => {
  return [`/share/${shareToken}`, ...(params ? [params] : [])] as const
}

export const getShareOperationsGetSharedFileQueryOptions = <
  TData = Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsGetSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getShareOperationsGetSharedFileQueryKey(shareToken, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof shareOperationsGetSharedFile>>
  > = ({ signal }) =>
    shareOperationsGetSharedFile(shareToken, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!shareToken,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ShareOperationsGetSharedFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof shareOperationsGetSharedFile>>
>
export type ShareOperationsGetSharedFileQueryError = unknown

export function useShareOperationsGetSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params: undefined | ShareOperationsGetSharedFileParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
          TError,
          Awaited<ReturnType<typeof shareOperationsGetSharedFile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShareOperationsGetSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsGetSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
          TError,
          Awaited<ReturnType<typeof shareOperationsGetSharedFile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShareOperationsGetSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsGetSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useShareOperationsGetSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsGetSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsGetSharedFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getShareOperationsGetSharedFileQueryOptions(
    shareToken,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÂÖ±Êúâ„É™„É≥„ÇØ„Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâURL„ÇíÂèñÂæó
 */
export type shareOperationsDownloadSharedFileResponse200 = {
  data: ShareOperationsDownloadSharedFile200
  status: 200
}

export type shareOperationsDownloadSharedFileResponseComposite =
  shareOperationsDownloadSharedFileResponse200

export type shareOperationsDownloadSharedFileResponse =
  shareOperationsDownloadSharedFileResponseComposite & {
    headers: Headers
  }

export const getShareOperationsDownloadSharedFileUrl = (
  shareToken: string,
  params?: ShareOperationsDownloadSharedFileParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/share/${shareToken}/download?${stringifiedParams}`
    : `/share/${shareToken}/download`
}

export const shareOperationsDownloadSharedFile = async (
  shareToken: string,
  params?: ShareOperationsDownloadSharedFileParams,
  options?: RequestInit
): Promise<shareOperationsDownloadSharedFileResponse> => {
  return customInstance<shareOperationsDownloadSharedFileResponse>(
    getShareOperationsDownloadSharedFileUrl(shareToken, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getShareOperationsDownloadSharedFileQueryKey = (
  shareToken: string,
  params?: ShareOperationsDownloadSharedFileParams
) => {
  return [`/share/${shareToken}/download`, ...(params ? [params] : [])] as const
}

export const getShareOperationsDownloadSharedFileQueryOptions = <
  TData = Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsDownloadSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getShareOperationsDownloadSharedFileQueryKey(shareToken, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>
  > = ({ signal }) =>
    shareOperationsDownloadSharedFile(shareToken, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!shareToken,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ShareOperationsDownloadSharedFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>
>
export type ShareOperationsDownloadSharedFileQueryError = unknown

export function useShareOperationsDownloadSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params: undefined | ShareOperationsDownloadSharedFileParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
          TError,
          Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShareOperationsDownloadSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsDownloadSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
          TError,
          Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useShareOperationsDownloadSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsDownloadSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useShareOperationsDownloadSharedFile<
  TData = Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
  TError = unknown,
>(
  shareToken: string,
  params?: ShareOperationsDownloadSharedFileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof shareOperationsDownloadSharedFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getShareOperationsDownloadSharedFileQueryOptions(
    shareToken,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
