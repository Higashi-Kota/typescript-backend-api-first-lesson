/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Beauty Salon API
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 2.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ModelsHealthStatus,
  ModelsProblemDetails,
  SystemOperationsAlive200,
  SystemOperationsReady200,
  SystemOperationsReady503,
  SystemOperationsVersion200,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * „Éó„É≠„Çª„Çπ„ÅåÁîüÂ≠ò„Åó„Å¶„ÅÑ„Çã„Åã„ÇíÂà§ÂÆö„Åô„Çã„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Åß„ÄÅÁï∞Â∏∏ÊôÇ„ÅØÂÜçËµ∑ÂãïÂà§ÂÆö„Å´Âà©Áî®„Åï„Çå„Åæ„Åô„ÄÇ
 * @summary Check API liveness
 */
export type systemOperationsAliveResponse200 = {
  data: SystemOperationsAlive200
  status: 200
}

export type systemOperationsAliveResponseComposite =
  systemOperationsAliveResponse200

export type systemOperationsAliveResponse =
  systemOperationsAliveResponseComposite & {
    headers: Headers
  }

export const getSystemOperationsAliveUrl = () => {
  return `/api/system/alive`
}

export const systemOperationsAlive = async (
  options?: RequestInit
): Promise<systemOperationsAliveResponse> => {
  return customInstance<systemOperationsAliveResponse>(
    getSystemOperationsAliveUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSystemOperationsAliveQueryKey = () => {
  return [`/api/system/alive`] as const
}

export const getSystemOperationsAliveQueryOptions = <
  TData = Awaited<ReturnType<typeof systemOperationsAlive>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof systemOperationsAlive>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSystemOperationsAliveQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof systemOperationsAlive>>
  > = ({ signal }) => systemOperationsAlive({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof systemOperationsAlive>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SystemOperationsAliveQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemOperationsAlive>>
>
export type SystemOperationsAliveQueryError = unknown

export function useSystemOperationsAlive<
  TData = Awaited<ReturnType<typeof systemOperationsAlive>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsAlive>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsAlive>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsAlive>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsAlive<
  TData = Awaited<ReturnType<typeof systemOperationsAlive>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsAlive>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsAlive>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsAlive>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsAlive<
  TData = Awaited<ReturnType<typeof systemOperationsAlive>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsAlive>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Check API liveness
 */

export function useSystemOperationsAlive<
  TData = Awaited<ReturnType<typeof systemOperationsAlive>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsAlive>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSystemOperationsAliveQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * API„ÅåÊ≠£Â∏∏Á®ºÂÉç„Åó„Å¶„ÅÑ„Çã„Åã„ÇíÂà§ÂÆö„Åó„ÄÅÁõ£Ë¶ñ„ÉÑ„Éº„É´„ÇÑ„É≠„Éº„Éâ„Éê„É©„É≥„Çµ„Éº„Åã„ÇâÂèÇÁÖß„Åó„Åæ„Åô„ÄÇ
 * @summary Check API health
 */
export type systemOperationsHealthResponse200 = {
  data: ModelsHealthStatus
  status: 200
}

export type systemOperationsHealthResponse503 = {
  data: ModelsHealthStatus
  status: 503
}

export type systemOperationsHealthResponseComposite =
  | systemOperationsHealthResponse200
  | systemOperationsHealthResponse503

export type systemOperationsHealthResponse =
  systemOperationsHealthResponseComposite & {
    headers: Headers
  }

export const getSystemOperationsHealthUrl = () => {
  return `/api/system/health`
}

export const systemOperationsHealth = async (
  options?: RequestInit
): Promise<systemOperationsHealthResponse> => {
  return customInstance<systemOperationsHealthResponse>(
    getSystemOperationsHealthUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSystemOperationsHealthQueryKey = () => {
  return [`/api/system/health`] as const
}

export const getSystemOperationsHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof systemOperationsHealth>>,
  TError = ModelsHealthStatus,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof systemOperationsHealth>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSystemOperationsHealthQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof systemOperationsHealth>>
  > = ({ signal }) => systemOperationsHealth({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof systemOperationsHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SystemOperationsHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemOperationsHealth>>
>
export type SystemOperationsHealthQueryError = ModelsHealthStatus

export function useSystemOperationsHealth<
  TData = Awaited<ReturnType<typeof systemOperationsHealth>>,
  TError = ModelsHealthStatus,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsHealth>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsHealth>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsHealth<
  TData = Awaited<ReturnType<typeof systemOperationsHealth>>,
  TError = ModelsHealthStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsHealth>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsHealth>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsHealth<
  TData = Awaited<ReturnType<typeof systemOperationsHealth>>,
  TError = ModelsHealthStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsHealth>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Check API health
 */

export function useSystemOperationsHealth<
  TData = Awaited<ReturnType<typeof systemOperationsHealth>>,
  TError = ModelsHealthStatus,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsHealth>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSystemOperationsHealthQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * PrometheusÂΩ¢Âºè„ÅÆ„É°„Éà„É™„ÇØ„Çπ„ÇíËøîÂç¥„Åó„ÄÅÁõ£Ë¶ñÂü∫Áõ§„Åß„ÅÆÂèØË¶ñÂåñ„ÇÑ„Ç¢„É©„Éº„ÉàË®≠ÂÆö„Å´Áî®„ÅÑ„Åæ„Åô„ÄÇ
 * @summary Get API metrics
 */
export type systemOperationsMetricsResponse200 = {
  data: string
  status: 200
}

export type systemOperationsMetricsResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type systemOperationsMetricsResponseComposite =
  | systemOperationsMetricsResponse200
  | systemOperationsMetricsResponse401

export type systemOperationsMetricsResponse =
  systemOperationsMetricsResponseComposite & {
    headers: Headers
  }

export const getSystemOperationsMetricsUrl = () => {
  return `/api/system/metrics`
}

export const systemOperationsMetrics = async (
  options?: RequestInit
): Promise<systemOperationsMetricsResponse> => {
  return customInstance<systemOperationsMetricsResponse>(
    getSystemOperationsMetricsUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSystemOperationsMetricsQueryKey = () => {
  return [`/api/system/metrics`] as const
}

export const getSystemOperationsMetricsQueryOptions = <
  TData = Awaited<ReturnType<typeof systemOperationsMetrics>>,
  TError = ModelsProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof systemOperationsMetrics>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSystemOperationsMetricsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof systemOperationsMetrics>>
  > = ({ signal }) => systemOperationsMetrics({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof systemOperationsMetrics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SystemOperationsMetricsQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemOperationsMetrics>>
>
export type SystemOperationsMetricsQueryError = ModelsProblemDetails

export function useSystemOperationsMetrics<
  TData = Awaited<ReturnType<typeof systemOperationsMetrics>>,
  TError = ModelsProblemDetails,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsMetrics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsMetrics>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsMetrics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsMetrics<
  TData = Awaited<ReturnType<typeof systemOperationsMetrics>>,
  TError = ModelsProblemDetails,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsMetrics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsMetrics>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsMetrics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsMetrics<
  TData = Awaited<ReturnType<typeof systemOperationsMetrics>>,
  TError = ModelsProblemDetails,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsMetrics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get API metrics
 */

export function useSystemOperationsMetrics<
  TData = Awaited<ReturnType<typeof systemOperationsMetrics>>,
  TError = ModelsProblemDetails,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsMetrics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSystemOperationsMetricsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * KubernetesÁ≠â„ÅÆ„Ç™„Éº„Ç±„Çπ„Éà„É¨„Éº„Çø„Éº„Åå„Éà„É©„Éï„Ç£„ÉÉ„ÇØÂèó‰ø°ÂèØÂê¶„ÇíÂà§Êñ≠„Åô„Çã„Åü„ÇÅ„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ„Åß„Åô„ÄÇ
 * @summary Check API readiness
 */
export type systemOperationsReadyResponse200 = {
  data: SystemOperationsReady200
  status: 200
}

export type systemOperationsReadyResponse503 = {
  data: SystemOperationsReady503
  status: 503
}

export type systemOperationsReadyResponseComposite =
  | systemOperationsReadyResponse200
  | systemOperationsReadyResponse503

export type systemOperationsReadyResponse =
  systemOperationsReadyResponseComposite & {
    headers: Headers
  }

export const getSystemOperationsReadyUrl = () => {
  return `/api/system/ready`
}

export const systemOperationsReady = async (
  options?: RequestInit
): Promise<systemOperationsReadyResponse> => {
  return customInstance<systemOperationsReadyResponse>(
    getSystemOperationsReadyUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSystemOperationsReadyQueryKey = () => {
  return [`/api/system/ready`] as const
}

export const getSystemOperationsReadyQueryOptions = <
  TData = Awaited<ReturnType<typeof systemOperationsReady>>,
  TError = SystemOperationsReady503,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof systemOperationsReady>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSystemOperationsReadyQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof systemOperationsReady>>
  > = ({ signal }) => systemOperationsReady({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof systemOperationsReady>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SystemOperationsReadyQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemOperationsReady>>
>
export type SystemOperationsReadyQueryError = SystemOperationsReady503

export function useSystemOperationsReady<
  TData = Awaited<ReturnType<typeof systemOperationsReady>>,
  TError = SystemOperationsReady503,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsReady>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsReady>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsReady>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsReady<
  TData = Awaited<ReturnType<typeof systemOperationsReady>>,
  TError = SystemOperationsReady503,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsReady>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsReady>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsReady>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsReady<
  TData = Awaited<ReturnType<typeof systemOperationsReady>>,
  TError = SystemOperationsReady503,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsReady>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Check API readiness
 */

export function useSystemOperationsReady<
  TData = Awaited<ReturnType<typeof systemOperationsReady>>,
  TError = SystemOperationsReady503,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsReady>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSystemOperationsReadyQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * API„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇÑ„Éì„É´„ÉâÊÉÖÂ†±„ÇíËøî„Åó„ÄÅÈöúÂÆ≥Ëß£Êûê„ÇÑ„Éá„Éó„É≠„Ç§Á¢∫Ë™ç„Å´Ê¥ªÁî®„Åó„Åæ„Åô„ÄÇ
 * @summary Get API version
 */
export type systemOperationsVersionResponse200 = {
  data: SystemOperationsVersion200
  status: 200
}

export type systemOperationsVersionResponseComposite =
  systemOperationsVersionResponse200

export type systemOperationsVersionResponse =
  systemOperationsVersionResponseComposite & {
    headers: Headers
  }

export const getSystemOperationsVersionUrl = () => {
  return `/api/system/version`
}

export const systemOperationsVersion = async (
  options?: RequestInit
): Promise<systemOperationsVersionResponse> => {
  return customInstance<systemOperationsVersionResponse>(
    getSystemOperationsVersionUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSystemOperationsVersionQueryKey = () => {
  return [`/api/system/version`] as const
}

export const getSystemOperationsVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof systemOperationsVersion>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof systemOperationsVersion>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSystemOperationsVersionQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof systemOperationsVersion>>
  > = ({ signal }) => systemOperationsVersion({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof systemOperationsVersion>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SystemOperationsVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemOperationsVersion>>
>
export type SystemOperationsVersionQueryError = unknown

export function useSystemOperationsVersion<
  TData = Awaited<ReturnType<typeof systemOperationsVersion>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsVersion>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsVersion>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsVersion<
  TData = Awaited<ReturnType<typeof systemOperationsVersion>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof systemOperationsVersion>>,
          TError,
          Awaited<ReturnType<typeof systemOperationsVersion>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSystemOperationsVersion<
  TData = Awaited<ReturnType<typeof systemOperationsVersion>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsVersion>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get API version
 */

export function useSystemOperationsVersion<
  TData = Awaited<ReturnType<typeof systemOperationsVersion>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof systemOperationsVersion>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSystemOperationsVersionQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
