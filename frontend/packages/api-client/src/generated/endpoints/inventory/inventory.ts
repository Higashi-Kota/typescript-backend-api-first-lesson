/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * (title)
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  InventoryOperationsCreateInventoryItem200,
  InventoryOperationsDeleteInventoryItem200,
  InventoryOperationsGetExpiringItems200,
  InventoryOperationsGetExpiringItemsParams,
  InventoryOperationsGetInventoryItem200,
  InventoryOperationsGetInventoryValueReport200,
  InventoryOperationsGetInventoryValueReportParams,
  InventoryOperationsGetLowStockItems200,
  InventoryOperationsGetLowStockItemsParams,
  InventoryOperationsGetStockMovements200,
  InventoryOperationsGetStockMovementsParams,
  InventoryOperationsListInventoryItems200,
  InventoryOperationsListInventoryItemsParams,
  InventoryOperationsPerformStockCount200,
  InventoryOperationsPerformStockCountBody,
  InventoryOperationsRecordStockMovement200,
  InventoryOperationsUpdateInventoryItem200,
  ModelsInventoryId,
  ModelsInventoryItemCreateInput,
  ModelsInventoryItemUpdateInput,
  ModelsStockMovementInput,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * List inventory items with filters
 */
export type inventoryOperationsListInventoryItemsResponse200 = {
  data: InventoryOperationsListInventoryItems200
  status: 200
}

export type inventoryOperationsListInventoryItemsResponseComposite =
  inventoryOperationsListInventoryItemsResponse200

export type inventoryOperationsListInventoryItemsResponse =
  inventoryOperationsListInventoryItemsResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsListInventoryItemsUrl = (
  params: InventoryOperationsListInventoryItemsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/inventory?${stringifiedParams}`
    : `/inventory`
}

export const inventoryOperationsListInventoryItems = async (
  params: InventoryOperationsListInventoryItemsParams,
  options?: RequestInit
): Promise<inventoryOperationsListInventoryItemsResponse> => {
  return customInstance<inventoryOperationsListInventoryItemsResponse>(
    getInventoryOperationsListInventoryItemsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getInventoryOperationsListInventoryItemsQueryKey = (
  params: InventoryOperationsListInventoryItemsParams
) => {
  return [`/inventory`, ...(params ? [params] : [])] as const
}

export const getInventoryOperationsListInventoryItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
  TError = unknown,
>(
  params: InventoryOperationsListInventoryItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getInventoryOperationsListInventoryItemsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>
  > = ({ signal }) =>
    inventoryOperationsListInventoryItems(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InventoryOperationsListInventoryItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>
>
export type InventoryOperationsListInventoryItemsQueryError = unknown

export function useInventoryOperationsListInventoryItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
  TError = unknown,
>(
  params: InventoryOperationsListInventoryItemsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsListInventoryItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
  TError = unknown,
>(
  params: InventoryOperationsListInventoryItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsListInventoryItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
  TError = unknown,
>(
  params: InventoryOperationsListInventoryItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useInventoryOperationsListInventoryItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
  TError = unknown,
>(
  params: InventoryOperationsListInventoryItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsListInventoryItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getInventoryOperationsListInventoryItemsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Create new inventory item
 */
export type inventoryOperationsCreateInventoryItemResponse200 = {
  data: InventoryOperationsCreateInventoryItem200
  status: 200
}

export type inventoryOperationsCreateInventoryItemResponseComposite =
  inventoryOperationsCreateInventoryItemResponse200

export type inventoryOperationsCreateInventoryItemResponse =
  inventoryOperationsCreateInventoryItemResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsCreateInventoryItemUrl = () => {
  return `/inventory`
}

export const inventoryOperationsCreateInventoryItem = async (
  modelsInventoryItemCreateInput: ModelsInventoryItemCreateInput,
  options?: RequestInit
): Promise<inventoryOperationsCreateInventoryItemResponse> => {
  return customInstance<inventoryOperationsCreateInventoryItemResponse>(
    getInventoryOperationsCreateInventoryItemUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsInventoryItemCreateInput),
    }
  )
}

export const getInventoryOperationsCreateInventoryItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inventoryOperationsCreateInventoryItem>>,
    TError,
    { data: ModelsInventoryItemCreateInput },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof inventoryOperationsCreateInventoryItem>>,
  TError,
  { data: ModelsInventoryItemCreateInput },
  TContext
> => {
  const mutationKey = ['inventoryOperationsCreateInventoryItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inventoryOperationsCreateInventoryItem>>,
    { data: ModelsInventoryItemCreateInput }
  > = (props) => {
    const { data } = props ?? {}

    return inventoryOperationsCreateInventoryItem(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InventoryOperationsCreateInventoryItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsCreateInventoryItem>>
>
export type InventoryOperationsCreateInventoryItemMutationBody =
  ModelsInventoryItemCreateInput
export type InventoryOperationsCreateInventoryItemMutationError = unknown

export const useInventoryOperationsCreateInventoryItem = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inventoryOperationsCreateInventoryItem>>,
      TError,
      { data: ModelsInventoryItemCreateInput },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof inventoryOperationsCreateInventoryItem>>,
  TError,
  { data: ModelsInventoryItemCreateInput },
  TContext
> => {
  const mutationOptions =
    getInventoryOperationsCreateInventoryItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Get expiring items
 */
export type inventoryOperationsGetExpiringItemsResponse200 = {
  data: InventoryOperationsGetExpiringItems200
  status: 200
}

export type inventoryOperationsGetExpiringItemsResponseComposite =
  inventoryOperationsGetExpiringItemsResponse200

export type inventoryOperationsGetExpiringItemsResponse =
  inventoryOperationsGetExpiringItemsResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsGetExpiringItemsUrl = (
  params: InventoryOperationsGetExpiringItemsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/inventory/expiring?${stringifiedParams}`
    : `/inventory/expiring`
}

export const inventoryOperationsGetExpiringItems = async (
  params: InventoryOperationsGetExpiringItemsParams,
  options?: RequestInit
): Promise<inventoryOperationsGetExpiringItemsResponse> => {
  return customInstance<inventoryOperationsGetExpiringItemsResponse>(
    getInventoryOperationsGetExpiringItemsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getInventoryOperationsGetExpiringItemsQueryKey = (
  params: InventoryOperationsGetExpiringItemsParams
) => {
  return [`/inventory/expiring`, ...(params ? [params] : [])] as const
}

export const getInventoryOperationsGetExpiringItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetExpiringItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getInventoryOperationsGetExpiringItemsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>
  > = ({ signal }) =>
    inventoryOperationsGetExpiringItems(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InventoryOperationsGetExpiringItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>
>
export type InventoryOperationsGetExpiringItemsQueryError = unknown

export function useInventoryOperationsGetExpiringItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetExpiringItemsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetExpiringItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetExpiringItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetExpiringItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetExpiringItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useInventoryOperationsGetExpiringItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetExpiringItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetExpiringItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getInventoryOperationsGetExpiringItemsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get low stock items
 */
export type inventoryOperationsGetLowStockItemsResponse200 = {
  data: InventoryOperationsGetLowStockItems200
  status: 200
}

export type inventoryOperationsGetLowStockItemsResponseComposite =
  inventoryOperationsGetLowStockItemsResponse200

export type inventoryOperationsGetLowStockItemsResponse =
  inventoryOperationsGetLowStockItemsResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsGetLowStockItemsUrl = (
  params: InventoryOperationsGetLowStockItemsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/inventory/low-stock?${stringifiedParams}`
    : `/inventory/low-stock`
}

export const inventoryOperationsGetLowStockItems = async (
  params: InventoryOperationsGetLowStockItemsParams,
  options?: RequestInit
): Promise<inventoryOperationsGetLowStockItemsResponse> => {
  return customInstance<inventoryOperationsGetLowStockItemsResponse>(
    getInventoryOperationsGetLowStockItemsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getInventoryOperationsGetLowStockItemsQueryKey = (
  params: InventoryOperationsGetLowStockItemsParams
) => {
  return [`/inventory/low-stock`, ...(params ? [params] : [])] as const
}

export const getInventoryOperationsGetLowStockItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetLowStockItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getInventoryOperationsGetLowStockItemsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>
  > = ({ signal }) =>
    inventoryOperationsGetLowStockItems(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InventoryOperationsGetLowStockItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>
>
export type InventoryOperationsGetLowStockItemsQueryError = unknown

export function useInventoryOperationsGetLowStockItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetLowStockItemsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetLowStockItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetLowStockItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetLowStockItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetLowStockItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useInventoryOperationsGetLowStockItems<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
  TError = unknown,
>(
  params: InventoryOperationsGetLowStockItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetLowStockItems>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getInventoryOperationsGetLowStockItemsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Record stock movement
 */
export type inventoryOperationsRecordStockMovementResponse200 = {
  data: InventoryOperationsRecordStockMovement200
  status: 200
}

export type inventoryOperationsRecordStockMovementResponseComposite =
  inventoryOperationsRecordStockMovementResponse200

export type inventoryOperationsRecordStockMovementResponse =
  inventoryOperationsRecordStockMovementResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsRecordStockMovementUrl = () => {
  return `/inventory/movement`
}

export const inventoryOperationsRecordStockMovement = async (
  modelsStockMovementInput: ModelsStockMovementInput,
  options?: RequestInit
): Promise<inventoryOperationsRecordStockMovementResponse> => {
  return customInstance<inventoryOperationsRecordStockMovementResponse>(
    getInventoryOperationsRecordStockMovementUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsStockMovementInput),
    }
  )
}

export const getInventoryOperationsRecordStockMovementMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inventoryOperationsRecordStockMovement>>,
    TError,
    { data: ModelsStockMovementInput },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof inventoryOperationsRecordStockMovement>>,
  TError,
  { data: ModelsStockMovementInput },
  TContext
> => {
  const mutationKey = ['inventoryOperationsRecordStockMovement']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inventoryOperationsRecordStockMovement>>,
    { data: ModelsStockMovementInput }
  > = (props) => {
    const { data } = props ?? {}

    return inventoryOperationsRecordStockMovement(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InventoryOperationsRecordStockMovementMutationResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsRecordStockMovement>>
>
export type InventoryOperationsRecordStockMovementMutationBody =
  ModelsStockMovementInput
export type InventoryOperationsRecordStockMovementMutationError = unknown

export const useInventoryOperationsRecordStockMovement = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inventoryOperationsRecordStockMovement>>,
      TError,
      { data: ModelsStockMovementInput },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof inventoryOperationsRecordStockMovement>>,
  TError,
  { data: ModelsStockMovementInput },
  TContext
> => {
  const mutationOptions =
    getInventoryOperationsRecordStockMovementMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Perform stock count
 */
export type inventoryOperationsPerformStockCountResponse200 = {
  data: InventoryOperationsPerformStockCount200
  status: 200
}

export type inventoryOperationsPerformStockCountResponseComposite =
  inventoryOperationsPerformStockCountResponse200

export type inventoryOperationsPerformStockCountResponse =
  inventoryOperationsPerformStockCountResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsPerformStockCountUrl = () => {
  return `/inventory/stock-count`
}

export const inventoryOperationsPerformStockCount = async (
  inventoryOperationsPerformStockCountBody: InventoryOperationsPerformStockCountBody,
  options?: RequestInit
): Promise<inventoryOperationsPerformStockCountResponse> => {
  return customInstance<inventoryOperationsPerformStockCountResponse>(
    getInventoryOperationsPerformStockCountUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(inventoryOperationsPerformStockCountBody),
    }
  )
}

export const getInventoryOperationsPerformStockCountMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inventoryOperationsPerformStockCount>>,
    TError,
    { data: InventoryOperationsPerformStockCountBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof inventoryOperationsPerformStockCount>>,
  TError,
  { data: InventoryOperationsPerformStockCountBody },
  TContext
> => {
  const mutationKey = ['inventoryOperationsPerformStockCount']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inventoryOperationsPerformStockCount>>,
    { data: InventoryOperationsPerformStockCountBody }
  > = (props) => {
    const { data } = props ?? {}

    return inventoryOperationsPerformStockCount(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InventoryOperationsPerformStockCountMutationResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsPerformStockCount>>
>
export type InventoryOperationsPerformStockCountMutationBody =
  InventoryOperationsPerformStockCountBody
export type InventoryOperationsPerformStockCountMutationError = unknown

export const useInventoryOperationsPerformStockCount = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inventoryOperationsPerformStockCount>>,
      TError,
      { data: InventoryOperationsPerformStockCountBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof inventoryOperationsPerformStockCount>>,
  TError,
  { data: InventoryOperationsPerformStockCountBody },
  TContext
> => {
  const mutationOptions =
    getInventoryOperationsPerformStockCountMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Get inventory value report
 */
export type inventoryOperationsGetInventoryValueReportResponse200 = {
  data: InventoryOperationsGetInventoryValueReport200
  status: 200
}

export type inventoryOperationsGetInventoryValueReportResponseComposite =
  inventoryOperationsGetInventoryValueReportResponse200

export type inventoryOperationsGetInventoryValueReportResponse =
  inventoryOperationsGetInventoryValueReportResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsGetInventoryValueReportUrl = (
  params: InventoryOperationsGetInventoryValueReportParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/inventory/value-report?${stringifiedParams}`
    : `/inventory/value-report`
}

export const inventoryOperationsGetInventoryValueReport = async (
  params: InventoryOperationsGetInventoryValueReportParams,
  options?: RequestInit
): Promise<inventoryOperationsGetInventoryValueReportResponse> => {
  return customInstance<inventoryOperationsGetInventoryValueReportResponse>(
    getInventoryOperationsGetInventoryValueReportUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getInventoryOperationsGetInventoryValueReportQueryKey = (
  params: InventoryOperationsGetInventoryValueReportParams
) => {
  return [`/inventory/value-report`, ...(params ? [params] : [])] as const
}

export const getInventoryOperationsGetInventoryValueReportQueryOptions = <
  TData = Awaited<
    ReturnType<typeof inventoryOperationsGetInventoryValueReport>
  >,
  TError = unknown,
>(
  params: InventoryOperationsGetInventoryValueReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getInventoryOperationsGetInventoryValueReportQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>
  > = ({ signal }) =>
    inventoryOperationsGetInventoryValueReport(params, {
      signal,
      ...requestOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InventoryOperationsGetInventoryValueReportQueryResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>
>
export type InventoryOperationsGetInventoryValueReportQueryError = unknown

export function useInventoryOperationsGetInventoryValueReport<
  TData = Awaited<
    ReturnType<typeof inventoryOperationsGetInventoryValueReport>
  >,
  TError = unknown,
>(
  params: InventoryOperationsGetInventoryValueReportParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof inventoryOperationsGetInventoryValueReport>
          >,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetInventoryValueReport<
  TData = Awaited<
    ReturnType<typeof inventoryOperationsGetInventoryValueReport>
  >,
  TError = unknown,
>(
  params: InventoryOperationsGetInventoryValueReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof inventoryOperationsGetInventoryValueReport>
          >,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetInventoryValueReport<
  TData = Awaited<
    ReturnType<typeof inventoryOperationsGetInventoryValueReport>
  >,
  TError = unknown,
>(
  params: InventoryOperationsGetInventoryValueReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useInventoryOperationsGetInventoryValueReport<
  TData = Awaited<
    ReturnType<typeof inventoryOperationsGetInventoryValueReport>
  >,
  TError = unknown,
>(
  params: InventoryOperationsGetInventoryValueReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryValueReport>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getInventoryOperationsGetInventoryValueReportQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get inventory item by ID
 */
export type inventoryOperationsGetInventoryItemResponse200 = {
  data: InventoryOperationsGetInventoryItem200
  status: 200
}

export type inventoryOperationsGetInventoryItemResponseComposite =
  inventoryOperationsGetInventoryItemResponse200

export type inventoryOperationsGetInventoryItemResponse =
  inventoryOperationsGetInventoryItemResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsGetInventoryItemUrl = (
  id: ModelsInventoryId
) => {
  return `/inventory/${id}`
}

export const inventoryOperationsGetInventoryItem = async (
  id: ModelsInventoryId,
  options?: RequestInit
): Promise<inventoryOperationsGetInventoryItemResponse> => {
  return customInstance<inventoryOperationsGetInventoryItemResponse>(
    getInventoryOperationsGetInventoryItemUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getInventoryOperationsGetInventoryItemQueryKey = (
  id: ModelsInventoryId
) => {
  return [`/inventory/${id}`] as const
}

export const getInventoryOperationsGetInventoryItemQueryOptions = <
  TData = Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getInventoryOperationsGetInventoryItemQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>
  > = ({ signal }) =>
    inventoryOperationsGetInventoryItem(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InventoryOperationsGetInventoryItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>
>
export type InventoryOperationsGetInventoryItemQueryError = unknown

export function useInventoryOperationsGetInventoryItem<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetInventoryItem<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetInventoryItem<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useInventoryOperationsGetInventoryItem<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetInventoryItem>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getInventoryOperationsGetInventoryItemQueryOptions(
    id,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update inventory item
 */
export type inventoryOperationsUpdateInventoryItemResponse200 = {
  data: InventoryOperationsUpdateInventoryItem200
  status: 200
}

export type inventoryOperationsUpdateInventoryItemResponseComposite =
  inventoryOperationsUpdateInventoryItemResponse200

export type inventoryOperationsUpdateInventoryItemResponse =
  inventoryOperationsUpdateInventoryItemResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsUpdateInventoryItemUrl = (
  id: ModelsInventoryId
) => {
  return `/inventory/${id}`
}

export const inventoryOperationsUpdateInventoryItem = async (
  id: ModelsInventoryId,
  modelsInventoryItemUpdateInput: ModelsInventoryItemUpdateInput,
  options?: RequestInit
): Promise<inventoryOperationsUpdateInventoryItemResponse> => {
  return customInstance<inventoryOperationsUpdateInventoryItemResponse>(
    getInventoryOperationsUpdateInventoryItemUrl(id),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsInventoryItemUpdateInput),
    }
  )
}

export const getInventoryOperationsUpdateInventoryItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inventoryOperationsUpdateInventoryItem>>,
    TError,
    { id: ModelsInventoryId; data: ModelsInventoryItemUpdateInput },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof inventoryOperationsUpdateInventoryItem>>,
  TError,
  { id: ModelsInventoryId; data: ModelsInventoryItemUpdateInput },
  TContext
> => {
  const mutationKey = ['inventoryOperationsUpdateInventoryItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inventoryOperationsUpdateInventoryItem>>,
    { id: ModelsInventoryId; data: ModelsInventoryItemUpdateInput }
  > = (props) => {
    const { id, data } = props ?? {}

    return inventoryOperationsUpdateInventoryItem(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InventoryOperationsUpdateInventoryItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsUpdateInventoryItem>>
>
export type InventoryOperationsUpdateInventoryItemMutationBody =
  ModelsInventoryItemUpdateInput
export type InventoryOperationsUpdateInventoryItemMutationError = unknown

export const useInventoryOperationsUpdateInventoryItem = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inventoryOperationsUpdateInventoryItem>>,
      TError,
      { id: ModelsInventoryId; data: ModelsInventoryItemUpdateInput },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof inventoryOperationsUpdateInventoryItem>>,
  TError,
  { id: ModelsInventoryId; data: ModelsInventoryItemUpdateInput },
  TContext
> => {
  const mutationOptions =
    getInventoryOperationsUpdateInventoryItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Delete inventory item
 */
export type inventoryOperationsDeleteInventoryItemResponse200 = {
  data: InventoryOperationsDeleteInventoryItem200
  status: 200
}

export type inventoryOperationsDeleteInventoryItemResponseComposite =
  inventoryOperationsDeleteInventoryItemResponse200

export type inventoryOperationsDeleteInventoryItemResponse =
  inventoryOperationsDeleteInventoryItemResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsDeleteInventoryItemUrl = (
  id: ModelsInventoryId
) => {
  return `/inventory/${id}`
}

export const inventoryOperationsDeleteInventoryItem = async (
  id: ModelsInventoryId,
  options?: RequestInit
): Promise<inventoryOperationsDeleteInventoryItemResponse> => {
  return customInstance<inventoryOperationsDeleteInventoryItemResponse>(
    getInventoryOperationsDeleteInventoryItemUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getInventoryOperationsDeleteInventoryItemMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof inventoryOperationsDeleteInventoryItem>>,
    TError,
    { id: ModelsInventoryId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof inventoryOperationsDeleteInventoryItem>>,
  TError,
  { id: ModelsInventoryId },
  TContext
> => {
  const mutationKey = ['inventoryOperationsDeleteInventoryItem']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof inventoryOperationsDeleteInventoryItem>>,
    { id: ModelsInventoryId }
  > = (props) => {
    const { id } = props ?? {}

    return inventoryOperationsDeleteInventoryItem(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type InventoryOperationsDeleteInventoryItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsDeleteInventoryItem>>
>

export type InventoryOperationsDeleteInventoryItemMutationError = unknown

export const useInventoryOperationsDeleteInventoryItem = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof inventoryOperationsDeleteInventoryItem>>,
      TError,
      { id: ModelsInventoryId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof inventoryOperationsDeleteInventoryItem>>,
  TError,
  { id: ModelsInventoryId },
  TContext
> => {
  const mutationOptions =
    getInventoryOperationsDeleteInventoryItemMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Get stock movement history
 */
export type inventoryOperationsGetStockMovementsResponse200 = {
  data: InventoryOperationsGetStockMovements200
  status: 200
}

export type inventoryOperationsGetStockMovementsResponseComposite =
  inventoryOperationsGetStockMovementsResponse200

export type inventoryOperationsGetStockMovementsResponse =
  inventoryOperationsGetStockMovementsResponseComposite & {
    headers: Headers
  }

export const getInventoryOperationsGetStockMovementsUrl = (
  id: ModelsInventoryId,
  params?: InventoryOperationsGetStockMovementsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/inventory/${id}/movements?${stringifiedParams}`
    : `/inventory/${id}/movements`
}

export const inventoryOperationsGetStockMovements = async (
  id: ModelsInventoryId,
  params?: InventoryOperationsGetStockMovementsParams,
  options?: RequestInit
): Promise<inventoryOperationsGetStockMovementsResponse> => {
  return customInstance<inventoryOperationsGetStockMovementsResponse>(
    getInventoryOperationsGetStockMovementsUrl(id, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getInventoryOperationsGetStockMovementsQueryKey = (
  id: ModelsInventoryId,
  params?: InventoryOperationsGetStockMovementsParams
) => {
  return [`/inventory/${id}/movements`, ...(params ? [params] : [])] as const
}

export const getInventoryOperationsGetStockMovementsQueryOptions = <
  TData = Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  params?: InventoryOperationsGetStockMovementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getInventoryOperationsGetStockMovementsQueryKey(id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>
  > = ({ signal }) =>
    inventoryOperationsGetStockMovements(id, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InventoryOperationsGetStockMovementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>
>
export type InventoryOperationsGetStockMovementsQueryError = unknown

export function useInventoryOperationsGetStockMovements<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  params: undefined | InventoryOperationsGetStockMovementsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetStockMovements<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  params?: InventoryOperationsGetStockMovementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
          TError,
          Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useInventoryOperationsGetStockMovements<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  params?: InventoryOperationsGetStockMovementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useInventoryOperationsGetStockMovements<
  TData = Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
  TError = unknown,
>(
  id: ModelsInventoryId,
  params?: InventoryOperationsGetStockMovementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof inventoryOperationsGetStockMovements>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getInventoryOperationsGetStockMovementsQueryOptions(
    id,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
