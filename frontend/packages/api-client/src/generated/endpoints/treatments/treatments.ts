/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Beauty Salon API
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ModelsAttachmentId,
  ModelsCustomerId,
  ModelsStaffId,
  ModelsTreatmentRecordCreateRequest,
  ModelsTreatmentRecordId,
  ModelsTreatmentRecordUpdateRequest,
  TreatmentOperationsAddTreatmentPhotos200,
  TreatmentOperationsCreateTreatment200,
  TreatmentOperationsDeleteTreatment200,
  TreatmentOperationsGetCustomerTreatmentHistory200,
  TreatmentOperationsGetCustomerTreatmentHistoryParams,
  TreatmentOperationsGetStaffTreatments200,
  TreatmentOperationsGetStaffTreatmentsParams,
  TreatmentOperationsGetTreatment200,
  TreatmentOperationsGetTreatmentStatistics200,
  TreatmentOperationsGetTreatmentStatisticsParams,
  TreatmentOperationsListTreatments200,
  TreatmentOperationsListTreatmentsParams,
  TreatmentOperationsUpdateTreatment200,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * List treatment records with filters
 */
export type treatmentOperationsListTreatmentsResponse200 = {
  data: TreatmentOperationsListTreatments200
  status: 200
}

export type treatmentOperationsListTreatmentsResponseComposite =
  treatmentOperationsListTreatmentsResponse200

export type treatmentOperationsListTreatmentsResponse =
  treatmentOperationsListTreatmentsResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsListTreatmentsUrl = (
  params?: TreatmentOperationsListTreatmentsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/treatments?${stringifiedParams}`
    : `/treatments`
}

export const treatmentOperationsListTreatments = async (
  params?: TreatmentOperationsListTreatmentsParams,
  options?: RequestInit
): Promise<treatmentOperationsListTreatmentsResponse> => {
  return customInstance<treatmentOperationsListTreatmentsResponse>(
    getTreatmentOperationsListTreatmentsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getTreatmentOperationsListTreatmentsQueryKey = (
  params?: TreatmentOperationsListTreatmentsParams
) => {
  return [`/treatments`, ...(params ? [params] : [])] as const
}

export const getTreatmentOperationsListTreatmentsQueryOptions = <
  TData = Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
  TError = unknown,
>(
  params?: TreatmentOperationsListTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getTreatmentOperationsListTreatmentsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof treatmentOperationsListTreatments>>
  > = ({ signal }) =>
    treatmentOperationsListTreatments(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TreatmentOperationsListTreatmentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsListTreatments>>
>
export type TreatmentOperationsListTreatmentsQueryError = unknown

export function useTreatmentOperationsListTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
  TError = unknown,
>(
  params: undefined | TreatmentOperationsListTreatmentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsListTreatments>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsListTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
  TError = unknown,
>(
  params?: TreatmentOperationsListTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsListTreatments>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsListTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
  TError = unknown,
>(
  params?: TreatmentOperationsListTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useTreatmentOperationsListTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
  TError = unknown,
>(
  params?: TreatmentOperationsListTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsListTreatments>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTreatmentOperationsListTreatmentsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Create new treatment record
 */
export type treatmentOperationsCreateTreatmentResponse200 = {
  data: TreatmentOperationsCreateTreatment200
  status: 200
}

export type treatmentOperationsCreateTreatmentResponseComposite =
  treatmentOperationsCreateTreatmentResponse200

export type treatmentOperationsCreateTreatmentResponse =
  treatmentOperationsCreateTreatmentResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsCreateTreatmentUrl = () => {
  return `/treatments`
}

export const treatmentOperationsCreateTreatment = async (
  modelsTreatmentRecordCreateRequest: ModelsTreatmentRecordCreateRequest,
  options?: RequestInit
): Promise<treatmentOperationsCreateTreatmentResponse> => {
  return customInstance<treatmentOperationsCreateTreatmentResponse>(
    getTreatmentOperationsCreateTreatmentUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsTreatmentRecordCreateRequest),
    }
  )
}

export const getTreatmentOperationsCreateTreatmentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof treatmentOperationsCreateTreatment>>,
    TError,
    { data: ModelsTreatmentRecordCreateRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof treatmentOperationsCreateTreatment>>,
  TError,
  { data: ModelsTreatmentRecordCreateRequest },
  TContext
> => {
  const mutationKey = ['treatmentOperationsCreateTreatment']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof treatmentOperationsCreateTreatment>>,
    { data: ModelsTreatmentRecordCreateRequest }
  > = (props) => {
    const { data } = props ?? {}

    return treatmentOperationsCreateTreatment(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TreatmentOperationsCreateTreatmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsCreateTreatment>>
>
export type TreatmentOperationsCreateTreatmentMutationBody =
  ModelsTreatmentRecordCreateRequest
export type TreatmentOperationsCreateTreatmentMutationError = unknown

export const useTreatmentOperationsCreateTreatment = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof treatmentOperationsCreateTreatment>>,
      TError,
      { data: ModelsTreatmentRecordCreateRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof treatmentOperationsCreateTreatment>>,
  TError,
  { data: ModelsTreatmentRecordCreateRequest },
  TContext
> => {
  const mutationOptions =
    getTreatmentOperationsCreateTreatmentMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Get treatment history for a customer
 */
export type treatmentOperationsGetCustomerTreatmentHistoryResponse200 = {
  data: TreatmentOperationsGetCustomerTreatmentHistory200
  status: 200
}

export type treatmentOperationsGetCustomerTreatmentHistoryResponseComposite =
  treatmentOperationsGetCustomerTreatmentHistoryResponse200

export type treatmentOperationsGetCustomerTreatmentHistoryResponse =
  treatmentOperationsGetCustomerTreatmentHistoryResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsGetCustomerTreatmentHistoryUrl = (
  customerId: ModelsCustomerId,
  params?: TreatmentOperationsGetCustomerTreatmentHistoryParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/treatments/customer/${customerId}/history?${stringifiedParams}`
    : `/treatments/customer/${customerId}/history`
}

export const treatmentOperationsGetCustomerTreatmentHistory = async (
  customerId: ModelsCustomerId,
  params?: TreatmentOperationsGetCustomerTreatmentHistoryParams,
  options?: RequestInit
): Promise<treatmentOperationsGetCustomerTreatmentHistoryResponse> => {
  return customInstance<treatmentOperationsGetCustomerTreatmentHistoryResponse>(
    getTreatmentOperationsGetCustomerTreatmentHistoryUrl(customerId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getTreatmentOperationsGetCustomerTreatmentHistoryQueryKey = (
  customerId: ModelsCustomerId,
  params?: TreatmentOperationsGetCustomerTreatmentHistoryParams
) => {
  return [
    `/treatments/customer/${customerId}/history`,
    ...(params ? [params] : []),
  ] as const
}

export const getTreatmentOperationsGetCustomerTreatmentHistoryQueryOptions = <
  TData = Awaited<
    ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
  >,
  TError = unknown,
>(
  customerId: ModelsCustomerId,
  params?: TreatmentOperationsGetCustomerTreatmentHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getTreatmentOperationsGetCustomerTreatmentHistoryQueryKey(
      customerId,
      params
    )

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>>
  > = ({ signal }) =>
    treatmentOperationsGetCustomerTreatmentHistory(customerId, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!customerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TreatmentOperationsGetCustomerTreatmentHistoryQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>>
  >
export type TreatmentOperationsGetCustomerTreatmentHistoryQueryError = unknown

export function useTreatmentOperationsGetCustomerTreatmentHistory<
  TData = Awaited<
    ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
  >,
  TError = unknown,
>(
  customerId: ModelsCustomerId,
  params: undefined | TreatmentOperationsGetCustomerTreatmentHistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
          >,
          TError,
          Awaited<
            ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
          >
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetCustomerTreatmentHistory<
  TData = Awaited<
    ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
  >,
  TError = unknown,
>(
  customerId: ModelsCustomerId,
  params?: TreatmentOperationsGetCustomerTreatmentHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
          >,
          TError,
          Awaited<
            ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
          >
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetCustomerTreatmentHistory<
  TData = Awaited<
    ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
  >,
  TError = unknown,
>(
  customerId: ModelsCustomerId,
  params?: TreatmentOperationsGetCustomerTreatmentHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useTreatmentOperationsGetCustomerTreatmentHistory<
  TData = Awaited<
    ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
  >,
  TError = unknown,
>(
  customerId: ModelsCustomerId,
  params?: TreatmentOperationsGetCustomerTreatmentHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof treatmentOperationsGetCustomerTreatmentHistory>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getTreatmentOperationsGetCustomerTreatmentHistoryQueryOptions(
      customerId,
      params,
      options
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get treatments by staff member
 */
export type treatmentOperationsGetStaffTreatmentsResponse200 = {
  data: TreatmentOperationsGetStaffTreatments200
  status: 200
}

export type treatmentOperationsGetStaffTreatmentsResponseComposite =
  treatmentOperationsGetStaffTreatmentsResponse200

export type treatmentOperationsGetStaffTreatmentsResponse =
  treatmentOperationsGetStaffTreatmentsResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsGetStaffTreatmentsUrl = (
  staffId: ModelsStaffId,
  params?: TreatmentOperationsGetStaffTreatmentsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/treatments/staff/${staffId}?${stringifiedParams}`
    : `/treatments/staff/${staffId}`
}

export const treatmentOperationsGetStaffTreatments = async (
  staffId: ModelsStaffId,
  params?: TreatmentOperationsGetStaffTreatmentsParams,
  options?: RequestInit
): Promise<treatmentOperationsGetStaffTreatmentsResponse> => {
  return customInstance<treatmentOperationsGetStaffTreatmentsResponse>(
    getTreatmentOperationsGetStaffTreatmentsUrl(staffId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getTreatmentOperationsGetStaffTreatmentsQueryKey = (
  staffId: ModelsStaffId,
  params?: TreatmentOperationsGetStaffTreatmentsParams
) => {
  return [`/treatments/staff/${staffId}`, ...(params ? [params] : [])] as const
}

export const getTreatmentOperationsGetStaffTreatmentsQueryOptions = <
  TData = Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: TreatmentOperationsGetStaffTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getTreatmentOperationsGetStaffTreatmentsQueryKey(staffId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>
  > = ({ signal }) =>
    treatmentOperationsGetStaffTreatments(staffId, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!staffId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TreatmentOperationsGetStaffTreatmentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>
>
export type TreatmentOperationsGetStaffTreatmentsQueryError = unknown

export function useTreatmentOperationsGetStaffTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params: undefined | TreatmentOperationsGetStaffTreatmentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetStaffTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: TreatmentOperationsGetStaffTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetStaffTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: TreatmentOperationsGetStaffTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useTreatmentOperationsGetStaffTreatments<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
  TError = unknown,
>(
  staffId: ModelsStaffId,
  params?: TreatmentOperationsGetStaffTreatmentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetStaffTreatments>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTreatmentOperationsGetStaffTreatmentsQueryOptions(
    staffId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get treatment statistics
 */
export type treatmentOperationsGetTreatmentStatisticsResponse200 = {
  data: TreatmentOperationsGetTreatmentStatistics200
  status: 200
}

export type treatmentOperationsGetTreatmentStatisticsResponseComposite =
  treatmentOperationsGetTreatmentStatisticsResponse200

export type treatmentOperationsGetTreatmentStatisticsResponse =
  treatmentOperationsGetTreatmentStatisticsResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsGetTreatmentStatisticsUrl = (
  params: TreatmentOperationsGetTreatmentStatisticsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/treatments/statistics?${stringifiedParams}`
    : `/treatments/statistics`
}

export const treatmentOperationsGetTreatmentStatistics = async (
  params: TreatmentOperationsGetTreatmentStatisticsParams,
  options?: RequestInit
): Promise<treatmentOperationsGetTreatmentStatisticsResponse> => {
  return customInstance<treatmentOperationsGetTreatmentStatisticsResponse>(
    getTreatmentOperationsGetTreatmentStatisticsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getTreatmentOperationsGetTreatmentStatisticsQueryKey = (
  params: TreatmentOperationsGetTreatmentStatisticsParams
) => {
  return [`/treatments/statistics`, ...(params ? [params] : [])] as const
}

export const getTreatmentOperationsGetTreatmentStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
  TError = unknown,
>(
  params: TreatmentOperationsGetTreatmentStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getTreatmentOperationsGetTreatmentStatisticsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>
  > = ({ signal }) =>
    treatmentOperationsGetTreatmentStatistics(params, {
      signal,
      ...requestOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TreatmentOperationsGetTreatmentStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>
>
export type TreatmentOperationsGetTreatmentStatisticsQueryError = unknown

export function useTreatmentOperationsGetTreatmentStatistics<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
  TError = unknown,
>(
  params: TreatmentOperationsGetTreatmentStatisticsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetTreatmentStatistics<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
  TError = unknown,
>(
  params: TreatmentOperationsGetTreatmentStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetTreatmentStatistics<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
  TError = unknown,
>(
  params: TreatmentOperationsGetTreatmentStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useTreatmentOperationsGetTreatmentStatistics<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
  TError = unknown,
>(
  params: TreatmentOperationsGetTreatmentStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatmentStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTreatmentOperationsGetTreatmentStatisticsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get treatment record by ID
 */
export type treatmentOperationsGetTreatmentResponse200 = {
  data: TreatmentOperationsGetTreatment200
  status: 200
}

export type treatmentOperationsGetTreatmentResponseComposite =
  treatmentOperationsGetTreatmentResponse200

export type treatmentOperationsGetTreatmentResponse =
  treatmentOperationsGetTreatmentResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsGetTreatmentUrl = (
  id: ModelsTreatmentRecordId
) => {
  return `/treatments/${id}`
}

export const treatmentOperationsGetTreatment = async (
  id: ModelsTreatmentRecordId,
  options?: RequestInit
): Promise<treatmentOperationsGetTreatmentResponse> => {
  return customInstance<treatmentOperationsGetTreatmentResponse>(
    getTreatmentOperationsGetTreatmentUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getTreatmentOperationsGetTreatmentQueryKey = (
  id: ModelsTreatmentRecordId
) => {
  return [`/treatments/${id}`] as const
}

export const getTreatmentOperationsGetTreatmentQueryOptions = <
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
  TError = unknown,
>(
  id: ModelsTreatmentRecordId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getTreatmentOperationsGetTreatmentQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>
  > = ({ signal }) =>
    treatmentOperationsGetTreatment(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TreatmentOperationsGetTreatmentQueryResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>
>
export type TreatmentOperationsGetTreatmentQueryError = unknown

export function useTreatmentOperationsGetTreatment<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
  TError = unknown,
>(
  id: ModelsTreatmentRecordId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetTreatment<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
  TError = unknown,
>(
  id: ModelsTreatmentRecordId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
          TError,
          Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTreatmentOperationsGetTreatment<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
  TError = unknown,
>(
  id: ModelsTreatmentRecordId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useTreatmentOperationsGetTreatment<
  TData = Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
  TError = unknown,
>(
  id: ModelsTreatmentRecordId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof treatmentOperationsGetTreatment>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTreatmentOperationsGetTreatmentQueryOptions(
    id,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update treatment record
 */
export type treatmentOperationsUpdateTreatmentResponse200 = {
  data: TreatmentOperationsUpdateTreatment200
  status: 200
}

export type treatmentOperationsUpdateTreatmentResponseComposite =
  treatmentOperationsUpdateTreatmentResponse200

export type treatmentOperationsUpdateTreatmentResponse =
  treatmentOperationsUpdateTreatmentResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsUpdateTreatmentUrl = (
  id: ModelsTreatmentRecordId
) => {
  return `/treatments/${id}`
}

export const treatmentOperationsUpdateTreatment = async (
  id: ModelsTreatmentRecordId,
  modelsTreatmentRecordUpdateRequest: ModelsTreatmentRecordUpdateRequest,
  options?: RequestInit
): Promise<treatmentOperationsUpdateTreatmentResponse> => {
  return customInstance<treatmentOperationsUpdateTreatmentResponse>(
    getTreatmentOperationsUpdateTreatmentUrl(id),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsTreatmentRecordUpdateRequest),
    }
  )
}

export const getTreatmentOperationsUpdateTreatmentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof treatmentOperationsUpdateTreatment>>,
    TError,
    { id: ModelsTreatmentRecordId; data: ModelsTreatmentRecordUpdateRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof treatmentOperationsUpdateTreatment>>,
  TError,
  { id: ModelsTreatmentRecordId; data: ModelsTreatmentRecordUpdateRequest },
  TContext
> => {
  const mutationKey = ['treatmentOperationsUpdateTreatment']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof treatmentOperationsUpdateTreatment>>,
    { id: ModelsTreatmentRecordId; data: ModelsTreatmentRecordUpdateRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return treatmentOperationsUpdateTreatment(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TreatmentOperationsUpdateTreatmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsUpdateTreatment>>
>
export type TreatmentOperationsUpdateTreatmentMutationBody =
  ModelsTreatmentRecordUpdateRequest
export type TreatmentOperationsUpdateTreatmentMutationError = unknown

export const useTreatmentOperationsUpdateTreatment = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof treatmentOperationsUpdateTreatment>>,
      TError,
      { id: ModelsTreatmentRecordId; data: ModelsTreatmentRecordUpdateRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof treatmentOperationsUpdateTreatment>>,
  TError,
  { id: ModelsTreatmentRecordId; data: ModelsTreatmentRecordUpdateRequest },
  TContext
> => {
  const mutationOptions =
    getTreatmentOperationsUpdateTreatmentMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Delete treatment record
 */
export type treatmentOperationsDeleteTreatmentResponse200 = {
  data: TreatmentOperationsDeleteTreatment200
  status: 200
}

export type treatmentOperationsDeleteTreatmentResponseComposite =
  treatmentOperationsDeleteTreatmentResponse200

export type treatmentOperationsDeleteTreatmentResponse =
  treatmentOperationsDeleteTreatmentResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsDeleteTreatmentUrl = (
  id: ModelsTreatmentRecordId
) => {
  return `/treatments/${id}`
}

export const treatmentOperationsDeleteTreatment = async (
  id: ModelsTreatmentRecordId,
  options?: RequestInit
): Promise<treatmentOperationsDeleteTreatmentResponse> => {
  return customInstance<treatmentOperationsDeleteTreatmentResponse>(
    getTreatmentOperationsDeleteTreatmentUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getTreatmentOperationsDeleteTreatmentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof treatmentOperationsDeleteTreatment>>,
    TError,
    { id: ModelsTreatmentRecordId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof treatmentOperationsDeleteTreatment>>,
  TError,
  { id: ModelsTreatmentRecordId },
  TContext
> => {
  const mutationKey = ['treatmentOperationsDeleteTreatment']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof treatmentOperationsDeleteTreatment>>,
    { id: ModelsTreatmentRecordId }
  > = (props) => {
    const { id } = props ?? {}

    return treatmentOperationsDeleteTreatment(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TreatmentOperationsDeleteTreatmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsDeleteTreatment>>
>

export type TreatmentOperationsDeleteTreatmentMutationError = unknown

export const useTreatmentOperationsDeleteTreatment = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof treatmentOperationsDeleteTreatment>>,
      TError,
      { id: ModelsTreatmentRecordId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof treatmentOperationsDeleteTreatment>>,
  TError,
  { id: ModelsTreatmentRecordId },
  TContext
> => {
  const mutationOptions =
    getTreatmentOperationsDeleteTreatmentMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Add photos to treatment record
 */
export type treatmentOperationsAddTreatmentPhotosResponse200 = {
  data: TreatmentOperationsAddTreatmentPhotos200
  status: 200
}

export type treatmentOperationsAddTreatmentPhotosResponseComposite =
  treatmentOperationsAddTreatmentPhotosResponse200

export type treatmentOperationsAddTreatmentPhotosResponse =
  treatmentOperationsAddTreatmentPhotosResponseComposite & {
    headers: Headers
  }

export const getTreatmentOperationsAddTreatmentPhotosUrl = (
  id: ModelsTreatmentRecordId
) => {
  return `/treatments/${id}/photos`
}

export const treatmentOperationsAddTreatmentPhotos = async (
  id: ModelsTreatmentRecordId,
  modelsAttachmentId: ModelsAttachmentId[],
  options?: RequestInit
): Promise<treatmentOperationsAddTreatmentPhotosResponse> => {
  return customInstance<treatmentOperationsAddTreatmentPhotosResponse>(
    getTreatmentOperationsAddTreatmentPhotosUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsAttachmentId),
    }
  )
}

export const getTreatmentOperationsAddTreatmentPhotosMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof treatmentOperationsAddTreatmentPhotos>>,
    TError,
    { id: ModelsTreatmentRecordId; data: ModelsAttachmentId[] },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof treatmentOperationsAddTreatmentPhotos>>,
  TError,
  { id: ModelsTreatmentRecordId; data: ModelsAttachmentId[] },
  TContext
> => {
  const mutationKey = ['treatmentOperationsAddTreatmentPhotos']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof treatmentOperationsAddTreatmentPhotos>>,
    { id: ModelsTreatmentRecordId; data: ModelsAttachmentId[] }
  > = (props) => {
    const { id, data } = props ?? {}

    return treatmentOperationsAddTreatmentPhotos(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TreatmentOperationsAddTreatmentPhotosMutationResult = NonNullable<
  Awaited<ReturnType<typeof treatmentOperationsAddTreatmentPhotos>>
>
export type TreatmentOperationsAddTreatmentPhotosMutationBody =
  ModelsAttachmentId[]
export type TreatmentOperationsAddTreatmentPhotosMutationError = unknown

export const useTreatmentOperationsAddTreatmentPhotos = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof treatmentOperationsAddTreatmentPhotos>>,
      TError,
      { id: ModelsTreatmentRecordId; data: ModelsAttachmentId[] },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof treatmentOperationsAddTreatmentPhotos>>,
  TError,
  { id: ModelsTreatmentRecordId; data: ModelsAttachmentId[] },
  TContext
> => {
  const mutationOptions =
    getTreatmentOperationsAddTreatmentPhotosMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
