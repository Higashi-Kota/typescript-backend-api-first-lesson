/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Beauty Salon API
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ModelsBatchGetRequest,
  ModelsCreateSalonRequest,
  ModelsProblemDetails,
  ModelsSalonAvailabilityRequest,
  ModelsSalonId,
  ModelsSalonSubscriptionRequest,
  ModelsStaffId,
  ModelsStaffScheduleUpdateRequest,
  ModelsUpdateSalonRequest,
  ModelsUpdateSalonRequestUpdate,
  SalonCrudBatchGet200,
  SalonCrudBulkCreate207,
  SalonCrudBulkCreateBody,
  SalonCrudBulkDelete207,
  SalonCrudBulkDeleteBody,
  SalonCrudBulkUpdate207,
  SalonCrudBulkUpdateBody,
  SalonCrudCreate201,
  SalonCrudDeleteParams,
  SalonCrudExport202,
  SalonCrudExportBody,
  SalonCrudGet200,
  SalonCrudGetHistory200,
  SalonCrudGetHistoryParams,
  SalonCrudGetParams,
  SalonCrudGetVersion200,
  SalonCrudList200,
  SalonCrudListParams,
  SalonCrudPatch200,
  SalonCrudPatchParams,
  SalonCrudRestore200,
  SalonCrudSearch200,
  SalonCrudSearchParams,
  SalonCrudUpdate200,
  SalonOperationsCheckAvailability200,
  SalonOperationsGetNearby200,
  SalonOperationsGetNearbyParams,
  SalonOperationsGetRecommendations200,
  SalonOperationsGetRecommendationsParams,
  SalonOperationsGetStatistics200,
  SalonOperationsGetStatisticsParams,
  SalonOperationsSubscribe201,
  SalonOperationsUpdateStaffSchedule200,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„ÇÑ„Éï„Ç£„É´„Çø„ÉºÊù°‰ª∂„ÇíÊåáÂÆö„Åó„Å¶ÂØæË±°„É™„ÇΩ„Éº„Çπ„Çí‰∏ÄË¶ßÂèñÂæó„Åó„Åæ„Åô„ÄÇÊ•≠ÂãôÁîªÈù¢„ÅÆ„É™„Çπ„ÉàË°®Á§∫„Å´Âà©Áî®„Åó„Åæ„Åô„ÄÇ
 * @summary List {Name} resources
 */
export type salonCrudListResponse200 = {
  data: SalonCrudList200
  status: 200
}

export type salonCrudListResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudListResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudListResponse429 = {
  data: ModelsProblemDetails
  status: 429
}

export type salonCrudListResponseComposite =
  | salonCrudListResponse200
  | salonCrudListResponse400
  | salonCrudListResponse401
  | salonCrudListResponse429

export type salonCrudListResponse = salonCrudListResponseComposite & {
  headers: Headers
}

export const getSalonCrudListUrl = (params?: SalonCrudListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['categories', 'features', 'facetFields']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/?${stringifiedParams}`
    : `/api/v1/salons/`
}

export const salonCrudList = async (
  params?: SalonCrudListParams,
  options?: RequestInit
): Promise<salonCrudListResponse> => {
  return customInstance<salonCrudListResponse>(getSalonCrudListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getSalonCrudListQueryKey = (params?: SalonCrudListParams) => {
  return [`/api/v1/salons/`, ...(params ? [params] : [])] as const
}

export const getSalonCrudListQueryOptions = <
  TData = Awaited<ReturnType<typeof salonCrudList>>,
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudList>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSalonCrudListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof salonCrudList>>> = ({
    signal,
  }) => salonCrudList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salonCrudList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonCrudListQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudList>>
>
export type SalonCrudListQueryError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

export function useSalonCrudList<
  TData = Awaited<ReturnType<typeof salonCrudList>>,
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
>(
  params: undefined | SalonCrudListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudList>>,
          TError,
          Awaited<ReturnType<typeof salonCrudList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudList<
  TData = Awaited<ReturnType<typeof salonCrudList>>,
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudList>>,
          TError,
          Awaited<ReturnType<typeof salonCrudList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudList<
  TData = Awaited<ReturnType<typeof salonCrudList>>,
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudList>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List {Name} resources
 */

export function useSalonCrudList<
  TData = Awaited<ReturnType<typeof salonCrudList>>,
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudList>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonCrudListQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Êñ∞Ë¶è„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê„Åó„ÄÅ‰ΩúÊàêÊôÇ„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„ÇÑÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú„ÇíËøîÂç¥„Åó„Åæ„Åô„ÄÇ
 * @summary Create new {Name}
 */
export type salonCrudCreateResponse201 = {
  data: SalonCrudCreate201
  status: 201
}

export type salonCrudCreateResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudCreateResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudCreateResponse409 = {
  data: ModelsProblemDetails
  status: 409
}

export type salonCrudCreateResponse422 = {
  data: ModelsProblemDetails
  status: 422
}

export type salonCrudCreateResponseComposite =
  | salonCrudCreateResponse201
  | salonCrudCreateResponse400
  | salonCrudCreateResponse401
  | salonCrudCreateResponse409
  | salonCrudCreateResponse422

export type salonCrudCreateResponse = salonCrudCreateResponseComposite & {
  headers: Headers
}

export const getSalonCrudCreateUrl = () => {
  return `/api/v1/salons/`
}

export const salonCrudCreate = async (
  modelsCreateSalonRequest: ModelsCreateSalonRequest,
  options?: RequestInit
): Promise<salonCrudCreateResponse> => {
  return customInstance<salonCrudCreateResponse>(getSalonCrudCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(modelsCreateSalonRequest),
  })
}

export const getSalonCrudCreateMutationOptions = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudCreate>>,
    TError,
    { data: ModelsCreateSalonRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudCreate>>,
  TError,
  { data: ModelsCreateSalonRequest },
  TContext
> => {
  const mutationKey = ['salonCrudCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudCreate>>,
    { data: ModelsCreateSalonRequest }
  > = (props) => {
    const { data } = props ?? {}

    return salonCrudCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudCreate>>
>
export type SalonCrudCreateMutationBody = ModelsCreateSalonRequest
export type SalonCrudCreateMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Create new {Name}
 */
export const useSalonCrudCreate = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudCreate>>,
      TError,
      { data: ModelsCreateSalonRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudCreate>>,
  TError,
  { data: ModelsCreateSalonRequest },
  TContext
> => {
  const mutationOptions = getSalonCrudCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Ë§áÊï∞ID„Çí„Åæ„Å®„ÇÅ„Å¶ÂèñÂæó„Åó„ÄÅ‰∏ÄË¶ßÁîªÈù¢„ÅÆÈÅÖÂª∂Ë™≠„ÅøËæº„Åø„ÇÑÂ§ñÈÉ®ÈÄ£Êê∫„Å´Âà©Áî®„Åó„Åæ„Åô„ÄÇ
 * @summary Batch get {Name} resources
 */
export type salonCrudBatchGetResponse200 = {
  data: SalonCrudBatchGet200
  status: 200
}

export type salonCrudBatchGetResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudBatchGetResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudBatchGetResponseComposite =
  | salonCrudBatchGetResponse200
  | salonCrudBatchGetResponse400
  | salonCrudBatchGetResponse401

export type salonCrudBatchGetResponse = salonCrudBatchGetResponseComposite & {
  headers: Headers
}

export const getSalonCrudBatchGetUrl = () => {
  return `/api/v1/salons/batch/get`
}

export const salonCrudBatchGet = async (
  modelsBatchGetRequest: ModelsBatchGetRequest,
  options?: RequestInit
): Promise<salonCrudBatchGetResponse> => {
  return customInstance<salonCrudBatchGetResponse>(getSalonCrudBatchGetUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(modelsBatchGetRequest),
  })
}

export const getSalonCrudBatchGetMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudBatchGet>>,
    TError,
    { data: ModelsBatchGetRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudBatchGet>>,
  TError,
  { data: ModelsBatchGetRequest },
  TContext
> => {
  const mutationKey = ['salonCrudBatchGet']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudBatchGet>>,
    { data: ModelsBatchGetRequest }
  > = (props) => {
    const { data } = props ?? {}

    return salonCrudBatchGet(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudBatchGetMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudBatchGet>>
>
export type SalonCrudBatchGetMutationBody = ModelsBatchGetRequest
export type SalonCrudBatchGetMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Batch get {Name} resources
 */
export const useSalonCrudBatchGet = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudBatchGet>>,
      TError,
      { data: ModelsBatchGetRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudBatchGet>>,
  TError,
  { data: ModelsBatchGetRequest },
  TContext
> => {
  const mutationOptions = getSalonCrudBatchGetMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Ë§áÊï∞„É™„ÇΩ„Éº„Çπ„Çí‰∏ÄÊã¨‰ΩúÊàê„Åó„ÄÅÁµêÊûú„ÇíÊàêÂäü„ÉªÂ§±Êïó„Å´ÂàÜ„Åë„Å¶ËøîÂç¥„Åó„Åæ„Åô„ÄÇ
 * @summary Bulk create {Name} resources
 */
export type salonCrudBulkCreateResponse207 = {
  data: SalonCrudBulkCreate207
  status: 207
}

export type salonCrudBulkCreateResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudBulkCreateResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudBulkCreateResponseComposite =
  | salonCrudBulkCreateResponse207
  | salonCrudBulkCreateResponse400
  | salonCrudBulkCreateResponse401

export type salonCrudBulkCreateResponse =
  salonCrudBulkCreateResponseComposite & {
    headers: Headers
  }

export const getSalonCrudBulkCreateUrl = () => {
  return `/api/v1/salons/bulk`
}

export const salonCrudBulkCreate = async (
  salonCrudBulkCreateBody: SalonCrudBulkCreateBody,
  options?: RequestInit
): Promise<salonCrudBulkCreateResponse> => {
  return customInstance<salonCrudBulkCreateResponse>(
    getSalonCrudBulkCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(salonCrudBulkCreateBody),
    }
  )
}

export const getSalonCrudBulkCreateMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudBulkCreate>>,
    TError,
    { data: SalonCrudBulkCreateBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudBulkCreate>>,
  TError,
  { data: SalonCrudBulkCreateBody },
  TContext
> => {
  const mutationKey = ['salonCrudBulkCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudBulkCreate>>,
    { data: SalonCrudBulkCreateBody }
  > = (props) => {
    const { data } = props ?? {}

    return salonCrudBulkCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudBulkCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudBulkCreate>>
>
export type SalonCrudBulkCreateMutationBody = SalonCrudBulkCreateBody
export type SalonCrudBulkCreateMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Bulk create {Name} resources
 */
export const useSalonCrudBulkCreate = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudBulkCreate>>,
      TError,
      { data: SalonCrudBulkCreateBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudBulkCreate>>,
  TError,
  { data: SalonCrudBulkCreateBody },
  TContext
> => {
  const mutationOptions = getSalonCrudBulkCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Ë§áÊï∞„É™„ÇΩ„Éº„Çπ„ÅÆÊõ¥Êñ∞„Çí„Åæ„Å®„ÇÅ„Å¶Âèó„Åë‰ªò„Åë„ÄÅ„Éê„Éº„Ç∏„Éß„É≥Êï¥ÂêàÊÄß„Çí‰øù„Å°„Å™„Åå„ÇâÂá¶ÁêÜ„Åó„Åæ„Åô„ÄÇ
 * @summary Bulk update {Name} resources
 */
export type salonCrudBulkUpdateResponse207 = {
  data: SalonCrudBulkUpdate207
  status: 207
}

export type salonCrudBulkUpdateResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudBulkUpdateResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudBulkUpdateResponseComposite =
  | salonCrudBulkUpdateResponse207
  | salonCrudBulkUpdateResponse400
  | salonCrudBulkUpdateResponse401

export type salonCrudBulkUpdateResponse =
  salonCrudBulkUpdateResponseComposite & {
    headers: Headers
  }

export const getSalonCrudBulkUpdateUrl = () => {
  return `/api/v1/salons/bulk`
}

export const salonCrudBulkUpdate = async (
  salonCrudBulkUpdateBody: SalonCrudBulkUpdateBody,
  options?: RequestInit
): Promise<salonCrudBulkUpdateResponse> => {
  return customInstance<salonCrudBulkUpdateResponse>(
    getSalonCrudBulkUpdateUrl(),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(salonCrudBulkUpdateBody),
    }
  )
}

export const getSalonCrudBulkUpdateMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudBulkUpdate>>,
    TError,
    { data: SalonCrudBulkUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudBulkUpdate>>,
  TError,
  { data: SalonCrudBulkUpdateBody },
  TContext
> => {
  const mutationKey = ['salonCrudBulkUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudBulkUpdate>>,
    { data: SalonCrudBulkUpdateBody }
  > = (props) => {
    const { data } = props ?? {}

    return salonCrudBulkUpdate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudBulkUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudBulkUpdate>>
>
export type SalonCrudBulkUpdateMutationBody = SalonCrudBulkUpdateBody
export type SalonCrudBulkUpdateMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Bulk update {Name} resources
 */
export const useSalonCrudBulkUpdate = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudBulkUpdate>>,
      TError,
      { data: SalonCrudBulkUpdateBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudBulkUpdate>>,
  TError,
  { data: SalonCrudBulkUpdateBody },
  TContext
> => {
  const mutationOptions = getSalonCrudBulkUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Ë§áÊï∞„É™„ÇΩ„Éº„Çπ„Çí‰∏ÄÊã¨ÂâäÈô§„Åó„ÄÅÊàêÂäüÂèØÂê¶„Åî„Å®„ÅÆÁµêÊûú„ÇíËøîÂç¥„Åó„Åæ„Åô„ÄÇ
 * @summary Bulk delete {Name} resources
 */
export type salonCrudBulkDeleteResponse207 = {
  data: SalonCrudBulkDelete207
  status: 207
}

export type salonCrudBulkDeleteResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudBulkDeleteResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudBulkDeleteResponseComposite =
  | salonCrudBulkDeleteResponse207
  | salonCrudBulkDeleteResponse400
  | salonCrudBulkDeleteResponse401

export type salonCrudBulkDeleteResponse =
  salonCrudBulkDeleteResponseComposite & {
    headers: Headers
  }

export const getSalonCrudBulkDeleteUrl = () => {
  return `/api/v1/salons/bulk`
}

export const salonCrudBulkDelete = async (
  salonCrudBulkDeleteBody: SalonCrudBulkDeleteBody,
  options?: RequestInit
): Promise<salonCrudBulkDeleteResponse> => {
  return customInstance<salonCrudBulkDeleteResponse>(
    getSalonCrudBulkDeleteUrl(),
    {
      ...options,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(salonCrudBulkDeleteBody),
    }
  )
}

export const getSalonCrudBulkDeleteMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudBulkDelete>>,
    TError,
    { data: SalonCrudBulkDeleteBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudBulkDelete>>,
  TError,
  { data: SalonCrudBulkDeleteBody },
  TContext
> => {
  const mutationKey = ['salonCrudBulkDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudBulkDelete>>,
    { data: SalonCrudBulkDeleteBody }
  > = (props) => {
    const { data } = props ?? {}

    return salonCrudBulkDelete(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudBulkDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudBulkDelete>>
>
export type SalonCrudBulkDeleteMutationBody = SalonCrudBulkDeleteBody
export type SalonCrudBulkDeleteMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Bulk delete {Name} resources
 */
export const useSalonCrudBulkDelete = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudBulkDelete>>,
      TError,
      { data: SalonCrudBulkDeleteBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudBulkDelete>>,
  TError,
  { data: SalonCrudBulkDeleteBody },
  TContext
> => {
  const mutationOptions = getSalonCrudBulkDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Ê§úÁ¥¢ÁµêÊûú„ÇíÊåáÂÆöÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„ÄÅÂ∏≥Á•®Âá∫Âäõ„ÇÑÂ§ñÈÉ®ÂÖ±Êúâ„Å´Ê¥ªÁî®„Åó„Åæ„Åô„ÄÇ
 * @summary Export {Name} search results
 */
export type salonCrudExportResponse202 = {
  data: SalonCrudExport202
  status: 202
}

export type salonCrudExportResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudExportResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudExportResponseComposite =
  | salonCrudExportResponse202
  | salonCrudExportResponse400
  | salonCrudExportResponse401

export type salonCrudExportResponse = salonCrudExportResponseComposite & {
  headers: Headers
}

export const getSalonCrudExportUrl = () => {
  return `/api/v1/salons/export`
}

export const salonCrudExport = async (
  salonCrudExportBody: SalonCrudExportBody,
  options?: RequestInit
): Promise<salonCrudExportResponse> => {
  return customInstance<salonCrudExportResponse>(getSalonCrudExportUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(salonCrudExportBody),
  })
}

export const getSalonCrudExportMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudExport>>,
    TError,
    { data: SalonCrudExportBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudExport>>,
  TError,
  { data: SalonCrudExportBody },
  TContext
> => {
  const mutationKey = ['salonCrudExport']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudExport>>,
    { data: SalonCrudExportBody }
  > = (props) => {
    const { data } = props ?? {}

    return salonCrudExport(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudExportMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudExport>>
>
export type SalonCrudExportMutationBody = SalonCrudExportBody
export type SalonCrudExportMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Export {Name} search results
 */
export const useSalonCrudExport = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudExport>>,
      TError,
      { data: SalonCrudExportBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudExport>>,
  TError,
  { data: SalonCrudExportBody },
  TContext
> => {
  const mutationOptions = getSalonCrudExportMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * ‰ΩçÁΩÆÊÉÖÂ†±„Å®Â∏åÊúõÊù°‰ª∂„Åã„ÇâËøëÈö£„Çµ„É≠„É≥„ÇíÊ§úÁ¥¢„Åó„ÄÅÈ°ßÂÆ¢„Å´ÊúÄÈÅ©„Å™ÈÅ∏ÊäûËÇ¢„ÇíÊèêÁ§∫„Åó„Åæ„Åô„ÄÇ
 * @summary Get nearby salons
 */
export type salonOperationsGetNearbyResponse200 = {
  data: SalonOperationsGetNearby200
  status: 200
}

export type salonOperationsGetNearbyResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonOperationsGetNearbyResponseComposite =
  | salonOperationsGetNearbyResponse200
  | salonOperationsGetNearbyResponse400

export type salonOperationsGetNearbyResponse =
  salonOperationsGetNearbyResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsGetNearbyUrl = (
  params: SalonOperationsGetNearbyParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['categories']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/nearby?${stringifiedParams}`
    : `/api/v1/salons/nearby`
}

export const salonOperationsGetNearby = async (
  params: SalonOperationsGetNearbyParams,
  options?: RequestInit
): Promise<salonOperationsGetNearbyResponse> => {
  return customInstance<salonOperationsGetNearbyResponse>(
    getSalonOperationsGetNearbyUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonOperationsGetNearbyQueryKey = (
  params?: SalonOperationsGetNearbyParams
) => {
  return [`/api/v1/salons/nearby`, ...(params ? [params] : [])] as const
}

export const getSalonOperationsGetNearbyQueryOptions = <
  TData = Awaited<ReturnType<typeof salonOperationsGetNearby>>,
  TError = ModelsProblemDetails,
>(
  params: SalonOperationsGetNearbyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetNearby>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSalonOperationsGetNearbyQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonOperationsGetNearby>>
  > = ({ signal }) =>
    salonOperationsGetNearby(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salonOperationsGetNearby>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonOperationsGetNearbyQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsGetNearby>>
>
export type SalonOperationsGetNearbyQueryError = ModelsProblemDetails

export function useSalonOperationsGetNearby<
  TData = Awaited<ReturnType<typeof salonOperationsGetNearby>>,
  TError = ModelsProblemDetails,
>(
  params: SalonOperationsGetNearbyParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetNearby>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGetNearby>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGetNearby>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGetNearby<
  TData = Awaited<ReturnType<typeof salonOperationsGetNearby>>,
  TError = ModelsProblemDetails,
>(
  params: SalonOperationsGetNearbyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetNearby>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGetNearby>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGetNearby>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGetNearby<
  TData = Awaited<ReturnType<typeof salonOperationsGetNearby>>,
  TError = ModelsProblemDetails,
>(
  params: SalonOperationsGetNearbyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetNearby>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get nearby salons
 */

export function useSalonOperationsGetNearby<
  TData = Awaited<ReturnType<typeof salonOperationsGetNearby>>,
  TError = ModelsProblemDetails,
>(
  params: SalonOperationsGetNearbyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetNearby>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonOperationsGetNearbyQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * È°ßÂÆ¢„ÅÆÂóúÂ•Ω„ÇÑÂ±•Ê≠¥„Å´„ÇÇ„Å®„Å•„Åç„Åä„Åô„Åô„ÇÅ„Çµ„É≠„É≥„ÇíÊèêÁ§∫„Åó„ÄÅÂÜçÊù•Â∫ó‰øÉÈÄ≤„ÇÑÊñ∞Ë¶èÁç≤Âæó„ÇíÊîØÊè¥„Åó„Åæ„Åô„ÄÇ
 * @summary Get personalized salon recommendations
 */
export type salonOperationsGetRecommendationsResponse200 = {
  data: SalonOperationsGetRecommendations200
  status: 200
}

export type salonOperationsGetRecommendationsResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonOperationsGetRecommendationsResponseComposite =
  | salonOperationsGetRecommendationsResponse200
  | salonOperationsGetRecommendationsResponse401

export type salonOperationsGetRecommendationsResponse =
  salonOperationsGetRecommendationsResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsGetRecommendationsUrl = (
  params?: SalonOperationsGetRecommendationsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['categories']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/recommendations?${stringifiedParams}`
    : `/api/v1/salons/recommendations`
}

export const salonOperationsGetRecommendations = async (
  params?: SalonOperationsGetRecommendationsParams,
  options?: RequestInit
): Promise<salonOperationsGetRecommendationsResponse> => {
  return customInstance<salonOperationsGetRecommendationsResponse>(
    getSalonOperationsGetRecommendationsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonOperationsGetRecommendationsQueryKey = (
  params?: SalonOperationsGetRecommendationsParams
) => {
  return [
    `/api/v1/salons/recommendations`,
    ...(params ? [params] : []),
  ] as const
}

export const getSalonOperationsGetRecommendationsQueryOptions = <
  TData = Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
  TError = ModelsProblemDetails,
>(
  params?: SalonOperationsGetRecommendationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalonOperationsGetRecommendationsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonOperationsGetRecommendations>>
  > = ({ signal }) =>
    salonOperationsGetRecommendations(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonOperationsGetRecommendationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsGetRecommendations>>
>
export type SalonOperationsGetRecommendationsQueryError = ModelsProblemDetails

export function useSalonOperationsGetRecommendations<
  TData = Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
  TError = ModelsProblemDetails,
>(
  params: undefined | SalonOperationsGetRecommendationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGetRecommendations>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGetRecommendations<
  TData = Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
  TError = ModelsProblemDetails,
>(
  params?: SalonOperationsGetRecommendationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGetRecommendations>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGetRecommendations<
  TData = Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
  TError = ModelsProblemDetails,
>(
  params?: SalonOperationsGetRecommendationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get personalized salon recommendations
 */

export function useSalonOperationsGetRecommendations<
  TData = Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
  TError = ModelsProblemDetails,
>(
  params?: SalonOperationsGetRecommendationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetRecommendations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonOperationsGetRecommendationsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * „Éï„Ç°„Çª„ÉÉ„Éà„ÇÑË§áÂêàÊù°‰ª∂„ÇíÂà©Áî®„Åó„Å¶„É™„ÇΩ„Éº„Çπ„ÇíÊ§úÁ¥¢„Åó„ÄÅÁµêÊûú„Å®Áµ±Ë®àÊÉÖÂ†±„ÇíËøîÂç¥„Åó„Åæ„Åô„ÄÇ
 * @summary Search {Name} resources
 */
export type salonCrudSearchResponse200 = {
  data: SalonCrudSearch200
  status: 200
}

export type salonCrudSearchResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudSearchResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudSearchResponseComposite =
  | salonCrudSearchResponse200
  | salonCrudSearchResponse400
  | salonCrudSearchResponse401

export type salonCrudSearchResponse = salonCrudSearchResponseComposite & {
  headers: Headers
}

export const getSalonCrudSearchUrl = (params?: SalonCrudSearchParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ['categories', 'features', 'facetFields']

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? 'null' : v.toString())
      )
      return
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/search?${stringifiedParams}`
    : `/api/v1/salons/search`
}

export const salonCrudSearch = async (
  params?: SalonCrudSearchParams,
  options?: RequestInit
): Promise<salonCrudSearchResponse> => {
  return customInstance<salonCrudSearchResponse>(
    getSalonCrudSearchUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonCrudSearchQueryKey = (params?: SalonCrudSearchParams) => {
  return [`/api/v1/salons/search`, ...(params ? [params] : [])] as const
}

export const getSalonCrudSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof salonCrudSearch>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudSearch>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSalonCrudSearchQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof salonCrudSearch>>> = ({
    signal,
  }) => salonCrudSearch(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salonCrudSearch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonCrudSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudSearch>>
>
export type SalonCrudSearchQueryError =
  | ModelsProblemDetails
  | ModelsProblemDetails

export function useSalonCrudSearch<
  TData = Awaited<ReturnType<typeof salonCrudSearch>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  params: undefined | SalonCrudSearchParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudSearch>>,
          TError,
          Awaited<ReturnType<typeof salonCrudSearch>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudSearch<
  TData = Awaited<ReturnType<typeof salonCrudSearch>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudSearch>>,
          TError,
          Awaited<ReturnType<typeof salonCrudSearch>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudSearch<
  TData = Awaited<ReturnType<typeof salonCrudSearch>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudSearch>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Search {Name} resources
 */

export function useSalonCrudSearch<
  TData = Awaited<ReturnType<typeof salonCrudSearch>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  params?: SalonCrudSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudSearch>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonCrudSearchQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ID„ÇíÊåáÂÆö„Åó„Å¶Âçò‰∏Ä„É™„ÇΩ„Éº„Çπ„ÇíÂèñÂæó„Åó„ÄÅË©≥Á¥∞Ë°®Á§∫„ÇÑÁ∑®ÈõÜ„Éï„Ç©„Éº„É†„ÅÆÂàùÊúüÂÄ§„Å´‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ
 * @summary Get {Name} by ID
 */
export type salonCrudGetResponse200 = {
  data: SalonCrudGet200
  status: 200
}

export type salonCrudGetResponse304 = {
  data: null
  status: 304
}

export type salonCrudGetResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudGetResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonCrudGetResponseComposite =
  | salonCrudGetResponse200
  | salonCrudGetResponse304
  | salonCrudGetResponse401
  | salonCrudGetResponse404

export type salonCrudGetResponse = salonCrudGetResponseComposite & {
  headers: Headers
}

export const getSalonCrudGetUrl = (
  id: ModelsSalonId,
  params?: SalonCrudGetParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${id}?${stringifiedParams}`
    : `/api/v1/salons/${id}`
}

export const salonCrudGet = async (
  id: ModelsSalonId,
  params?: SalonCrudGetParams,
  options?: RequestInit
): Promise<salonCrudGetResponse> => {
  return customInstance<salonCrudGetResponse>(getSalonCrudGetUrl(id, params), {
    ...options,
    method: 'GET',
  })
}

export const getSalonCrudGetQueryKey = (
  id?: ModelsSalonId,
  params?: SalonCrudGetParams
) => {
  return [`/api/v1/salons/${id}`, ...(params ? [params] : [])] as const
}

export const getSalonCrudGetQueryOptions = <
  TData = Awaited<ReturnType<typeof salonCrudGet>>,
  TError = null | ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudGet>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSalonCrudGetQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof salonCrudGet>>> = ({
    signal,
  }) => salonCrudGet(id, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof salonCrudGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonCrudGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudGet>>
>
export type SalonCrudGetQueryError =
  | null
  | ModelsProblemDetails
  | ModelsProblemDetails

export function useSalonCrudGet<
  TData = Awaited<ReturnType<typeof salonCrudGet>>,
  TError = null | ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params: undefined | SalonCrudGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudGet>>,
          TError,
          Awaited<ReturnType<typeof salonCrudGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudGet<
  TData = Awaited<ReturnType<typeof salonCrudGet>>,
  TError = null | ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudGet>>,
          TError,
          Awaited<ReturnType<typeof salonCrudGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudGet<
  TData = Awaited<ReturnType<typeof salonCrudGet>>,
  TError = null | ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudGet>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get {Name} by ID
 */

export function useSalonCrudGet<
  TData = Awaited<ReturnType<typeof salonCrudGet>>,
  TError = null | ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof salonCrudGet>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonCrudGetQueryOptions(id, params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Êó¢Â≠ò„É™„ÇΩ„Éº„Çπ„ÇíÂÖ®È†ÖÁõÆÊõ¥Êñ∞„Åó„ÄÅÊúÄÊñ∞Áä∂ÊÖã„Å®„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíËøîÂç¥„Åó„Åæ„Åô„ÄÇ
 * @summary Update {Name}
 */
export type salonCrudUpdateResponse200 = {
  data: SalonCrudUpdate200
  status: 200
}

export type salonCrudUpdateResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudUpdateResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudUpdateResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonCrudUpdateResponse409 = {
  data: ModelsProblemDetails
  status: 409
}

export type salonCrudUpdateResponse422 = {
  data: ModelsProblemDetails
  status: 422
}

export type salonCrudUpdateResponseComposite =
  | salonCrudUpdateResponse200
  | salonCrudUpdateResponse400
  | salonCrudUpdateResponse401
  | salonCrudUpdateResponse404
  | salonCrudUpdateResponse409
  | salonCrudUpdateResponse422

export type salonCrudUpdateResponse = salonCrudUpdateResponseComposite & {
  headers: Headers
}

export const getSalonCrudUpdateUrl = (id: ModelsSalonId) => {
  return `/api/v1/salons/${id}`
}

export const salonCrudUpdate = async (
  id: ModelsSalonId,
  modelsUpdateSalonRequest: ModelsUpdateSalonRequest,
  options?: RequestInit
): Promise<salonCrudUpdateResponse> => {
  return customInstance<salonCrudUpdateResponse>(getSalonCrudUpdateUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(modelsUpdateSalonRequest),
  })
}

export const getSalonCrudUpdateMutationOptions = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudUpdate>>,
    TError,
    { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudUpdate>>,
  TError,
  { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
  TContext
> => {
  const mutationKey = ['salonCrudUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudUpdate>>,
    { id: ModelsSalonId; data: ModelsUpdateSalonRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return salonCrudUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudUpdate>>
>
export type SalonCrudUpdateMutationBody = ModelsUpdateSalonRequest
export type SalonCrudUpdateMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Update {Name}
 */
export const useSalonCrudUpdate = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudUpdate>>,
      TError,
      { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudUpdate>>,
  TError,
  { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
  TContext
> => {
  const mutationOptions = getSalonCrudUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * ÂøÖË¶Å„Å™„Éï„Ç£„Éº„É´„Éâ„ÅÆ„Åø„ÇíÈÉ®ÂàÜÊõ¥Êñ∞„Åó„ÄÅÂ§âÊõ¥Â∑ÆÂàÜ„ÇíÂäπÁéáÁöÑ„Å´ÂèçÊò†„Åó„Åæ„Åô„ÄÇ
 * @summary Partially update {Name}
 */
export type salonCrudPatchResponse200 = {
  data: SalonCrudPatch200
  status: 200
}

export type salonCrudPatchResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonCrudPatchResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudPatchResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonCrudPatchResponse409 = {
  data: ModelsProblemDetails
  status: 409
}

export type salonCrudPatchResponse422 = {
  data: ModelsProblemDetails
  status: 422
}

export type salonCrudPatchResponseComposite =
  | salonCrudPatchResponse200
  | salonCrudPatchResponse400
  | salonCrudPatchResponse401
  | salonCrudPatchResponse404
  | salonCrudPatchResponse409
  | salonCrudPatchResponse422

export type salonCrudPatchResponse = salonCrudPatchResponseComposite & {
  headers: Headers
}

export const getSalonCrudPatchUrl = (
  id: ModelsSalonId,
  params?: SalonCrudPatchParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${id}?${stringifiedParams}`
    : `/api/v1/salons/${id}`
}

export const salonCrudPatch = async (
  id: ModelsSalonId,
  modelsUpdateSalonRequestUpdate: ModelsUpdateSalonRequestUpdate,
  params?: SalonCrudPatchParams,
  options?: RequestInit
): Promise<salonCrudPatchResponse> => {
  return customInstance<salonCrudPatchResponse>(
    getSalonCrudPatchUrl(id, params),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUpdateSalonRequestUpdate),
    }
  )
}

export const getSalonCrudPatchMutationOptions = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudPatch>>,
    TError,
    {
      id: ModelsSalonId
      data: ModelsUpdateSalonRequestUpdate
      params?: SalonCrudPatchParams
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudPatch>>,
  TError,
  {
    id: ModelsSalonId
    data: ModelsUpdateSalonRequestUpdate
    params?: SalonCrudPatchParams
  },
  TContext
> => {
  const mutationKey = ['salonCrudPatch']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudPatch>>,
    {
      id: ModelsSalonId
      data: ModelsUpdateSalonRequestUpdate
      params?: SalonCrudPatchParams
    }
  > = (props) => {
    const { id, data, params } = props ?? {}

    return salonCrudPatch(id, data, params, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudPatch>>
>
export type SalonCrudPatchMutationBody = ModelsUpdateSalonRequestUpdate
export type SalonCrudPatchMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Partially update {Name}
 */
export const useSalonCrudPatch = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudPatch>>,
      TError,
      {
        id: ModelsSalonId
        data: ModelsUpdateSalonRequestUpdate
        params?: SalonCrudPatchParams
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudPatch>>,
  TError,
  {
    id: ModelsSalonId
    data: ModelsUpdateSalonRequestUpdate
    params?: SalonCrudPatchParams
  },
  TContext
> => {
  const mutationOptions = getSalonCrudPatchMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * „É™„ÇΩ„Éº„Çπ„ÇíÂâäÈô§„Åó„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶Ë´ñÁêÜÂâäÈô§„ÅãÁâ©ÁêÜÂâäÈô§„Åã„ÇíÈÅ∏Êäû„Åó„Åæ„Åô„ÄÇ
 * @summary Delete {Name}
 */
export type salonCrudDeleteResponse204 = {
  data: null
  status: 204
}

export type salonCrudDeleteResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudDeleteResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonCrudDeleteResponse409 = {
  data: ModelsProblemDetails
  status: 409
}

export type salonCrudDeleteResponseComposite =
  | salonCrudDeleteResponse204
  | salonCrudDeleteResponse401
  | salonCrudDeleteResponse404
  | salonCrudDeleteResponse409

export type salonCrudDeleteResponse = salonCrudDeleteResponseComposite & {
  headers: Headers
}

export const getSalonCrudDeleteUrl = (
  id: ModelsSalonId,
  params?: SalonCrudDeleteParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${id}?${stringifiedParams}`
    : `/api/v1/salons/${id}`
}

export const salonCrudDelete = async (
  id: ModelsSalonId,
  params?: SalonCrudDeleteParams,
  options?: RequestInit
): Promise<salonCrudDeleteResponse> => {
  return customInstance<salonCrudDeleteResponse>(
    getSalonCrudDeleteUrl(id, params),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getSalonCrudDeleteMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudDelete>>,
    TError,
    { id: ModelsSalonId; params?: SalonCrudDeleteParams },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudDelete>>,
  TError,
  { id: ModelsSalonId; params?: SalonCrudDeleteParams },
  TContext
> => {
  const mutationKey = ['salonCrudDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudDelete>>,
    { id: ModelsSalonId; params?: SalonCrudDeleteParams }
  > = (props) => {
    const { id, params } = props ?? {}

    return salonCrudDelete(id, params, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudDelete>>
>

export type SalonCrudDeleteMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Delete {Name}
 */
export const useSalonCrudDelete = <
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudDelete>>,
      TError,
      { id: ModelsSalonId; params?: SalonCrudDeleteParams },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudDelete>>,
  TError,
  { id: ModelsSalonId; params?: SalonCrudDeleteParams },
  TContext
> => {
  const mutationOptions = getSalonCrudDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Â∏åÊúõÊó•ÊôÇ„Å´„Çµ„É≠„É≥ÂÖ®‰Ωì„ÅßÂØæÂøúÂèØËÉΩ„Å™Êû†„Åå„ÅÇ„Çã„Åã„ÇíÂà§ÂÆö„Åó„ÄÅ‰∫àÁ¥ÑÂ∞éÁ∑ö„Åß„ÅÆÂèØÁî®ÊÄßË°®Á§∫„Å´Âà©Áî®„Åó„Åæ„Åô„ÄÇ
 * @summary Check salon availability
 */
export type salonOperationsCheckAvailabilityResponse200 = {
  data: SalonOperationsCheckAvailability200
  status: 200
}

export type salonOperationsCheckAvailabilityResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonOperationsCheckAvailabilityResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonOperationsCheckAvailabilityResponseComposite =
  | salonOperationsCheckAvailabilityResponse200
  | salonOperationsCheckAvailabilityResponse400
  | salonOperationsCheckAvailabilityResponse404

export type salonOperationsCheckAvailabilityResponse =
  salonOperationsCheckAvailabilityResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsCheckAvailabilityUrl = (id: ModelsSalonId) => {
  return `/api/v1/salons/${id}/availability`
}

export const salonOperationsCheckAvailability = async (
  id: ModelsSalonId,
  modelsSalonAvailabilityRequest: ModelsSalonAvailabilityRequest,
  options?: RequestInit
): Promise<salonOperationsCheckAvailabilityResponse> => {
  return customInstance<salonOperationsCheckAvailabilityResponse>(
    getSalonOperationsCheckAvailabilityUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSalonAvailabilityRequest),
    }
  )
}

export const getSalonOperationsCheckAvailabilityMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonOperationsCheckAvailability>>,
    TError,
    { id: ModelsSalonId; data: ModelsSalonAvailabilityRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonOperationsCheckAvailability>>,
  TError,
  { id: ModelsSalonId; data: ModelsSalonAvailabilityRequest },
  TContext
> => {
  const mutationKey = ['salonOperationsCheckAvailability']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonOperationsCheckAvailability>>,
    { id: ModelsSalonId; data: ModelsSalonAvailabilityRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return salonOperationsCheckAvailability(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonOperationsCheckAvailabilityMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsCheckAvailability>>
>
export type SalonOperationsCheckAvailabilityMutationBody =
  ModelsSalonAvailabilityRequest
export type SalonOperationsCheckAvailabilityMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Check salon availability
 */
export const useSalonOperationsCheckAvailability = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonOperationsCheckAvailability>>,
      TError,
      { id: ModelsSalonId; data: ModelsSalonAvailabilityRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonOperationsCheckAvailability>>,
  TError,
  { id: ModelsSalonId; data: ModelsSalonAvailabilityRequest },
  TContext
> => {
  const mutationOptions =
    getSalonOperationsCheckAvailabilityMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * ÂØæË±°„É™„ÇΩ„Éº„Çπ„ÅÆÁõ£ÊüªÂ±•Ê≠¥„ÇíÂèñÂæó„Åó„ÄÅÂ§âÊõ¥ËÄÖ„ÇÑÂ§âÊõ¥ÂÜÖÂÆπ„ÇíËøΩË∑°„Åó„Åæ„Åô„ÄÇ
 * @summary Get {Name} audit history
 */
export type salonCrudGetHistoryResponse200 = {
  data: SalonCrudGetHistory200
  status: 200
}

export type salonCrudGetHistoryResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudGetHistoryResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonCrudGetHistoryResponseComposite =
  | salonCrudGetHistoryResponse200
  | salonCrudGetHistoryResponse401
  | salonCrudGetHistoryResponse404

export type salonCrudGetHistoryResponse =
  salonCrudGetHistoryResponseComposite & {
    headers: Headers
  }

export const getSalonCrudGetHistoryUrl = (
  id: ModelsSalonId,
  params?: SalonCrudGetHistoryParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${id}/history?${stringifiedParams}`
    : `/api/v1/salons/${id}/history`
}

export const salonCrudGetHistory = async (
  id: ModelsSalonId,
  params?: SalonCrudGetHistoryParams,
  options?: RequestInit
): Promise<salonCrudGetHistoryResponse> => {
  return customInstance<salonCrudGetHistoryResponse>(
    getSalonCrudGetHistoryUrl(id, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonCrudGetHistoryQueryKey = (
  id?: ModelsSalonId,
  params?: SalonCrudGetHistoryParams
) => {
  return [`/api/v1/salons/${id}/history`, ...(params ? [params] : [])] as const
}

export const getSalonCrudGetHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof salonCrudGetHistory>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetHistory>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSalonCrudGetHistoryQueryKey(id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonCrudGetHistory>>
  > = ({ signal }) =>
    salonCrudGetHistory(id, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof salonCrudGetHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonCrudGetHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudGetHistory>>
>
export type SalonCrudGetHistoryQueryError =
  | ModelsProblemDetails
  | ModelsProblemDetails

export function useSalonCrudGetHistory<
  TData = Awaited<ReturnType<typeof salonCrudGetHistory>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params: undefined | SalonCrudGetHistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudGetHistory>>,
          TError,
          Awaited<ReturnType<typeof salonCrudGetHistory>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudGetHistory<
  TData = Awaited<ReturnType<typeof salonCrudGetHistory>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudGetHistory>>,
          TError,
          Awaited<ReturnType<typeof salonCrudGetHistory>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudGetHistory<
  TData = Awaited<ReturnType<typeof salonCrudGetHistory>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetHistory>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get {Name} audit history
 */

export function useSalonCrudGetHistory<
  TData = Awaited<ReturnType<typeof salonCrudGetHistory>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonCrudGetHistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetHistory>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonCrudGetHistoryQueryOptions(id, params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Êé≤Ëºâ‰∏≠„ÅÆ„Çµ„É≠„É≥ÁîªÂÉè„ÇíÂâäÈô§„Åó„ÄÅ„Éñ„É©„É≥„Éâ„Éà„Éº„É≥„ÅÆÁµ±‰∏Ä„ÇÑÊÉÖÂ†±Êõ¥Êñ∞„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
 * @summary Delete salon image
 */
export type salonOperationsDeleteImageResponse204 = {
  data: null
  status: 204
}

export type salonOperationsDeleteImageResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonOperationsDeleteImageResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonOperationsDeleteImageResponseComposite =
  | salonOperationsDeleteImageResponse204
  | salonOperationsDeleteImageResponse401
  | salonOperationsDeleteImageResponse404

export type salonOperationsDeleteImageResponse =
  salonOperationsDeleteImageResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsDeleteImageUrl = (
  id: ModelsSalonId,
  imageId: string
) => {
  return `/api/v1/salons/${id}/images/${imageId}`
}

export const salonOperationsDeleteImage = async (
  id: ModelsSalonId,
  imageId: string,
  options?: RequestInit
): Promise<salonOperationsDeleteImageResponse> => {
  return customInstance<salonOperationsDeleteImageResponse>(
    getSalonOperationsDeleteImageUrl(id, imageId),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getSalonOperationsDeleteImageMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonOperationsDeleteImage>>,
    TError,
    { id: ModelsSalonId; imageId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonOperationsDeleteImage>>,
  TError,
  { id: ModelsSalonId; imageId: string },
  TContext
> => {
  const mutationKey = ['salonOperationsDeleteImage']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonOperationsDeleteImage>>,
    { id: ModelsSalonId; imageId: string }
  > = (props) => {
    const { id, imageId } = props ?? {}

    return salonOperationsDeleteImage(id, imageId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonOperationsDeleteImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsDeleteImage>>
>

export type SalonOperationsDeleteImageMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Delete salon image
 */
export const useSalonOperationsDeleteImage = <
  TError = ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonOperationsDeleteImage>>,
      TError,
      { id: ModelsSalonId; imageId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonOperationsDeleteImage>>,
  TError,
  { id: ModelsSalonId; imageId: string },
  TContext
> => {
  const mutationOptions = getSalonOperationsDeleteImageMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * ÂâäÈô§Ê∏à„Åø„É™„ÇΩ„Éº„Çπ„ÇíÂæ©ÂÖÉ„Åó„ÄÅË™§ÂâäÈô§„Å∏„ÅÆËøÖÈÄü„Å™„É™„Ç´„Éê„É™„ÇíÂèØËÉΩ„Å´„Åó„Åæ„Åô„ÄÇ
 * @summary Restore deleted {Name}
 */
export type salonCrudRestoreResponse200 = {
  data: SalonCrudRestore200
  status: 200
}

export type salonCrudRestoreResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudRestoreResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonCrudRestoreResponse409 = {
  data: ModelsProblemDetails
  status: 409
}

export type salonCrudRestoreResponseComposite =
  | salonCrudRestoreResponse200
  | salonCrudRestoreResponse401
  | salonCrudRestoreResponse404
  | salonCrudRestoreResponse409

export type salonCrudRestoreResponse = salonCrudRestoreResponseComposite & {
  headers: Headers
}

export const getSalonCrudRestoreUrl = (id: ModelsSalonId) => {
  return `/api/v1/salons/${id}/restore`
}

export const salonCrudRestore = async (
  id: ModelsSalonId,
  options?: RequestInit
): Promise<salonCrudRestoreResponse> => {
  return customInstance<salonCrudRestoreResponse>(getSalonCrudRestoreUrl(id), {
    ...options,
    method: 'POST',
  })
}

export const getSalonCrudRestoreMutationOptions = <
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonCrudRestore>>,
    TError,
    { id: ModelsSalonId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonCrudRestore>>,
  TError,
  { id: ModelsSalonId },
  TContext
> => {
  const mutationKey = ['salonCrudRestore']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonCrudRestore>>,
    { id: ModelsSalonId }
  > = (props) => {
    const { id } = props ?? {}

    return salonCrudRestore(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonCrudRestoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudRestore>>
>

export type SalonCrudRestoreMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Restore deleted {Name}
 */
export const useSalonCrudRestore = <
  TError = ModelsProblemDetails | ModelsProblemDetails | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonCrudRestore>>,
      TError,
      { id: ModelsSalonId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonCrudRestore>>,
  TError,
  { id: ModelsSalonId },
  TContext
> => {
  const mutationOptions = getSalonCrudRestoreMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * „Çµ„É≠„É≥ÊâÄÂ±û„Çπ„Çø„ÉÉ„Éï„ÅÆ„Ç∑„Éï„Éà„ÇíÊõ¥Êñ∞„Åó„ÄÅ‰∫àÁ¥ÑÊû†„ÇÑÂã§ÊÄ†ÁÆ°ÁêÜ„Å®„ÅÆÊï¥Âêà„ÇíÂèñ„Çä„Åæ„Åô„ÄÇ
 * @summary Update staff schedule
 */
export type salonOperationsUpdateStaffScheduleResponse200 = {
  data: SalonOperationsUpdateStaffSchedule200
  status: 200
}

export type salonOperationsUpdateStaffScheduleResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonOperationsUpdateStaffScheduleResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonOperationsUpdateStaffScheduleResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonOperationsUpdateStaffScheduleResponse409 = {
  data: ModelsProblemDetails
  status: 409
}

export type salonOperationsUpdateStaffScheduleResponseComposite =
  | salonOperationsUpdateStaffScheduleResponse200
  | salonOperationsUpdateStaffScheduleResponse400
  | salonOperationsUpdateStaffScheduleResponse401
  | salonOperationsUpdateStaffScheduleResponse404
  | salonOperationsUpdateStaffScheduleResponse409

export type salonOperationsUpdateStaffScheduleResponse =
  salonOperationsUpdateStaffScheduleResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsUpdateStaffScheduleUrl = (
  id: ModelsSalonId,
  staffId: ModelsStaffId
) => {
  return `/api/v1/salons/${id}/staff/${staffId}/schedule`
}

export const salonOperationsUpdateStaffSchedule = async (
  id: ModelsSalonId,
  staffId: ModelsStaffId,
  modelsStaffScheduleUpdateRequest: ModelsStaffScheduleUpdateRequest,
  options?: RequestInit
): Promise<salonOperationsUpdateStaffScheduleResponse> => {
  return customInstance<salonOperationsUpdateStaffScheduleResponse>(
    getSalonOperationsUpdateStaffScheduleUrl(id, staffId),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsStaffScheduleUpdateRequest),
    }
  )
}

export const getSalonOperationsUpdateStaffScheduleMutationOptions = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonOperationsUpdateStaffSchedule>>,
    TError,
    {
      id: ModelsSalonId
      staffId: ModelsStaffId
      data: ModelsStaffScheduleUpdateRequest
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonOperationsUpdateStaffSchedule>>,
  TError,
  {
    id: ModelsSalonId
    staffId: ModelsStaffId
    data: ModelsStaffScheduleUpdateRequest
  },
  TContext
> => {
  const mutationKey = ['salonOperationsUpdateStaffSchedule']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonOperationsUpdateStaffSchedule>>,
    {
      id: ModelsSalonId
      staffId: ModelsStaffId
      data: ModelsStaffScheduleUpdateRequest
    }
  > = (props) => {
    const { id, staffId, data } = props ?? {}

    return salonOperationsUpdateStaffSchedule(id, staffId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonOperationsUpdateStaffScheduleMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsUpdateStaffSchedule>>
>
export type SalonOperationsUpdateStaffScheduleMutationBody =
  ModelsStaffScheduleUpdateRequest
export type SalonOperationsUpdateStaffScheduleMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Update staff schedule
 */
export const useSalonOperationsUpdateStaffSchedule = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonOperationsUpdateStaffSchedule>>,
      TError,
      {
        id: ModelsSalonId
        staffId: ModelsStaffId
        data: ModelsStaffScheduleUpdateRequest
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonOperationsUpdateStaffSchedule>>,
  TError,
  {
    id: ModelsSalonId
    staffId: ModelsStaffId
    data: ModelsStaffScheduleUpdateRequest
  },
  TContext
> => {
  const mutationOptions =
    getSalonOperationsUpdateStaffScheduleMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * „Çµ„É≠„É≥„ÅÆÂ£≤‰∏ä„ÇÑ‰∫àÁ¥Ñ‰ª∂Êï∞„Å™„Å©‰∏ªË¶ÅÊåáÊ®ô„ÇíÂèñÂæó„Åó„ÄÅÁµåÂñ∂Âà§Êñ≠„ÇÑÊñΩÁ≠ñÊ§úË®é„Å´Ê¥ªÁî®„Åó„Åæ„Åô„ÄÇ
 * @summary Get salon statistics
 */
export type salonOperationsGetStatisticsResponse200 = {
  data: SalonOperationsGetStatistics200
  status: 200
}

export type salonOperationsGetStatisticsResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonOperationsGetStatisticsResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonOperationsGetStatisticsResponseComposite =
  | salonOperationsGetStatisticsResponse200
  | salonOperationsGetStatisticsResponse401
  | salonOperationsGetStatisticsResponse404

export type salonOperationsGetStatisticsResponse =
  salonOperationsGetStatisticsResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsGetStatisticsUrl = (
  id: ModelsSalonId,
  params?: SalonOperationsGetStatisticsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${id}/statistics?${stringifiedParams}`
    : `/api/v1/salons/${id}/statistics`
}

export const salonOperationsGetStatistics = async (
  id: ModelsSalonId,
  params?: SalonOperationsGetStatisticsParams,
  options?: RequestInit
): Promise<salonOperationsGetStatisticsResponse> => {
  return customInstance<salonOperationsGetStatisticsResponse>(
    getSalonOperationsGetStatisticsUrl(id, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonOperationsGetStatisticsQueryKey = (
  id?: ModelsSalonId,
  params?: SalonOperationsGetStatisticsParams
) => {
  return [
    `/api/v1/salons/${id}/statistics`,
    ...(params ? [params] : []),
  ] as const
}

export const getSalonOperationsGetStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonOperationsGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getSalonOperationsGetStatisticsQueryKey(id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonOperationsGetStatistics>>
  > = ({ signal }) =>
    salonOperationsGetStatistics(id, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonOperationsGetStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsGetStatistics>>
>
export type SalonOperationsGetStatisticsQueryError =
  | ModelsProblemDetails
  | ModelsProblemDetails

export function useSalonOperationsGetStatistics<
  TData = Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params: undefined | SalonOperationsGetStatisticsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGetStatistics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGetStatistics<
  TData = Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonOperationsGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGetStatistics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGetStatistics<
  TData = Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonOperationsGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get salon statistics
 */

export function useSalonOperationsGetStatistics<
  TData = Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  params?: SalonOperationsGetStatisticsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGetStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonOperationsGetStatisticsQueryOptions(
    id,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * „Çµ„É≠„É≥„ÅÆ„Éã„É•„Éº„Çπ„ÇÑ„Ç≠„É£„É≥„Éö„Éº„É≥Êõ¥Êñ∞„ÇíË≥ºË™≠ÁôªÈå≤„Åó„ÄÅ„É≠„Ç§„É§„É´È°ßÂÆ¢„Å®„ÅÆÊé•ÁÇπ„ÇíÂº∑Âåñ„Åó„Åæ„Åô„ÄÇ
 * @summary Subscribe to salon updates
 */
export type salonOperationsSubscribeResponse201 = {
  data: SalonOperationsSubscribe201
  status: 201
}

export type salonOperationsSubscribeResponse400 = {
  data: ModelsProblemDetails
  status: 400
}

export type salonOperationsSubscribeResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonOperationsSubscribeResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonOperationsSubscribeResponse409 = {
  data: ModelsProblemDetails
  status: 409
}

export type salonOperationsSubscribeResponseComposite =
  | salonOperationsSubscribeResponse201
  | salonOperationsSubscribeResponse400
  | salonOperationsSubscribeResponse401
  | salonOperationsSubscribeResponse404
  | salonOperationsSubscribeResponse409

export type salonOperationsSubscribeResponse =
  salonOperationsSubscribeResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsSubscribeUrl = (id: ModelsSalonId) => {
  return `/api/v1/salons/${id}/subscribe`
}

export const salonOperationsSubscribe = async (
  id: ModelsSalonId,
  modelsSalonSubscriptionRequest: ModelsSalonSubscriptionRequest,
  options?: RequestInit
): Promise<salonOperationsSubscribeResponse> => {
  return customInstance<salonOperationsSubscribeResponse>(
    getSalonOperationsSubscribeUrl(id),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsSalonSubscriptionRequest),
    }
  )
}

export const getSalonOperationsSubscribeMutationOptions = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonOperationsSubscribe>>,
    TError,
    { id: ModelsSalonId; data: ModelsSalonSubscriptionRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonOperationsSubscribe>>,
  TError,
  { id: ModelsSalonId; data: ModelsSalonSubscriptionRequest },
  TContext
> => {
  const mutationKey = ['salonOperationsSubscribe']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonOperationsSubscribe>>,
    { id: ModelsSalonId; data: ModelsSalonSubscriptionRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return salonOperationsSubscribe(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonOperationsSubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsSubscribe>>
>
export type SalonOperationsSubscribeMutationBody =
  ModelsSalonSubscriptionRequest
export type SalonOperationsSubscribeMutationError =
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails
  | ModelsProblemDetails

/**
 * @summary Subscribe to salon updates
 */
export const useSalonOperationsSubscribe = <
  TError =
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails
    | ModelsProblemDetails,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonOperationsSubscribe>>,
      TError,
      { id: ModelsSalonId; data: ModelsSalonSubscriptionRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonOperationsSubscribe>>,
  TError,
  { id: ModelsSalonId; data: ModelsSalonSubscriptionRequest },
  TContext
> => {
  const mutationOptions = getSalonOperationsSubscribeMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * ÊåáÂÆö„Åó„Åü„Éê„Éº„Ç∏„Éß„É≥„ÅÆ„É™„ÇΩ„Éº„ÇπÁä∂ÊÖã„ÇíÂèñÂæó„Åó„ÄÅÈÅéÂéªÁä∂ÊÖã„ÅÆÁ¢∫Ë™ç„ÇÑÊØîËºÉ„Å´Âà©Áî®„Åó„Åæ„Åô„ÄÇ
 * @summary Get {Name} version
 */
export type salonCrudGetVersionResponse200 = {
  data: SalonCrudGetVersion200
  status: 200
}

export type salonCrudGetVersionResponse401 = {
  data: ModelsProblemDetails
  status: 401
}

export type salonCrudGetVersionResponse404 = {
  data: ModelsProblemDetails
  status: 404
}

export type salonCrudGetVersionResponseComposite =
  | salonCrudGetVersionResponse200
  | salonCrudGetVersionResponse401
  | salonCrudGetVersionResponse404

export type salonCrudGetVersionResponse =
  salonCrudGetVersionResponseComposite & {
    headers: Headers
  }

export const getSalonCrudGetVersionUrl = (
  id: ModelsSalonId,
  version: number
) => {
  return `/api/v1/salons/${id}/versions/${version}`
}

export const salonCrudGetVersion = async (
  id: ModelsSalonId,
  version: number,
  options?: RequestInit
): Promise<salonCrudGetVersionResponse> => {
  return customInstance<salonCrudGetVersionResponse>(
    getSalonCrudGetVersionUrl(id, version),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonCrudGetVersionQueryKey = (
  id?: ModelsSalonId,
  version?: number
) => {
  return [`/api/v1/salons/${id}/versions/${version}`] as const
}

export const getSalonCrudGetVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof salonCrudGetVersion>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  version: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetVersion>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSalonCrudGetVersionQueryKey(id, version)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonCrudGetVersion>>
  > = ({ signal }) =>
    salonCrudGetVersion(id, version, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!(id && version),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof salonCrudGetVersion>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonCrudGetVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonCrudGetVersion>>
>
export type SalonCrudGetVersionQueryError =
  | ModelsProblemDetails
  | ModelsProblemDetails

export function useSalonCrudGetVersion<
  TData = Awaited<ReturnType<typeof salonCrudGetVersion>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  version: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudGetVersion>>,
          TError,
          Awaited<ReturnType<typeof salonCrudGetVersion>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudGetVersion<
  TData = Awaited<ReturnType<typeof salonCrudGetVersion>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  version: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetVersion>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonCrudGetVersion>>,
          TError,
          Awaited<ReturnType<typeof salonCrudGetVersion>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonCrudGetVersion<
  TData = Awaited<ReturnType<typeof salonCrudGetVersion>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  version: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetVersion>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get {Name} version
 */

export function useSalonCrudGetVersion<
  TData = Awaited<ReturnType<typeof salonCrudGetVersion>>,
  TError = ModelsProblemDetails | ModelsProblemDetails,
>(
  id: ModelsSalonId,
  version: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonCrudGetVersion>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonCrudGetVersionQueryOptions(id, version, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
