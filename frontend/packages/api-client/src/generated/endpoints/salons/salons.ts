/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * (title)
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ModelsCreateSalonRequest,
  ModelsError,
  ModelsSalon,
  ModelsSalonId,
  ModelsUpdateSalonRequest,
  SalonOperationsList200,
  SalonOperationsListParams,
  SalonOperationsSearch200,
  SalonOperationsSearchParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary List all salons
 */
export type salonOperationsListResponse200 = {
  data: SalonOperationsList200
  status: 200
}

export type salonOperationsListResponseComposite =
  salonOperationsListResponse200

export type salonOperationsListResponse =
  salonOperationsListResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsListUrl = (
  params?: SalonOperationsListParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons?${stringifiedParams}`
    : `/api/v1/salons`
}

export const salonOperationsList = async (
  params?: SalonOperationsListParams,
  options?: RequestInit
): Promise<salonOperationsListResponse> => {
  return customInstance<salonOperationsListResponse>(
    getSalonOperationsListUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonOperationsListQueryKey = (
  params?: SalonOperationsListParams
) => {
  return [`/api/v1/salons`, ...(params ? [params] : [])] as const
}

export const getSalonOperationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof salonOperationsList>>,
  TError = unknown,
>(
  params?: SalonOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSalonOperationsListQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonOperationsList>>
  > = ({ signal }) => salonOperationsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salonOperationsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonOperationsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsList>>
>
export type SalonOperationsListQueryError = unknown

export function useSalonOperationsList<
  TData = Awaited<ReturnType<typeof salonOperationsList>>,
  TError = unknown,
>(
  params: undefined | SalonOperationsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsList>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsList<
  TData = Awaited<ReturnType<typeof salonOperationsList>>,
  TError = unknown,
>(
  params?: SalonOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsList>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsList<
  TData = Awaited<ReturnType<typeof salonOperationsList>>,
  TError = unknown,
>(
  params?: SalonOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List all salons
 */

export function useSalonOperationsList<
  TData = Awaited<ReturnType<typeof salonOperationsList>>,
  TError = unknown,
>(
  params?: SalonOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonOperationsListQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create a new salon
 */
export type salonOperationsCreateResponse201 = {
  data: ModelsSalon
  status: 201
}

export type salonOperationsCreateResponse400 = {
  data: ModelsError
  status: 400
}

export type salonOperationsCreateResponseComposite =
  | salonOperationsCreateResponse201
  | salonOperationsCreateResponse400

export type salonOperationsCreateResponse =
  salonOperationsCreateResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsCreateUrl = () => {
  return `/api/v1/salons`
}

export const salonOperationsCreate = async (
  modelsCreateSalonRequest: ModelsCreateSalonRequest,
  options?: RequestInit
): Promise<salonOperationsCreateResponse> => {
  return customInstance<salonOperationsCreateResponse>(
    getSalonOperationsCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsCreateSalonRequest),
    }
  )
}

export const getSalonOperationsCreateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonOperationsCreate>>,
    TError,
    { data: ModelsCreateSalonRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonOperationsCreate>>,
  TError,
  { data: ModelsCreateSalonRequest },
  TContext
> => {
  const mutationKey = ['salonOperationsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonOperationsCreate>>,
    { data: ModelsCreateSalonRequest }
  > = (props) => {
    const { data } = props ?? {}

    return salonOperationsCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonOperationsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsCreate>>
>
export type SalonOperationsCreateMutationBody = ModelsCreateSalonRequest
export type SalonOperationsCreateMutationError = ModelsError

/**
 * @summary Create a new salon
 */
export const useSalonOperationsCreate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonOperationsCreate>>,
      TError,
      { data: ModelsCreateSalonRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonOperationsCreate>>,
  TError,
  { data: ModelsCreateSalonRequest },
  TContext
> => {
  const mutationOptions = getSalonOperationsCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Search salons
 */
export type salonOperationsSearchResponse200 = {
  data: SalonOperationsSearch200
  status: 200
}

export type salonOperationsSearchResponseComposite =
  salonOperationsSearchResponse200

export type salonOperationsSearchResponse =
  salonOperationsSearchResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsSearchUrl = (
  params?: SalonOperationsSearchParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/search?${stringifiedParams}`
    : `/api/v1/salons/search`
}

export const salonOperationsSearch = async (
  params?: SalonOperationsSearchParams,
  options?: RequestInit
): Promise<salonOperationsSearchResponse> => {
  return customInstance<salonOperationsSearchResponse>(
    getSalonOperationsSearchUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonOperationsSearchQueryKey = (
  params?: SalonOperationsSearchParams
) => {
  return [`/api/v1/salons/search`, ...(params ? [params] : [])] as const
}

export const getSalonOperationsSearchQueryOptions = <
  TData = Awaited<ReturnType<typeof salonOperationsSearch>>,
  TError = unknown,
>(
  params?: SalonOperationsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsSearch>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSalonOperationsSearchQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonOperationsSearch>>
  > = ({ signal }) =>
    salonOperationsSearch(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof salonOperationsSearch>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonOperationsSearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsSearch>>
>
export type SalonOperationsSearchQueryError = unknown

export function useSalonOperationsSearch<
  TData = Awaited<ReturnType<typeof salonOperationsSearch>>,
  TError = unknown,
>(
  params: undefined | SalonOperationsSearchParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsSearch>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsSearch>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsSearch<
  TData = Awaited<ReturnType<typeof salonOperationsSearch>>,
  TError = unknown,
>(
  params?: SalonOperationsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsSearch>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsSearch>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsSearch>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsSearch<
  TData = Awaited<ReturnType<typeof salonOperationsSearch>>,
  TError = unknown,
>(
  params?: SalonOperationsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsSearch>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Search salons
 */

export function useSalonOperationsSearch<
  TData = Awaited<ReturnType<typeof salonOperationsSearch>>,
  TError = unknown,
>(
  params?: SalonOperationsSearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsSearch>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonOperationsSearchQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get salon by ID
 */
export type salonOperationsGetResponse200 = {
  data: ModelsSalon
  status: 200
}

export type salonOperationsGetResponse404 = {
  data: ModelsError
  status: 404
}

export type salonOperationsGetResponseComposite =
  | salonOperationsGetResponse200
  | salonOperationsGetResponse404

export type salonOperationsGetResponse = salonOperationsGetResponseComposite & {
  headers: Headers
}

export const getSalonOperationsGetUrl = (id: ModelsSalonId) => {
  return `/api/v1/salons/${id}`
}

export const salonOperationsGet = async (
  id: ModelsSalonId,
  options?: RequestInit
): Promise<salonOperationsGetResponse> => {
  return customInstance<salonOperationsGetResponse>(
    getSalonOperationsGetUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getSalonOperationsGetQueryKey = (id: ModelsSalonId) => {
  return [`/api/v1/salons/${id}`] as const
}

export const getSalonOperationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof salonOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSalonOperationsGetQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof salonOperationsGet>>
  > = ({ signal }) => salonOperationsGet(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof salonOperationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SalonOperationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsGet>>
>
export type SalonOperationsGetQueryError = ModelsError

export function useSalonOperationsGet<
  TData = Awaited<ReturnType<typeof salonOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsSalonId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGet<
  TData = Awaited<ReturnType<typeof salonOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof salonOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof salonOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSalonOperationsGet<
  TData = Awaited<ReturnType<typeof salonOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get salon by ID
 */

export function useSalonOperationsGet<
  TData = Awaited<ReturnType<typeof salonOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsSalonId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof salonOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSalonOperationsGetQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update salon
 */
export type salonOperationsUpdateResponse200 = {
  data: ModelsSalon
  status: 200
}

export type salonOperationsUpdateResponse400 = {
  data: ModelsError
  status: 400
}

export type salonOperationsUpdateResponseComposite =
  | salonOperationsUpdateResponse200
  | salonOperationsUpdateResponse400

export type salonOperationsUpdateResponse =
  salonOperationsUpdateResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsUpdateUrl = (id: ModelsSalonId) => {
  return `/api/v1/salons/${id}`
}

export const salonOperationsUpdate = async (
  id: ModelsSalonId,
  modelsUpdateSalonRequest: ModelsUpdateSalonRequest,
  options?: RequestInit
): Promise<salonOperationsUpdateResponse> => {
  return customInstance<salonOperationsUpdateResponse>(
    getSalonOperationsUpdateUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUpdateSalonRequest),
    }
  )
}

export const getSalonOperationsUpdateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonOperationsUpdate>>,
    TError,
    { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonOperationsUpdate>>,
  TError,
  { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
  TContext
> => {
  const mutationKey = ['salonOperationsUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonOperationsUpdate>>,
    { id: ModelsSalonId; data: ModelsUpdateSalonRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return salonOperationsUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonOperationsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsUpdate>>
>
export type SalonOperationsUpdateMutationBody = ModelsUpdateSalonRequest
export type SalonOperationsUpdateMutationError = ModelsError

/**
 * @summary Update salon
 */
export const useSalonOperationsUpdate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonOperationsUpdate>>,
      TError,
      { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonOperationsUpdate>>,
  TError,
  { id: ModelsSalonId; data: ModelsUpdateSalonRequest },
  TContext
> => {
  const mutationOptions = getSalonOperationsUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete salon
 */
export type salonOperationsDeleteResponse204 = {
  data: void
  status: 204
}

export type salonOperationsDeleteResponse404 = {
  data: ModelsError
  status: 404
}

export type salonOperationsDeleteResponseComposite =
  | salonOperationsDeleteResponse204
  | salonOperationsDeleteResponse404

export type salonOperationsDeleteResponse =
  salonOperationsDeleteResponseComposite & {
    headers: Headers
  }

export const getSalonOperationsDeleteUrl = (id: ModelsSalonId) => {
  return `/api/v1/salons/${id}`
}

export const salonOperationsDelete = async (
  id: ModelsSalonId,
  options?: RequestInit
): Promise<salonOperationsDeleteResponse> => {
  return customInstance<salonOperationsDeleteResponse>(
    getSalonOperationsDeleteUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getSalonOperationsDeleteMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof salonOperationsDelete>>,
    TError,
    { id: ModelsSalonId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof salonOperationsDelete>>,
  TError,
  { id: ModelsSalonId },
  TContext
> => {
  const mutationKey = ['salonOperationsDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof salonOperationsDelete>>,
    { id: ModelsSalonId }
  > = (props) => {
    const { id } = props ?? {}

    return salonOperationsDelete(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SalonOperationsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof salonOperationsDelete>>
>

export type SalonOperationsDeleteMutationError = ModelsError

/**
 * @summary Delete salon
 */
export const useSalonOperationsDelete = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof salonOperationsDelete>>,
      TError,
      { id: ModelsSalonId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof salonOperationsDelete>>,
  TError,
  { id: ModelsSalonId },
  TContext
> => {
  const mutationOptions = getSalonOperationsDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
