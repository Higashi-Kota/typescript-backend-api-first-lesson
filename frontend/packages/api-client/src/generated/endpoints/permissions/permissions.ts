/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Beauty Salon API
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 2.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  PermissionOperationsGetPermissionGroups200,
  PermissionOperationsGetPermissionsByResource200,
  PermissionOperationsListPermissions200,
  PermissionOperationsListPermissionsParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * List all permissions
 */
export type permissionOperationsListPermissionsResponse200 = {
  data: PermissionOperationsListPermissions200
  status: 200
}

export type permissionOperationsListPermissionsResponseComposite =
  permissionOperationsListPermissionsResponse200

export type permissionOperationsListPermissionsResponse =
  permissionOperationsListPermissionsResponseComposite & {
    headers: Headers
  }

export const getPermissionOperationsListPermissionsUrl = (
  params?: PermissionOperationsListPermissionsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/permissions?${stringifiedParams}`
    : `/permissions`
}

export const permissionOperationsListPermissions = async (
  params?: PermissionOperationsListPermissionsParams,
  options?: RequestInit
): Promise<permissionOperationsListPermissionsResponse> => {
  return customInstance<permissionOperationsListPermissionsResponse>(
    getPermissionOperationsListPermissionsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getPermissionOperationsListPermissionsQueryKey = (
  params?: PermissionOperationsListPermissionsParams
) => {
  return [`/permissions`, ...(params ? [params] : [])] as const
}

export const getPermissionOperationsListPermissionsQueryOptions = <
  TData = Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
  TError = unknown,
>(
  params?: PermissionOperationsListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getPermissionOperationsListPermissionsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof permissionOperationsListPermissions>>
  > = ({ signal }) =>
    permissionOperationsListPermissions(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PermissionOperationsListPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof permissionOperationsListPermissions>>
>
export type PermissionOperationsListPermissionsQueryError = unknown

export function usePermissionOperationsListPermissions<
  TData = Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
  TError = unknown,
>(
  params: undefined | PermissionOperationsListPermissionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
          TError,
          Awaited<ReturnType<typeof permissionOperationsListPermissions>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePermissionOperationsListPermissions<
  TData = Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
  TError = unknown,
>(
  params?: PermissionOperationsListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
          TError,
          Awaited<ReturnType<typeof permissionOperationsListPermissions>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePermissionOperationsListPermissions<
  TData = Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
  TError = unknown,
>(
  params?: PermissionOperationsListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function usePermissionOperationsListPermissions<
  TData = Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
  TError = unknown,
>(
  params?: PermissionOperationsListPermissionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsListPermissions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getPermissionOperationsListPermissionsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get permissions by resource
 */
export type permissionOperationsGetPermissionsByResourceResponse200 = {
  data: PermissionOperationsGetPermissionsByResource200
  status: 200
}

export type permissionOperationsGetPermissionsByResourceResponseComposite =
  permissionOperationsGetPermissionsByResourceResponse200

export type permissionOperationsGetPermissionsByResourceResponse =
  permissionOperationsGetPermissionsByResourceResponseComposite & {
    headers: Headers
  }

export const getPermissionOperationsGetPermissionsByResourceUrl = (
  resource: string
) => {
  return `/permissions/by-resource/${resource}`
}

export const permissionOperationsGetPermissionsByResource = async (
  resource: string,
  options?: RequestInit
): Promise<permissionOperationsGetPermissionsByResourceResponse> => {
  return customInstance<permissionOperationsGetPermissionsByResourceResponse>(
    getPermissionOperationsGetPermissionsByResourceUrl(resource),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getPermissionOperationsGetPermissionsByResourceQueryKey = (
  resource?: string
) => {
  return [`/permissions/by-resource/${resource}`] as const
}

export const getPermissionOperationsGetPermissionsByResourceQueryOptions = <
  TData = Awaited<
    ReturnType<typeof permissionOperationsGetPermissionsByResource>
  >,
  TError = unknown,
>(
  resource: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof permissionOperationsGetPermissionsByResource>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getPermissionOperationsGetPermissionsByResourceQueryKey(resource)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof permissionOperationsGetPermissionsByResource>>
  > = ({ signal }) =>
    permissionOperationsGetPermissionsByResource(resource, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!resource,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionOperationsGetPermissionsByResource>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PermissionOperationsGetPermissionsByResourceQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof permissionOperationsGetPermissionsByResource>>
  >
export type PermissionOperationsGetPermissionsByResourceQueryError = unknown

export function usePermissionOperationsGetPermissionsByResource<
  TData = Awaited<
    ReturnType<typeof permissionOperationsGetPermissionsByResource>
  >,
  TError = unknown,
>(
  resource: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof permissionOperationsGetPermissionsByResource>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof permissionOperationsGetPermissionsByResource>
          >,
          TError,
          Awaited<
            ReturnType<typeof permissionOperationsGetPermissionsByResource>
          >
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePermissionOperationsGetPermissionsByResource<
  TData = Awaited<
    ReturnType<typeof permissionOperationsGetPermissionsByResource>
  >,
  TError = unknown,
>(
  resource: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof permissionOperationsGetPermissionsByResource>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof permissionOperationsGetPermissionsByResource>
          >,
          TError,
          Awaited<
            ReturnType<typeof permissionOperationsGetPermissionsByResource>
          >
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePermissionOperationsGetPermissionsByResource<
  TData = Awaited<
    ReturnType<typeof permissionOperationsGetPermissionsByResource>
  >,
  TError = unknown,
>(
  resource: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof permissionOperationsGetPermissionsByResource>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function usePermissionOperationsGetPermissionsByResource<
  TData = Awaited<
    ReturnType<typeof permissionOperationsGetPermissionsByResource>
  >,
  TError = unknown,
>(
  resource: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof permissionOperationsGetPermissionsByResource>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getPermissionOperationsGetPermissionsByResourceQueryOptions(
      resource,
      options
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get permission groups
 */
export type permissionOperationsGetPermissionGroupsResponse200 = {
  data: PermissionOperationsGetPermissionGroups200
  status: 200
}

export type permissionOperationsGetPermissionGroupsResponseComposite =
  permissionOperationsGetPermissionGroupsResponse200

export type permissionOperationsGetPermissionGroupsResponse =
  permissionOperationsGetPermissionGroupsResponseComposite & {
    headers: Headers
  }

export const getPermissionOperationsGetPermissionGroupsUrl = () => {
  return `/permissions/groups`
}

export const permissionOperationsGetPermissionGroups = async (
  options?: RequestInit
): Promise<permissionOperationsGetPermissionGroupsResponse> => {
  return customInstance<permissionOperationsGetPermissionGroupsResponse>(
    getPermissionOperationsGetPermissionGroupsUrl(),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getPermissionOperationsGetPermissionGroupsQueryKey = () => {
  return [`/permissions/groups`] as const
}

export const getPermissionOperationsGetPermissionGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getPermissionOperationsGetPermissionGroupsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>
  > = ({ signal }) =>
    permissionOperationsGetPermissionGroups({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PermissionOperationsGetPermissionGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>
>
export type PermissionOperationsGetPermissionGroupsQueryError = unknown

export function usePermissionOperationsGetPermissionGroups<
  TData = Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
          TError,
          Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePermissionOperationsGetPermissionGroups<
  TData = Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
          TError,
          Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePermissionOperationsGetPermissionGroups<
  TData = Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function usePermissionOperationsGetPermissionGroups<
  TData = Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof permissionOperationsGetPermissionGroups>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getPermissionOperationsGetPermissionGroupsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
