/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * (title)
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  GlobalStaffOperationsSearchStaff200,
  GlobalStaffOperationsSearchStaffParams,
  ModelsCreateStaffRequest,
  ModelsError,
  ModelsSalonId,
  ModelsStaff,
  ModelsStaffAvailability,
  ModelsStaffId,
  ModelsUpdateStaffRequest,
  StaffOperationsGetAvailabilityParams,
  StaffOperationsList200,
  StaffOperationsListParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary List staff members
 */
export type staffOperationsListResponse200 = {
  data: StaffOperationsList200
  status: 200
}

export type staffOperationsListResponseComposite =
  staffOperationsListResponse200

export type staffOperationsListResponse =
  staffOperationsListResponseComposite & {
    headers: Headers
  }

export const getStaffOperationsListUrl = (
  salonId: ModelsSalonId,
  params?: StaffOperationsListParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${salonId}/staff?${stringifiedParams}`
    : `/api/v1/salons/${salonId}/staff`
}

export const staffOperationsList = async (
  salonId: ModelsSalonId,
  params?: StaffOperationsListParams,
  options?: RequestInit
): Promise<staffOperationsListResponse> => {
  return customInstance<staffOperationsListResponse>(
    getStaffOperationsListUrl(salonId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getStaffOperationsListQueryKey = (
  salonId: ModelsSalonId,
  params?: StaffOperationsListParams
) => {
  return [
    `/api/v1/salons/${salonId}/staff`,
    ...(params ? [params] : []),
  ] as const
}

export const getStaffOperationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof staffOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: StaffOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getStaffOperationsListQueryKey(salonId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof staffOperationsList>>
  > = ({ signal }) =>
    staffOperationsList(salonId, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!salonId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof staffOperationsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StaffOperationsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof staffOperationsList>>
>
export type StaffOperationsListQueryError = unknown

export function useStaffOperationsList<
  TData = Awaited<ReturnType<typeof staffOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params: undefined | StaffOperationsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffOperationsList>>,
          TError,
          Awaited<ReturnType<typeof staffOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffOperationsList<
  TData = Awaited<ReturnType<typeof staffOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: StaffOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffOperationsList>>,
          TError,
          Awaited<ReturnType<typeof staffOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffOperationsList<
  TData = Awaited<ReturnType<typeof staffOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: StaffOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List staff members
 */

export function useStaffOperationsList<
  TData = Awaited<ReturnType<typeof staffOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: StaffOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getStaffOperationsListQueryOptions(
    salonId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create staff member
 */
export type staffOperationsCreateResponse201 = {
  data: ModelsStaff
  status: 201
}

export type staffOperationsCreateResponse400 = {
  data: ModelsError
  status: 400
}

export type staffOperationsCreateResponseComposite =
  | staffOperationsCreateResponse201
  | staffOperationsCreateResponse400

export type staffOperationsCreateResponse =
  staffOperationsCreateResponseComposite & {
    headers: Headers
  }

export const getStaffOperationsCreateUrl = (salonId: ModelsSalonId) => {
  return `/api/v1/salons/${salonId}/staff`
}

export const staffOperationsCreate = async (
  salonId: ModelsSalonId,
  modelsCreateStaffRequest: ModelsCreateStaffRequest,
  options?: RequestInit
): Promise<staffOperationsCreateResponse> => {
  return customInstance<staffOperationsCreateResponse>(
    getStaffOperationsCreateUrl(salonId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsCreateStaffRequest),
    }
  )
}

export const getStaffOperationsCreateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof staffOperationsCreate>>,
    TError,
    { salonId: ModelsSalonId; data: ModelsCreateStaffRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof staffOperationsCreate>>,
  TError,
  { salonId: ModelsSalonId; data: ModelsCreateStaffRequest },
  TContext
> => {
  const mutationKey = ['staffOperationsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof staffOperationsCreate>>,
    { salonId: ModelsSalonId; data: ModelsCreateStaffRequest }
  > = (props) => {
    const { salonId, data } = props ?? {}

    return staffOperationsCreate(salonId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type StaffOperationsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof staffOperationsCreate>>
>
export type StaffOperationsCreateMutationBody = ModelsCreateStaffRequest
export type StaffOperationsCreateMutationError = ModelsError

/**
 * @summary Create staff member
 */
export const useStaffOperationsCreate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof staffOperationsCreate>>,
      TError,
      { salonId: ModelsSalonId; data: ModelsCreateStaffRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof staffOperationsCreate>>,
  TError,
  { salonId: ModelsSalonId; data: ModelsCreateStaffRequest },
  TContext
> => {
  const mutationOptions = getStaffOperationsCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get staff member
 */
export type staffOperationsGetResponse200 = {
  data: ModelsStaff
  status: 200
}

export type staffOperationsGetResponse404 = {
  data: ModelsError
  status: 404
}

export type staffOperationsGetResponseComposite =
  | staffOperationsGetResponse200
  | staffOperationsGetResponse404

export type staffOperationsGetResponse = staffOperationsGetResponseComposite & {
  headers: Headers
}

export const getStaffOperationsGetUrl = (
  salonId: ModelsSalonId,
  id: ModelsStaffId
) => {
  return `/api/v1/salons/${salonId}/staff/${id}`
}

export const staffOperationsGet = async (
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  options?: RequestInit
): Promise<staffOperationsGetResponse> => {
  return customInstance<staffOperationsGetResponse>(
    getStaffOperationsGetUrl(salonId, id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getStaffOperationsGetQueryKey = (
  salonId: ModelsSalonId,
  id: ModelsStaffId
) => {
  return [`/api/v1/salons/${salonId}/staff/${id}`] as const
}

export const getStaffOperationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof staffOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getStaffOperationsGetQueryKey(salonId, id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof staffOperationsGet>>
  > = ({ signal }) =>
    staffOperationsGet(salonId, id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!(salonId && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof staffOperationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StaffOperationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof staffOperationsGet>>
>
export type StaffOperationsGetQueryError = ModelsError

export function useStaffOperationsGet<
  TData = Awaited<ReturnType<typeof staffOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof staffOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffOperationsGet<
  TData = Awaited<ReturnType<typeof staffOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof staffOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffOperationsGet<
  TData = Awaited<ReturnType<typeof staffOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get staff member
 */

export function useStaffOperationsGet<
  TData = Awaited<ReturnType<typeof staffOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getStaffOperationsGetQueryOptions(salonId, id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update staff member
 */
export type staffOperationsUpdateResponse200 = {
  data: ModelsStaff
  status: 200
}

export type staffOperationsUpdateResponse400 = {
  data: ModelsError
  status: 400
}

export type staffOperationsUpdateResponseComposite =
  | staffOperationsUpdateResponse200
  | staffOperationsUpdateResponse400

export type staffOperationsUpdateResponse =
  staffOperationsUpdateResponseComposite & {
    headers: Headers
  }

export const getStaffOperationsUpdateUrl = (
  salonId: ModelsSalonId,
  id: ModelsStaffId
) => {
  return `/api/v1/salons/${salonId}/staff/${id}`
}

export const staffOperationsUpdate = async (
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  modelsUpdateStaffRequest: ModelsUpdateStaffRequest,
  options?: RequestInit
): Promise<staffOperationsUpdateResponse> => {
  return customInstance<staffOperationsUpdateResponse>(
    getStaffOperationsUpdateUrl(salonId, id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUpdateStaffRequest),
    }
  )
}

export const getStaffOperationsUpdateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof staffOperationsUpdate>>,
    TError,
    {
      salonId: ModelsSalonId
      id: ModelsStaffId
      data: ModelsUpdateStaffRequest
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof staffOperationsUpdate>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsStaffId; data: ModelsUpdateStaffRequest },
  TContext
> => {
  const mutationKey = ['staffOperationsUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof staffOperationsUpdate>>,
    {
      salonId: ModelsSalonId
      id: ModelsStaffId
      data: ModelsUpdateStaffRequest
    }
  > = (props) => {
    const { salonId, id, data } = props ?? {}

    return staffOperationsUpdate(salonId, id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type StaffOperationsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof staffOperationsUpdate>>
>
export type StaffOperationsUpdateMutationBody = ModelsUpdateStaffRequest
export type StaffOperationsUpdateMutationError = ModelsError

/**
 * @summary Update staff member
 */
export const useStaffOperationsUpdate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof staffOperationsUpdate>>,
      TError,
      {
        salonId: ModelsSalonId
        id: ModelsStaffId
        data: ModelsUpdateStaffRequest
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof staffOperationsUpdate>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsStaffId; data: ModelsUpdateStaffRequest },
  TContext
> => {
  const mutationOptions = getStaffOperationsUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete staff member
 */
export type staffOperationsDeleteResponse204 = {
  data: void
  status: 204
}

export type staffOperationsDeleteResponse404 = {
  data: ModelsError
  status: 404
}

export type staffOperationsDeleteResponseComposite =
  | staffOperationsDeleteResponse204
  | staffOperationsDeleteResponse404

export type staffOperationsDeleteResponse =
  staffOperationsDeleteResponseComposite & {
    headers: Headers
  }

export const getStaffOperationsDeleteUrl = (
  salonId: ModelsSalonId,
  id: ModelsStaffId
) => {
  return `/api/v1/salons/${salonId}/staff/${id}`
}

export const staffOperationsDelete = async (
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  options?: RequestInit
): Promise<staffOperationsDeleteResponse> => {
  return customInstance<staffOperationsDeleteResponse>(
    getStaffOperationsDeleteUrl(salonId, id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getStaffOperationsDeleteMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof staffOperationsDelete>>,
    TError,
    { salonId: ModelsSalonId; id: ModelsStaffId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof staffOperationsDelete>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsStaffId },
  TContext
> => {
  const mutationKey = ['staffOperationsDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof staffOperationsDelete>>,
    { salonId: ModelsSalonId; id: ModelsStaffId }
  > = (props) => {
    const { salonId, id } = props ?? {}

    return staffOperationsDelete(salonId, id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type StaffOperationsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof staffOperationsDelete>>
>

export type StaffOperationsDeleteMutationError = ModelsError

/**
 * @summary Delete staff member
 */
export const useStaffOperationsDelete = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof staffOperationsDelete>>,
      TError,
      { salonId: ModelsSalonId; id: ModelsStaffId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof staffOperationsDelete>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsStaffId },
  TContext
> => {
  const mutationOptions = getStaffOperationsDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get staff availability
 */
export type staffOperationsGetAvailabilityResponse200 = {
  data: ModelsStaffAvailability[]
  status: 200
}

export type staffOperationsGetAvailabilityResponseComposite =
  staffOperationsGetAvailabilityResponse200

export type staffOperationsGetAvailabilityResponse =
  staffOperationsGetAvailabilityResponseComposite & {
    headers: Headers
  }

export const getStaffOperationsGetAvailabilityUrl = (
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${salonId}/staff/${id}/availability?${stringifiedParams}`
    : `/api/v1/salons/${salonId}/staff/${id}/availability`
}

export const staffOperationsGetAvailability = async (
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams,
  options?: RequestInit
): Promise<staffOperationsGetAvailabilityResponse> => {
  return customInstance<staffOperationsGetAvailabilityResponse>(
    getStaffOperationsGetAvailabilityUrl(salonId, id, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getStaffOperationsGetAvailabilityQueryKey = (
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams
) => {
  return [
    `/api/v1/salons/${salonId}/staff/${id}/availability`,
    ...(params ? [params] : []),
  ] as const
}

export const getStaffOperationsGetAvailabilityQueryOptions = <
  TData = Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getStaffOperationsGetAvailabilityQueryKey(salonId, id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof staffOperationsGetAvailability>>
  > = ({ signal }) =>
    staffOperationsGetAvailability(salonId, id, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!(salonId && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StaffOperationsGetAvailabilityQueryResult = NonNullable<
  Awaited<ReturnType<typeof staffOperationsGetAvailability>>
>
export type StaffOperationsGetAvailabilityQueryError = unknown

export function useStaffOperationsGetAvailability<
  TData = Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
          TError,
          Awaited<ReturnType<typeof staffOperationsGetAvailability>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffOperationsGetAvailability<
  TData = Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
          TError,
          Awaited<ReturnType<typeof staffOperationsGetAvailability>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useStaffOperationsGetAvailability<
  TData = Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get staff availability
 */

export function useStaffOperationsGetAvailability<
  TData = Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  params: StaffOperationsGetAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof staffOperationsGetAvailability>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getStaffOperationsGetAvailabilityQueryOptions(
    salonId,
    id,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update staff availability
 */
export type staffOperationsUpdateAvailabilityResponse200 = {
  data: ModelsStaffAvailability[]
  status: 200
}

export type staffOperationsUpdateAvailabilityResponse400 = {
  data: ModelsError
  status: 400
}

export type staffOperationsUpdateAvailabilityResponseComposite =
  | staffOperationsUpdateAvailabilityResponse200
  | staffOperationsUpdateAvailabilityResponse400

export type staffOperationsUpdateAvailabilityResponse =
  staffOperationsUpdateAvailabilityResponseComposite & {
    headers: Headers
  }

export const getStaffOperationsUpdateAvailabilityUrl = (
  salonId: ModelsSalonId,
  id: ModelsStaffId
) => {
  return `/api/v1/salons/${salonId}/staff/${id}/availability`
}

export const staffOperationsUpdateAvailability = async (
  salonId: ModelsSalonId,
  id: ModelsStaffId,
  modelsStaffAvailability: ModelsStaffAvailability[],
  options?: RequestInit
): Promise<staffOperationsUpdateAvailabilityResponse> => {
  return customInstance<staffOperationsUpdateAvailabilityResponse>(
    getStaffOperationsUpdateAvailabilityUrl(salonId, id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsStaffAvailability),
    }
  )
}

export const getStaffOperationsUpdateAvailabilityMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof staffOperationsUpdateAvailability>>,
    TError,
    {
      salonId: ModelsSalonId
      id: ModelsStaffId
      data: ModelsStaffAvailability[]
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof staffOperationsUpdateAvailability>>,
  TError,
  {
    salonId: ModelsSalonId
    id: ModelsStaffId
    data: ModelsStaffAvailability[]
  },
  TContext
> => {
  const mutationKey = ['staffOperationsUpdateAvailability']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof staffOperationsUpdateAvailability>>,
    {
      salonId: ModelsSalonId
      id: ModelsStaffId
      data: ModelsStaffAvailability[]
    }
  > = (props) => {
    const { salonId, id, data } = props ?? {}

    return staffOperationsUpdateAvailability(salonId, id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type StaffOperationsUpdateAvailabilityMutationResult = NonNullable<
  Awaited<ReturnType<typeof staffOperationsUpdateAvailability>>
>
export type StaffOperationsUpdateAvailabilityMutationBody =
  ModelsStaffAvailability[]
export type StaffOperationsUpdateAvailabilityMutationError = ModelsError

/**
 * @summary Update staff availability
 */
export const useStaffOperationsUpdateAvailability = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof staffOperationsUpdateAvailability>>,
      TError,
      {
        salonId: ModelsSalonId
        id: ModelsStaffId
        data: ModelsStaffAvailability[]
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof staffOperationsUpdateAvailability>>,
  TError,
  {
    salonId: ModelsSalonId
    id: ModelsStaffId
    data: ModelsStaffAvailability[]
  },
  TContext
> => {
  const mutationOptions =
    getStaffOperationsUpdateAvailabilityMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Search staff across all salons
 */
export type globalStaffOperationsSearchStaffResponse200 = {
  data: GlobalStaffOperationsSearchStaff200
  status: 200
}

export type globalStaffOperationsSearchStaffResponseComposite =
  globalStaffOperationsSearchStaffResponse200

export type globalStaffOperationsSearchStaffResponse =
  globalStaffOperationsSearchStaffResponseComposite & {
    headers: Headers
  }

export const getGlobalStaffOperationsSearchStaffUrl = (
  params?: GlobalStaffOperationsSearchStaffParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/staff/search?${stringifiedParams}`
    : `/api/v1/staff/search`
}

export const globalStaffOperationsSearchStaff = async (
  params?: GlobalStaffOperationsSearchStaffParams,
  options?: RequestInit
): Promise<globalStaffOperationsSearchStaffResponse> => {
  return customInstance<globalStaffOperationsSearchStaffResponse>(
    getGlobalStaffOperationsSearchStaffUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getGlobalStaffOperationsSearchStaffQueryKey = (
  params?: GlobalStaffOperationsSearchStaffParams
) => {
  return [`/api/v1/staff/search`, ...(params ? [params] : [])] as const
}

export const getGlobalStaffOperationsSearchStaffQueryOptions = <
  TData = Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
  TError = unknown,
>(
  params?: GlobalStaffOperationsSearchStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGlobalStaffOperationsSearchStaffQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>
  > = ({ signal }) =>
    globalStaffOperationsSearchStaff(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GlobalStaffOperationsSearchStaffQueryResult = NonNullable<
  Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>
>
export type GlobalStaffOperationsSearchStaffQueryError = unknown

export function useGlobalStaffOperationsSearchStaff<
  TData = Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
  TError = unknown,
>(
  params: undefined | GlobalStaffOperationsSearchStaffParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
          TError,
          Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGlobalStaffOperationsSearchStaff<
  TData = Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
  TError = unknown,
>(
  params?: GlobalStaffOperationsSearchStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
          TError,
          Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGlobalStaffOperationsSearchStaff<
  TData = Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
  TError = unknown,
>(
  params?: GlobalStaffOperationsSearchStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Search staff across all salons
 */

export function useGlobalStaffOperationsSearchStaff<
  TData = Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
  TError = unknown,
>(
  params?: GlobalStaffOperationsSearchStaffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof globalStaffOperationsSearchStaff>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGlobalStaffOperationsSearchStaffQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
