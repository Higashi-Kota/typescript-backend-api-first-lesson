/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * (title)
 * Comprehensive API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, and reviews.
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  CustomerOperationsGetBookings200,
  CustomerOperationsGetBookingsParams,
  CustomerOperationsGetReservations200,
  CustomerOperationsGetReservationsParams,
  CustomerOperationsList200,
  CustomerOperationsListParams,
  CustomerOperationsMergeBody,
  ModelsCreateCustomerRequest,
  ModelsCustomer,
  ModelsCustomerId,
  ModelsCustomerProfile,
  ModelsError,
  ModelsUpdateCustomerRequest,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary List customers
 */
export type customerOperationsListResponse200 = {
  data: CustomerOperationsList200
  status: 200
}

export type customerOperationsListResponseComposite =
  customerOperationsListResponse200

export type customerOperationsListResponse =
  customerOperationsListResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsListUrl = (
  params?: CustomerOperationsListParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/customers?${stringifiedParams}`
    : `/api/v1/customers`
}

export const customerOperationsList = async (
  params?: CustomerOperationsListParams,
  options?: RequestInit
): Promise<customerOperationsListResponse> => {
  return customInstance<customerOperationsListResponse>(
    getCustomerOperationsListUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getCustomerOperationsListQueryKey = (
  params?: CustomerOperationsListParams
) => {
  return [`/api/v1/customers`, ...(params ? [params] : [])] as const
}

export const getCustomerOperationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof customerOperationsList>>,
  TError = unknown,
>(
  params?: CustomerOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCustomerOperationsListQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof customerOperationsList>>
  > = ({ signal }) =>
    customerOperationsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof customerOperationsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerOperationsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsList>>
>
export type CustomerOperationsListQueryError = unknown

export function useCustomerOperationsList<
  TData = Awaited<ReturnType<typeof customerOperationsList>>,
  TError = unknown,
>(
  params: undefined | CustomerOperationsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsList>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsList<
  TData = Awaited<ReturnType<typeof customerOperationsList>>,
  TError = unknown,
>(
  params?: CustomerOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsList>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsList<
  TData = Awaited<ReturnType<typeof customerOperationsList>>,
  TError = unknown,
>(
  params?: CustomerOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List customers
 */

export function useCustomerOperationsList<
  TData = Awaited<ReturnType<typeof customerOperationsList>>,
  TError = unknown,
>(
  params?: CustomerOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCustomerOperationsListQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create customer
 */
export type customerOperationsCreateResponse201 = {
  data: ModelsCustomer
  status: 201
}

export type customerOperationsCreateResponse400 = {
  data: ModelsError
  status: 400
}

export type customerOperationsCreateResponseComposite =
  | customerOperationsCreateResponse201
  | customerOperationsCreateResponse400

export type customerOperationsCreateResponse =
  customerOperationsCreateResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsCreateUrl = () => {
  return `/api/v1/customers`
}

export const customerOperationsCreate = async (
  modelsCreateCustomerRequest: ModelsCreateCustomerRequest,
  options?: RequestInit
): Promise<customerOperationsCreateResponse> => {
  return customInstance<customerOperationsCreateResponse>(
    getCustomerOperationsCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsCreateCustomerRequest),
    }
  )
}

export const getCustomerOperationsCreateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof customerOperationsCreate>>,
    TError,
    { data: ModelsCreateCustomerRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof customerOperationsCreate>>,
  TError,
  { data: ModelsCreateCustomerRequest },
  TContext
> => {
  const mutationKey = ['customerOperationsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof customerOperationsCreate>>,
    { data: ModelsCreateCustomerRequest }
  > = (props) => {
    const { data } = props ?? {}

    return customerOperationsCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CustomerOperationsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsCreate>>
>
export type CustomerOperationsCreateMutationBody = ModelsCreateCustomerRequest
export type CustomerOperationsCreateMutationError = ModelsError

/**
 * @summary Create customer
 */
export const useCustomerOperationsCreate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof customerOperationsCreate>>,
      TError,
      { data: ModelsCreateCustomerRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof customerOperationsCreate>>,
  TError,
  { data: ModelsCreateCustomerRequest },
  TContext
> => {
  const mutationOptions = getCustomerOperationsCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Merge customer records
 */
export type customerOperationsMergeResponse200 = {
  data: ModelsCustomer
  status: 200
}

export type customerOperationsMergeResponse404 = {
  data: ModelsError
  status: 404
}

export type customerOperationsMergeResponseComposite =
  | customerOperationsMergeResponse200
  | customerOperationsMergeResponse404

export type customerOperationsMergeResponse =
  customerOperationsMergeResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsMergeUrl = () => {
  return `/api/v1/customers/merge`
}

export const customerOperationsMerge = async (
  customerOperationsMergeBody: CustomerOperationsMergeBody,
  options?: RequestInit
): Promise<customerOperationsMergeResponse> => {
  return customInstance<customerOperationsMergeResponse>(
    getCustomerOperationsMergeUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(customerOperationsMergeBody),
    }
  )
}

export const getCustomerOperationsMergeMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof customerOperationsMerge>>,
    TError,
    { data: CustomerOperationsMergeBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof customerOperationsMerge>>,
  TError,
  { data: CustomerOperationsMergeBody },
  TContext
> => {
  const mutationKey = ['customerOperationsMerge']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof customerOperationsMerge>>,
    { data: CustomerOperationsMergeBody }
  > = (props) => {
    const { data } = props ?? {}

    return customerOperationsMerge(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CustomerOperationsMergeMutationResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsMerge>>
>
export type CustomerOperationsMergeMutationBody = CustomerOperationsMergeBody
export type CustomerOperationsMergeMutationError = ModelsError

/**
 * @summary Merge customer records
 */
export const useCustomerOperationsMerge = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof customerOperationsMerge>>,
      TError,
      { data: CustomerOperationsMergeBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof customerOperationsMerge>>,
  TError,
  { data: CustomerOperationsMergeBody },
  TContext
> => {
  const mutationOptions = getCustomerOperationsMergeMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get customer
 */
export type customerOperationsGetResponse200 = {
  data: ModelsCustomer
  status: 200
}

export type customerOperationsGetResponse404 = {
  data: ModelsError
  status: 404
}

export type customerOperationsGetResponseComposite =
  | customerOperationsGetResponse200
  | customerOperationsGetResponse404

export type customerOperationsGetResponse =
  customerOperationsGetResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsGetUrl = (id: ModelsCustomerId) => {
  return `/api/v1/customers/${id}`
}

export const customerOperationsGet = async (
  id: ModelsCustomerId,
  options?: RequestInit
): Promise<customerOperationsGetResponse> => {
  return customInstance<customerOperationsGetResponse>(
    getCustomerOperationsGetUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getCustomerOperationsGetQueryKey = (id: ModelsCustomerId) => {
  return [`/api/v1/customers/${id}`] as const
}

export const getCustomerOperationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof customerOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCustomerOperationsGetQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof customerOperationsGet>>
  > = ({ signal }) => customerOperationsGet(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof customerOperationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerOperationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsGet>>
>
export type CustomerOperationsGetQueryError = ModelsError

export function useCustomerOperationsGet<
  TData = Awaited<ReturnType<typeof customerOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGet<
  TData = Awaited<ReturnType<typeof customerOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGet<
  TData = Awaited<ReturnType<typeof customerOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get customer
 */

export function useCustomerOperationsGet<
  TData = Awaited<ReturnType<typeof customerOperationsGet>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCustomerOperationsGetQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update customer
 */
export type customerOperationsUpdateResponse200 = {
  data: ModelsCustomer
  status: 200
}

export type customerOperationsUpdateResponse400 = {
  data: ModelsError
  status: 400
}

export type customerOperationsUpdateResponseComposite =
  | customerOperationsUpdateResponse200
  | customerOperationsUpdateResponse400

export type customerOperationsUpdateResponse =
  customerOperationsUpdateResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsUpdateUrl = (id: ModelsCustomerId) => {
  return `/api/v1/customers/${id}`
}

export const customerOperationsUpdate = async (
  id: ModelsCustomerId,
  modelsUpdateCustomerRequest: ModelsUpdateCustomerRequest,
  options?: RequestInit
): Promise<customerOperationsUpdateResponse> => {
  return customInstance<customerOperationsUpdateResponse>(
    getCustomerOperationsUpdateUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUpdateCustomerRequest),
    }
  )
}

export const getCustomerOperationsUpdateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof customerOperationsUpdate>>,
    TError,
    { id: ModelsCustomerId; data: ModelsUpdateCustomerRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof customerOperationsUpdate>>,
  TError,
  { id: ModelsCustomerId; data: ModelsUpdateCustomerRequest },
  TContext
> => {
  const mutationKey = ['customerOperationsUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof customerOperationsUpdate>>,
    { id: ModelsCustomerId; data: ModelsUpdateCustomerRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return customerOperationsUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CustomerOperationsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsUpdate>>
>
export type CustomerOperationsUpdateMutationBody = ModelsUpdateCustomerRequest
export type CustomerOperationsUpdateMutationError = ModelsError

/**
 * @summary Update customer
 */
export const useCustomerOperationsUpdate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof customerOperationsUpdate>>,
      TError,
      { id: ModelsCustomerId; data: ModelsUpdateCustomerRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof customerOperationsUpdate>>,
  TError,
  { id: ModelsCustomerId; data: ModelsUpdateCustomerRequest },
  TContext
> => {
  const mutationOptions = getCustomerOperationsUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete customer
 */
export type customerOperationsDeleteResponse204 = {
  data: void
  status: 204
}

export type customerOperationsDeleteResponse404 = {
  data: ModelsError
  status: 404
}

export type customerOperationsDeleteResponseComposite =
  | customerOperationsDeleteResponse204
  | customerOperationsDeleteResponse404

export type customerOperationsDeleteResponse =
  customerOperationsDeleteResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsDeleteUrl = (id: ModelsCustomerId) => {
  return `/api/v1/customers/${id}`
}

export const customerOperationsDelete = async (
  id: ModelsCustomerId,
  options?: RequestInit
): Promise<customerOperationsDeleteResponse> => {
  return customInstance<customerOperationsDeleteResponse>(
    getCustomerOperationsDeleteUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getCustomerOperationsDeleteMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof customerOperationsDelete>>,
    TError,
    { id: ModelsCustomerId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof customerOperationsDelete>>,
  TError,
  { id: ModelsCustomerId },
  TContext
> => {
  const mutationKey = ['customerOperationsDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof customerOperationsDelete>>,
    { id: ModelsCustomerId }
  > = (props) => {
    const { id } = props ?? {}

    return customerOperationsDelete(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CustomerOperationsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsDelete>>
>

export type CustomerOperationsDeleteMutationError = ModelsError

/**
 * @summary Delete customer
 */
export const useCustomerOperationsDelete = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof customerOperationsDelete>>,
      TError,
      { id: ModelsCustomerId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof customerOperationsDelete>>,
  TError,
  { id: ModelsCustomerId },
  TContext
> => {
  const mutationOptions = getCustomerOperationsDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get customer bookings
 */
export type customerOperationsGetBookingsResponse200 = {
  data: CustomerOperationsGetBookings200
  status: 200
}

export type customerOperationsGetBookingsResponseComposite =
  customerOperationsGetBookingsResponse200

export type customerOperationsGetBookingsResponse =
  customerOperationsGetBookingsResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsGetBookingsUrl = (
  id: ModelsCustomerId,
  params?: CustomerOperationsGetBookingsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/customers/${id}/bookings?${stringifiedParams}`
    : `/api/v1/customers/${id}/bookings`
}

export const customerOperationsGetBookings = async (
  id: ModelsCustomerId,
  params?: CustomerOperationsGetBookingsParams,
  options?: RequestInit
): Promise<customerOperationsGetBookingsResponse> => {
  return customInstance<customerOperationsGetBookingsResponse>(
    getCustomerOperationsGetBookingsUrl(id, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getCustomerOperationsGetBookingsQueryKey = (
  id: ModelsCustomerId,
  params?: CustomerOperationsGetBookingsParams
) => {
  return [
    `/api/v1/customers/${id}/bookings`,
    ...(params ? [params] : []),
  ] as const
}

export const getCustomerOperationsGetBookingsQueryOptions = <
  TData = Awaited<ReturnType<typeof customerOperationsGetBookings>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetBookingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetBookings>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getCustomerOperationsGetBookingsQueryKey(id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof customerOperationsGetBookings>>
  > = ({ signal }) =>
    customerOperationsGetBookings(id, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof customerOperationsGetBookings>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerOperationsGetBookingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsGetBookings>>
>
export type CustomerOperationsGetBookingsQueryError = unknown

export function useCustomerOperationsGetBookings<
  TData = Awaited<ReturnType<typeof customerOperationsGetBookings>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params: undefined | CustomerOperationsGetBookingsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetBookings>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGetBookings>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGetBookings>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGetBookings<
  TData = Awaited<ReturnType<typeof customerOperationsGetBookings>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetBookingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetBookings>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGetBookings>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGetBookings>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGetBookings<
  TData = Awaited<ReturnType<typeof customerOperationsGetBookings>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetBookingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetBookings>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get customer bookings
 */

export function useCustomerOperationsGetBookings<
  TData = Awaited<ReturnType<typeof customerOperationsGetBookings>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetBookingsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetBookings>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCustomerOperationsGetBookingsQueryOptions(
    id,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get customer profile
 */
export type customerOperationsGetProfileResponse200 = {
  data: ModelsCustomerProfile
  status: 200
}

export type customerOperationsGetProfileResponse404 = {
  data: ModelsError
  status: 404
}

export type customerOperationsGetProfileResponseComposite =
  | customerOperationsGetProfileResponse200
  | customerOperationsGetProfileResponse404

export type customerOperationsGetProfileResponse =
  customerOperationsGetProfileResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsGetProfileUrl = (id: ModelsCustomerId) => {
  return `/api/v1/customers/${id}/profile`
}

export const customerOperationsGetProfile = async (
  id: ModelsCustomerId,
  options?: RequestInit
): Promise<customerOperationsGetProfileResponse> => {
  return customInstance<customerOperationsGetProfileResponse>(
    getCustomerOperationsGetProfileUrl(id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getCustomerOperationsGetProfileQueryKey = (
  id: ModelsCustomerId
) => {
  return [`/api/v1/customers/${id}/profile`] as const
}

export const getCustomerOperationsGetProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof customerOperationsGetProfile>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetProfile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCustomerOperationsGetProfileQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof customerOperationsGetProfile>>
  > = ({ signal }) =>
    customerOperationsGetProfile(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof customerOperationsGetProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerOperationsGetProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsGetProfile>>
>
export type CustomerOperationsGetProfileQueryError = ModelsError

export function useCustomerOperationsGetProfile<
  TData = Awaited<ReturnType<typeof customerOperationsGetProfile>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGetProfile>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGetProfile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGetProfile<
  TData = Awaited<ReturnType<typeof customerOperationsGetProfile>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGetProfile>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGetProfile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGetProfile<
  TData = Awaited<ReturnType<typeof customerOperationsGetProfile>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetProfile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get customer profile
 */

export function useCustomerOperationsGetProfile<
  TData = Awaited<ReturnType<typeof customerOperationsGetProfile>>,
  TError = ModelsError,
>(
  id: ModelsCustomerId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetProfile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCustomerOperationsGetProfileQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get customer reservations
 */
export type customerOperationsGetReservationsResponse200 = {
  data: CustomerOperationsGetReservations200
  status: 200
}

export type customerOperationsGetReservationsResponseComposite =
  customerOperationsGetReservationsResponse200

export type customerOperationsGetReservationsResponse =
  customerOperationsGetReservationsResponseComposite & {
    headers: Headers
  }

export const getCustomerOperationsGetReservationsUrl = (
  id: ModelsCustomerId,
  params?: CustomerOperationsGetReservationsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/customers/${id}/reservations?${stringifiedParams}`
    : `/api/v1/customers/${id}/reservations`
}

export const customerOperationsGetReservations = async (
  id: ModelsCustomerId,
  params?: CustomerOperationsGetReservationsParams,
  options?: RequestInit
): Promise<customerOperationsGetReservationsResponse> => {
  return customInstance<customerOperationsGetReservationsResponse>(
    getCustomerOperationsGetReservationsUrl(id, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getCustomerOperationsGetReservationsQueryKey = (
  id: ModelsCustomerId,
  params?: CustomerOperationsGetReservationsParams
) => {
  return [
    `/api/v1/customers/${id}/reservations`,
    ...(params ? [params] : []),
  ] as const
}

export const getCustomerOperationsGetReservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof customerOperationsGetReservations>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetReservations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getCustomerOperationsGetReservationsQueryKey(id, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof customerOperationsGetReservations>>
  > = ({ signal }) =>
    customerOperationsGetReservations(id, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof customerOperationsGetReservations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerOperationsGetReservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof customerOperationsGetReservations>>
>
export type CustomerOperationsGetReservationsQueryError = unknown

export function useCustomerOperationsGetReservations<
  TData = Awaited<ReturnType<typeof customerOperationsGetReservations>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params: undefined | CustomerOperationsGetReservationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetReservations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGetReservations>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGetReservations>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGetReservations<
  TData = Awaited<ReturnType<typeof customerOperationsGetReservations>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetReservations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerOperationsGetReservations>>,
          TError,
          Awaited<ReturnType<typeof customerOperationsGetReservations>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCustomerOperationsGetReservations<
  TData = Awaited<ReturnType<typeof customerOperationsGetReservations>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetReservations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get customer reservations
 */

export function useCustomerOperationsGetReservations<
  TData = Awaited<ReturnType<typeof customerOperationsGetReservations>>,
  TError = unknown,
>(
  id: ModelsCustomerId,
  params?: CustomerOperationsGetReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof customerOperationsGetReservations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCustomerOperationsGetReservationsQueryOptions(
    id,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
