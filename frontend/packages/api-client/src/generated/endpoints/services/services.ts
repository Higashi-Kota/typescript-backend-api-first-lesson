/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Beauty Salon API
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  CategoryOperationsCreateCategoryBody,
  CategoryOperationsListCategories200,
  CategoryOperationsListCategoriesParams,
  CategoryOperationsUpdateCategoryBody,
  ModelsCategoryId,
  ModelsCategoryModel,
  ModelsCreateServiceRequest,
  ModelsError,
  ModelsSalonId,
  ModelsService,
  ModelsServiceId,
  ModelsUpdateServiceRequest,
  ServiceOperationsBulkUpdate200,
  ServiceOperationsBulkUpdateBody,
  ServiceOperationsList200,
  ServiceOperationsListParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary List salon services
 */
export type serviceOperationsListResponse200 = {
  data: ServiceOperationsList200
  status: 200
}

export type serviceOperationsListResponseComposite =
  serviceOperationsListResponse200

export type serviceOperationsListResponse =
  serviceOperationsListResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsListUrl = (
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/salons/${salonId}/services?${stringifiedParams}`
    : `/api/v1/salons/${salonId}/services`
}

export const serviceOperationsList = async (
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: RequestInit
): Promise<serviceOperationsListResponse> => {
  return customInstance<serviceOperationsListResponse>(
    getServiceOperationsListUrl(salonId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getServiceOperationsListQueryKey = (
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams
) => {
  return [
    `/api/v1/salons/${salonId}/services`,
    ...(params ? [params] : []),
  ] as const
}

export const getServiceOperationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getServiceOperationsListQueryKey(salonId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof serviceOperationsList>>
  > = ({ signal }) =>
    serviceOperationsList(salonId, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!salonId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof serviceOperationsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServiceOperationsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsList>>
>
export type ServiceOperationsListQueryError = unknown

export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params: undefined | ServiceOperationsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsList>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsList>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List salon services
 */

export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getServiceOperationsListQueryOptions(
    salonId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create service
 */
export type serviceOperationsCreateResponse201 = {
  data: ModelsService
  status: 201
}

export type serviceOperationsCreateResponse400 = {
  data: ModelsError
  status: 400
}

export type serviceOperationsCreateResponseComposite =
  | serviceOperationsCreateResponse201
  | serviceOperationsCreateResponse400

export type serviceOperationsCreateResponse =
  serviceOperationsCreateResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsCreateUrl = (salonId: ModelsSalonId) => {
  return `/api/v1/salons/${salonId}/services`
}

export const serviceOperationsCreate = async (
  salonId: ModelsSalonId,
  modelsCreateServiceRequest: ModelsCreateServiceRequest,
  options?: RequestInit
): Promise<serviceOperationsCreateResponse> => {
  return customInstance<serviceOperationsCreateResponse>(
    getServiceOperationsCreateUrl(salonId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsCreateServiceRequest),
    }
  )
}

export const getServiceOperationsCreateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsCreate>>,
    TError,
    { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsCreate>>,
  TError,
  { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
  TContext
> => {
  const mutationKey = ['serviceOperationsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsCreate>>,
    { salonId: ModelsSalonId; data: ModelsCreateServiceRequest }
  > = (props) => {
    const { salonId, data } = props ?? {}

    return serviceOperationsCreate(salonId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsCreate>>
>
export type ServiceOperationsCreateMutationBody = ModelsCreateServiceRequest
export type ServiceOperationsCreateMutationError = ModelsError

/**
 * @summary Create service
 */
export const useServiceOperationsCreate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsCreate>>,
      TError,
      { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsCreate>>,
  TError,
  { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
  TContext
> => {
  const mutationOptions = getServiceOperationsCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Bulk update services
 */
export type serviceOperationsBulkUpdateResponse200 = {
  data: ServiceOperationsBulkUpdate200
  status: 200
}

export type serviceOperationsBulkUpdateResponseComposite =
  serviceOperationsBulkUpdateResponse200

export type serviceOperationsBulkUpdateResponse =
  serviceOperationsBulkUpdateResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsBulkUpdateUrl = (salonId: ModelsSalonId) => {
  return `/api/v1/salons/${salonId}/services/bulk`
}

export const serviceOperationsBulkUpdate = async (
  salonId: ModelsSalonId,
  serviceOperationsBulkUpdateBody: ServiceOperationsBulkUpdateBody,
  options?: RequestInit
): Promise<serviceOperationsBulkUpdateResponse> => {
  return customInstance<serviceOperationsBulkUpdateResponse>(
    getServiceOperationsBulkUpdateUrl(salonId),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(serviceOperationsBulkUpdateBody),
    }
  )
}

export const getServiceOperationsBulkUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
    TError,
    { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
  TError,
  { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
  TContext
> => {
  const mutationKey = ['serviceOperationsBulkUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
    { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody }
  > = (props) => {
    const { salonId, data } = props ?? {}

    return serviceOperationsBulkUpdate(salonId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsBulkUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>
>
export type ServiceOperationsBulkUpdateMutationBody =
  ServiceOperationsBulkUpdateBody
export type ServiceOperationsBulkUpdateMutationError = unknown

/**
 * @summary Bulk update services
 */
export const useServiceOperationsBulkUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
      TError,
      { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
  TError,
  { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
  TContext
> => {
  const mutationOptions = getServiceOperationsBulkUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get service
 */
export type serviceOperationsGetResponse200 = {
  data: ModelsService
  status: 200
}

export type serviceOperationsGetResponse404 = {
  data: ModelsError
  status: 404
}

export type serviceOperationsGetResponseComposite =
  | serviceOperationsGetResponse200
  | serviceOperationsGetResponse404

export type serviceOperationsGetResponse =
  serviceOperationsGetResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsGetUrl = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return `/api/v1/salons/${salonId}/services/${id}`
}

export const serviceOperationsGet = async (
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: RequestInit
): Promise<serviceOperationsGetResponse> => {
  return customInstance<serviceOperationsGetResponse>(
    getServiceOperationsGetUrl(salonId, id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getServiceOperationsGetQueryKey = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return [`/api/v1/salons/${salonId}/services/${id}`] as const
}

export const getServiceOperationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getServiceOperationsGetQueryKey(salonId, id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof serviceOperationsGet>>
  > = ({ signal }) =>
    serviceOperationsGet(salonId, id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!(salonId && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof serviceOperationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServiceOperationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsGet>>
>
export type ServiceOperationsGetQueryError = ModelsError

export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get service
 */

export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getServiceOperationsGetQueryOptions(salonId, id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update service
 */
export type serviceOperationsUpdateResponse200 = {
  data: ModelsService
  status: 200
}

export type serviceOperationsUpdateResponse400 = {
  data: ModelsError
  status: 400
}

export type serviceOperationsUpdateResponseComposite =
  | serviceOperationsUpdateResponse200
  | serviceOperationsUpdateResponse400

export type serviceOperationsUpdateResponse =
  serviceOperationsUpdateResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsUpdateUrl = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return `/api/v1/salons/${salonId}/services/${id}`
}

export const serviceOperationsUpdate = async (
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  modelsUpdateServiceRequest: ModelsUpdateServiceRequest,
  options?: RequestInit
): Promise<serviceOperationsUpdateResponse> => {
  return customInstance<serviceOperationsUpdateResponse>(
    getServiceOperationsUpdateUrl(salonId, id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUpdateServiceRequest),
    }
  )
}

export const getServiceOperationsUpdateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsUpdate>>,
    TError,
    {
      salonId: ModelsSalonId
      id: ModelsServiceId
      data: ModelsUpdateServiceRequest
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsUpdate>>,
  TError,
  {
    salonId: ModelsSalonId
    id: ModelsServiceId
    data: ModelsUpdateServiceRequest
  },
  TContext
> => {
  const mutationKey = ['serviceOperationsUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsUpdate>>,
    {
      salonId: ModelsSalonId
      id: ModelsServiceId
      data: ModelsUpdateServiceRequest
    }
  > = (props) => {
    const { salonId, id, data } = props ?? {}

    return serviceOperationsUpdate(salonId, id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsUpdate>>
>
export type ServiceOperationsUpdateMutationBody = ModelsUpdateServiceRequest
export type ServiceOperationsUpdateMutationError = ModelsError

/**
 * @summary Update service
 */
export const useServiceOperationsUpdate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsUpdate>>,
      TError,
      {
        salonId: ModelsSalonId
        id: ModelsServiceId
        data: ModelsUpdateServiceRequest
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsUpdate>>,
  TError,
  {
    salonId: ModelsSalonId
    id: ModelsServiceId
    data: ModelsUpdateServiceRequest
  },
  TContext
> => {
  const mutationOptions = getServiceOperationsUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete service
 */
export type serviceOperationsDeleteResponse204 = {
  data: void
  status: 204
}

export type serviceOperationsDeleteResponse404 = {
  data: ModelsError
  status: 404
}

export type serviceOperationsDeleteResponseComposite =
  | serviceOperationsDeleteResponse204
  | serviceOperationsDeleteResponse404

export type serviceOperationsDeleteResponse =
  serviceOperationsDeleteResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsDeleteUrl = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return `/api/v1/salons/${salonId}/services/${id}`
}

export const serviceOperationsDelete = async (
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: RequestInit
): Promise<serviceOperationsDeleteResponse> => {
  return customInstance<serviceOperationsDeleteResponse>(
    getServiceOperationsDeleteUrl(salonId, id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getServiceOperationsDeleteMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsDelete>>,
    TError,
    { salonId: ModelsSalonId; id: ModelsServiceId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsDelete>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsServiceId },
  TContext
> => {
  const mutationKey = ['serviceOperationsDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsDelete>>,
    { salonId: ModelsSalonId; id: ModelsServiceId }
  > = (props) => {
    const { salonId, id } = props ?? {}

    return serviceOperationsDelete(salonId, id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsDelete>>
>

export type ServiceOperationsDeleteMutationError = ModelsError

/**
 * @summary Delete service
 */
export const useServiceOperationsDelete = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsDelete>>,
      TError,
      { salonId: ModelsSalonId; id: ModelsServiceId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsDelete>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsServiceId },
  TContext
> => {
  const mutationOptions = getServiceOperationsDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary List service categories
 */
export type categoryOperationsListCategoriesResponse200 = {
  data: CategoryOperationsListCategories200
  status: 200
}

export type categoryOperationsListCategoriesResponseComposite =
  categoryOperationsListCategoriesResponse200

export type categoryOperationsListCategoriesResponse =
  categoryOperationsListCategoriesResponseComposite & {
    headers: Headers
  }

export const getCategoryOperationsListCategoriesUrl = (
  params?: CategoryOperationsListCategoriesParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v1/service-categories?${stringifiedParams}`
    : `/api/v1/service-categories`
}

export const categoryOperationsListCategories = async (
  params?: CategoryOperationsListCategoriesParams,
  options?: RequestInit
): Promise<categoryOperationsListCategoriesResponse> => {
  return customInstance<categoryOperationsListCategoriesResponse>(
    getCategoryOperationsListCategoriesUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getCategoryOperationsListCategoriesQueryKey = (
  params?: CategoryOperationsListCategoriesParams
) => {
  return [`/api/v1/service-categories`, ...(params ? [params] : [])] as const
}

export const getCategoryOperationsListCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof categoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: CategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoryOperationsListCategories>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getCategoryOperationsListCategoriesQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoryOperationsListCategories>>
  > = ({ signal }) =>
    categoryOperationsListCategories(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof categoryOperationsListCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CategoryOperationsListCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoryOperationsListCategories>>
>
export type CategoryOperationsListCategoriesQueryError = unknown

export function useCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof categoryOperationsListCategories>>,
  TError = unknown,
>(
  params: undefined | CategoryOperationsListCategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoryOperationsListCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoryOperationsListCategories>>,
          TError,
          Awaited<ReturnType<typeof categoryOperationsListCategories>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof categoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: CategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoryOperationsListCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoryOperationsListCategories>>,
          TError,
          Awaited<ReturnType<typeof categoryOperationsListCategories>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof categoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: CategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoryOperationsListCategories>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List service categories
 */

export function useCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof categoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: CategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoryOperationsListCategories>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCategoryOperationsListCategoriesQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create service category
 */
export type categoryOperationsCreateCategoryResponse201 = {
  data: ModelsCategoryModel
  status: 201
}

export type categoryOperationsCreateCategoryResponse400 = {
  data: ModelsError
  status: 400
}

export type categoryOperationsCreateCategoryResponseComposite =
  | categoryOperationsCreateCategoryResponse201
  | categoryOperationsCreateCategoryResponse400

export type categoryOperationsCreateCategoryResponse =
  categoryOperationsCreateCategoryResponseComposite & {
    headers: Headers
  }

export const getCategoryOperationsCreateCategoryUrl = () => {
  return `/api/v1/service-categories`
}

export const categoryOperationsCreateCategory = async (
  categoryOperationsCreateCategoryBody: CategoryOperationsCreateCategoryBody,
  options?: RequestInit
): Promise<categoryOperationsCreateCategoryResponse> => {
  return customInstance<categoryOperationsCreateCategoryResponse>(
    getCategoryOperationsCreateCategoryUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(categoryOperationsCreateCategoryBody),
    }
  )
}

export const getCategoryOperationsCreateCategoryMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoryOperationsCreateCategory>>,
    TError,
    { data: CategoryOperationsCreateCategoryBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoryOperationsCreateCategory>>,
  TError,
  { data: CategoryOperationsCreateCategoryBody },
  TContext
> => {
  const mutationKey = ['categoryOperationsCreateCategory']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoryOperationsCreateCategory>>,
    { data: CategoryOperationsCreateCategoryBody }
  > = (props) => {
    const { data } = props ?? {}

    return categoryOperationsCreateCategory(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CategoryOperationsCreateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoryOperationsCreateCategory>>
>
export type CategoryOperationsCreateCategoryMutationBody =
  CategoryOperationsCreateCategoryBody
export type CategoryOperationsCreateCategoryMutationError = ModelsError

/**
 * @summary Create service category
 */
export const useCategoryOperationsCreateCategory = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof categoryOperationsCreateCategory>>,
      TError,
      { data: CategoryOperationsCreateCategoryBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof categoryOperationsCreateCategory>>,
  TError,
  { data: CategoryOperationsCreateCategoryBody },
  TContext
> => {
  const mutationOptions =
    getCategoryOperationsCreateCategoryMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Update service category
 */
export type categoryOperationsUpdateCategoryResponse200 = {
  data: ModelsCategoryModel
  status: 200
}

export type categoryOperationsUpdateCategoryResponse404 = {
  data: ModelsError
  status: 404
}

export type categoryOperationsUpdateCategoryResponseComposite =
  | categoryOperationsUpdateCategoryResponse200
  | categoryOperationsUpdateCategoryResponse404

export type categoryOperationsUpdateCategoryResponse =
  categoryOperationsUpdateCategoryResponseComposite & {
    headers: Headers
  }

export const getCategoryOperationsUpdateCategoryUrl = (
  id: ModelsCategoryId
) => {
  return `/api/v1/service-categories/${id}`
}

export const categoryOperationsUpdateCategory = async (
  id: ModelsCategoryId,
  categoryOperationsUpdateCategoryBody: CategoryOperationsUpdateCategoryBody,
  options?: RequestInit
): Promise<categoryOperationsUpdateCategoryResponse> => {
  return customInstance<categoryOperationsUpdateCategoryResponse>(
    getCategoryOperationsUpdateCategoryUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(categoryOperationsUpdateCategoryBody),
    }
  )
}

export const getCategoryOperationsUpdateCategoryMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoryOperationsUpdateCategory>>,
    TError,
    { id: ModelsCategoryId; data: CategoryOperationsUpdateCategoryBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoryOperationsUpdateCategory>>,
  TError,
  { id: ModelsCategoryId; data: CategoryOperationsUpdateCategoryBody },
  TContext
> => {
  const mutationKey = ['categoryOperationsUpdateCategory']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoryOperationsUpdateCategory>>,
    { id: ModelsCategoryId; data: CategoryOperationsUpdateCategoryBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return categoryOperationsUpdateCategory(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CategoryOperationsUpdateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoryOperationsUpdateCategory>>
>
export type CategoryOperationsUpdateCategoryMutationBody =
  CategoryOperationsUpdateCategoryBody
export type CategoryOperationsUpdateCategoryMutationError = ModelsError

/**
 * @summary Update service category
 */
export const useCategoryOperationsUpdateCategory = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof categoryOperationsUpdateCategory>>,
      TError,
      { id: ModelsCategoryId; data: CategoryOperationsUpdateCategoryBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof categoryOperationsUpdateCategory>>,
  TError,
  { id: ModelsCategoryId; data: CategoryOperationsUpdateCategoryBody },
  TContext
> => {
  const mutationOptions =
    getCategoryOperationsUpdateCategoryMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete service category
 */
export type categoryOperationsDeleteCategoryResponse204 = {
  data: void
  status: 204
}

export type categoryOperationsDeleteCategoryResponse404 = {
  data: ModelsError
  status: 404
}

export type categoryOperationsDeleteCategoryResponseComposite =
  | categoryOperationsDeleteCategoryResponse204
  | categoryOperationsDeleteCategoryResponse404

export type categoryOperationsDeleteCategoryResponse =
  categoryOperationsDeleteCategoryResponseComposite & {
    headers: Headers
  }

export const getCategoryOperationsDeleteCategoryUrl = (
  id: ModelsCategoryId
) => {
  return `/api/v1/service-categories/${id}`
}

export const categoryOperationsDeleteCategory = async (
  id: ModelsCategoryId,
  options?: RequestInit
): Promise<categoryOperationsDeleteCategoryResponse> => {
  return customInstance<categoryOperationsDeleteCategoryResponse>(
    getCategoryOperationsDeleteCategoryUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getCategoryOperationsDeleteCategoryMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoryOperationsDeleteCategory>>,
    TError,
    { id: ModelsCategoryId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoryOperationsDeleteCategory>>,
  TError,
  { id: ModelsCategoryId },
  TContext
> => {
  const mutationKey = ['categoryOperationsDeleteCategory']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoryOperationsDeleteCategory>>,
    { id: ModelsCategoryId }
  > = (props) => {
    const { id } = props ?? {}

    return categoryOperationsDeleteCategory(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CategoryOperationsDeleteCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoryOperationsDeleteCategory>>
>

export type CategoryOperationsDeleteCategoryMutationError = ModelsError

/**
 * @summary Delete service category
 */
export const useCategoryOperationsDeleteCategory = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof categoryOperationsDeleteCategory>>,
      TError,
      { id: ModelsCategoryId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof categoryOperationsDeleteCategory>>,
  TError,
  { id: ModelsCategoryId },
  TContext
> => {
  const mutationOptions =
    getCategoryOperationsDeleteCategoryMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
