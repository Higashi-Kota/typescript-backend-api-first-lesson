/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * (title)
 * Comprehensive API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, and reviews.
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ModelsCategoryId,
  ModelsCreateServiceRequest,
  ModelsError,
  ModelsSalonId,
  ModelsService,
  ModelsServiceCategoryModel,
  ModelsServiceId,
  ModelsUpdateServiceRequest,
  ServiceCategoryOperationsCreateCategoryBody,
  ServiceCategoryOperationsListCategories200,
  ServiceCategoryOperationsListCategoriesParams,
  ServiceCategoryOperationsUpdateCategoryBody,
  ServiceOperationsBulkUpdate200,
  ServiceOperationsBulkUpdateBody,
  ServiceOperationsList200,
  ServiceOperationsListParams,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary List salon services
 */
export type serviceOperationsListResponse200 = {
  data: ServiceOperationsList200
  status: 200
}

export type serviceOperationsListResponseComposite =
  serviceOperationsListResponse200

export type serviceOperationsListResponse =
  serviceOperationsListResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsListUrl = (
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/salons/${salonId}/services?${stringifiedParams}`
    : `/salons/${salonId}/services`
}

export const serviceOperationsList = async (
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: RequestInit
): Promise<serviceOperationsListResponse> => {
  return customInstance<serviceOperationsListResponse>(
    getServiceOperationsListUrl(salonId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getServiceOperationsListQueryKey = (
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams
) => {
  return [`/salons/${salonId}/services`, ...(params ? [params] : [])] as const
}

export const getServiceOperationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getServiceOperationsListQueryKey(salonId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof serviceOperationsList>>
  > = ({ signal }) =>
    serviceOperationsList(salonId, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!salonId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof serviceOperationsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServiceOperationsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsList>>
>
export type ServiceOperationsListQueryError = unknown

export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params: undefined | ServiceOperationsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsList>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsList>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List salon services
 */

export function useServiceOperationsList<
  TData = Awaited<ReturnType<typeof serviceOperationsList>>,
  TError = unknown,
>(
  salonId: ModelsSalonId,
  params?: ServiceOperationsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getServiceOperationsListQueryOptions(
    salonId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create service
 */
export type serviceOperationsCreateResponse201 = {
  data: ModelsService
  status: 201
}

export type serviceOperationsCreateResponse400 = {
  data: ModelsError
  status: 400
}

export type serviceOperationsCreateResponseComposite =
  | serviceOperationsCreateResponse201
  | serviceOperationsCreateResponse400

export type serviceOperationsCreateResponse =
  serviceOperationsCreateResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsCreateUrl = (salonId: ModelsSalonId) => {
  return `/salons/${salonId}/services`
}

export const serviceOperationsCreate = async (
  salonId: ModelsSalonId,
  modelsCreateServiceRequest: ModelsCreateServiceRequest,
  options?: RequestInit
): Promise<serviceOperationsCreateResponse> => {
  return customInstance<serviceOperationsCreateResponse>(
    getServiceOperationsCreateUrl(salonId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsCreateServiceRequest),
    }
  )
}

export const getServiceOperationsCreateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsCreate>>,
    TError,
    { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsCreate>>,
  TError,
  { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
  TContext
> => {
  const mutationKey = ['serviceOperationsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsCreate>>,
    { salonId: ModelsSalonId; data: ModelsCreateServiceRequest }
  > = (props) => {
    const { salonId, data } = props ?? {}

    return serviceOperationsCreate(salonId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsCreate>>
>
export type ServiceOperationsCreateMutationBody = ModelsCreateServiceRequest
export type ServiceOperationsCreateMutationError = ModelsError

/**
 * @summary Create service
 */
export const useServiceOperationsCreate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsCreate>>,
      TError,
      { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsCreate>>,
  TError,
  { salonId: ModelsSalonId; data: ModelsCreateServiceRequest },
  TContext
> => {
  const mutationOptions = getServiceOperationsCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Bulk update services
 */
export type serviceOperationsBulkUpdateResponse200 = {
  data: ServiceOperationsBulkUpdate200
  status: 200
}

export type serviceOperationsBulkUpdateResponseComposite =
  serviceOperationsBulkUpdateResponse200

export type serviceOperationsBulkUpdateResponse =
  serviceOperationsBulkUpdateResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsBulkUpdateUrl = (salonId: ModelsSalonId) => {
  return `/salons/${salonId}/services/bulk`
}

export const serviceOperationsBulkUpdate = async (
  salonId: ModelsSalonId,
  serviceOperationsBulkUpdateBody: ServiceOperationsBulkUpdateBody,
  options?: RequestInit
): Promise<serviceOperationsBulkUpdateResponse> => {
  return customInstance<serviceOperationsBulkUpdateResponse>(
    getServiceOperationsBulkUpdateUrl(salonId),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(serviceOperationsBulkUpdateBody),
    }
  )
}

export const getServiceOperationsBulkUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
    TError,
    { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
  TError,
  { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
  TContext
> => {
  const mutationKey = ['serviceOperationsBulkUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
    { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody }
  > = (props) => {
    const { salonId, data } = props ?? {}

    return serviceOperationsBulkUpdate(salonId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsBulkUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>
>
export type ServiceOperationsBulkUpdateMutationBody =
  ServiceOperationsBulkUpdateBody
export type ServiceOperationsBulkUpdateMutationError = unknown

/**
 * @summary Bulk update services
 */
export const useServiceOperationsBulkUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
      TError,
      { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsBulkUpdate>>,
  TError,
  { salonId: ModelsSalonId; data: ServiceOperationsBulkUpdateBody },
  TContext
> => {
  const mutationOptions = getServiceOperationsBulkUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Get service
 */
export type serviceOperationsGetResponse200 = {
  data: ModelsService
  status: 200
}

export type serviceOperationsGetResponse404 = {
  data: ModelsError
  status: 404
}

export type serviceOperationsGetResponseComposite =
  | serviceOperationsGetResponse200
  | serviceOperationsGetResponse404

export type serviceOperationsGetResponse =
  serviceOperationsGetResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsGetUrl = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return `/salons/${salonId}/services/${id}`
}

export const serviceOperationsGet = async (
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: RequestInit
): Promise<serviceOperationsGetResponse> => {
  return customInstance<serviceOperationsGetResponse>(
    getServiceOperationsGetUrl(salonId, id),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getServiceOperationsGetQueryKey = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return [`/salons/${salonId}/services/${id}`] as const
}

export const getServiceOperationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getServiceOperationsGetQueryKey(salonId, id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof serviceOperationsGet>>
  > = ({ signal }) =>
    serviceOperationsGet(salonId, id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!(salonId && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof serviceOperationsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServiceOperationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsGet>>
>
export type ServiceOperationsGetQueryError = ModelsError

export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceOperationsGet>>,
          TError,
          Awaited<ReturnType<typeof serviceOperationsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get service
 */

export function useServiceOperationsGet<
  TData = Awaited<ReturnType<typeof serviceOperationsGet>>,
  TError = ModelsError,
>(
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceOperationsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getServiceOperationsGetQueryOptions(salonId, id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update service
 */
export type serviceOperationsUpdateResponse200 = {
  data: ModelsService
  status: 200
}

export type serviceOperationsUpdateResponse400 = {
  data: ModelsError
  status: 400
}

export type serviceOperationsUpdateResponseComposite =
  | serviceOperationsUpdateResponse200
  | serviceOperationsUpdateResponse400

export type serviceOperationsUpdateResponse =
  serviceOperationsUpdateResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsUpdateUrl = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return `/salons/${salonId}/services/${id}`
}

export const serviceOperationsUpdate = async (
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  modelsUpdateServiceRequest: ModelsUpdateServiceRequest,
  options?: RequestInit
): Promise<serviceOperationsUpdateResponse> => {
  return customInstance<serviceOperationsUpdateResponse>(
    getServiceOperationsUpdateUrl(salonId, id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUpdateServiceRequest),
    }
  )
}

export const getServiceOperationsUpdateMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsUpdate>>,
    TError,
    {
      salonId: ModelsSalonId
      id: ModelsServiceId
      data: ModelsUpdateServiceRequest
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsUpdate>>,
  TError,
  {
    salonId: ModelsSalonId
    id: ModelsServiceId
    data: ModelsUpdateServiceRequest
  },
  TContext
> => {
  const mutationKey = ['serviceOperationsUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsUpdate>>,
    {
      salonId: ModelsSalonId
      id: ModelsServiceId
      data: ModelsUpdateServiceRequest
    }
  > = (props) => {
    const { salonId, id, data } = props ?? {}

    return serviceOperationsUpdate(salonId, id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsUpdate>>
>
export type ServiceOperationsUpdateMutationBody = ModelsUpdateServiceRequest
export type ServiceOperationsUpdateMutationError = ModelsError

/**
 * @summary Update service
 */
export const useServiceOperationsUpdate = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsUpdate>>,
      TError,
      {
        salonId: ModelsSalonId
        id: ModelsServiceId
        data: ModelsUpdateServiceRequest
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsUpdate>>,
  TError,
  {
    salonId: ModelsSalonId
    id: ModelsServiceId
    data: ModelsUpdateServiceRequest
  },
  TContext
> => {
  const mutationOptions = getServiceOperationsUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete service
 */
export type serviceOperationsDeleteResponse204 = {
  data: void
  status: 204
}

export type serviceOperationsDeleteResponse404 = {
  data: ModelsError
  status: 404
}

export type serviceOperationsDeleteResponseComposite =
  | serviceOperationsDeleteResponse204
  | serviceOperationsDeleteResponse404

export type serviceOperationsDeleteResponse =
  serviceOperationsDeleteResponseComposite & {
    headers: Headers
  }

export const getServiceOperationsDeleteUrl = (
  salonId: ModelsSalonId,
  id: ModelsServiceId
) => {
  return `/salons/${salonId}/services/${id}`
}

export const serviceOperationsDelete = async (
  salonId: ModelsSalonId,
  id: ModelsServiceId,
  options?: RequestInit
): Promise<serviceOperationsDeleteResponse> => {
  return customInstance<serviceOperationsDeleteResponse>(
    getServiceOperationsDeleteUrl(salonId, id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getServiceOperationsDeleteMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceOperationsDelete>>,
    TError,
    { salonId: ModelsSalonId; id: ModelsServiceId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceOperationsDelete>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsServiceId },
  TContext
> => {
  const mutationKey = ['serviceOperationsDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceOperationsDelete>>,
    { salonId: ModelsSalonId; id: ModelsServiceId }
  > = (props) => {
    const { salonId, id } = props ?? {}

    return serviceOperationsDelete(salonId, id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceOperationsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceOperationsDelete>>
>

export type ServiceOperationsDeleteMutationError = ModelsError

/**
 * @summary Delete service
 */
export const useServiceOperationsDelete = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceOperationsDelete>>,
      TError,
      { salonId: ModelsSalonId; id: ModelsServiceId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceOperationsDelete>>,
  TError,
  { salonId: ModelsSalonId; id: ModelsServiceId },
  TContext
> => {
  const mutationOptions = getServiceOperationsDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary List service categories
 */
export type serviceCategoryOperationsListCategoriesResponse200 = {
  data: ServiceCategoryOperationsListCategories200
  status: 200
}

export type serviceCategoryOperationsListCategoriesResponseComposite =
  serviceCategoryOperationsListCategoriesResponse200

export type serviceCategoryOperationsListCategoriesResponse =
  serviceCategoryOperationsListCategoriesResponseComposite & {
    headers: Headers
  }

export const getServiceCategoryOperationsListCategoriesUrl = (
  params?: ServiceCategoryOperationsListCategoriesParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/service-categories?${stringifiedParams}`
    : `/service-categories`
}

export const serviceCategoryOperationsListCategories = async (
  params?: ServiceCategoryOperationsListCategoriesParams,
  options?: RequestInit
): Promise<serviceCategoryOperationsListCategoriesResponse> => {
  return customInstance<serviceCategoryOperationsListCategoriesResponse>(
    getServiceCategoryOperationsListCategoriesUrl(params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getServiceCategoryOperationsListCategoriesQueryKey = (
  params?: ServiceCategoryOperationsListCategoriesParams
) => {
  return [`/service-categories`, ...(params ? [params] : [])] as const
}

export const getServiceCategoryOperationsListCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: ServiceCategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getServiceCategoryOperationsListCategoriesQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>
  > = ({ signal }) =>
    serviceCategoryOperationsListCategories(params, {
      signal,
      ...requestOptions,
    })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ServiceCategoryOperationsListCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>
>
export type ServiceCategoryOperationsListCategoriesQueryError = unknown

export function useServiceCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
  TError = unknown,
>(
  params: undefined | ServiceCategoryOperationsListCategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
          TError,
          Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: ServiceCategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
          TError,
          Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useServiceCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: ServiceCategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary List service categories
 */

export function useServiceCategoryOperationsListCategories<
  TData = Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
  TError = unknown,
>(
  params?: ServiceCategoryOperationsListCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof serviceCategoryOperationsListCategories>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getServiceCategoryOperationsListCategoriesQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create service category
 */
export type serviceCategoryOperationsCreateCategoryResponse201 = {
  data: ModelsServiceCategoryModel
  status: 201
}

export type serviceCategoryOperationsCreateCategoryResponse400 = {
  data: ModelsError
  status: 400
}

export type serviceCategoryOperationsCreateCategoryResponseComposite =
  | serviceCategoryOperationsCreateCategoryResponse201
  | serviceCategoryOperationsCreateCategoryResponse400

export type serviceCategoryOperationsCreateCategoryResponse =
  serviceCategoryOperationsCreateCategoryResponseComposite & {
    headers: Headers
  }

export const getServiceCategoryOperationsCreateCategoryUrl = () => {
  return `/service-categories`
}

export const serviceCategoryOperationsCreateCategory = async (
  serviceCategoryOperationsCreateCategoryBody: ServiceCategoryOperationsCreateCategoryBody,
  options?: RequestInit
): Promise<serviceCategoryOperationsCreateCategoryResponse> => {
  return customInstance<serviceCategoryOperationsCreateCategoryResponse>(
    getServiceCategoryOperationsCreateCategoryUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(serviceCategoryOperationsCreateCategoryBody),
    }
  )
}

export const getServiceCategoryOperationsCreateCategoryMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceCategoryOperationsCreateCategory>>,
    TError,
    { data: ServiceCategoryOperationsCreateCategoryBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceCategoryOperationsCreateCategory>>,
  TError,
  { data: ServiceCategoryOperationsCreateCategoryBody },
  TContext
> => {
  const mutationKey = ['serviceCategoryOperationsCreateCategory']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceCategoryOperationsCreateCategory>>,
    { data: ServiceCategoryOperationsCreateCategoryBody }
  > = (props) => {
    const { data } = props ?? {}

    return serviceCategoryOperationsCreateCategory(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceCategoryOperationsCreateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceCategoryOperationsCreateCategory>>
>
export type ServiceCategoryOperationsCreateCategoryMutationBody =
  ServiceCategoryOperationsCreateCategoryBody
export type ServiceCategoryOperationsCreateCategoryMutationError = ModelsError

/**
 * @summary Create service category
 */
export const useServiceCategoryOperationsCreateCategory = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceCategoryOperationsCreateCategory>>,
      TError,
      { data: ServiceCategoryOperationsCreateCategoryBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceCategoryOperationsCreateCategory>>,
  TError,
  { data: ServiceCategoryOperationsCreateCategoryBody },
  TContext
> => {
  const mutationOptions =
    getServiceCategoryOperationsCreateCategoryMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Update service category
 */
export type serviceCategoryOperationsUpdateCategoryResponse200 = {
  data: ModelsServiceCategoryModel
  status: 200
}

export type serviceCategoryOperationsUpdateCategoryResponse404 = {
  data: ModelsError
  status: 404
}

export type serviceCategoryOperationsUpdateCategoryResponseComposite =
  | serviceCategoryOperationsUpdateCategoryResponse200
  | serviceCategoryOperationsUpdateCategoryResponse404

export type serviceCategoryOperationsUpdateCategoryResponse =
  serviceCategoryOperationsUpdateCategoryResponseComposite & {
    headers: Headers
  }

export const getServiceCategoryOperationsUpdateCategoryUrl = (
  id: ModelsCategoryId
) => {
  return `/service-categories/${id}`
}

export const serviceCategoryOperationsUpdateCategory = async (
  id: ModelsCategoryId,
  serviceCategoryOperationsUpdateCategoryBody: ServiceCategoryOperationsUpdateCategoryBody,
  options?: RequestInit
): Promise<serviceCategoryOperationsUpdateCategoryResponse> => {
  return customInstance<serviceCategoryOperationsUpdateCategoryResponse>(
    getServiceCategoryOperationsUpdateCategoryUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(serviceCategoryOperationsUpdateCategoryBody),
    }
  )
}

export const getServiceCategoryOperationsUpdateCategoryMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceCategoryOperationsUpdateCategory>>,
    TError,
    { id: ModelsCategoryId; data: ServiceCategoryOperationsUpdateCategoryBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceCategoryOperationsUpdateCategory>>,
  TError,
  { id: ModelsCategoryId; data: ServiceCategoryOperationsUpdateCategoryBody },
  TContext
> => {
  const mutationKey = ['serviceCategoryOperationsUpdateCategory']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceCategoryOperationsUpdateCategory>>,
    { id: ModelsCategoryId; data: ServiceCategoryOperationsUpdateCategoryBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return serviceCategoryOperationsUpdateCategory(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceCategoryOperationsUpdateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceCategoryOperationsUpdateCategory>>
>
export type ServiceCategoryOperationsUpdateCategoryMutationBody =
  ServiceCategoryOperationsUpdateCategoryBody
export type ServiceCategoryOperationsUpdateCategoryMutationError = ModelsError

/**
 * @summary Update service category
 */
export const useServiceCategoryOperationsUpdateCategory = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceCategoryOperationsUpdateCategory>>,
      TError,
      {
        id: ModelsCategoryId
        data: ServiceCategoryOperationsUpdateCategoryBody
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceCategoryOperationsUpdateCategory>>,
  TError,
  { id: ModelsCategoryId; data: ServiceCategoryOperationsUpdateCategoryBody },
  TContext
> => {
  const mutationOptions =
    getServiceCategoryOperationsUpdateCategoryMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete service category
 */
export type serviceCategoryOperationsDeleteCategoryResponse204 = {
  data: void
  status: 204
}

export type serviceCategoryOperationsDeleteCategoryResponse404 = {
  data: ModelsError
  status: 404
}

export type serviceCategoryOperationsDeleteCategoryResponseComposite =
  | serviceCategoryOperationsDeleteCategoryResponse204
  | serviceCategoryOperationsDeleteCategoryResponse404

export type serviceCategoryOperationsDeleteCategoryResponse =
  serviceCategoryOperationsDeleteCategoryResponseComposite & {
    headers: Headers
  }

export const getServiceCategoryOperationsDeleteCategoryUrl = (
  id: ModelsCategoryId
) => {
  return `/service-categories/${id}`
}

export const serviceCategoryOperationsDeleteCategory = async (
  id: ModelsCategoryId,
  options?: RequestInit
): Promise<serviceCategoryOperationsDeleteCategoryResponse> => {
  return customInstance<serviceCategoryOperationsDeleteCategoryResponse>(
    getServiceCategoryOperationsDeleteCategoryUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getServiceCategoryOperationsDeleteCategoryMutationOptions = <
  TError = ModelsError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceCategoryOperationsDeleteCategory>>,
    TError,
    { id: ModelsCategoryId },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceCategoryOperationsDeleteCategory>>,
  TError,
  { id: ModelsCategoryId },
  TContext
> => {
  const mutationKey = ['serviceCategoryOperationsDeleteCategory']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceCategoryOperationsDeleteCategory>>,
    { id: ModelsCategoryId }
  > = (props) => {
    const { id } = props ?? {}

    return serviceCategoryOperationsDeleteCategory(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ServiceCategoryOperationsDeleteCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceCategoryOperationsDeleteCategory>>
>

export type ServiceCategoryOperationsDeleteCategoryMutationError = ModelsError

/**
 * @summary Delete service category
 */
export const useServiceCategoryOperationsDeleteCategory = <
  TError = ModelsError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof serviceCategoryOperationsDeleteCategory>>,
      TError,
      { id: ModelsCategoryId },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof serviceCategoryOperationsDeleteCategory>>,
  TError,
  { id: ModelsCategoryId },
  TContext
> => {
  const mutationOptions =
    getServiceCategoryOperationsDeleteCategoryMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
