/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * (title)
 * Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  ModelsRoleId,
  ModelsUserRoleAssignInput,
  UserRoleOperationsAssignUserRole200,
  UserRoleOperationsBulkAssignRoles200,
  UserRoleOperationsBulkAssignRolesBody,
  UserRoleOperationsGetUserRoles200,
  UserRoleOperationsGetUserRolesParams,
  UserRoleOperationsGetUsersByRole200,
  UserRoleOperationsGetUsersByRoleParams,
  UserRoleOperationsRevokeUserRole200,
  UserRoleOperationsRevokeUserRoleParams,
  UserRoleOperationsUpdateUserRole200,
  UserRoleOperationsUpdateUserRoleBody,
} from '../../models'

import { customInstance } from '../../../../../io/src/libs/fetcher/fetcher'

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Assign role to user
 */
export type userRoleOperationsAssignUserRoleResponse200 = {
  data: UserRoleOperationsAssignUserRole200
  status: 200
}

export type userRoleOperationsAssignUserRoleResponseComposite =
  userRoleOperationsAssignUserRoleResponse200

export type userRoleOperationsAssignUserRoleResponse =
  userRoleOperationsAssignUserRoleResponseComposite & {
    headers: Headers
  }

export const getUserRoleOperationsAssignUserRoleUrl = () => {
  return `/user-roles`
}

export const userRoleOperationsAssignUserRole = async (
  modelsUserRoleAssignInput: ModelsUserRoleAssignInput,
  options?: RequestInit
): Promise<userRoleOperationsAssignUserRoleResponse> => {
  return customInstance<userRoleOperationsAssignUserRoleResponse>(
    getUserRoleOperationsAssignUserRoleUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(modelsUserRoleAssignInput),
    }
  )
}

export const getUserRoleOperationsAssignUserRoleMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userRoleOperationsAssignUserRole>>,
    TError,
    { data: ModelsUserRoleAssignInput },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userRoleOperationsAssignUserRole>>,
  TError,
  { data: ModelsUserRoleAssignInput },
  TContext
> => {
  const mutationKey = ['userRoleOperationsAssignUserRole']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userRoleOperationsAssignUserRole>>,
    { data: ModelsUserRoleAssignInput }
  > = (props) => {
    const { data } = props ?? {}

    return userRoleOperationsAssignUserRole(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UserRoleOperationsAssignUserRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof userRoleOperationsAssignUserRole>>
>
export type UserRoleOperationsAssignUserRoleMutationBody =
  ModelsUserRoleAssignInput
export type UserRoleOperationsAssignUserRoleMutationError = unknown

export const useUserRoleOperationsAssignUserRole = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userRoleOperationsAssignUserRole>>,
      TError,
      { data: ModelsUserRoleAssignInput },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userRoleOperationsAssignUserRole>>,
  TError,
  { data: ModelsUserRoleAssignInput },
  TContext
> => {
  const mutationOptions =
    getUserRoleOperationsAssignUserRoleMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Bulk assign roles
 */
export type userRoleOperationsBulkAssignRolesResponse200 = {
  data: UserRoleOperationsBulkAssignRoles200
  status: 200
}

export type userRoleOperationsBulkAssignRolesResponseComposite =
  userRoleOperationsBulkAssignRolesResponse200

export type userRoleOperationsBulkAssignRolesResponse =
  userRoleOperationsBulkAssignRolesResponseComposite & {
    headers: Headers
  }

export const getUserRoleOperationsBulkAssignRolesUrl = () => {
  return `/user-roles/bulk-assign`
}

export const userRoleOperationsBulkAssignRoles = async (
  userRoleOperationsBulkAssignRolesBody: UserRoleOperationsBulkAssignRolesBody,
  options?: RequestInit
): Promise<userRoleOperationsBulkAssignRolesResponse> => {
  return customInstance<userRoleOperationsBulkAssignRolesResponse>(
    getUserRoleOperationsBulkAssignRolesUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(userRoleOperationsBulkAssignRolesBody),
    }
  )
}

export const getUserRoleOperationsBulkAssignRolesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userRoleOperationsBulkAssignRoles>>,
    TError,
    { data: UserRoleOperationsBulkAssignRolesBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userRoleOperationsBulkAssignRoles>>,
  TError,
  { data: UserRoleOperationsBulkAssignRolesBody },
  TContext
> => {
  const mutationKey = ['userRoleOperationsBulkAssignRoles']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userRoleOperationsBulkAssignRoles>>,
    { data: UserRoleOperationsBulkAssignRolesBody }
  > = (props) => {
    const { data } = props ?? {}

    return userRoleOperationsBulkAssignRoles(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UserRoleOperationsBulkAssignRolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof userRoleOperationsBulkAssignRoles>>
>
export type UserRoleOperationsBulkAssignRolesMutationBody =
  UserRoleOperationsBulkAssignRolesBody
export type UserRoleOperationsBulkAssignRolesMutationError = unknown

export const useUserRoleOperationsBulkAssignRoles = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userRoleOperationsBulkAssignRoles>>,
      TError,
      { data: UserRoleOperationsBulkAssignRolesBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userRoleOperationsBulkAssignRoles>>,
  TError,
  { data: UserRoleOperationsBulkAssignRolesBody },
  TContext
> => {
  const mutationOptions =
    getUserRoleOperationsBulkAssignRolesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Get users by role
 */
export type userRoleOperationsGetUsersByRoleResponse200 = {
  data: UserRoleOperationsGetUsersByRole200
  status: 200
}

export type userRoleOperationsGetUsersByRoleResponseComposite =
  userRoleOperationsGetUsersByRoleResponse200

export type userRoleOperationsGetUsersByRoleResponse =
  userRoleOperationsGetUsersByRoleResponseComposite & {
    headers: Headers
  }

export const getUserRoleOperationsGetUsersByRoleUrl = (
  roleId: ModelsRoleId,
  params?: UserRoleOperationsGetUsersByRoleParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/user-roles/role/${roleId}/users?${stringifiedParams}`
    : `/user-roles/role/${roleId}/users`
}

export const userRoleOperationsGetUsersByRole = async (
  roleId: ModelsRoleId,
  params?: UserRoleOperationsGetUsersByRoleParams,
  options?: RequestInit
): Promise<userRoleOperationsGetUsersByRoleResponse> => {
  return customInstance<userRoleOperationsGetUsersByRoleResponse>(
    getUserRoleOperationsGetUsersByRoleUrl(roleId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getUserRoleOperationsGetUsersByRoleQueryKey = (
  roleId: ModelsRoleId,
  params?: UserRoleOperationsGetUsersByRoleParams
) => {
  return [
    `/user-roles/role/${roleId}/users`,
    ...(params ? [params] : []),
  ] as const
}

export const getUserRoleOperationsGetUsersByRoleQueryOptions = <
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
  TError = unknown,
>(
  roleId: ModelsRoleId,
  params?: UserRoleOperationsGetUsersByRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getUserRoleOperationsGetUsersByRoleQueryKey(roleId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>
  > = ({ signal }) =>
    userRoleOperationsGetUsersByRole(roleId, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!roleId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserRoleOperationsGetUsersByRoleQueryResult = NonNullable<
  Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>
>
export type UserRoleOperationsGetUsersByRoleQueryError = unknown

export function useUserRoleOperationsGetUsersByRole<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
  TError = unknown,
>(
  roleId: ModelsRoleId,
  params: undefined | UserRoleOperationsGetUsersByRoleParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
          TError,
          Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserRoleOperationsGetUsersByRole<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
  TError = unknown,
>(
  roleId: ModelsRoleId,
  params?: UserRoleOperationsGetUsersByRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
          TError,
          Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserRoleOperationsGetUsersByRole<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
  TError = unknown,
>(
  roleId: ModelsRoleId,
  params?: UserRoleOperationsGetUsersByRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useUserRoleOperationsGetUsersByRole<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
  TError = unknown,
>(
  roleId: ModelsRoleId,
  params?: UserRoleOperationsGetUsersByRoleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUsersByRole>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserRoleOperationsGetUsersByRoleQueryOptions(
    roleId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get user roles
 */
export type userRoleOperationsGetUserRolesResponse200 = {
  data: UserRoleOperationsGetUserRoles200
  status: 200
}

export type userRoleOperationsGetUserRolesResponseComposite =
  userRoleOperationsGetUserRolesResponse200

export type userRoleOperationsGetUserRolesResponse =
  userRoleOperationsGetUserRolesResponseComposite & {
    headers: Headers
  }

export const getUserRoleOperationsGetUserRolesUrl = (
  userId: string,
  params?: UserRoleOperationsGetUserRolesParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/user-roles/user/${userId}?${stringifiedParams}`
    : `/user-roles/user/${userId}`
}

export const userRoleOperationsGetUserRoles = async (
  userId: string,
  params?: UserRoleOperationsGetUserRolesParams,
  options?: RequestInit
): Promise<userRoleOperationsGetUserRolesResponse> => {
  return customInstance<userRoleOperationsGetUserRolesResponse>(
    getUserRoleOperationsGetUserRolesUrl(userId, params),
    {
      ...options,
      method: 'GET',
    }
  )
}

export const getUserRoleOperationsGetUserRolesQueryKey = (
  userId: string,
  params?: UserRoleOperationsGetUserRolesParams
) => {
  return [`/user-roles/user/${userId}`, ...(params ? [params] : [])] as const
}

export const getUserRoleOperationsGetUserRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
  TError = unknown,
>(
  userId: string,
  params?: UserRoleOperationsGetUserRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getUserRoleOperationsGetUserRolesQueryKey(userId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>
  > = ({ signal }) =>
    userRoleOperationsGetUserRoles(userId, params, {
      signal,
      ...requestOptions,
    })

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserRoleOperationsGetUserRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>
>
export type UserRoleOperationsGetUserRolesQueryError = unknown

export function useUserRoleOperationsGetUserRoles<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
  TError = unknown,
>(
  userId: string,
  params: undefined | UserRoleOperationsGetUserRolesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
          TError,
          Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserRoleOperationsGetUserRoles<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
  TError = unknown,
>(
  userId: string,
  params?: UserRoleOperationsGetUserRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
          TError,
          Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserRoleOperationsGetUserRoles<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
  TError = unknown,
>(
  userId: string,
  params?: UserRoleOperationsGetUserRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useUserRoleOperationsGetUserRoles<
  TData = Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
  TError = unknown,
>(
  userId: string,
  params?: UserRoleOperationsGetUserRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userRoleOperationsGetUserRoles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserRoleOperationsGetUserRolesQueryOptions(
    userId,
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Revoke user role
 */
export type userRoleOperationsRevokeUserRoleResponse200 = {
  data: UserRoleOperationsRevokeUserRole200
  status: 200
}

export type userRoleOperationsRevokeUserRoleResponseComposite =
  userRoleOperationsRevokeUserRoleResponse200

export type userRoleOperationsRevokeUserRoleResponse =
  userRoleOperationsRevokeUserRoleResponseComposite & {
    headers: Headers
  }

export const getUserRoleOperationsRevokeUserRoleUrl = (
  userId: string,
  roleId: ModelsRoleId,
  params?: UserRoleOperationsRevokeUserRoleParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/user-roles/user/${userId}/role/${roleId}?${stringifiedParams}`
    : `/user-roles/user/${userId}/role/${roleId}`
}

export const userRoleOperationsRevokeUserRole = async (
  userId: string,
  roleId: ModelsRoleId,
  params?: UserRoleOperationsRevokeUserRoleParams,
  options?: RequestInit
): Promise<userRoleOperationsRevokeUserRoleResponse> => {
  return customInstance<userRoleOperationsRevokeUserRoleResponse>(
    getUserRoleOperationsRevokeUserRoleUrl(userId, roleId, params),
    {
      ...options,
      method: 'DELETE',
    }
  )
}

export const getUserRoleOperationsRevokeUserRoleMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userRoleOperationsRevokeUserRole>>,
    TError,
    {
      userId: string
      roleId: ModelsRoleId
      params?: UserRoleOperationsRevokeUserRoleParams
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userRoleOperationsRevokeUserRole>>,
  TError,
  {
    userId: string
    roleId: ModelsRoleId
    params?: UserRoleOperationsRevokeUserRoleParams
  },
  TContext
> => {
  const mutationKey = ['userRoleOperationsRevokeUserRole']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userRoleOperationsRevokeUserRole>>,
    {
      userId: string
      roleId: ModelsRoleId
      params?: UserRoleOperationsRevokeUserRoleParams
    }
  > = (props) => {
    const { userId, roleId, params } = props ?? {}

    return userRoleOperationsRevokeUserRole(
      userId,
      roleId,
      params,
      requestOptions
    )
  }

  return { mutationFn, ...mutationOptions }
}

export type UserRoleOperationsRevokeUserRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof userRoleOperationsRevokeUserRole>>
>

export type UserRoleOperationsRevokeUserRoleMutationError = unknown

export const useUserRoleOperationsRevokeUserRole = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userRoleOperationsRevokeUserRole>>,
      TError,
      {
        userId: string
        roleId: ModelsRoleId
        params?: UserRoleOperationsRevokeUserRoleParams
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userRoleOperationsRevokeUserRole>>,
  TError,
  {
    userId: string
    roleId: ModelsRoleId
    params?: UserRoleOperationsRevokeUserRoleParams
  },
  TContext
> => {
  const mutationOptions =
    getUserRoleOperationsRevokeUserRoleMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Update user role
 */
export type userRoleOperationsUpdateUserRoleResponse200 = {
  data: UserRoleOperationsUpdateUserRole200
  status: 200
}

export type userRoleOperationsUpdateUserRoleResponseComposite =
  userRoleOperationsUpdateUserRoleResponse200

export type userRoleOperationsUpdateUserRoleResponse =
  userRoleOperationsUpdateUserRoleResponseComposite & {
    headers: Headers
  }

export const getUserRoleOperationsUpdateUserRoleUrl = (
  userId: string,
  roleId: ModelsRoleId
) => {
  return `/user-roles/user/${userId}/role/${roleId}`
}

export const userRoleOperationsUpdateUserRole = async (
  userId: string,
  roleId: ModelsRoleId,
  userRoleOperationsUpdateUserRoleBody: UserRoleOperationsUpdateUserRoleBody,
  options?: RequestInit
): Promise<userRoleOperationsUpdateUserRoleResponse> => {
  return customInstance<userRoleOperationsUpdateUserRoleResponse>(
    getUserRoleOperationsUpdateUserRoleUrl(userId, roleId),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(userRoleOperationsUpdateUserRoleBody),
    }
  )
}

export const getUserRoleOperationsUpdateUserRoleMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userRoleOperationsUpdateUserRole>>,
    TError,
    {
      userId: string
      roleId: ModelsRoleId
      data: UserRoleOperationsUpdateUserRoleBody
    },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userRoleOperationsUpdateUserRole>>,
  TError,
  {
    userId: string
    roleId: ModelsRoleId
    data: UserRoleOperationsUpdateUserRoleBody
  },
  TContext
> => {
  const mutationKey = ['userRoleOperationsUpdateUserRole']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userRoleOperationsUpdateUserRole>>,
    {
      userId: string
      roleId: ModelsRoleId
      data: UserRoleOperationsUpdateUserRoleBody
    }
  > = (props) => {
    const { userId, roleId, data } = props ?? {}

    return userRoleOperationsUpdateUserRole(
      userId,
      roleId,
      data,
      requestOptions
    )
  }

  return { mutationFn, ...mutationOptions }
}

export type UserRoleOperationsUpdateUserRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof userRoleOperationsUpdateUserRole>>
>
export type UserRoleOperationsUpdateUserRoleMutationBody =
  UserRoleOperationsUpdateUserRoleBody
export type UserRoleOperationsUpdateUserRoleMutationError = unknown

export const useUserRoleOperationsUpdateUserRole = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userRoleOperationsUpdateUserRole>>,
      TError,
      {
        userId: string
        roleId: ModelsRoleId
        data: UserRoleOperationsUpdateUserRoleBody
      },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userRoleOperationsUpdateUserRole>>,
  TError,
  {
    userId: string
    roleId: ModelsRoleId
    data: UserRoleOperationsUpdateUserRoleBody
  },
  TContext
> => {
  const mutationOptions =
    getUserRoleOperationsUpdateUserRoleMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
