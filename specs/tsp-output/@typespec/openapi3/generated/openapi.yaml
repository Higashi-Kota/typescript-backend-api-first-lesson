openapi: 3.0.0
info:
  title: (title)
  description: Comprehensive API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, and reviews.
  version: 0.0.0
tags:
  - name: Authentication
  - name: Admin - Authentication
  - name: Salons
  - name: Staff
  - name: Services
  - name: Customers
  - name: Reservations
  - name: Bookings
  - name: Reviews
  - name: Attachments
  - name: Share
paths:
  /api/v1/admin/auth/trusted-ip/{userId}:
    post:
      operationId: AdminAuthOperations_addTrustedIp
      description: Add trusted IP address for a user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '403':
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Admin - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ipAddress:
                  type: string
              required:
                - ipAddress
    delete:
      operationId: AdminAuthOperations_removeTrustedIp
      description: Remove trusted IP address for a user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: ipAddress
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '403':
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Admin - Authentication
  /api/v1/admin/auth/unlock/{userId}:
    post:
      operationId: AdminAuthOperations_unlockAccount
      description: Unlock a locked user account
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '403':
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Admin - Authentication
  /api/v1/attachments:
    get:
      operationId: AttachmentOperations_list
      description: 添付ファイルの一覧取得
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          explode: false
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.PaginatedAttachments'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Attachments
  /api/v1/attachments/share-links/{shareLinkId}:
    delete:
      operationId: AttachmentOperations_deleteShareLink
      description: 共有リンクの削除
      parameters:
        - name: shareLinkId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Attachments
  /api/v1/attachments/upload:
    post:
      operationId: AttachmentOperations_uploadFile
      description: |-
        ファイルの直接アップロード
        JSONでファイル情報をアップロード
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Attachment'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UploadAttachmentRequest'
  /api/v1/attachments/upload-url:
    post:
      operationId: AttachmentOperations_getUploadUrl
      description: |-
        署名付きアップロードURLの取得
        クライアントが直接ストレージにアップロードするためのURL
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.UploadUrlResponse'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.GetUploadUrlRequest'
  /api/v1/attachments/{attachmentId}:
    get:
      operationId: AttachmentOperations_get
      description: 添付ファイル情報の取得
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Attachment'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Attachments
    delete:
      operationId: AttachmentOperations_delete
      description: 添付ファイルの削除
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Attachments
  /api/v1/attachments/{attachmentId}/download-url:
    get:
      operationId: AttachmentOperations_getDownloadUrl
      description: 署名付きダウンロードURLの取得
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
        - name: inline
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.DownloadUrlResponse'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Attachments
  /api/v1/attachments/{attachmentId}/share-links:
    post:
      operationId: AttachmentOperations_createShareLink
      description: 共有リンクの作成
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.ShareLink'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateShareLinkRequest'
    get:
      operationId: AttachmentOperations_listShareLinks
      description: 共有リンクの一覧取得
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Models.ShareLink'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Attachments
  /api/v1/auth/2fa/backup-codes:
    post:
      operationId: AuthOperations_generateBackupCodes
      description: Generate new backup codes for 2FA
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  backupCodes:
                    type: array
                    items:
                      type: string
                required:
                  - backupCodes
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.TwoFactorVerifyRequest'
  /api/v1/auth/2fa/disable:
    post:
      operationId: AuthOperations_disableTwoFactor
      description: Disable two-factor authentication
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.TwoFactorDisableRequest'
  /api/v1/auth/2fa/enable:
    post:
      operationId: AuthOperations_enableTwoFactor
      description: Enable two-factor authentication
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.TwoFactorSetupResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.TwoFactorEnableRequest'
  /api/v1/auth/2fa/qr-code:
    get:
      operationId: AuthOperations_getTwoFactorQRCode
      description: Get QR code for 2FA setup
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.TwoFactorSetupResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/auth/2fa/verify:
    post:
      operationId: AuthOperations_verifyTwoFactor
      description: Verify two-factor authentication code
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.TwoFactorVerifyRequest'
  /api/v1/auth/change-password:
    post:
      operationId: AuthOperations_changePassword
      description: Change password
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.PasswordChangeRequest'
  /api/v1/auth/forgot-password:
    post:
      operationId: AuthOperations_forgotPassword
      description: Request password reset
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '429':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.PasswordResetRequest'
  /api/v1/auth/login:
    post:
      operationId: AuthOperations_login
      description: Login with email and password
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.LoginResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '403':
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '423':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.LoginRequest'
  /api/v1/auth/logout:
    post:
      operationId: AuthOperations_logout
      description: Logout and invalidate session
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/auth/logout-all:
    post:
      operationId: AuthOperations_logoutAll
      description: Logout from all sessions
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/auth/me:
    get:
      operationId: AuthOperations_getCurrentUser
      description: Get current user information
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.User'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/auth/refresh:
    post:
      operationId: AuthOperations_refreshToken
      description: Refresh access token
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.LoginResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.TokenRefreshRequest'
  /api/v1/auth/register:
    post:
      operationId: AuthOperations_register
      description: Register a new user account
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.User'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.RegisterRequest'
  /api/v1/auth/reset-password:
    post:
      operationId: AuthOperations_resetPassword
      description: Reset password with token
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.PasswordResetConfirmRequest'
  /api/v1/auth/reset-password/verify:
    get:
      operationId: AuthOperations_verifyResetToken
      description: Verify password reset token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/auth/sessions:
    get:
      operationId: AuthOperations_getSessions
      description: Get active sessions
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.SessionListResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/auth/sessions/{sessionId}:
    delete:
      operationId: AuthOperations_revokeSession
      description: Revoke a specific session
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/auth/verify-email/confirm:
    post:
      operationId: AuthOperations_confirmEmailVerification
      description: Confirm email verification
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.EmailVerificationRequest'
  /api/v1/auth/verify-email/send:
    post:
      operationId: AuthOperations_sendEmailVerification
      description: Send email verification
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.AuthSuccessResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '429':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Authentication
  /api/v1/bookings:
    get:
      operationId: BookingOperations_list
      summary: List bookings
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.SalonId'
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.BookingStatus'
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.BookingDetail'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Bookings
    post:
      operationId: BookingOperations_create
      summary: Create booking
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Booking'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateBookingRequest'
  /api/v1/bookings/{id}:
    get:
      operationId: BookingOperations_get
      summary: Get booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.BookingDetail'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
    patch:
      operationId: BookingOperations_update
      summary: Update booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Booking'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UpdateBookingRequest'
    delete:
      operationId: BookingOperations_delete
      summary: Delete booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
  /api/v1/bookings/{id}/cancel:
    post:
      operationId: BookingOperations_cancel
      summary: Cancel booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Booking'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                cancelReservations:
                  type: boolean
  /api/v1/bookings/{id}/confirm:
    post:
      operationId: BookingOperations_confirm
      summary: Confirm booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Booking'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
  /api/v1/bookings/{id}/payment:
    post:
      operationId: BookingOperations_processPayment
      summary: Process payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  booking:
                    $ref: '#/components/schemas/Models.Booking'
                  paymentId:
                    type: string
                required:
                  - booking
                  - paymentId
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                amount:
                  type: integer
                  format: int32
                transactionId:
                  type: string
              required:
                - paymentMethod
                - amount
  /api/v1/bookings/{id}/reservations:
    post:
      operationId: BookingOperations_addReservation
      summary: Add reservation to booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Booking'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId:
                  $ref: '#/components/schemas/Models.ReservationId'
              required:
                - reservationId
  /api/v1/bookings/{id}/reservations/{reservationId}:
    delete:
      operationId: BookingOperations_removeReservation
      summary: Remove reservation from booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.BookingId'
        - name: reservationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReservationId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Booking'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Bookings
  /api/v1/customers:
    get:
      operationId: CustomerOperations_list
      summary: List customers
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: tags
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Customer'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Customers
    post:
      operationId: CustomerOperations_create
      summary: Create customer
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Customer'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateCustomerRequest'
  /api/v1/customers/merge:
    post:
      operationId: CustomerOperations_merge
      summary: Merge customer records
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Customer'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                primaryCustomerId:
                  $ref: '#/components/schemas/Models.CustomerId'
                secondaryCustomerId:
                  $ref: '#/components/schemas/Models.CustomerId'
              required:
                - primaryCustomerId
                - secondaryCustomerId
  /api/v1/customers/{id}:
    get:
      operationId: CustomerOperations_get
      summary: Get customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Customer'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Customers
    put:
      operationId: CustomerOperations_update
      summary: Update customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Customer'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UpdateCustomerRequest'
    delete:
      operationId: CustomerOperations_delete
      summary: Delete customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Customers
  /api/v1/customers/{id}/bookings:
    get:
      operationId: CustomerOperations_getBookings
      summary: Get customer bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.BookingStatus'
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.BookingDetail'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Customers
  /api/v1/customers/{id}/profile:
    get:
      operationId: CustomerOperations_getProfile
      summary: Get customer profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.CustomerProfile'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Customers
  /api/v1/customers/{id}/reservations:
    get:
      operationId: CustomerOperations_getReservations
      summary: Get customer reservations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.ReservationStatus'
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.ReservationDetail'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Customers
  /api/v1/reservations:
    get:
      operationId: ReservationOperations_list
      summary: List reservations
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.SalonId'
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.StaffId'
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.ReservationStatus'
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.ReservationDetail'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reservations
    post:
      operationId: ReservationOperations_create
      summary: Create reservation
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Reservation'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateReservationRequest'
  /api/v1/reservations/{id}:
    get:
      operationId: ReservationOperations_get
      summary: Get reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReservationId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.ReservationDetail'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reservations
    patch:
      operationId: ReservationOperations_update
      summary: Update reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReservationId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Reservation'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UpdateReservationRequest'
  /api/v1/reservations/{id}/cancel:
    post:
      operationId: ReservationOperations_cancel
      summary: Cancel reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReservationId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Reservation'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
  /api/v1/reservations/{id}/complete:
    post:
      operationId: ReservationOperations_complete
      summary: Complete reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReservationId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Reservation'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reservations
  /api/v1/reservations/{id}/reschedule:
    post:
      operationId: ReservationOperations_reschedule
      summary: Reschedule reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReservationId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Reservation'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newStartTime:
                  type: string
                  format: date-time
                staffId:
                  $ref: '#/components/schemas/Models.StaffId'
              required:
                - newStartTime
  /api/v1/reviews:
    get:
      operationId: ReviewOperations_list
      summary: List reviews
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.SalonId'
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.CustomerId'
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.StaffId'
          explode: false
        - name: minRating
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
        - name: isVerified
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Review'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reviews
    post:
      operationId: ReviewOperations_create
      summary: Create review
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Review'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateReviewRequest'
  /api/v1/reviews/{id}:
    get:
      operationId: ReviewOperations_get
      summary: Get review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReviewId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Review'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reviews
    patch:
      operationId: ReviewOperations_update
      summary: Update review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReviewId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Review'
        '403':
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UpdateReviewRequest'
    delete:
      operationId: ReviewOperations_delete
      summary: Delete review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReviewId'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '403':
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reviews
  /api/v1/reviews/{id}/helpful:
    post:
      operationId: ReviewOperations_markHelpful
      summary: Mark review as helpful
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReviewId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  helpfulCount:
                    type: integer
                    format: int32
                required:
                  - helpfulCount
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reviews
  /api/v1/reviews/{id}/report:
    post:
      operationId: ReviewOperations_report
      summary: Report review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ReviewId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportId:
                    type: string
                required:
                  - reportId
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                details:
                  type: string
              required:
                - reason
  /api/v1/salons:
    get:
      operationId: SalonOperations_list
      summary: List all salons
      parameters:
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.SalonSummary'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Salons
    post:
      operationId: SalonOperations_create
      summary: Create a new salon
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Salon'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateSalonRequest'
  /api/v1/salons/search:
    get:
      operationId: SalonOperations_search
      summary: Search salons
      parameters:
        - name: keyword
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: city
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: category
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.ServiceCategory'
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.SalonSummary'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Salons
  /api/v1/salons/{id}:
    get:
      operationId: SalonOperations_get
      summary: Get salon by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Salon'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Salons
    put:
      operationId: SalonOperations_update
      summary: Update salon
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Salon'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UpdateSalonRequest'
    delete:
      operationId: SalonOperations_delete
      summary: Delete salon
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Salons
  /api/v1/salons/{salonId}/available-slots:
    get:
      operationId: AvailabilityOperations_getAvailableSlots
      summary: Get available slots
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: staffId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.StaffId'
          explode: false
        - name: serviceId
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Models.ServiceId'
          explode: false
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
        - name: duration
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.AvailableSlot'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Reservations
  /api/v1/salons/{salonId}/available-slots/check:
    post:
      operationId: AvailabilityOperations_checkAvailability
      summary: Check availability
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAvailable:
                    type: boolean
                  conflicts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.ReservationId'
                required:
                  - isAvailable
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staffId:
                  $ref: '#/components/schemas/Models.StaffId'
                serviceId:
                  $ref: '#/components/schemas/Models.ServiceId'
                startTime:
                  type: string
                  format: date-time
              required:
                - staffId
                - serviceId
                - startTime
  /api/v1/salons/{salonId}/reviews:
    get:
      operationId: SalonReviewOperations_getSalonReviews
      summary: Get salon reviews
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum:
              - recent
              - rating
              - helpful
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Review'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reviews
  /api/v1/salons/{salonId}/reviews/summary:
    get:
      operationId: SalonReviewOperations_getSummary
      summary: Get salon reviews summary
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.ReviewSummary'
      tags:
        - Reviews
  /api/v1/salons/{salonId}/services:
    get:
      operationId: ServiceOperations_list
      summary: List salon services
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: category
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Models.ServiceCategory'
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Service'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Services
    post:
      operationId: ServiceOperations_create
      summary: Create service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Service'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateServiceRequest'
  /api/v1/salons/{salonId}/services/bulk:
    patch:
      operationId: ServiceOperations_bulkUpdate
      summary: Bulk update services
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.ServiceId'
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceId:
                          $ref: '#/components/schemas/Models.ServiceId'
                        error:
                          type: string
                      required:
                        - serviceId
                        - error
                required:
                  - updated
                  - failed
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceIds:
                  type: array
                  items:
                    $ref: '#/components/schemas/Models.ServiceId'
                updates:
                  $ref: '#/components/schemas/Models.UpdateServiceRequest'
  /api/v1/salons/{salonId}/services/{id}:
    get:
      operationId: ServiceOperations_get
      summary: Get service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ServiceId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Service'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Services
    put:
      operationId: ServiceOperations_update
      summary: Update service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ServiceId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Service'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UpdateServiceRequest'
    delete:
      operationId: ServiceOperations_delete
      summary: Delete service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.ServiceId'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Services
  /api/v1/salons/{salonId}/staff:
    get:
      operationId: StaffOperations_list
      summary: List staff members
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Staff'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Staff
    post:
      operationId: StaffOperations_create
      summary: Create staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Staff'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.CreateStaffRequest'
  /api/v1/salons/{salonId}/staff/{id}:
    get:
      operationId: StaffOperations_get
      summary: Get staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.StaffId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Staff'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Staff
    put:
      operationId: StaffOperations_update
      summary: Update staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.StaffId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Staff'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Models.UpdateStaffRequest'
    delete:
      operationId: StaffOperations_delete
      summary: Delete staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.StaffId'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Staff
  /api/v1/salons/{salonId}/staff/{id}/availability:
    get:
      operationId: StaffOperations_getAvailability
      summary: Get staff availability
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.StaffId'
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.StaffAvailability'
      tags:
        - Staff
    put:
      operationId: StaffOperations_updateAvailability
      summary: Update staff availability
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.SalonId'
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.StaffId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Models.StaffAvailability'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Models.StaffAvailability'
  /api/v1/service-categories:
    get:
      operationId: ServiceCategoryOperations_listCategories
      summary: List service categories
      parameters:
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.ServiceCategoryModel'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Services
    post:
      operationId: ServiceCategoryOperations_createCategory
      summary: Create service category
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.ServiceCategoryModel'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  $ref: '#/components/schemas/Models.CategoryId'
                displayOrder:
                  type: integer
                  format: int32
              required:
                - name
                - description
                - displayOrder
  /api/v1/service-categories/{id}:
    put:
      operationId: ServiceCategoryOperations_updateCategory
      summary: Update service category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CategoryId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.ServiceCategoryModel'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  $ref: '#/components/schemas/Models.CategoryId'
                displayOrder:
                  type: integer
                  format: int32
                isActive:
                  type: boolean
    delete:
      operationId: ServiceCategoryOperations_deleteCategory
      summary: Delete service category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.CategoryId'
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
        '409':
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.Error'
      tags:
        - Services
  /api/v1/share/{shareToken}:
    get:
      operationId: ShareOperations_getSharedFile
      description: 共有リンクからファイル情報を取得
      parameters:
        - name: shareToken
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.Attachment'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Share
  /api/v1/share/{shareToken}/download:
    get:
      operationId: ShareOperations_downloadSharedFile
      description: 共有リンクからダウンロードURLを取得
      parameters:
        - name: shareToken
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Models.DownloadUrlResponse'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
                  - $ref: '#/components/schemas/Models.Error'
      tags:
        - Share
  /api/v1/staff/search:
    get:
      operationId: GlobalStaffOperations_searchStaff
      summary: Search staff across all salons
      parameters:
        - name: specialty
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: city
          in: query
          required: false
          schema:
            type: string
          explode: false
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Staff'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Staff
  /api/v1/staff/{staffId}/reviews:
    get:
      operationId: StaffReviewOperations_getStaffReviews
      summary: Get staff reviews
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.StaffId'
        - $ref: '#/components/parameters/Models.PaginationParams.limit'
        - $ref: '#/components/parameters/Models.PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Models.Review'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reviews
  /api/v1/staff/{staffId}/reviews/summary:
    get:
      operationId: StaffReviewOperations_getStaffSummary
      summary: Get staff reviews summary
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Models.StaffId'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models.ReviewSummary'
      tags:
        - Reviews
components:
  parameters:
    Models.PaginationParams.limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 20
      explode: false
    Models.PaginationParams.offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 0
      explode: false
  schemas:
    Models.AccessShareLinkRequest:
      type: object
      properties:
        password:
          type: string
          description: パスワード（パスワード保護されている場合）
      description: 共有リンクアクセスリクエスト
    Models.Address:
      type: object
      required:
        - street
        - city
        - state
        - postalCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
          default: Japan
    Models.Attachment:
      type: object
      required:
        - id
        - key
        - filename
        - contentType
        - size
        - fileType
        - uploadedBy
        - uploadedAt
        - updatedAt
      properties:
        id:
          type: string
          description: 添付ファイルID (UUID)
        key:
          type: string
          description: ストレージキー
        filename:
          type: string
          description: オリジナルファイル名
        contentType:
          type: string
          description: Content-Type
        size:
          type: integer
          format: int32
          description: ファイルサイズ（バイト）
        fileType:
          allOf:
            - $ref: '#/components/schemas/Models.FileType'
          description: ファイルタイプ
        uploadedBy:
          type: string
          description: アップロードしたユーザーID
        salonId:
          type: string
          description: 関連するサロンID（オプション）
        metadata:
          type: object
          additionalProperties: {}
          description: メタデータ
        tags:
          type: object
          additionalProperties:
            type: string
          description: タグ
        uploadedAt:
          type: string
          format: date-time
          description: アップロード日時
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
      description: 添付ファイル情報
    Models.AuditInfo:
      type: object
      required:
        - createdAt
        - updatedAt
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.AuthSuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message
      description: Generic auth success response
    Models.AvailableSlot:
      type: object
      required:
        - staffId
        - startTime
        - endTime
      properties:
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    Models.Booking:
      type: object
      required:
        - id
        - salonId
        - customerId
        - reservationIds
        - status
        - totalAmount
        - finalAmount
        - paymentStatus
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.BookingId'
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        customerId:
          $ref: '#/components/schemas/Models.CustomerId'
        reservationIds:
          type: array
          items:
            $ref: '#/components/schemas/Models.ReservationId'
        status:
          $ref: '#/components/schemas/Models.BookingStatus'
        totalAmount:
          type: integer
          format: int32
        discountAmount:
          type: integer
          format: int32
        finalAmount:
          type: integer
          format: int32
        paymentMethod:
          type: string
        paymentStatus:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.BookingDetail:
      type: object
      required:
        - reservations
        - customerName
        - salonName
      properties:
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Models.ReservationDetail'
        customerName:
          type: string
        salonName:
          type: string
      allOf:
        - $ref: '#/components/schemas/Models.Booking'
    Models.BookingId:
      type: string
    Models.BookingStatus:
      type: string
      enum:
        - draft
        - pending
        - confirmed
        - in_progress
        - completed
        - cancelled
        - no_show
    Models.CategoryId:
      type: string
    Models.ContactInfo:
      type: object
      required:
        - email
        - phoneNumber
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        alternativePhone:
          type: string
    Models.CreateBookingRequest:
      type: object
      required:
        - salonId
        - customerId
        - reservationIds
      properties:
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        customerId:
          $ref: '#/components/schemas/Models.CustomerId'
        reservationIds:
          type: array
          items:
            $ref: '#/components/schemas/Models.ReservationId'
        discountAmount:
          type: integer
          format: int32
        paymentMethod:
          type: string
        notes:
          type: string
    Models.CreateCustomerRequest:
      type: object
      required:
        - name
        - contactInfo
      properties:
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        preferences:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
      description: Customer creation request with required and optional fields
    Models.CreateReservationRequest:
      type: object
      required:
        - salonId
        - customerId
        - staffId
        - serviceId
        - startTime
      properties:
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        customerId:
          $ref: '#/components/schemas/Models.CustomerId'
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
        serviceId:
          $ref: '#/components/schemas/Models.ServiceId'
        startTime:
          type: string
          format: date-time
        notes:
          type: string
    Models.CreateReviewRequest:
      type: object
      required:
        - salonId
        - customerId
        - reservationId
        - rating
      properties:
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        customerId:
          $ref: '#/components/schemas/Models.CustomerId'
        reservationId:
          $ref: '#/components/schemas/Models.ReservationId'
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
        rating:
          type: integer
          format: int32
        comment:
          type: string
        serviceRating:
          type: integer
          format: int32
        staffRating:
          type: integer
          format: int32
        atmosphereRating:
          type: integer
          format: int32
        images:
          type: array
          items:
            type: string
    Models.CreateSalonRequest:
      type: object
      required:
        - name
        - description
        - address
        - contactInfo
        - openingHours
      properties:
        name:
          type: string
        description:
          type: string
        address:
          $ref: '#/components/schemas/Models.Address'
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        openingHours:
          type: array
          items:
            $ref: '#/components/schemas/Models.OpeningHours'
        imageUrls:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
      description: Salon creation request with required and optional fields
    Models.CreateServiceRequest:
      type: object
      required:
        - salonId
        - name
        - description
        - duration
        - price
        - category
      properties:
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/Models.ServiceCategory'
        categoryId:
          $ref: '#/components/schemas/Models.CategoryId'
        imageUrl:
          type: string
        requiredStaffLevel:
          type: integer
          format: int32
    Models.CreateShareLinkRequest:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
          description: 有効期限（オプション）
        maxDownloads:
          type: integer
          format: int32
          description: 最大ダウンロード数（オプション）
        password:
          type: string
          description: パスワード（オプション）
        allowedEmails:
          type: array
          items:
            type: string
          description: 許可されたメールアドレス（オプション）
      description: 共有リンク作成リクエスト
    Models.CreateStaffRequest:
      type: object
      required:
        - salonId
        - name
        - contactInfo
        - specialties
      properties:
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        bio:
          type: string
        yearsOfExperience:
          type: integer
          format: int32
        certifications:
          type: array
          items:
            type: string
    Models.Customer:
      type: object
      required:
        - id
        - name
        - contactInfo
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.CustomerId'
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        preferences:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        loyaltyPoints:
          type: integer
          format: int32
        membershipLevel:
          type: string
        birthDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.CustomerId:
      type: string
    Models.CustomerProfile:
      type: object
      required:
        - visitCount
        - totalSpent
      properties:
        visitCount:
          type: integer
          format: int32
        lastVisitDate:
          type: string
          format: date-time
        favoriteStaffIds:
          type: array
          items:
            $ref: '#/components/schemas/Models.StaffId'
        favoriteServiceIds:
          type: array
          items:
            $ref: '#/components/schemas/Models.ServiceId'
        totalSpent:
          type: integer
          format: int32
      allOf:
        - $ref: '#/components/schemas/Models.Customer'
    Models.DayOfWeek:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    Models.DownloadUrlResponse:
      type: object
      required:
        - downloadUrl
        - expiresAt
      properties:
        downloadUrl:
          type: string
          description: 署名付きダウンロードURL
        expiresAt:
          type: string
          format: date-time
          description: URL有効期限
      description: 署名付きダウンロードURL取得レスポンス
    Models.EmailVerificationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Email verification token
      description: Email verification request
    Models.Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: {}
    Models.FileType:
      type: string
      enum:
        - image
        - document
        - other
      description: ファイルタイプ
    Models.GetCustomerBookingsRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Models.BookingStatus'
      description: Customer bookings filter parameters
    Models.GetCustomerReservationsRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Models.ReservationStatus'
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
      description: Customer reservations filter parameters
    Models.GetUploadUrlRequest:
      type: object
      required:
        - filename
        - contentType
        - size
      properties:
        filename:
          type: string
          description: ファイル名
        contentType:
          type: string
          description: Content-Type
        size:
          type: integer
          format: int32
          description: ファイルサイズ（バイト）
        salonId:
          type: string
          description: サロンID（オプション）
      description: 署名付きアップロードURL取得リクエスト
    Models.LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password
        rememberMe:
          type: boolean
          description: Remember me flag for extended session
          default: false
        twoFactorCode:
          type: string
          description: Two-factor authentication code (if 2FA is enabled)
      description: Login request
    Models.LoginResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - tokenType
        - expiresIn
        - user
      properties:
        accessToken:
          type: string
          description: Access token for API requests
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
        tokenType:
          type: string
          description: Token type (always 'Bearer')
          default: Bearer
        expiresIn:
          type: integer
          format: int32
          description: Access token expiry in seconds
        user:
          allOf:
            - $ref: '#/components/schemas/Models.User'
          description: Logged in user information
      description: Login response
    Models.OpeningHours:
      type: object
      required:
        - dayOfWeek
        - openTime
        - closeTime
        - isHoliday
      properties:
        dayOfWeek:
          $ref: '#/components/schemas/Models.DayOfWeek'
        openTime:
          type: string
        closeTime:
          type: string
        isHoliday:
          type: boolean
    Models.PaginatedAttachments:
      type: object
      required:
        - items
        - total
        - page
        - limit
        - totalPages
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Models.Attachment'
          description: 添付ファイル一覧
        total:
          type: integer
          format: int32
          description: 合計件数
        page:
          type: integer
          format: int32
          description: 現在のページ
        limit:
          type: integer
          format: int32
          description: ページあたりの件数
        totalPages:
          type: integer
          format: int32
          description: 総ページ数
      description: ページネーション付き添付ファイル一覧
    Models.PasswordChangeRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password for verification
        newPassword:
          type: string
          description: New password
      description: Password change request
    Models.PasswordResetConfirmRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset token from email
        newPassword:
          type: string
          description: New password
      description: Password reset confirmation
    Models.PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: Email address of the account
      description: Password reset request
    Models.RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password (must meet security requirements)
        name:
          type: string
          description: User's display name
        role:
          allOf:
            - $ref: '#/components/schemas/Models.UserRole'
          description: User's role (defaults to customer)
          default: customer
      description: Registration request
    Models.Reservation:
      type: object
      required:
        - id
        - salonId
        - customerId
        - staffId
        - serviceId
        - startTime
        - endTime
        - status
        - totalAmount
        - isPaid
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.ReservationId'
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        customerId:
          $ref: '#/components/schemas/Models.CustomerId'
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
        serviceId:
          $ref: '#/components/schemas/Models.ServiceId'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/Models.ReservationStatus'
        notes:
          type: string
        totalAmount:
          type: integer
          format: int32
        depositAmount:
          type: integer
          format: int32
        isPaid:
          type: boolean
        cancellationReason:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ReservationDetail:
      type: object
      required:
        - customerName
        - staffName
        - serviceName
        - serviceCategory
        - serviceDuration
      properties:
        customerName:
          type: string
        staffName:
          type: string
        serviceName:
          type: string
        serviceCategory:
          $ref: '#/components/schemas/Models.ServiceCategory'
        serviceDuration:
          type: integer
          format: int32
      allOf:
        - $ref: '#/components/schemas/Models.Reservation'
    Models.ReservationId:
      type: string
    Models.ReservationStatus:
      type: string
      enum:
        - pending
        - confirmed
        - cancelled
        - completed
        - no_show
    Models.Review:
      type: object
      required:
        - id
        - salonId
        - customerId
        - reservationId
        - rating
        - isVerified
        - helpfulCount
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.ReviewId'
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        customerId:
          $ref: '#/components/schemas/Models.CustomerId'
        reservationId:
          $ref: '#/components/schemas/Models.ReservationId'
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
        rating:
          type: integer
          format: int32
        comment:
          type: string
        serviceRating:
          type: integer
          format: int32
        staffRating:
          type: integer
          format: int32
        atmosphereRating:
          type: integer
          format: int32
        images:
          type: array
          items:
            type: string
        isVerified:
          type: boolean
        helpfulCount:
          type: integer
          format: int32
          default: 0
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ReviewId:
      type: string
    Models.ReviewSummary:
      type: object
      required:
        - averageRating
        - totalReviews
        - ratingDistribution
      properties:
        averageRating:
          type: number
          format: float
        totalReviews:
          type: integer
          format: int32
        ratingDistribution:
          type: object
          additionalProperties:
            type: integer
            format: int32
    Models.Salon:
      type: object
      required:
        - id
        - name
        - description
        - address
        - contactInfo
        - openingHours
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.SalonId'
        name:
          type: string
        description:
          type: string
        address:
          $ref: '#/components/schemas/Models.Address'
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        openingHours:
          type: array
          items:
            $ref: '#/components/schemas/Models.OpeningHours'
        imageUrls:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.SalonId:
      type: string
    Models.SalonSummary:
      type: object
      required:
        - id
        - name
        - address
      properties:
        id:
          $ref: '#/components/schemas/Models.SalonId'
        name:
          type: string
        address:
          $ref: '#/components/schemas/Models.Address'
        rating:
          type: number
          format: float
        reviewCount:
          type: integer
          format: int32
    Models.SearchCustomerRequest:
      type: object
      properties:
        search:
          type: string
        tags:
          type: array
          items:
            type: string
      description: Customer search parameters - all fields are optional
    Models.SearchSalonRequest:
      type: object
      properties:
        keyword:
          type: string
        city:
          type: string
        category:
          $ref: '#/components/schemas/Models.ServiceCategory'
      description: Salon search parameters - all fields are optional
    Models.Service:
      type: object
      required:
        - id
        - salonId
        - name
        - description
        - duration
        - price
        - category
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.ServiceId'
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/Models.ServiceCategory'
        categoryId:
          $ref: '#/components/schemas/Models.CategoryId'
        imageUrl:
          type: string
        requiredStaffLevel:
          type: integer
          format: int32
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ServiceCategory:
      type: string
      enum:
        - cut
        - color
        - perm
        - treatment
        - spa
        - other
    Models.ServiceCategoryModel:
      type: object
      required:
        - id
        - name
        - description
        - displayOrder
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.CategoryId'
        name:
          type: string
        description:
          type: string
        parentId:
          $ref: '#/components/schemas/Models.CategoryId'
        displayOrder:
          type: integer
          format: int32
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ServiceId:
      type: string
    Models.Session:
      type: object
      required:
        - id
        - userId
        - refreshToken
        - ipAddress
        - userAgent
        - expiresAt
        - rememberMe
        - createdAt
        - lastActivityAt
      properties:
        id:
          type: string
          description: Unique session identifier
        userId:
          type: string
          description: User ID associated with this session
        refreshToken:
          type: string
          description: Refresh token for this session
        ipAddress:
          type: string
          description: IP address from which the session was created
        userAgent:
          type: string
          description: User agent string
        expiresAt:
          type: string
          format: date-time
          description: Session expiry time
        rememberMe:
          type: boolean
          description: Remember me flag
          default: false
        createdAt:
          type: string
          format: date-time
          description: Session creation timestamp
        lastActivityAt:
          type: string
          format: date-time
          description: Last activity timestamp
      description: Session information
    Models.SessionListResponse:
      type: object
      required:
        - sessions
        - total
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/Models.Session'
          description: Active sessions
        total:
          type: integer
          format: int32
          description: Total number of sessions
      description: Session list response
    Models.ShareLink:
      type: object
      required:
        - id
        - token
        - attachmentId
        - downloadCount
        - hasPassword
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          description: 共有リンクID
        token:
          type: string
          description: 共有トークン
        attachmentId:
          type: string
          description: 添付ファイルID
        expiresAt:
          type: string
          format: date-time
          description: 有効期限（オプション）
        maxDownloads:
          type: integer
          format: int32
          description: 最大ダウンロード数（オプション）
        downloadCount:
          type: integer
          format: int32
          description: 現在のダウンロード数
        hasPassword:
          type: boolean
          description: パスワード保護
        allowedEmails:
          type: array
          items:
            type: string
          description: 許可されたメールアドレス（オプション）
        createdBy:
          type: string
          description: 作成者ID
        createdAt:
          type: string
          format: date-time
          description: 作成日時
      description: 共有リンク
    Models.Staff:
      type: object
      required:
        - id
        - salonId
        - name
        - contactInfo
        - specialties
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/Models.StaffId'
        salonId:
          $ref: '#/components/schemas/Models.SalonId'
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        bio:
          type: string
        yearsOfExperience:
          type: integer
          format: int32
        certifications:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.StaffAvailability:
      type: object
      required:
        - staffId
        - dayOfWeek
        - startTime
        - endTime
      properties:
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
        dayOfWeek:
          $ref: '#/components/schemas/Models.DayOfWeek'
        startTime:
          type: string
        endTime:
          type: string
        breakStart:
          type: string
        breakEnd:
          type: string
    Models.StaffId:
      type: string
    Models.TokenRefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token
      description: Token refresh request
    Models.TwoFactorDisableRequest:
      type: object
      required:
        - password
        - code
      properties:
        password:
          type: string
          description: Current password for verification
        code:
          type: string
          description: Current TOTP code for verification
      description: Two-factor authentication disable request
    Models.TwoFactorEnableRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: Current password for verification
      description: Two-factor authentication enable request
    Models.TwoFactorSetupResponse:
      type: object
      required:
        - qrCodeUrl
        - secret
        - backupCodes
      properties:
        qrCodeUrl:
          type: string
          description: QR code URL for authenticator app
        secret:
          type: string
          description: Manual entry secret
        backupCodes:
          type: array
          items:
            type: string
          description: Backup codes for recovery
      description: Two-factor authentication setup response
    Models.TwoFactorStatus:
      type: string
      enum:
        - disabled
        - pending
        - enabled
      description: Two-factor authentication status
    Models.TwoFactorVerifyRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: TOTP code from authenticator app
      description: Two-factor authentication verify request
    Models.UpdateBookingRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Models.BookingStatus'
        paymentMethod:
          type: string
        paymentStatus:
          type: string
        notes:
          type: string
      description: Booking update request with optional fields for partial updates
    Models.UpdateBookingRequestWithReset:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Models.BookingStatus'
        paymentMethod:
          type: string
          nullable: true
        paymentStatus:
          type: string
        notes:
          type: string
          nullable: true
      description: Booking update request with reset capability
    Models.UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        preferences:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
      description: Customer update request with optional fields for partial updates
    Models.UpdateCustomerRequestWithReset:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        preferences:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
      description: Customer update request with reset capability
    Models.UpdateReservationRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Models.ReservationStatus'
        notes:
          type: string
        startTime:
          type: string
          format: date-time
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
      description: Reservation update request with optional fields for partial updates
    Models.UpdateReservationRequestWithReset:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Models.ReservationStatus'
        notes:
          type: string
          nullable: true
        startTime:
          type: string
          format: date-time
        staffId:
          $ref: '#/components/schemas/Models.StaffId'
      description: Reservation update request with reset capability
    Models.UpdateReviewRequest:
      type: object
      properties:
        rating:
          type: integer
          format: int32
        comment:
          type: string
        serviceRating:
          type: integer
          format: int32
        staffRating:
          type: integer
          format: int32
        atmosphereRating:
          type: integer
          format: int32
        images:
          type: array
          items:
            type: string
      description: Review update request with optional fields for partial updates
    Models.UpdateReviewRequestWithReset:
      type: object
      properties:
        rating:
          type: integer
          format: int32
        comment:
          type: string
          nullable: true
        serviceRating:
          type: integer
          format: int32
          nullable: true
        staffRating:
          type: integer
          format: int32
          nullable: true
        atmosphereRating:
          type: integer
          format: int32
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
      description: Review update request with reset capability
    Models.UpdateSalonRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          $ref: '#/components/schemas/Models.Address'
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        openingHours:
          type: array
          items:
            $ref: '#/components/schemas/Models.OpeningHours'
        imageUrls:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
      description: Salon update request with optional fields for partial updates
    Models.UpdateSalonRequestWithReset:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          $ref: '#/components/schemas/Models.Address'
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        openingHours:
          type: array
          items:
            $ref: '#/components/schemas/Models.OpeningHours'
        imageUrls:
          type: array
          items:
            type: string
          nullable: true
        features:
          type: array
          items:
            type: string
          nullable: true
      description: Salon update request with reset capability
    Models.UpdateServiceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/Models.ServiceCategory'
        categoryId:
          $ref: '#/components/schemas/Models.CategoryId'
        imageUrl:
          type: string
        requiredStaffLevel:
          type: integer
          format: int32
        isActive:
          type: boolean
      description: Service update request with optional fields for partial updates
    Models.UpdateServiceRequestWithReset:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/Models.ServiceCategory'
        categoryId:
          type: string
          allOf:
            - $ref: '#/components/schemas/Models.CategoryId'
          nullable: true
        imageUrl:
          type: string
          nullable: true
        requiredStaffLevel:
          type: integer
          format: int32
          nullable: true
        isActive:
          type: boolean
      description: Service update request with reset capability
    Models.UpdateStaffRequest:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        bio:
          type: string
        yearsOfExperience:
          type: integer
          format: int32
        certifications:
          type: array
          items:
            type: string
        isActive:
          type: boolean
      description: Staff update request with optional fields for partial updates
    Models.UpdateStaffRequestWithReset:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Models.ContactInfo'
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        yearsOfExperience:
          type: integer
          format: int32
          nullable: true
        certifications:
          type: array
          items:
            type: string
          nullable: true
        isActive:
          type: boolean
      description: Staff update request with reset capability
    Models.UploadAttachmentRequest:
      type: object
      required:
        - file
        - filename
        - contentType
      properties:
        file:
          type: string
          format: byte
          description: ファイル本体
        filename:
          type: string
          description: ファイル名
        contentType:
          type: string
          description: Content-Type
        salonId:
          type: string
          description: サロンID（オプション）
        tags:
          type: string
          description: タグ（オプション）
      description: ファイルアップロードリクエスト（マルチパート）
    Models.UploadUrlResponse:
      type: object
      required:
        - uploadUrl
        - key
        - expiresAt
      properties:
        uploadUrl:
          type: string
          description: 署名付きアップロードURL
        key:
          type: string
          description: ストレージキー
        expiresAt:
          type: string
          format: date-time
          description: URL有効期限
      description: 署名付きアップロードURLレスポンス
    Models.User:
      type: object
      required:
        - id
        - email
        - name
        - role
        - status
        - emailVerified
        - twoFactorStatus
        - failedLoginAttempts
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          description: User's email address (unique)
        name:
          type: string
          description: User's display name
        role:
          allOf:
            - $ref: '#/components/schemas/Models.UserRole'
          description: User's role in the system
        status:
          allOf:
            - $ref: '#/components/schemas/Models.UserAccountStatus'
          description: Account status
        emailVerified:
          type: boolean
          description: Email verification status
        emailVerificationToken:
          type: string
          description: Email verification token (internal use)
        emailVerificationTokenExpiry:
          type: string
          format: date-time
          description: Email verification token expiry
        twoFactorStatus:
          allOf:
            - $ref: '#/components/schemas/Models.TwoFactorStatus'
          description: Two-factor authentication status
        twoFactorSecret:
          type: string
          description: Two-factor authentication secret (encrypted)
        backupCodes:
          type: array
          items:
            type: string
          description: Backup codes for 2FA recovery
        failedLoginAttempts:
          type: integer
          format: int32
          description: Number of failed login attempts
          default: 0
        lockedAt:
          type: string
          format: date-time
          description: Time when the account was locked
        passwordResetToken:
          type: string
          description: Password reset token (internal use)
        passwordResetTokenExpiry:
          type: string
          format: date-time
          description: Password reset token expiry
        lastPasswordChangeAt:
          type: string
          format: date-time
          description: Last password change timestamp
        passwordHistory:
          type: array
          items:
            type: string
          description: Previous password hashes for history check
        trustedIpAddresses:
          type: array
          items:
            type: string
          description: Trusted IP addresses for this user
        customerId:
          type: string
          description: Reference to customer profile if user is a customer
        staffId:
          type: string
          description: Reference to staff profile if user is staff
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp
        lastLoginIp:
          type: string
          description: Last login IP address
      description: User authentication information
    Models.UserAccountStatus:
      type: string
      enum:
        - active
        - unverified
        - locked
        - suspended
        - deleted
      description: User account status
    Models.UserRole:
      type: string
      enum:
        - customer
        - staff
        - admin
      description: User roles in the system
servers:
  - url: https://api.beauty-salon.com
    description: Beauty Salon API
    variables: {}
