openapi: 3.0.0
info:
  title: Beauty Salon API
  description: Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
  version: "2.0"
tags:
  - name: Authentication
  - name: Admin - Authentication
  - name: Salons
  - name: System
  - name: Staff
  - name: Services
  - name: Customers
  - name: Reservations
  - name: Bookings
  - name: Reviews
  - name: Attachments
  - name: Share
  - name: Treatments
  - name: Medical Charts
  - name: Payments
  - name: Sales Reports
  - name: Points
  - name: Inventory
  - name: Purchase Orders
  - name: Inventory Alerts
  - name: Roles & Permissions
  - name: Permissions
  - name: User Roles
  - name: Access Control
paths:
  /access-control/check:
    post:
      operationId: AccessControlOperations_checkAccess
      description: Check user access
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.AccessResult"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Access Control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AccessCheck"
  /access-control/check-permissions:
    post:
      operationId: AccessControlOperations_checkPermissions
      description: Check multiple permissions
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PermissionCheckResult"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Access Control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PermissionCheckRequest"
  /access-control/resource/{resource}/access:
    get:
      operationId: AccessControlOperations_getResourceAccess
      description: Get resource access list
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: string
                            userName:
                              type: string
                            hasAccess:
                              type: boolean
                            grantedBy:
                              type: array
                              items:
                                type: string
                          required:
                            - userId
                            - hasAccess
                            - grantedBy
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Access Control
  /access-control/user/{userId}/permissions:
    get:
      operationId: AccessControlOperations_getUserPermissions
      description: Get user effective permissions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
                          permissions:
                            type: array
                            items:
                              type: string
                          roles:
                            type: array
                            items:
                              type: object
                              properties:
                                roleId:
                                  $ref: "#/components/schemas/Models.RoleId"
                                roleName:
                                  type: string
                                permissions:
                                  type: array
                                  items:
                                    type: string
                              required:
                                - roleId
                                - roleName
                                - permissions
                        required:
                          - userId
                          - permissions
                          - roles
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Access Control
  /access-control/validate:
    post:
      operationId: AccessControlOperations_validatePermissions
      description: Validate role permissions
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          isValid:
                            type: boolean
                          missingPermissions:
                            type: array
                            items:
                              type: string
                          extraPermissions:
                            type: array
                            items:
                              type: string
                        required:
                          - isValid
                          - missingPermissions
                          - extraPermissions
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Access Control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  $ref: "#/components/schemas/Models.RoleId"
                requiredPermissions:
                  type: array
                  items:
                    type: string
              required:
                - roleId
                - requiredPermissions
  /api/system/alive:
    get:
      operationId: SystemOperations_alive
      summary: Check API liveness
      description: プロセスが生存しているかを判定するエンドポイントで、異常時は再起動判定に利用されます。
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    enum:
                      - true
                required:
                  - alive
      tags:
        - System
  /api/system/health:
    get:
      operationId: SystemOperations_health
      summary: Check API health
      description: APIが正常稼働しているかを判定し、監視ツールやロードバランサーから参照します。
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.HealthStatus"
        "503":
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.HealthStatus"
      tags:
        - System
  /api/system/metrics:
    get:
      operationId: SystemOperations_metrics
      summary: Get API metrics
      description: Prometheus形式のメトリクスを返却し、監視基盤での可視化やアラート設定に用います。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - System
  /api/system/ready:
    get:
      operationId: SystemOperations_ready
      summary: Check API readiness
      description: Kubernetes等のオーケストレーターがトラフィック受信可否を判断するための準備完了チェックです。
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                required:
                  - ready
        "503":
          description: Service unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                  reason:
                    type: string
                required:
                  - ready
      tags:
        - System
  /api/system/version:
    get:
      operationId: SystemOperations_version
      summary: Get API version
      description: APIのバージョンやビルド情報を返し、障害解析やデプロイ確認に活用します。
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  buildTime:
                    type: string
                    format: date-time
                  gitCommit:
                    type: string
                  gitBranch:
                    type: string
                  environment:
                    type: string
                required:
                  - version
                  - buildTime
      tags:
        - System
  /api/v1/admin/auth/trusted-ip/{userId}:
    post:
      operationId: AdminAuthOperations_addTrustedIp
      description: Add trusted IP address for a user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Admin - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ipAddress:
                  type: string
              required:
                - ipAddress
    delete:
      operationId: AdminAuthOperations_removeTrustedIp
      description: Remove trusted IP address for a user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: ipAddress
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Admin - Authentication
  /api/v1/admin/auth/unlock/{userId}:
    post:
      operationId: AdminAuthOperations_unlockAccount
      description: Unlock a locked user account
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Admin - Authentication
  /api/v1/attachments:
    get:
      operationId: AttachmentOperations_list
      description: サロンまたは顧客単位で登録済みの添付ファイルを一覧し、施術履歴の確認や資料整理に活用します。
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          explode: false
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.PaginatedAttachments"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
  /api/v1/attachments/share-links/{shareLinkId}:
    delete:
      operationId: AttachmentOperations_deleteShareLink
      description: 不要になった共有リンクを失効させ、アクセス制御を適切に保ちます。
      parameters:
        - name: shareLinkId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
      tags:
        - Attachments
  /api/v1/attachments/upload:
    post:
      operationId: AttachmentOperations_uploadFile
      description: スタッフが管理画面からファイル本体を直接アップロードし、予約記録や顧客カルテに紐づけるための操作です。
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Attachment"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AttachmentCreateRequest"
  /api/v1/attachments/upload-url:
    post:
      operationId: AttachmentOperations_getUploadUrl
      description: 顧客やスタッフがブラウザから直接クラウドストレージへアップロードできるよう、短時間だけ有効な署名付きURLを発行します。
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.AttachmentUploadUrlResponse"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AttachmentUploadUrlGetRequest"
  /api/v1/attachments/{attachmentId}:
    get:
      operationId: AttachmentOperations_get
      description: 指定した添付ファイルの詳細情報を取得し、プレビュー表示や関連予約の確認に用います。
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Attachment"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
    delete:
      operationId: AttachmentOperations_delete
      description: 不要になった添付ファイルを削除し、ストレージ容量の最適化と情報漏えいリスクの低減を図ります。
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
      tags:
        - Attachments
  /api/v1/attachments/{attachmentId}/download-url:
    get:
      operationId: AttachmentOperations_getDownloadUrl
      description: 閲覧権限を持つ利用者がファイルを安全に取得できるよう、短時間有効なダウンロードURLを発行します。
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
        - name: inline
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.AttachmentDownloadUrlResponse"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
  /api/v1/attachments/{attachmentId}/share-links:
    post:
      operationId: AttachmentOperations_createShareLink
      description: 施術前後の写真や資料を外部パートナーや顧客と共有するためのリンクを発行します。必要に応じてパスワード保護も適用します。
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.ShareLink"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.ShareLinkCreateRequest"
    get:
      operationId: AttachmentOperations_listShareLinks
      description: 対象ファイルに対して発行済みの共有リンクを一覧し、公開状況や有効期限の管理を行います。
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/Models.ShareLink"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
  /api/v1/auth/2fa/backup-codes:
    post:
      operationId: AuthOperations_generateBackupCodes
      description: Generate new backup codes for 2FA
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  backupCodes:
                    type: array
                    items:
                      type: string
                required:
                  - backupCodes
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthTwoFactorVerifyRequest"
  /api/v1/auth/2fa/disable:
    post:
      operationId: AuthOperations_disableTwoFactor
      description: Disable two-factor authentication
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthTwoFactorDisableRequest"
  /api/v1/auth/2fa/enable:
    post:
      operationId: AuthOperations_enableTwoFactor
      description: Enable two-factor authentication
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthTwoFactorSetupResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthTwoFactorEnableRequest"
  /api/v1/auth/2fa/qr-code:
    get:
      operationId: AuthOperations_getTwoFactorQRCode
      description: Get QR code for 2FA setup
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthTwoFactorSetupResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/2fa/verify:
    post:
      operationId: AuthOperations_verifyTwoFactor
      description: Verify two-factor authentication code
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthTwoFactorVerifyRequest"
  /api/v1/auth/change-password:
    post:
      operationId: AuthOperations_changePassword
      description: Change password
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthPasswordChangeRequest"
  /api/v1/auth/forgot-password:
    post:
      operationId: AuthOperations_forgotPassword
      description: Request password reset
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "429":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthPasswordResetRequest"
      security:
        - {}
  /api/v1/auth/login:
    post:
      operationId: AuthOperations_login
      description: Login with email and password
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthLoginResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "423":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthLoginRequest"
      security:
        - {}
  /api/v1/auth/logout:
    post:
      operationId: AuthOperations_logout
      description: Logout and invalidate session
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/logout-all:
    post:
      operationId: AuthOperations_logoutAll
      description: Logout from all sessions
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/me:
    get:
      operationId: AuthOperations_getCurrentUser
      description: Get current user information
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.User"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/refresh:
    post:
      operationId: AuthOperations_refreshToken
      description: Refresh access token
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthLoginResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthTokenRefreshRequest"
      security:
        - {}
  /api/v1/auth/register:
    post:
      operationId: AuthOperations_register
      description: Register a new user account
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.User"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthRegisterRequest"
      security:
        - {}
  /api/v1/auth/reset-password:
    post:
      operationId: AuthOperations_resetPassword
      description: Reset password with token
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthPasswordResetConfirmRequest"
      security:
        - {}
  /api/v1/auth/reset-password/verify:
    get:
      operationId: AuthOperations_verifyResetToken
      description: Verify password reset token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      security:
        - {}
  /api/v1/auth/sessions:
    get:
      operationId: AuthOperations_getSessions
      description: Get active sessions
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSessionListResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/sessions/{sessionId}:
    delete:
      operationId: AuthOperations_revokeSession
      description: Revoke a specific session
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/verify-email/confirm:
    post:
      operationId: AuthOperations_confirmEmailVerification
      description: Confirm email verification
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AuthEmailVerificationRequest"
      security:
        - {}
  /api/v1/auth/verify-email/send:
    post:
      operationId: AuthOperations_sendEmailVerification
      description: Send email verification
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "429":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/bookings:
    get:
      operationId: BookingOperations_list
      summary: List bookings
      description: サロン・顧客・ステータスなどの条件で予約パッケージを一覧表示し、受付状況を俯瞰します。
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.BookingStatusCodeType"
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.BookingDetail"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Bookings
    post:
      operationId: BookingOperations_create
      summary: Create booking
      description: 新規の予約パッケージを作成し、施術メニューと顧客情報を紐づけて確定します。
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateBookingRequest"
  /api/v1/bookings/{id}:
    get:
      operationId: BookingOperations_get
      summary: Get booking
      description: 個別の予約パッケージ詳細を取得し、関連する予約枠や支払い状況を確認します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.BookingDetail"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
    patch:
      operationId: BookingOperations_update
      summary: Update booking
      description: 既存の予約パッケージ内容を部分的に更新し、顧客要望の変更に対応します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateBookingRequest"
    delete:
      operationId: BookingOperations_delete
      summary: Delete booking
      description: 予約パッケージを削除し、誤登録や無効となった複数予約を整理します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
  /api/v1/bookings/{id}/cancel:
    post:
      operationId: BookingOperations_cancel
      summary: Cancel booking
      description: 確定済みの予約パッケージをキャンセルし、理由と連動予約の取り扱いを記録します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                cancelReservations:
                  type: boolean
  /api/v1/bookings/{id}/confirm:
    post:
      operationId: BookingOperations_confirm
      summary: Confirm booking
      description: 仮状態の予約パッケージを確定ステータスへ変更し、顧客への案内やリソース確保を開始します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
  /api/v1/bookings/{id}/payment:
    post:
      operationId: BookingOperations_processPayment
      summary: Process payment
      description: 予約パッケージに対する決済を処理し、支払い手段・金額・トランザクションIDを保存します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  booking:
                    $ref: "#/components/schemas/Models.Booking"
                  paymentId:
                    $ref: "#/components/schemas/Models.PaymentId"
                required:
                  - booking
                  - paymentId
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  $ref: "#/components/schemas/Models.PaymentMethodType"
                amount:
                  $ref: "#/components/schemas/Models.Money"
                transactionId:
                  type: string
              required:
                - paymentMethod
                - amount
  /api/v1/bookings/{id}/reservations:
    post:
      operationId: BookingOperations_addReservation
      summary: Add reservation to booking
      description: 既存の予約パッケージに個別の予約枠を追加し、まとめて管理します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId:
                  $ref: "#/components/schemas/Models.ReservationId"
              required:
                - reservationId
  /api/v1/bookings/{id}/reservations/{reservationId}:
    delete:
      operationId: BookingOperations_removeReservation
      summary: Remove reservation from booking
      description: 予約パッケージから紐づく予約枠を外し、構成内容を調整します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
        - name: reservationId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
  /api/v1/customers/:
    get:
      operationId: CustomerCrud_list
      summary: List {Name} resources
      description: ページネーションやフィルター条件を指定して対象リソースを一覧取得します。業務画面のリスト表示に利用します。
      parameters:
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.search"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.tags"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.registeredFrom"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.registeredTo"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.status"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.loyaltyTier"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            X-RateLimit-Limit:
              required: true
              description: 一定期間内に許可されるリクエスト上限値。
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: 現在のウィンドウで残っているリクエスト回数。
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: リミットがリセットされる時刻 (UNIX 時間)。
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: レート制限に達した際に再試行可能となるまでの秒数。
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Customer"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "429":
          description: Client error
          headers:
            X-RateLimit-Limit:
              required: true
              description: 一定期間内に許可されるリクエスト上限値。
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: 現在のウィンドウで残っているリクエスト回数。
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: リミットがリセットされる時刻 (UNIX 時間)。
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: レート制限に達した際に再試行可能となるまでの秒数。
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
    post:
      operationId: CustomerCrud_create
      summary: Create new {Name}
      description: 新規リソースを作成し、作成時のバリデーションや重複チェック結果を返却します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateCustomerRequest"
  /api/v1/customers/batch/get:
    post:
      operationId: CustomerCrud_batchGet
      summary: Batch get {Name} resources
      description: 複数IDをまとめて取得し、一覧画面の遅延読み込みや外部連携に利用します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.BatchGetRequest"
  /api/v1/customers/bulk:
    post:
      operationId: CustomerCrud_bulkCreate
      summary: Bulk create {Name} resources
      description: 複数リソースを一括作成し、結果を成功・失敗に分けて返却します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Customer"
                          description: 処理後のビジネス結果。ID 付与や更新後の値などを含む。
                      description: |-
                        一括処理で成功した単一アイテムの結果モデル。
                        元リクエストにおける位置と処理結果を紐づける。
                    description: 正常に処理されたアイテムの一覧。ビジネス結果を含む。
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: 発生したエラー詳細。既定では `ProblemDetails` を使用する。
                      description: |-
                        一括処理で失敗した単一アイテムのエラーモデル。
                        問題箇所を特定し再実行方針を検討する際に利用する。
                    description: エラーとなったアイテムの一覧。問題の詳細を確認できる。
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: 処理件数や所要時間をまとめた統計情報。
                description: |-
                  一括処理の結果を表すレスポンスモデル。
                  成功・失敗の詳細と要約統計を返し、業務オペレーターの振り返りを支援する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.CreateCustomerRequest"
                  minItems: 1
                  maxItems: 100
                  description: 処理対象となるアイテムの配列。1件以上100件以下に制限する。
                continueOnError:
                  type: boolean
                  description: 途中でエラーが発生しても処理を継続するかどうか。既定は false。
                  default: false
                transactional:
                  type: boolean
                  description: トランザクション内で一括処理を行うかどうか。既定は true。
                  default: true
              description: |-
                一括処理のリクエストモデル。
                顧客データの一括更新や予約枠のまとめ登録など、複数レコードをまとめて処理する際に利用する。
    put:
      operationId: CustomerCrud_bulkUpdate
      summary: Bulk update {Name} resources
      description: 複数リソースの更新をまとめて受け付け、バージョン整合性を保ちながら処理します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Customer"
                          description: 処理後のビジネス結果。ID 付与や更新後の値などを含む。
                      description: |-
                        一括処理で成功した単一アイテムの結果モデル。
                        元リクエストにおける位置と処理結果を紐づける。
                    description: 正常に処理されたアイテムの一覧。ビジネス結果を含む。
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: 発生したエラー詳細。既定では `ProblemDetails` を使用する。
                      description: |-
                        一括処理で失敗した単一アイテムのエラーモデル。
                        問題箇所を特定し再実行方針を検討する際に利用する。
                    description: エラーとなったアイテムの一覧。問題の詳細を確認できる。
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: 処理件数や所要時間をまとめた統計情報。
                description: |-
                  一括処理の結果を表すレスポンスモデル。
                  成功・失敗の詳細と要約統計を返し、業務オペレーターの振り返りを支援する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      contactInfo:
                        $ref: "#/components/schemas/Models.ContactInfo"
                      preferences:
                        type: object
                        additionalProperties: {}
                      notes:
                        type: string
                        nullable: true
                      tags:
                        type: array
                        items:
                          type: string
                      birthDate:
                        type: string
                        format: date
                        nullable: true
                      id:
                        $ref: "#/components/schemas/Models.CustomerId"
                    required:
                      - id
                  minItems: 1
                  maxItems: 100
                  description: 処理対象となるアイテムの配列。1件以上100件以下に制限する。
                continueOnError:
                  type: boolean
                  description: 途中でエラーが発生しても処理を継続するかどうか。既定は false。
                  default: false
                transactional:
                  type: boolean
                  description: トランザクション内で一括処理を行うかどうか。既定は true。
                  default: true
              description: |-
                一括処理のリクエストモデル。
                顧客データの一括更新や予約枠のまとめ登録など、複数レコードをまとめて処理する際に利用する。
    delete:
      operationId: CustomerCrud_bulkDelete
      summary: Bulk delete {Name} resources
      description: 複数リソースを一括削除し、成功可否ごとの結果を返却します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        result:
                          type: object
                          properties:
                            id:
                              $ref: "#/components/schemas/Models.CustomerId"
                            deleted:
                              type: boolean
                          required:
                            - id
                            - deleted
                          description: 処理後のビジネス結果。ID 付与や更新後の値などを含む。
                      description: |-
                        一括処理で成功した単一アイテムの結果モデル。
                        元リクエストにおける位置と処理結果を紐づける。
                    description: 正常に処理されたアイテムの一覧。ビジネス結果を含む。
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: 発生したエラー詳細。既定では `ProblemDetails` を使用する。
                      description: |-
                        一括処理で失敗した単一アイテムのエラーモデル。
                        問題箇所を特定し再実行方針を検討する際に利用する。
                    description: エラーとなったアイテムの一覧。問題の詳細を確認できる。
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: 処理件数や所要時間をまとめた統計情報。
                description: |-
                  一括処理の結果を表すレスポンスモデル。
                  成功・失敗の詳細と要約統計を返し、業務オペレーターの振り返りを支援する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.CustomerId"
                permanent:
                  type: boolean
              required:
                - ids
  /api/v1/customers/export:
    post:
      operationId: CustomerCrud_export
      summary: Export {Name} search results
      description: 検索結果を指定形式でエクスポートし、帳票出力や外部共有に活用します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "202":
          description: The request has been accepted for processing, but processing has not yet completed.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum:
                      - pending
                  estimatedTime:
                    type: integer
                    format: int32
                required:
                  - jobId
                  - status
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                search:
                  type: string
                  description: Search in customer name, email, or phone
                tags:
                  type: array
                  items:
                    type: string
                  description: Filter by customer tags
                registeredFrom:
                  type: string
                  format: date-time
                  description: Filter by registration date from
                registeredTo:
                  type: string
                  format: date-time
                  description: Filter by registration date to
                status:
                  type: string
                  enum:
                    - active
                    - inactive
                    - suspended
                    - deleted
                    - blacklisted
                  description: Filter by customer status
                loyaltyTier:
                  type: string
                  enum:
                    - bronze
                    - silver
                    - gold
                    - platinum
                  description: Filter by loyalty tier
                q:
                  type: string
                  description: 全文検索キーワード。名称や説明文を横断的に検索する。
                filter:
                  type: string
                  description: "フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。"
                fields:
                  type: string
                  description: レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。
                exclude:
                  type: string
                  description: レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。
                facets:
                  type: boolean
                  description: ファセット集計を有効化するかどうか。true で各項目の件数を集計する。
                  default: false
                facetFields:
                  type: array
                  items:
                    type: string
                  description: 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。
                limit:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 100
                  description: 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。
                  default: 20
                cursor:
                  type: string
                  description: 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。
                sortBy:
                  type: string
                  description: ソート対象フィールド。予約日時や作成日時など業務軸を指定する。
                sortOrder:
                  type: string
                  enum:
                    - asc
                    - desc
                  description: ソート順序。`asc` は昇順、`desc` は降順を表す。
                  default: asc
                format:
                  type: string
                  enum:
                    - csv
                    - json
                    - excel
                exportFields:
                  type: array
                  items:
                    type: string
              required:
                - format
  /api/v1/customers/merge:
    post:
      operationId: CustomerOperations_merge
      summary: Merge customer records
      description: 重複登録された顧客レコードを統合し、履歴やポイントを一本化します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                primaryCustomerId:
                  allOf:
                    - $ref: "#/components/schemas/Models.CustomerId"
                  description: 統合後も残すメイン顧客ID
                secondaryCustomerId:
                  allOf:
                    - $ref: "#/components/schemas/Models.CustomerId"
                  description: 統合して削除するサブ顧客ID
                conflictResolution:
                  type: string
                  enum:
                    - keep_primary
                    - keep_secondary
                    - keep_newest
                  description: 重複データの優先ルール
              required:
                - primaryCustomerId
                - secondaryCustomerId
  /api/v1/customers/search:
    get:
      operationId: CustomerCrud_search
      summary: Search {Name} resources
      description: ファセットや複合条件を利用してリソースを検索し、結果と統計情報を返却します。
      parameters:
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.search"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.tags"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.registeredFrom"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.registeredTo"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.status"
        - $ref: "#/components/parameters/Models.SearchCustomerRequest.loyaltyTier"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - meta
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Customer"
                    description: 検索でヒットした結果一覧。サロンカードやメニュー一覧に利用。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.SearchMeta"
                    description: 検索条件や件数などのメタ情報。ページングやログ解析に活用する。
                  facets:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/components/schemas/Models.Facet"
                    description: ファセット集計結果。各フィールドごとの件数分布を保持する。
                description: |-
                  検索結果とファセット集計をまとめたレスポンスモデル。
                  キーワード検索の結果表示と、絞り込み条件の提示を同時に実現する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}:
    get:
      operationId: CustomerCrud_get
      summary: Get {Name} by ID
      description: IDを指定して単一リソースを取得し、詳細表示や編集フォームの初期値に使用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: fields
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-None-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
            Last-Modified:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "304":
          description: The client has made a conditional request and the resource has not been modified.
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
    put:
      operationId: CustomerCrud_update
      summary: Update {Name}
      description: 既存リソースを全項目更新し、最新状態とバージョン情報を返却します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateCustomerRequest"
    patch:
      operationId: CustomerCrud_patch
      summary: Partially update {Name}
      description: 必要なフィールドのみを部分更新し、変更差分を効率的に反映します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/Models.FieldMask"
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateCustomerRequestUpdate"
    delete:
      operationId: CustomerCrud_delete
      summary: Delete {Name}
      description: リソースを削除し、必要に応じて論理削除か物理削除かを選択します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: permanent
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/bookings:
    get:
      operationId: CustomerOperations_getBookings
      summary: Get customer bookings
      description: 顧客単位の予約パッケージ情報を取得し、複数施術を跨いだ利用状況を把握します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.BookingStatusCodeType"
          explode: false
        - name: from
          in: query
          required: false
          description: 取得対象期間の開始日時
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          description: 取得対象期間の終了日時
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.BookingDetail"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/deletion-request:
    post:
      operationId: CustomerOperations_requestDeletion
      summary: Request customer data deletion
      description: 顧客からの削除要請を受け付け、規制に沿った消去フローを開始します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "202":
          description: The request has been accepted for processing, but processing has not yet completed.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: object
                    properties:
                      requestId:
                        type: string
                        description: 削除リクエストID
                      scheduledDate:
                        type: string
                        format: date-time
                        description: 予定される削除日
                      gracePeriodDays:
                        type: integer
                        format: int32
                        description: 猶予期間（日数）
                    required:
                      - requestId
                      - scheduledDate
                      - gracePeriodDays
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: 削除を希望する理由
                confirmed:
                  type: boolean
                  description: 削除に伴う影響を理解しているか
              required:
                - reason
                - confirmed
  /api/v1/customers/{id}/export:
    get:
      operationId: CustomerOperations_exportData
      summary: Export customer data
      description: 顧客が自身のデータを取得できるようエクスポートし、GDPR等の個人情報規制に対応します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: format
          in: query
          required: false
          description: エクスポート形式
          schema:
            type: string
            enum:
              - json
              - csv
              - pdf
            default: json
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            Content-Disposition:
              required: true
              schema:
                type: string
          content:
            "*/*":
              schema:
                type: string
                format: binary
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/history:
    get:
      operationId: CustomerCrud_getHistory
      summary: Get {Name} audit history
      description: 対象リソースの監査履歴を取得し、変更者や変更内容を追跡します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Operations.AuditEntry"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/loyalty-points:
    post:
      operationId: CustomerOperations_addLoyaltyPoints
      summary: Add loyalty points
      description: 来店やキャンペーンに応じてロイヤルティポイントを加算し、顧客維持を促進します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: object
                    properties:
                      balance:
                        type: integer
                        format: int32
                        description: 更新後のポイント残高
                      transactionId:
                        type: string
                        description: トランザクションID
                    required:
                      - balance
                      - transactionId
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                points:
                  type: integer
                  format: int32
                  minimum: 1
                  description: 加算するポイント数
                reason:
                  type: string
                  description: ポイント加算の理由
                referenceId:
                  type: string
                  description: "関連する参照ID（例: 予約ID）"
              required:
                - points
                - reason
  /api/v1/customers/{id}/preferences:
    put:
      operationId: CustomerOperations_updatePreferences
      summary: Update customer preferences
      description: 顧客の施術好みや連絡手段などの希望設定を更新し、パーソナライズされた提案に反映します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.CustomerPreferences"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CustomerPreferencesUpdateRequest"
  /api/v1/customers/{id}/profile:
    get:
      operationId: CustomerOperations_getProfile
      summary: Get customer profile
      description: 顧客の基本情報に加え、嗜好や連絡先など拡張情報を取得し、パーソナライズ対応に活かします。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.CustomerProfile"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/reservations:
    get:
      operationId: CustomerOperations_getReservations
      summary: Get customer reservations
      description: 顧客が保持する予約履歴を取得し、来店予定や過去施術の確認に利用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.ReservationStatusType"
          explode: false
        - name: from
          in: query
          required: false
          description: 取得対象期間の開始日時
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          description: 取得対象期間の終了日時
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ReservationDetail"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/restore:
    post:
      operationId: CustomerCrud_restore
      summary: Restore deleted {Name}
      description: 削除済みリソースを復元し、誤削除への迅速なリカバリを可能にします。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/statistics:
    get:
      operationId: CustomerOperations_getStatistics
      summary: Get customer statistics
      description: 来店頻度や売上貢献度など顧客指標を集計し、セグメント施策やVIP判定に利用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: period
          in: query
          required: false
          description: "集計対象期間（例: '7d', '1m', '3m', '1y'）"
          schema:
            type: string
            default: 1y
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.CustomerStatistics"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/versions/{version}:
    get:
      operationId: CustomerCrud_getVersion
      summary: Get {Name} version
      description: 指定したバージョンのリソース状態を取得し、過去状態の確認や比較に利用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: version
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/reservations:
    get:
      operationId: ReservationOperations_list
      summary: List reservations
      description: サロン、顧客、スタッフなどの条件で予約一覧を取得し、当日の稼働状況を把握します。
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.ReservationStatusType"
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ReservationDetail"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Reservations
    post:
      operationId: ReservationOperations_create
      summary: Create reservation
      description: 新しい施術予約を登録し、枠の確保と関連リソースの仮押さえを行います。
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateReservationRequest"
  /api/v1/reservations/{id}:
    get:
      operationId: ReservationOperations_get
      summary: Get reservation
      description: 個別予約の詳細情報を取得し、施術内容や担当者、タイムラインを確認します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ReservationDetail"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
    patch:
      operationId: ReservationOperations_update
      summary: Update reservation
      description: 予約内容を部分的に更新し、サービス内容や担当スタッフの変更に対応します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateReservationRequest"
  /api/v1/reservations/{id}/cancel:
    post:
      operationId: ReservationOperations_cancel
      summary: Cancel reservation
      description: 確定済みの予約をキャンセルし、理由の記録と枠の開放を行います。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
  /api/v1/reservations/{id}/complete:
    post:
      operationId: ReservationOperations_complete
      summary: Complete reservation
      description: 施術完了を登録し、実績データや売上計上に利用するステータスへ更新します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
  /api/v1/reservations/{id}/reschedule:
    post:
      operationId: ReservationOperations_reschedule
      summary: Reschedule reservation
      description: 予約日時や担当者の調整が必要な際に、新しいスケジュールへ付け替えます。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newStartTime:
                  type: string
                  format: date-time
                staffId:
                  $ref: "#/components/schemas/Models.StaffId"
              required:
                - newStartTime
  /api/v1/reviews:
    get:
      operationId: ReviewOperations_list
      summary: List reviews
      description: 顧客やスタッフ、評価点でレビューを絞り込み、店舗運営の改善材料を抽出します。
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: bookingId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.BookingId"
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: minRating
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
        - name: isVerified
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Review"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Reviews
    post:
      operationId: ReviewOperations_create
      summary: Create review
      description: 施術完了後に顧客がレビューを投稿し、サービス品質の可視化と信頼獲得につなげます。
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Review"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.ReviewCreateRequest"
  /api/v1/reviews/{id}:
    get:
      operationId: ReviewOperations_get
      summary: Get review
      description: 単一レビューの詳細を表示し、コメント内容や評価指標を確認します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Review"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
    patch:
      operationId: ReviewOperations_update
      summary: Update review
      description: 顧客が投稿後のレビューを修正し、誤記修正や追記を反映します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Review"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.ReviewUpdateRequest"
    delete:
      operationId: ReviewOperations_delete
      summary: Delete review
      description: レビューの削除要請に応じて投稿を非表示または除去し、コンプライアンスを維持します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
  /api/v1/reviews/{id}/helpful:
    post:
      operationId: ReviewOperations_markHelpful
      summary: Mark review as helpful
      description: 他の利用者に役立つレビューをマーキングし、信頼性の高い声を強調します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  helpfulCount:
                    type: integer
                    format: int32
                required:
                  - helpfulCount
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
  /api/v1/reviews/{id}/report:
    post:
      operationId: ReviewOperations_report
      summary: Report review
      description: 不適切な内容や虚偽が疑われるレビューを通報し、運営による対応フローへ送ります。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportId:
                    type: string
                required:
                  - reportId
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                details:
                  type: string
              required:
                - reason
  /api/v1/salons/:
    get:
      operationId: SalonCrud_list
      summary: List {Name} resources
      description: ページネーションやフィルター条件を指定して対象リソースを一覧取得します。業務画面のリスト表示に利用します。
      parameters:
        - $ref: "#/components/parameters/Models.SearchSalonRequest.keyword"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.city"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.prefecture"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.categories"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.features"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.isActive"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.minRating"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.maxDistance"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.lat"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.lon"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.openNow"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.openAt"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            X-RateLimit-Limit:
              required: true
              description: 一定期間内に許可されるリクエスト上限値。
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: 現在のウィンドウで残っているリクエスト回数。
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: リミットがリセットされる時刻 (UNIX 時間)。
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: レート制限に達した際に再試行可能となるまでの秒数。
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Salon"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "429":
          description: Client error
          headers:
            X-RateLimit-Limit:
              required: true
              description: 一定期間内に許可されるリクエスト上限値。
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: 現在のウィンドウで残っているリクエスト回数。
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: リミットがリセットされる時刻 (UNIX 時間)。
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: レート制限に達した際に再試行可能となるまでの秒数。
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
    post:
      operationId: SalonCrud_create
      summary: Create new {Name}
      description: 新規リソースを作成し、作成時のバリデーションや重複チェック結果を返却します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateSalonRequest"
  /api/v1/salons/batch/get:
    post:
      operationId: SalonCrud_batchGet
      summary: Batch get {Name} resources
      description: 複数IDをまとめて取得し、一覧画面の遅延読み込みや外部連携に利用します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Salon"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.BatchGetRequest"
  /api/v1/salons/bulk:
    post:
      operationId: SalonCrud_bulkCreate
      summary: Bulk create {Name} resources
      description: 複数リソースを一括作成し、結果を成功・失敗に分けて返却します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Salon"
                          description: 処理後のビジネス結果。ID 付与や更新後の値などを含む。
                      description: |-
                        一括処理で成功した単一アイテムの結果モデル。
                        元リクエストにおける位置と処理結果を紐づける。
                    description: 正常に処理されたアイテムの一覧。ビジネス結果を含む。
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: 発生したエラー詳細。既定では `ProblemDetails` を使用する。
                      description: |-
                        一括処理で失敗した単一アイテムのエラーモデル。
                        問題箇所を特定し再実行方針を検討する際に利用する。
                    description: エラーとなったアイテムの一覧。問題の詳細を確認できる。
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: 処理件数や所要時間をまとめた統計情報。
                description: |-
                  一括処理の結果を表すレスポンスモデル。
                  成功・失敗の詳細と要約統計を返し、業務オペレーターの振り返りを支援する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.CreateSalonRequest"
                  minItems: 1
                  maxItems: 100
                  description: 処理対象となるアイテムの配列。1件以上100件以下に制限する。
                continueOnError:
                  type: boolean
                  description: 途中でエラーが発生しても処理を継続するかどうか。既定は false。
                  default: false
                transactional:
                  type: boolean
                  description: トランザクション内で一括処理を行うかどうか。既定は true。
                  default: true
              description: |-
                一括処理のリクエストモデル。
                顧客データの一括更新や予約枠のまとめ登録など、複数レコードをまとめて処理する際に利用する。
    put:
      operationId: SalonCrud_bulkUpdate
      summary: Bulk update {Name} resources
      description: 複数リソースの更新をまとめて受け付け、バージョン整合性を保ちながら処理します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Salon"
                          description: 処理後のビジネス結果。ID 付与や更新後の値などを含む。
                      description: |-
                        一括処理で成功した単一アイテムの結果モデル。
                        元リクエストにおける位置と処理結果を紐づける。
                    description: 正常に処理されたアイテムの一覧。ビジネス結果を含む。
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: 発生したエラー詳細。既定では `ProblemDetails` を使用する。
                      description: |-
                        一括処理で失敗した単一アイテムのエラーモデル。
                        問題箇所を特定し再実行方針を検討する際に利用する。
                    description: エラーとなったアイテムの一覧。問題の詳細を確認できる。
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: 処理件数や所要時間をまとめた統計情報。
                description: |-
                  一括処理の結果を表すレスポンスモデル。
                  成功・失敗の詳細と要約統計を返し、業務オペレーターの振り返りを支援する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: 名称変更を行う場合に指定
                      description:
                        type: string
                        nullable: true
                        description: 紹介文を更新する場合に指定（null指定で初期化可能）
                      address:
                        allOf:
                          - $ref: "#/components/schemas/Models.Address"
                        description: 住所情報の差し替えが必要な場合に指定
                      contactInfo:
                        allOf:
                          - $ref: "#/components/schemas/Models.ContactInfo"
                        description: 電話番号やメールアドレス等の連絡先を更新する場合に指定
                      openingHours:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.OpeningHours"
                        description: 通常営業時間の更新が必要な場合に指定
                      businessHours:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.BusinessHours"
                        nullable: true
                        description: 特別営業時間やシフト設定の更新に利用（null指定で初期化可能）
                      imageUrls:
                        type: array
                        items:
                          type: string
                        description: 画像URLリストを更新する場合に指定
                      features:
                        type: array
                        items:
                          type: string
                        description: 特徴タグの追加・削除を行う場合に指定
                      id:
                        $ref: "#/components/schemas/Models.SalonId"
                    required:
                      - id
                  minItems: 1
                  maxItems: 100
                  description: 処理対象となるアイテムの配列。1件以上100件以下に制限する。
                continueOnError:
                  type: boolean
                  description: 途中でエラーが発生しても処理を継続するかどうか。既定は false。
                  default: false
                transactional:
                  type: boolean
                  description: トランザクション内で一括処理を行うかどうか。既定は true。
                  default: true
              description: |-
                一括処理のリクエストモデル。
                顧客データの一括更新や予約枠のまとめ登録など、複数レコードをまとめて処理する際に利用する。
    delete:
      operationId: SalonCrud_bulkDelete
      summary: Bulk delete {Name} resources
      description: 複数リソースを一括削除し、成功可否ごとの結果を返却します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        result:
                          type: object
                          properties:
                            id:
                              $ref: "#/components/schemas/Models.SalonId"
                            deleted:
                              type: boolean
                          required:
                            - id
                            - deleted
                          description: 処理後のビジネス結果。ID 付与や更新後の値などを含む。
                      description: |-
                        一括処理で成功した単一アイテムの結果モデル。
                        元リクエストにおける位置と処理結果を紐づける。
                    description: 正常に処理されたアイテムの一覧。ビジネス結果を含む。
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: 元リクエスト内でのインデックス。0 始まり。
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: 発生したエラー詳細。既定では `ProblemDetails` を使用する。
                      description: |-
                        一括処理で失敗した単一アイテムのエラーモデル。
                        問題箇所を特定し再実行方針を検討する際に利用する。
                    description: エラーとなったアイテムの一覧。問題の詳細を確認できる。
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: 処理件数や所要時間をまとめた統計情報。
                description: |-
                  一括処理の結果を表すレスポンスモデル。
                  成功・失敗の詳細と要約統計を返し、業務オペレーターの振り返りを支援する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.SalonId"
                permanent:
                  type: boolean
              required:
                - ids
  /api/v1/salons/export:
    post:
      operationId: SalonCrud_export
      summary: Export {Name} search results
      description: 検索結果を指定形式でエクスポートし、帳票出力や外部共有に活用します。
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "202":
          description: The request has been accepted for processing, but processing has not yet completed.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum:
                      - pending
                  estimatedTime:
                    type: integer
                    format: int32
                required:
                  - jobId
                  - status
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                keyword:
                  type: string
                  description: 検索キーワード。qパラメータのエイリアス
                city:
                  type: string
                  description: 市区町村名による絞り込み
                prefecture:
                  type: string
                  description: 都道府県名による絞り込み
                categories:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.ServiceCategoryType"
                  description: サービスカテゴリ（カット・カラー等）による絞り込み
                features:
                  type: array
                  items:
                    type: string
                  description: 設備やこだわり条件などの特徴タグによる絞り込み
                isActive:
                  type: boolean
                  description: 営業中サロンのみを対象にするかどうか
                minRating:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 5
                  description: 最低評価値による絞り込み
                maxDistance:
                  type: number
                  format: float
                  minimum: 0
                  description: 検索基点からの最大距離（km）
                lat:
                  type: number
                  format: double
                  description: 距離計算に使用する基準緯度
                lon:
                  type: number
                  format: double
                  description: 距離計算に使用する基準経度
                openNow:
                  type: boolean
                  description: 現在営業中かどうかで絞り込むフラグ
                openAt:
                  type: string
                  format: date-time
                  description: 特定日時に営業しているサロンを探すための基準日時
                q:
                  type: string
                  description: 全文検索キーワード。名称や説明文を横断的に検索する。
                filter:
                  type: string
                  description: "フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。"
                fields:
                  type: string
                  description: レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。
                exclude:
                  type: string
                  description: レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。
                facets:
                  type: boolean
                  description: ファセット集計を有効化するかどうか。true で各項目の件数を集計する。
                  default: false
                facetFields:
                  type: array
                  items:
                    type: string
                  description: 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。
                limit:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 100
                  description: 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。
                  default: 20
                cursor:
                  type: string
                  description: 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。
                sortBy:
                  type: string
                  description: ソート対象フィールド。予約日時や作成日時など業務軸を指定する。
                sortOrder:
                  type: string
                  enum:
                    - asc
                    - desc
                  description: ソート順序。`asc` は昇順、`desc` は降順を表す。
                  default: asc
                format:
                  type: string
                  enum:
                    - csv
                    - json
                    - excel
                exportFields:
                  type: array
                  items:
                    type: string
              required:
                - format
  /api/v1/salons/nearby:
    get:
      operationId: SalonOperations_getNearby
      summary: Get nearby salons
      description: 位置情報と希望条件から近隣サロンを検索し、顧客に最適な選択肢を提示します。
      parameters:
        - name: lat
          in: query
          required: true
          description: 緯度
          schema:
            type: number
            format: double
          explode: false
        - name: lon
          in: query
          required: true
          description: 経度
          schema:
            type: number
            format: double
          explode: false
        - name: radius
          in: query
          required: false
          description: 検索半径（キロメートル）
          schema:
            type: number
            format: float
            minimum: 0.1
            maximum: 100
            default: 5
          explode: false
        - name: categories
          in: query
          required: false
          description: 対象サービスカテゴリのフィルター
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Models.ServiceCategoryType"
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.SalonWithDistance"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/recommendations:
    get:
      operationId: SalonOperations_getRecommendations
      summary: Get personalized salon recommendations
      description: 顧客の嗜好や履歴にもとづきおすすめサロンを提示し、再来店促進や新規獲得を支援します。
      parameters:
        - name: customerId
          in: query
          required: false
          description: パーソナライズ対象となる顧客ID
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: categories
          in: query
          required: false
          description: 興味のあるサービスカテゴリ
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Models.ServiceCategoryType"
          explode: false
        - name: priceRange
          in: query
          required: false
          description: 希望する価格帯
          schema:
            type: string
            enum:
              - budget
              - medium
              - premium
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.SalonRecommendation"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/search:
    get:
      operationId: SalonCrud_search
      summary: Search {Name} resources
      description: ファセットや複合条件を利用してリソースを検索し、結果と統計情報を返却します。
      parameters:
        - $ref: "#/components/parameters/Models.SearchSalonRequest.keyword"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.city"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.prefecture"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.categories"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.features"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.isActive"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.minRating"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.maxDistance"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.lat"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.lon"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.openNow"
        - $ref: "#/components/parameters/Models.SearchSalonRequest.openAt"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - meta
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Salon"
                    description: 検索でヒットした結果一覧。サロンカードやメニュー一覧に利用。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.SearchMeta"
                    description: 検索条件や件数などのメタ情報。ページングやログ解析に活用する。
                  facets:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/components/schemas/Models.Facet"
                    description: ファセット集計結果。各フィールドごとの件数分布を保持する。
                description: |-
                  検索結果とファセット集計をまとめたレスポンスモデル。
                  キーワード検索の結果表示と、絞り込み条件の提示を同時に実現する。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}:
    get:
      operationId: SalonCrud_get
      summary: Get {Name} by ID
      description: IDを指定して単一リソースを取得し、詳細表示や編集フォームの初期値に使用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: fields
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-None-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
            Last-Modified:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "304":
          description: The client has made a conditional request and the resource has not been modified.
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
    put:
      operationId: SalonCrud_update
      summary: Update {Name}
      description: 既存リソースを全項目更新し、最新状態とバージョン情報を返却します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateSalonRequest"
    patch:
      operationId: SalonCrud_patch
      summary: Partially update {Name}
      description: 必要なフィールドのみを部分更新し、変更差分を効率的に反映します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/Models.FieldMask"
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateSalonRequestUpdate"
    delete:
      operationId: SalonCrud_delete
      summary: Delete {Name}
      description: リソースを削除し、必要に応じて論理削除か物理削除かを選択します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: permanent
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/availability:
    post:
      operationId: SalonOperations_checkAvailability
      summary: Check salon availability
      description: 希望日時にサロン全体で対応可能な枠があるかを判定し、予約導線での可用性表示に利用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.SalonAvailabilityResponse"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.SalonAvailabilityRequest"
  /api/v1/salons/{id}/history:
    get:
      operationId: SalonCrud_getHistory
      summary: Get {Name} audit history
      description: 対象リソースの監査履歴を取得し、変更者や変更内容を追跡します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Operations.AuditEntry"
                    description: 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。
                description: |-
                  カーソル方式のページネーションレスポンスモデル。
                  `CursorPaginationParams` を受けたAPIが検索結果とページング状態をまとめて返却する際に利用する。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/images/{imageId}:
    delete:
      operationId: SalonOperations_deleteImage
      summary: Delete salon image
      description: 掲載中のサロン画像を削除し、ブランドトーンの統一や情報更新を行います。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: imageId
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/restore:
    post:
      operationId: SalonCrud_restore
      summary: Restore deleted {Name}
      description: 削除済みリソースを復元し、誤削除への迅速なリカバリを可能にします。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/staff/{staffId}/schedule:
    put:
      operationId: SalonOperations_updateStaffSchedule
      summary: Update staff schedule
      description: サロン所属スタッフのシフトを更新し、予約枠や勤怠管理との整合を取ります。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.StaffScheduleManagement"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.StaffScheduleUpdateRequest"
  /api/v1/salons/{id}/statistics:
    get:
      operationId: SalonOperations_getStatistics
      summary: Get salon statistics
      description: サロンの売上や予約件数など主要指標を取得し、経営判断や施策検討に活用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: period
          in: query
          required: false
          description: "集計期間（例: '7d', '1m', '3m'）"
          schema:
            type: string
            default: 1m
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.SalonStatistics"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/subscribe:
    post:
      operationId: SalonOperations_subscribe
      summary: Subscribe to salon updates
      description: サロンのニュースやキャンペーン更新を購読登録し、ロイヤル顧客との接点を強化します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.SalonSubscriptionResponse"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.SalonSubscriptionRequest"
  /api/v1/salons/{id}/versions/{version}:
    get:
      operationId: SalonCrud_getVersion
      summary: Get {Name} version
      description: 指定したバージョンのリソース状態を取得し、過去状態の確認や比較に利用します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: version
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: レスポンスの主体となるビジネスデータ。
                  meta:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    nullable: true
                    description: リクエスト識別子やバージョン情報など共通メタデータ。
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    nullable: true
                    description: 関連リソースや次アクションへのリンク情報。
                description: |-
                  API 成功レスポンスの共通ラッパーモデル。
                  サロン検索や予約登録など多様なユースケースで応答形式を統一し、クライアント実装を簡潔に保つ。
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{salonId}/available-slots:
    get:
      operationId: AvailabilityOperations_getAvailableSlots
      summary: Get available slots
      description: 指定日の予約可能枠を取得し、空き枠一覧や予約フォームに反映します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: serviceId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
          explode: false
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
        - name: duration
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Models.AvailableSlot"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
  /api/v1/salons/{salonId}/available-slots/check:
    post:
      operationId: AvailabilityOperations_checkAvailability
      summary: Check availability
      description: 希望する日時・スタッフの組み合わせが予約可能か即時判定し、ダブルブッキングを防ぎます。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAvailable:
                    type: boolean
                  conflicts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ReservationId"
                required:
                  - isAvailable
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staffId:
                  $ref: "#/components/schemas/Models.StaffId"
                serviceId:
                  $ref: "#/components/schemas/Models.ServiceId"
                startTime:
                  type: string
                  format: date-time
              required:
                - staffId
                - serviceId
                - startTime
  /api/v1/salons/{salonId}/reviews:
    get:
      operationId: SalonReviewOperations_getSalonReviews
      summary: Get salon reviews
      description: サロンに紐づくレビュー一覧を取得し、並び替え条件に応じて顧客の声を提示します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum:
              - recent
              - rating
              - helpful
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Review"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Reviews
  /api/v1/salons/{salonId}/reviews/summary:
    get:
      operationId: SalonReviewOperations_getSummary
      summary: Get salon reviews summary
      description: サロン全体の平均評価や件数などの概要指標を取得し、ダッシュボード表示に利用します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ReviewSummary"
      tags:
        - Reviews
  /api/v1/salons/{salonId}/services:
    get:
      operationId: ServiceOperations_list
      summary: List salon services
      description: サロン内の提供メニューをカテゴリ別に一覧し、予約画面や在庫管理との連携に活用します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: category
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.ServiceCategoryType"
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Service"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Services
    post:
      operationId: ServiceOperations_create
      summary: Create service
      description: 新しい施術メニューを登録し、価格・施術時間・提供条件を設定します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Service"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateServiceRequest"
  /api/v1/salons/{salonId}/services/bulk:
    patch:
      operationId: ServiceOperations_bulkUpdate
      summary: Bulk update services
      description: 複数メニューの共通項目を一括更新し、季節キャンペーンや価格調整を効率化します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ServiceId"
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceId:
                          $ref: "#/components/schemas/Models.ServiceId"
                        error:
                          type: string
                      required:
                        - serviceId
                        - error
                required:
                  - updated
                  - failed
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.ServiceId"
                updates:
                  $ref: "#/components/schemas/Models.UpdateServiceRequestUpdate"
  /api/v1/salons/{salonId}/services/{id}:
    get:
      operationId: ServiceOperations_get
      summary: Get service
      description: 特定メニューの詳細情報を取得し、予約システムやスタッフ教育に必要な内容を確認します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Service"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
    put:
      operationId: ServiceOperations_update
      summary: Update service
      description: 既存メニューの内容を更新し、料金改定や提供条件の変更に対応します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Service"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateServiceRequest"
    delete:
      operationId: ServiceOperations_delete
      summary: Delete service
      description: 提供終了となったメニューを削除し、予約導線から除外します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
  /api/v1/salons/{salonId}/staff:
    get:
      operationId: StaffOperations_list
      summary: List staff members
      description: サロンに所属するスタッフ一覧を取得し、配置状況や担当可能メニューを確認します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Staff"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Staff
    post:
      operationId: StaffOperations_create
      summary: Create staff member
      description: 新しいスタッフを登録し、プロフィール情報や担当メニューの設定を開始します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Staff"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateStaffRequest"
  /api/v1/salons/{salonId}/staff/{id}:
    get:
      operationId: StaffOperations_get
      summary: Get staff member
      description: 特定スタッフの詳細情報を取得し、顧客向け表示や社内確認に利用します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Staff"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
    put:
      operationId: StaffOperations_update
      summary: Update staff member
      description: スタッフのプロフィールや担当メニュー、表示可否を更新します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Staff"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateStaffRequest"
    delete:
      operationId: StaffOperations_delete
      summary: Delete staff member
      description: 退職や契約終了に伴いスタッフを削除し、予約導線から除外します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
  /api/v1/salons/{salonId}/staff/{id}/availability:
    get:
      operationId: StaffOperations_getAvailability
      summary: Get staff availability
      description: 指定日のスタッフ空き状況を取得し、予約枠の提案や調整に活用します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Models.StaffAvailability"
      tags:
        - Staff
    put:
      operationId: StaffOperations_updateAvailability
      summary: Update staff availability
      description: スタッフの稼働予定を更新し、シフト変更や臨時休みを反映します。
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Models.StaffAvailability"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Models.StaffAvailability"
  /api/v1/service-categories:
    get:
      operationId: CategoryOperations_listCategories
      summary: List service categories
      description: 登録済みのカテゴリ一覧を取得し、メニュー分類や表示順を管理します。
      parameters:
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.CategoryModel"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Services
    post:
      operationId: CategoryOperations_createCategory
      summary: Create service category
      description: 新しい施術カテゴリを作成し、階層構造や表示順を定義します。
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.CategoryModel"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  $ref: "#/components/schemas/Models.CategoryId"
                displayOrder:
                  type: integer
                  format: int32
              required:
                - name
                - description
                - displayOrder
  /api/v1/service-categories/{id}:
    put:
      operationId: CategoryOperations_updateCategory
      summary: Update service category
      description: 既存カテゴリを更新し、名称や表示順、親子関係を調整します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CategoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.CategoryModel"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  $ref: "#/components/schemas/Models.CategoryId"
                displayOrder:
                  type: integer
                  format: int32
                isActive:
                  type: boolean
    delete:
      operationId: CategoryOperations_deleteCategory
      summary: Delete service category
      description: 利用されなくなったカテゴリを削除し、メニュー構成を整理します。
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CategoryId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
  /api/v1/share/{shareToken}:
    get:
      operationId: ShareOperations_getSharedFile
      description: 共有リンクとパスワードを確認し、公開対象ファイルのメタ情報を閲覧者に提示します。
      parameters:
        - name: shareToken
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Attachment"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Share
  /api/v1/share/{shareToken}/download:
    get:
      operationId: ShareOperations_downloadSharedFile
      description: 共有リンク利用者が安全にファイル本体を取得できるよう、署名付きダウンロードURLを返却します。
      parameters:
        - name: shareToken
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.AttachmentDownloadUrlResponse"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Share
  /api/v1/staff/search:
    get:
      operationId: GlobalStaffOperations_searchStaff
      summary: Search staff across all salons
      description: 専門分野や地域条件でスタッフを横断検索し、顧客の指名ニーズに応えます。
      parameters:
        - name: specialty
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: city
          in: query
          required: false
          schema:
            type: string
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Staff"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Staff
  /api/v1/staff/{staffId}/reviews:
    get:
      operationId: StaffReviewOperations_getStaffReviews
      summary: Get staff reviews
      description: 特定スタッフに紐づくレビュー一覧を取得し、個別フィードバックとして活用します。
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Review"
                    description: 取得した要素の配列。
                  total:
                    type: integer
                    format: int32
                    description: 条件に一致する全件数。
                  limit:
                    type: integer
                    format: int32
                    description: 1ページあたりの件数。
                  offset:
                    type: integer
                    format: int32
                    description: 取得開始位置のオフセット。
                description: ページネーションされた一覧レスポンスの共通構造。
      tags:
        - Reviews
  /api/v1/staff/{staffId}/reviews/summary:
    get:
      operationId: StaffReviewOperations_getStaffSummary
      summary: Get staff reviews summary
      description: スタッフ別の平均評価やレビュー数を集計し、人事評価や表彰に用います。
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ReviewSummary"
      tags:
        - Reviews
  /inventory:
    get:
      operationId: InventoryOperations_listInventoryItems
      description: List inventory items with filters
      parameters:
        - $ref: "#/components/parameters/Models.InventorySearchRequest.salonId"
        - $ref: "#/components/parameters/Models.InventorySearchRequest.category"
        - $ref: "#/components/parameters/Models.InventorySearchRequest.status"
        - $ref: "#/components/parameters/Models.InventorySearchRequest.lowStock"
        - $ref: "#/components/parameters/Models.InventorySearchRequest.expiringSoon"
        - $ref: "#/components/parameters/Models.SearchParams.q"
        - $ref: "#/components/parameters/Models.SearchParams.sortBy"
        - $ref: "#/components/parameters/Models.SearchParams.sortOrder"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.InventoryItem"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
    post:
      operationId: InventoryOperations_createInventoryItem
      description: Create new inventory item
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.InventoryItem"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.InventoryItemCreateRequest"
  /inventory-alerts:
    get:
      operationId: InventoryAlertOperations_getActiveAlerts
      description: Get active inventory alerts
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - low_stock
              - expiring
              - expired
              - overstock
          explode: false
        - name: severity
          in: query
          required: false
          schema:
            type: string
            enum:
              - info
              - warning
              - critical
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.InventoryAlert"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory Alerts
  /inventory-alerts/summary:
    get:
      operationId: InventoryAlertOperations_getAlertSummary
      description: Get alert summary
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          totalAlerts:
                            type: integer
                            format: int32
                          criticalAlerts:
                            type: integer
                            format: int32
                          warningAlerts:
                            type: integer
                            format: int32
                          infoAlerts:
                            type: integer
                            format: int32
                          unacknowledged:
                            type: integer
                            format: int32
                        required:
                          - totalAlerts
                          - criticalAlerts
                          - warningAlerts
                          - infoAlerts
                          - unacknowledged
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory Alerts
  /inventory-alerts/{inventoryId}/acknowledge:
    post:
      operationId: InventoryAlertOperations_acknowledgeAlert
      description: Acknowledge alert
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.InventoryAlert"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acknowledgedBy:
                  $ref: "#/components/schemas/Models.StaffId"
                notes:
                  type: string
              required:
                - acknowledgedBy
  /inventory/expiring:
    get:
      operationId: InventoryOperations_getExpiringItems
      description: Get expiring items
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: days
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 30
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.InventoryItem"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
  /inventory/low-stock:
    get:
      operationId: InventoryOperations_getLowStockItems
      description: Get low stock items
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: threshold
          in: query
          required: false
          schema:
            type: number
            format: float
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.InventoryItem"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
  /inventory/movement:
    post:
      operationId: InventoryOperations_recordStockMovement
      description: Record stock movement
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.StockMovement"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.StockMovementCreateRequest"
  /inventory/stock-count:
    post:
      operationId: InventoryOperations_performStockCount
      description: Perform stock count
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          adjustments:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.StockMovement"
                          discrepancies:
                            type: array
                            items:
                              type: object
                              properties:
                                inventoryId:
                                  $ref: "#/components/schemas/Models.InventoryId"
                                expected:
                                  type: number
                                  format: float
                                counted:
                                  type: number
                                  format: float
                                difference:
                                  type: number
                                  format: float
                              required:
                                - inventoryId
                                - expected
                                - counted
                                - difference
                        required:
                          - adjustments
                          - discrepancies
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                salonId:
                  $ref: "#/components/schemas/Models.SalonId"
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      inventoryId:
                        $ref: "#/components/schemas/Models.InventoryId"
                      countedQuantity:
                        type: number
                        format: float
                    required:
                      - inventoryId
                      - countedQuantity
                notes:
                  type: string
              required:
                - salonId
                - items
  /inventory/value-report:
    get:
      operationId: InventoryOperations_getInventoryValueReport
      description: Get inventory value report
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: category
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          totalValue:
                            type: number
                            format: float
                          totalItems:
                            type: integer
                            format: int32
                          categories:
                            type: array
                            items:
                              type: object
                              properties:
                                category:
                                  type: string
                                value:
                                  type: number
                                  format: float
                                itemCount:
                                  type: integer
                                  format: int32
                              required:
                                - category
                                - value
                                - itemCount
                        required:
                          - totalValue
                          - totalItems
                          - categories
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
  /inventory/{id}:
    get:
      operationId: InventoryOperations_getInventoryItem
      description: Get inventory item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.InventoryItem"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
    patch:
      operationId: InventoryOperations_updateInventoryItem
      description: Update inventory item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.InventoryItem"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.InventoryItemUpdateRequest"
    delete:
      operationId: InventoryOperations_deleteInventoryItem
      description: Delete inventory item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
  /inventory/{id}/movements:
    get:
      operationId: InventoryOperations_getStockMovements
      description: Get stock movement history
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.StockMovement"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Inventory
  /medical-charts:
    post:
      operationId: MedicalChartOperations_createMedicalChart
      description: Create medical chart for customer
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.MedicalChart"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Medical Charts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.MedicalChartCreateRequest"
    get:
      operationId: MedicalChartOperations_searchMedicalCharts
      description: Search medical charts
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: hasAllergies
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.MedicalChart"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Medical Charts
  /medical-charts/customer/{customerId}:
    get:
      operationId: MedicalChartOperations_getCustomerMedicalChart
      description: Get medical chart by customer ID
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.MedicalChart"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Medical Charts
  /medical-charts/customer/{customerId}/allergies:
    get:
      operationId: MedicalChartOperations_getCustomerAllergies
      description: Get allergy warnings for customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          customerId:
                            $ref: "#/components/schemas/Models.CustomerId"
                          allergies:
                            type: array
                            items:
                              type: string
                          avoidProducts:
                            type: array
                            items:
                              type: string
                          lastUpdated:
                            type: string
                            format: date-time
                        required:
                          - customerId
                          - allergies
                          - avoidProducts
                          - lastUpdated
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Medical Charts
  /medical-charts/{id}:
    patch:
      operationId: MedicalChartOperations_updateMedicalChart
      description: Update medical chart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.MedicalChartId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.MedicalChart"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Medical Charts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.MedicalChartUpdateRequest"
  /payments:
    get:
      operationId: PaymentOperations_listPayments
      description: List payments with filters
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.PaymentStatusCodeType"
          explode: false
        - name: method
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.PaymentMethodType"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Payment"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
    post:
      operationId: PaymentOperations_createPayment
      description: Create new payment
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Payment"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PaymentCreateRequest"
  /payments/calculate:
    post:
      operationId: PaymentOperations_calculatePayment
      description: Calculate payment summary
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PaymentPreview"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                services:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.ServiceId"
                discountCode:
                  type: string
                pointsToUse:
                  type: integer
                  format: int32
                customerId:
                  $ref: "#/components/schemas/Models.CustomerId"
                bookingId:
                  $ref: "#/components/schemas/Models.BookingId"
              required:
                - services
  /payments/customer/{customerId}:
    get:
      operationId: PaymentOperations_getCustomerPayments
      description: Get customer payment history
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Payment"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
  /payments/{id}:
    get:
      operationId: PaymentOperations_getPayment
      description: Get payment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Payment"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
    patch:
      operationId: PaymentOperations_updatePayment
      description: Update payment status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Payment"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PaymentUpdateRequest"
  /payments/{id}/cancel:
    post:
      operationId: PaymentOperations_cancelPayment
      description: Cancel payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Payment"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
              required:
                - reason
  /payments/{id}/process:
    post:
      operationId: PaymentOperations_processPayment
      description: Process payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Payment"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
  /payments/{id}/receipt:
    get:
      operationId: PaymentOperations_getReceipt
      description: Get payment receipt
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          receiptNumber:
                            type: string
                          payment:
                            $ref: "#/components/schemas/Models.Payment"
                          items:
                            type: array
                            items:
                              type: object
                              additionalProperties: {}
                          issuedAt:
                            type: string
                            format: date-time
                        required:
                          - receiptNumber
                          - payment
                          - items
                          - issuedAt
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
  /payments/{id}/refund:
    post:
      operationId: PaymentOperations_processRefund
      description: Process refund
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Payment"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.RefundCreateRequest"
  /permissions:
    get:
      operationId: PermissionOperations_listPermissions
      description: List all permissions
      parameters:
        - name: resource
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: action
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.Permission"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Permissions
  /permissions/by-resource/{resource}:
    get:
      operationId: PermissionOperations_getPermissionsByResource
      description: Get permissions by resource
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.Permission"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Permissions
  /permissions/groups:
    get:
      operationId: PermissionOperations_getPermissionGroups
      description: Get permission groups
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            resource:
                              type: string
                            permissions:
                              type: array
                              items:
                                $ref: "#/components/schemas/Models.Permission"
                          required:
                            - resource
                            - permissions
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Permissions
  /points/adjust:
    post:
      operationId: PointOperations_adjustPoints
      description: Adjust customer points
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PointTransaction"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PointTransactionCreateRequest"
  /points/customer/{customerId}/balance:
    get:
      operationId: PointOperations_getPointBalance
      description: Get customer point balance
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PointInfo"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Points
  /points/customer/{customerId}/expiring:
    get:
      operationId: PointOperations_getExpiringPoints
      description: Get expiring points
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: days
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 30
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          customerId:
                            $ref: "#/components/schemas/Models.CustomerId"
                          expiringPoints:
                            type: integer
                            format: int32
                          expirationDate:
                            type: string
                            format: date-time
                          transactions:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.PointTransaction"
                        required:
                          - customerId
                          - expiringPoints
                          - expirationDate
                          - transactions
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Points
  /points/customer/{customerId}/transactions:
    get:
      operationId: PointOperations_getPointTransactions
      description: Get point transaction history
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.PointTransaction"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Points
  /points/earn:
    post:
      operationId: PointOperations_earnPoints
      description: Add points to customer
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PointTransaction"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PointTransactionCreateRequest"
  /points/expire:
    post:
      operationId: PointOperations_processExpiredPoints
      description: Process expired points
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          processedCount:
                            type: integer
                            format: int32
                          totalPoints:
                            type: integer
                            format: int32
                        required:
                          - processedCount
                          - totalPoints
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  $ref: "#/components/schemas/Models.CustomerId"
                processBefore:
                  type: string
                  format: date-time
  /points/use:
    post:
      operationId: PointOperations_usePoints
      description: Use customer points
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PointTransaction"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PointTransactionCreateRequest"
  /purchase-orders:
    get:
      operationId: PurchaseOrderOperations_listPurchaseOrders
      description: List purchase orders
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.OrderStatusType"
          explode: false
        - name: supplier
          in: query
          required: false
          schema:
            type: string
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.PurchaseOrder"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
    post:
      operationId: PurchaseOrderOperations_createPurchaseOrder
      description: Create purchase order
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PurchaseOrder"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PurchaseOrderCreateRequest"
  /purchase-orders/reorder-suggestions:
    get:
      operationId: PurchaseOrderOperations_getReorderSuggestions
      description: Generate reorder suggestions
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            inventoryId:
                              $ref: "#/components/schemas/Models.InventoryId"
                            productName:
                              type: string
                            currentStock:
                              type: number
                              format: float
                            minimumStock:
                              type: number
                              format: float
                            suggestedQuantity:
                              type: number
                              format: float
                            supplier:
                              type: string
                            lastOrderDate:
                              type: string
                              format: date-time
                          required:
                            - inventoryId
                            - productName
                            - currentStock
                            - minimumStock
                            - suggestedQuantity
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
  /purchase-orders/{id}:
    get:
      operationId: PurchaseOrderOperations_getPurchaseOrder
      description: Get purchase order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PurchaseOrder"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
    patch:
      operationId: PurchaseOrderOperations_updatePurchaseOrder
      description: Update purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PurchaseOrder"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PurchaseOrderUpdateRequest"
  /purchase-orders/{id}/approve:
    post:
      operationId: PurchaseOrderOperations_approvePurchaseOrder
      description: Approve purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PurchaseOrder"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvedBy:
                  $ref: "#/components/schemas/Models.StaffId"
                notes:
                  type: string
              required:
                - approvedBy
  /purchase-orders/{id}/cancel:
    post:
      operationId: PurchaseOrderOperations_cancelPurchaseOrder
      description: Cancel purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PurchaseOrder"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
              required:
                - reason
  /purchase-orders/{id}/receive:
    post:
      operationId: PurchaseOrderOperations_receivePurchaseOrder
      description: Receive purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.PurchaseOrder"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receivedItems:
                  type: array
                  items:
                    type: object
                    properties:
                      inventoryId:
                        $ref: "#/components/schemas/Models.InventoryId"
                      receivedQuantity:
                        type: number
                        format: float
                      notes:
                        type: string
                    required:
                      - inventoryId
                      - receivedQuantity
                deliveryNotes:
                  type: string
              required:
                - receivedItems
  /roles:
    get:
      operationId: RoleOperations_listRoles
      description: List all roles
      parameters:
        - name: isSystem
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Role"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Roles & Permissions
    post:
      operationId: RoleOperations_createRole
      description: Create new role
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Role"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.RoleCreateRequest"
  /roles/system:
    get:
      operationId: RoleOperations_getSystemRoles
      description: Get system roles
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.Role"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Roles & Permissions
  /roles/{id}:
    get:
      operationId: RoleOperations_getRole
      description: Get role by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Role"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Roles & Permissions
    patch:
      operationId: RoleOperations_updateRole
      description: Update role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Role"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.RoleUpdateRequest"
    delete:
      operationId: RoleOperations_deleteRole
      description: Delete role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Roles & Permissions
  /roles/{id}/clone:
    post:
      operationId: RoleOperations_cloneRole
      description: Clone role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.Role"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                displayName:
                  type: string
              required:
                - name
                - displayName
  /sales-reports:
    get:
      operationId: SalesReportOperations_getSalesReport
      description: Get sales report for a period
      parameters:
        - $ref: "#/components/parameters/Models.SalesReportQuery.salonId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.SalesReportQuery.groupBy"
        - $ref: "#/components/parameters/Models.SalesReportQuery.includeRefunds"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.SalesReport"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Sales Reports
  /sales-reports/by-category:
    get:
      operationId: SalesReportOperations_getSalesByCategory
      description: Get sales by service category
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.SalesByCategory"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Sales Reports
  /sales-reports/by-staff:
    get:
      operationId: SalesReportOperations_getSalesByStaff
      description: Get sales by staff
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.StaffPerformance"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Sales Reports
  /sales-reports/daily:
    get:
      operationId: SalesReportOperations_getDailySales
      description: Get daily sales summary
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          date:
                            type: string
                            format: date
                          sales:
                            $ref: "#/components/schemas/Models.Money"
                          transactions:
                            type: integer
                            format: int32
                          refunds:
                            $ref: "#/components/schemas/Models.Money"
                          net:
                            $ref: "#/components/schemas/Models.Money"
                        required:
                          - date
                          - sales
                          - transactions
                          - refunds
                          - net
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Sales Reports
  /sales-reports/export:
    post:
      operationId: SalesReportOperations_exportSalesReport
      description: Export sales report
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          downloadUrl:
                            type: string
                        required:
                          - downloadUrl
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Sales Reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                salonId:
                  $ref: "#/components/schemas/Models.SalonId"
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                format:
                  type: string
                  enum:
                    - csv
                    - excel
                    - pdf
              required:
                - salonId
                - startDate
                - endDate
                - format
  /sales-reports/trends:
    get:
      operationId: SalesReportOperations_getSalesTrends
      description: Get sales trends
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum:
              - daily
              - weekly
              - monthly
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          labels:
                            type: array
                            items:
                              type: string
                          sales:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Money"
                          transactions:
                            type: array
                            items:
                              type: integer
                              format: int32
                          average:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Money"
                        required:
                          - labels
                          - sales
                          - transactions
                          - average
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Sales Reports
  /treatments:
    get:
      operationId: TreatmentOperations_listTreatments
      description: List treatment records with filters
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: treatment
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.TreatmentType"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.TreatmentRecord"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
    post:
      operationId: TreatmentOperations_createTreatment
      description: Create new treatment record
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.TreatmentRecord"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TreatmentRecordCreateRequest"
  /treatments/customer/{customerId}/history:
    get:
      operationId: TreatmentOperations_getCustomerTreatmentHistory
      description: Get treatment history for a customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.TreatmentRecord"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
  /treatments/staff/{staffId}:
    get:
      operationId: TreatmentOperations_getStaffTreatments
      description: Get treatments by staff member
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.TreatmentRecord"
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
  /treatments/statistics:
    get:
      operationId: TreatmentOperations_getTreatmentStatistics
      description: Get treatment statistics
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          totalTreatments:
                            type: integer
                            format: int32
                          treatmentsBy:
                            type: object
                            additionalProperties:
                              type: integer
                              format: int32
                          averageDuration:
                            type: number
                            format: float
                          topServices:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.ServiceId"
                        required:
                          - totalTreatments
                          - treatmentsBy
                          - averageDuration
                          - topServices
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
  /treatments/{id}:
    get:
      operationId: TreatmentOperations_getTreatment
      description: Get treatment record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.TreatmentRecord"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
    patch:
      operationId: TreatmentOperations_updateTreatment
      description: Update treatment record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.TreatmentRecord"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TreatmentRecordUpdateRequest"
    delete:
      operationId: TreatmentOperations_deleteTreatment
      description: Delete treatment record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
  /treatments/{id}/photos:
    post:
      operationId: TreatmentOperations_addTreatmentPhotos
      description: Add photos to treatment record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.TreatmentRecord"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - Treatments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Models.AttachmentId"
  /user-roles:
    post:
      operationId: UserRoleTypeOperations_assignUserRoleType
      description: Assign role to user
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.UserRoleType"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - User Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UserRoleAssignRequest"
  /user-roles/bulk-assign:
    post:
      operationId: UserRoleTypeOperations_bulkAssignRoles
      description: Bulk assign roles
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        properties:
                          assigned:
                            type: integer
                            format: int32
                          failed:
                            type: integer
                            format: int32
                          errors:
                            type: array
                            items:
                              type: string
                        required:
                          - assigned
                          - failed
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - User Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                roleIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.RoleId"
                salonId:
                  $ref: "#/components/schemas/Models.SalonId"
              required:
                - userIds
                - roleIds
  /user-roles/role/{roleId}/users:
    get:
      operationId: UserRoleTypeOperations_getUsersByRole
      description: Get users by role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              type: object
                              properties:
                                userId:
                                  type: string
                                userName:
                                  type: string
                                assignedAt:
                                  type: string
                                  format: date-time
                                expiresAt:
                                  type: string
                                  format: date-time
                              required:
                                - userId
                                - assignedAt
                            description: 取得した要素の配列。
                          total:
                            type: integer
                            format: int32
                            description: 条件に一致する全件数。
                          limit:
                            type: integer
                            format: int32
                            description: 1ページあたりの件数。
                          offset:
                            type: integer
                            format: int32
                            description: 取得開始位置のオフセット。
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - User Roles
  /user-roles/user/{userId}:
    get:
      operationId: UserRoleTypeOperations_getUserRoleTypes
      description: Get user roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.UserRoleType"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - User Roles
  /user-roles/user/{userId}/role/{roleId}:
    delete:
      operationId: UserRoleTypeOperations_revokeUserRoleType
      description: Revoke user role
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        type: object
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - User Roles
    patch:
      operationId: UserRoleTypeOperations_updateUserRoleType
      description: Update user role
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                        description: 固定値success。成功結果であることを示す。
                      data:
                        allOf:
                          - $ref: "#/components/schemas/Models.UserRoleType"
                        description: 成功時に返却するドメインデータ。
                    description: 成功時のデータとステータスを保持するモデル。
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                        description: 固定値error。エラー結果であることを示す。
                      error:
                        allOf:
                          - $ref: "#/components/schemas/Models.Error"
                        description: 失敗時に返却するエラー情報。
                    description: 失敗時のエラー情報とステータスを保持するモデル。
      tags:
        - User Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expiresAt:
                  type: string
                  format: date-time
                isActive:
                  type: boolean
security:
  - BearerAuth: []
components:
  parameters:
    Models.AdvancedSearchParams.exclude:
      name: exclude
      in: query
      required: false
      description: レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。
      schema:
        type: string
      explode: false
    Models.AdvancedSearchParams.facetFields:
      name: facetFields
      in: query
      required: false
      description: 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。
      schema:
        type: array
        items:
          type: string
      explode: false
    Models.AdvancedSearchParams.facets:
      name: facets
      in: query
      required: false
      description: ファセット集計を有効化するかどうか。true で各項目の件数を集計する。
      schema:
        type: boolean
        default: false
      explode: false
    Models.AdvancedSearchParams.fields:
      name: fields
      in: query
      required: false
      description: レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。
      schema:
        type: string
      explode: false
    Models.AdvancedSearchParams.filter:
      name: filter
      in: query
      required: false
      description: "フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。"
      schema:
        type: string
      explode: false
    Models.AdvancedSearchParams.q:
      name: q
      in: query
      required: false
      description: 全文検索キーワード。名称や説明文を横断的に検索する。
      schema:
        type: string
      explode: false
    Models.CursorPaginationParams.cursor:
      name: cursor
      in: query
      required: false
      description: 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。
      schema:
        type: string
      explode: false
    Models.CursorPaginationParams.limit:
      name: limit
      in: query
      required: false
      description: 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
      explode: false
    Models.CursorPaginationParams.sortBy:
      name: sortBy
      in: query
      required: false
      description: ソート対象フィールド。予約日時や作成日時など業務軸を指定する。
      schema:
        type: string
      explode: false
    Models.CursorPaginationParams.sortOrder:
      name: sortOrder
      in: query
      required: false
      description: ソート順序。`asc` は昇順、`desc` は降順を表す。
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      explode: false
    Models.DateRangeFilter.endDate:
      name: endDate
      in: query
      required: false
      description: 検索対象期間の終了日時。
      schema:
        type: string
        format: date-time
      explode: false
    Models.DateRangeFilter.startDate:
      name: startDate
      in: query
      required: false
      description: 検索対象期間の開始日時。
      schema:
        type: string
        format: date-time
      explode: false
    Models.FieldMask:
      name: updateMask
      in: query
      required: false
      description: "更新対象フィールドをカンマ区切りで列挙した文字列。例: `name,address.street`。"
      schema:
        type: string
      explode: false
    Models.InventorySearchRequest.category:
      name: category
      in: query
      required: false
      description: カテゴリでの絞り込み
      schema:
        type: string
      explode: false
    Models.InventorySearchRequest.expiringSoon:
      name: expiringSoon
      in: query
      required: false
      description: 期限切れ間近の在庫を取得するか
      schema:
        type: boolean
      explode: false
    Models.InventorySearchRequest.lowStock:
      name: lowStock
      in: query
      required: false
      description: 最低在庫を下回るもののみ取得するか
      schema:
        type: boolean
      explode: false
    Models.InventorySearchRequest.salonId:
      name: salonId
      in: query
      required: true
      description: 検索対象のサロン ID
      schema:
        $ref: "#/components/schemas/Models.SalonId"
      explode: false
    Models.InventorySearchRequest.status:
      name: status
      in: query
      required: false
      description: 在庫状態での絞り込み
      schema:
        $ref: "#/components/schemas/Models.InventoryStatusType"
      explode: false
    Models.PaginationParams.limit:
      name: limit
      in: query
      required: false
      description: 1ページあたりの取得件数。省略時は20件。
      schema:
        type: integer
        format: int32
        default: 20
      explode: false
    Models.PaginationParams.offset:
      name: offset
      in: query
      required: false
      description: 取得開始位置を表すオフセット。省略時は0。
      schema:
        type: integer
        format: int32
        default: 0
      explode: false
    Models.SalesReportQuery.groupBy:
      name: groupBy
      in: query
      required: false
      description: 集計粒度（日/週/月）
      schema:
        type: string
        enum:
          - day
          - week
          - month
      explode: false
    Models.SalesReportQuery.includeRefunds:
      name: includeRefunds
      in: query
      required: false
      description: 返金取引を集計に含めるかどうか
      schema:
        type: boolean
        default: true
      explode: false
    Models.SalesReportQuery.salonId:
      name: salonId
      in: query
      required: true
      description: 集計対象のサロン ID
      schema:
        $ref: "#/components/schemas/Models.SalonId"
      explode: false
    Models.SearchCustomerRequest.loyaltyTier:
      name: loyaltyTier
      in: query
      required: false
      description: Filter by loyalty tier
      schema:
        $ref: "#/components/schemas/Models.LoyaltyTierType"
      explode: false
    Models.SearchCustomerRequest.registeredFrom:
      name: registeredFrom
      in: query
      required: false
      description: Filter by registration date from
      schema:
        type: string
        format: date-time
      explode: false
    Models.SearchCustomerRequest.registeredTo:
      name: registeredTo
      in: query
      required: false
      description: Filter by registration date to
      schema:
        type: string
        format: date-time
      explode: false
    Models.SearchCustomerRequest.search:
      name: search
      in: query
      required: false
      description: Search in customer name, email, or phone
      schema:
        type: string
      explode: false
    Models.SearchCustomerRequest.status:
      name: status
      in: query
      required: false
      description: Filter by customer status
      schema:
        $ref: "#/components/schemas/Models.CustomerStatusType"
      explode: false
    Models.SearchCustomerRequest.tags:
      name: tags
      in: query
      required: false
      description: Filter by customer tags
      schema:
        type: array
        items:
          type: string
      explode: false
    Models.SearchParams.q:
      name: q
      in: query
      required: false
      description: フリーワード検索用キーワード。
      schema:
        type: string
      explode: false
    Models.SearchParams.sortBy:
      name: sortBy
      in: query
      required: false
      description: 並び替え対象カラム名。
      schema:
        type: string
      explode: false
    Models.SearchParams.sortOrder:
      name: sortOrder
      in: query
      required: false
      description: 昇順ascまたは降順descの指定。
      schema:
        type: string
        enum:
          - asc
          - desc
      explode: false
    Models.SearchSalonRequest.categories:
      name: categories
      in: query
      required: false
      description: サービスカテゴリ（カット・カラー等）による絞り込み
      schema:
        type: array
        items:
          $ref: "#/components/schemas/Models.ServiceCategoryType"
      explode: false
    Models.SearchSalonRequest.city:
      name: city
      in: query
      required: false
      description: 市区町村名による絞り込み
      schema:
        type: string
      explode: false
    Models.SearchSalonRequest.features:
      name: features
      in: query
      required: false
      description: 設備やこだわり条件などの特徴タグによる絞り込み
      schema:
        type: array
        items:
          type: string
      explode: false
    Models.SearchSalonRequest.isActive:
      name: isActive
      in: query
      required: false
      description: 営業中サロンのみを対象にするかどうか
      schema:
        type: boolean
      explode: false
    Models.SearchSalonRequest.keyword:
      name: keyword
      in: query
      required: false
      description: 検索キーワード。qパラメータのエイリアス
      schema:
        type: string
      explode: false
    Models.SearchSalonRequest.lat:
      name: lat
      in: query
      required: false
      description: 距離計算に使用する基準緯度
      schema:
        type: number
        format: double
      explode: false
    Models.SearchSalonRequest.lon:
      name: lon
      in: query
      required: false
      description: 距離計算に使用する基準経度
      schema:
        type: number
        format: double
      explode: false
    Models.SearchSalonRequest.maxDistance:
      name: maxDistance
      in: query
      required: false
      description: 検索基点からの最大距離（km）
      schema:
        type: number
        format: float
        minimum: 0
      explode: false
    Models.SearchSalonRequest.minRating:
      name: minRating
      in: query
      required: false
      description: 最低評価値による絞り込み
      schema:
        type: number
        format: float
        minimum: 0
        maximum: 5
      explode: false
    Models.SearchSalonRequest.openAt:
      name: openAt
      in: query
      required: false
      description: 特定日時に営業しているサロンを探すための基準日時
      schema:
        type: string
        format: date-time
      explode: false
    Models.SearchSalonRequest.openNow:
      name: openNow
      in: query
      required: false
      description: 現在営業中かどうかで絞り込むフラグ
      schema:
        type: boolean
      explode: false
    Models.SearchSalonRequest.prefecture:
      name: prefecture
      in: query
      required: false
      description: 都道府県名による絞り込み
      schema:
        type: string
      explode: false
  schemas:
    Models.AccessCheck:
      type: object
      required:
        - userId
        - resource
        - action
        - salonId
        - resourceId
      properties:
        userId:
          type: string
          description: 権限を判定するユーザー ID
        resource:
          type: string
          description: 対象リソースの識別子
        action:
          type: string
          description: 実行したい操作区分
        salonId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          nullable: true
          description: サロン単位での権限チェック時のサロン ID
        resourceId:
          type: string
          nullable: true
          description: リソース固有の ID
      description: アクセス権限の確認リクエスト
    Models.AccessResult:
      type: object
      required:
        - allowed
        - reason
        - requiredPermissions
        - userPermissions
      properties:
        allowed:
          type: boolean
          description: 操作が許可されたかどうか
        reason:
          type: string
          nullable: true
          description: 拒否または許可の理由
        requiredPermissions:
          type: array
          items:
            type: string
          nullable: true
          description: 必要な権限キー一覧
        userPermissions:
          type: array
          items:
            type: string
          nullable: true
          description: ユーザーが保有する権限キー一覧
      description: アクセス権限チェックの結果
    Models.Address:
      type: object
      required:
        - street
        - city
        - prefecture
        - postalCode
        - country
      properties:
        street:
          type: string
          description: 番地や建物名を含む詳細住所。
        city:
          type: string
          description: 市区町村名。
        prefecture:
          type: string
          description: 都道府県名。
        postalCode:
          type: string
          nullable: true
          description: 郵便番号。未設定の場合はnull。
        country:
          type: string
          description: 国名。既定値はJapan。
          default: Japan
      description: サロンや顧客の住所情報を表す共通モデル。
    Models.AddressUpdate:
      type: object
      properties:
        street:
          type: string
          description: 番地や建物名を含む詳細住所。
        city:
          type: string
          description: 市区町村名。
        prefecture:
          type: string
          description: 都道府県名。
        postalCode:
          type: string
          nullable: true
          description: 郵便番号。未設定の場合はnull。
        country:
          type: string
          description: 国名。既定値はJapan。
          default: Japan
      description: サロンや顧客の住所情報を表す共通モデル。
    Models.AllergyInfo:
      type: object
      required:
        - type
        - substances
        - fragrances
        - metals
        - plants
        - description
        - severity
      properties:
        type:
          $ref: "#/components/schemas/Models.AllergyType"
        substances:
          type: array
          items:
            type: string
          nullable: true
        fragrances:
          type: array
          items:
            type: string
          nullable: true
        metals:
          type: array
          items:
            type: string
          nullable: true
        plants:
          type: array
          items:
            type: string
          nullable: true
        description:
          type: string
          nullable: true
        severity:
          $ref: "#/components/schemas/Models.AllergySeverityType"
    Models.AllergySeverityType:
      type: string
      enum:
        - mild
        - moderate
        - severe
      description: |-
        アレルギー重篤度区分 - アレルギー反応の重篤度を表し、対応レベルを決定

        mild: 軽度 - 軽いかゆみや赤み程度、通常の施術で注意すれば対応可能
        moderate: 中等度 - 明確な皮膚反応、特別な配慮や代替品の使用が必要
        severe: 重度 - 激しい反応、特定の施術を避けるべきレベル
    Models.AllergyType:
      type: string
      enum:
        - chemical
        - fragrance
        - metal
        - latex
        - plant
        - other
      description: |-
        アレルギータイプ区分 - 顧客が持つアレルギーの種類を分類、施術時の注意事項として使用

        chemical: 化学物質 - カラー剤、パーマ剤等の化学薬品に対するアレルギー
        fragrance: 香料 - 香水、シャンプー等の香料成分に対するアレルギー
        metal: 金属 - ヘアピン、ハサミ等の金属製品に対するアレルギー
        latex: ラテックス - 手袋等のゴム製品に対するアレルギー
        plant: 植物 - ヘナ、ハーブ等の植物由来成分に対するアレルギー
        other: その他 - 上記に分類されないアレルギー
    Models.Attachment:
      type: object
      required:
        - id
        - key
        - filename
        - content
        - size
        - file
        - uploadedBy
        - salonId
        - metadata
        - tags
        - uploadedAt
        - updatedAt
      properties:
        id:
          type: string
          description: 添付ファイルを一意に識別するID。UUID形式。
        key:
          type: string
          description: オブジェクトストレージでファイルを参照するための内部キー。
        filename:
          type: string
          description: 利用者がアップロードした元のファイル名。
        content:
          type: string
          description: ファイルのMIMEタイプ（Content-Type）。
        size:
          type: integer
          format: int32
          description: ファイルサイズ（バイト単位）。
        file:
          type: object
          required:
            - contents
          properties:
            contentType:
              type: string
              description: |-
                The allowed media (MIME) types of the file contents.

                In file bodies, this value comes from the `Content-Type` header of the request or response. In JSON bodies,
                this value is serialized as a field in the response.

                NOTE: this is not _necessarily_ the same as the `Content-Type` header of the request or response, but
                it will be for file bodies. It may be different if the file is serialized as a JSON object. It always refers to the
                _contents_ of the file, and not necessarily the way the file itself is transmitted or serialized.
              title: The allowed media (MIME) types of the file contents.
            filename:
              type: string
              description: |-
                The name of the file, if any.

                In file bodies, this value comes from the `filename` parameter of the `Content-Disposition` header of the response
                or multipart payload. In JSON bodies, this value is serialized as a field in the response.

                NOTE: By default, `filename` cannot be sent in request payloads and can only be sent in responses and multipart
                payloads, as the `Content-Disposition` header is not valid in requests. If you want to send the `filename` in a request,
                you must extend the `File` model and override the `filename` property with a different location defined by HTTP metadata
                decorators.
              title: The name of the file, if any.
            contents:
              type: string
              format: byte
              description: |-
                The contents of the file.

                In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
                this value is serialized as a field in the response.
              title: The contents of the file.
          description: ファイルの実体情報。ダウンロードや共有レスポンスで利用。
          title: A file in an HTTP request, response, or multipart payload.
        uploadedBy:
          type: string
          description: ファイルをアップロードしたユーザーID。
        salonId:
          type: string
          nullable: true
          description: ファイルが紐づくサロンID。任意項目。
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
          description: 必要に応じて付加情報を保持する任意メタデータ。
        tags:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: ラベリングや検索に利用するタグ情報のセット。
        uploadedAt:
          type: string
          format: date-time
          description: ファイルがアップロードされた日時。
        updatedAt:
          type: string
          format: date-time
          description: ファイル情報が最後に更新された日時。
      description: サロンシステムで管理するアップロード済みファイルのメタ情報を表すモデル。
    Models.AttachmentCreateRequest:
      type: object
      required:
        - file
        - filename
        - content
        - salonId
        - tags
      properties:
        file:
          type: string
          format: byte
          description: HTTPリクエストで送信されるファイル本体。
        filename:
          type: string
          description: アップロード時に指定されたファイル名。
        content:
          type: string
          description: ファイルのContent-Type。
        salonId:
          type: string
          nullable: true
          description: ファイルを関連付けるサロンID。任意設定。
        tags:
          type: string
          nullable: true
          description: タグ情報を表すJSON文字列。任意設定。
      description: マルチパートアップロードで添付ファイルを登録するためのリクエスト。
    Models.AttachmentDownloadUrlResponse:
      type: object
      required:
        - downloadUrl
        - expiresAt
      properties:
        downloadUrl:
          type: string
          description: 一時的に有効なダウンロード用URL。
        expiresAt:
          type: string
          format: date-time
          description: 署名付きURLの有効期限。
      description: 添付ファイルをダウンロードするための署名付きURLを返すレスポンス。
    Models.AttachmentId:
      type: string
      format: uuid
      description: 添付ファイル・画像データを識別するブランド付きUUID。
    Models.AttachmentUploadUrlGetRequest:
      type: object
      required:
        - filename
        - content
        - size
        - salonId
      properties:
        filename:
          type: string
          description: アップロード予定のファイル名。
        content:
          type: string
          description: アップロード予定ファイルのContent-Type。
        size:
          type: integer
          format: int32
          description: アップロード予定ファイルのサイズ（バイト単位）。
        salonId:
          type: string
          nullable: true
          description: ファイルをひも付けるサロンID。任意設定。
      description: 外部ストレージへ直接アップロードするための署名付きURLを要求するリクエスト。
    Models.AttachmentUploadUrlResponse:
      type: object
      required:
        - uploadUrl
        - key
        - expiresAt
      properties:
        uploadUrl:
          type: string
          description: 一時的に有効なアップロード用URL。
        key:
          type: string
          description: 生成されたストレージキー。アップロード完了後の識別に使用。
        expiresAt:
          type: string
          format: date-time
          description: 署名付きURLの有効期限。
      description: 署名付きアップロードURLと関連情報を返すレスポンス。
    Models.AuditInfo:
      type: object
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 作成・更新ユーザーとタイムスタンプを保持する共通監査情報。
    Models.AuditTrail:
      type: object
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
        - version
        - isDeleted
        - deletedAt
        - deletedBy
        - deletionReason
      properties:
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時 (UTC)。
        createdBy:
          type: string
          description: レコードを作成したユーザーID またはサービス名。
        updatedAt:
          type: string
          format: date-time
          description: 最終更新日時 (UTC)。
        updatedBy:
          type: string
          description: 最後に更新したユーザーID またはサービス名。
        version:
          type: integer
          format: int32
          description: 楽観的ロックに使用するバージョン番号。
        isDeleted:
          type: boolean
          description: 論理削除フラグ。true の場合は通常の検索結果から除外する。
          default: false
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: 削除操作が実行された日時 (UTC)。
        deletedBy:
          type: string
          nullable: true
          description: 削除操作を実施したユーザーID またはサービス名。
        deletionReason:
          type: string
          nullable: true
          description: 削除理由や補足メモ。カスタマーサポート対応に利用する。
      description: |-
        監査情報モデル。
        レコードの作成・更新履歴を保持し、内部統制や変更追跡を実現する。
    Models.AuthEmailVerificationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: メールに記載された確認トークン。
      description: メールアドレス確認を完了させるリクエスト。
    Models.AuthLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: ログインに使用するメールアドレス。
        password:
          type: string
          description: ログイン用パスワード。
        rememberMe:
          type: boolean
          description: 永続セッションを希望するかどうかのフラグ。
          default: false
        twoFactorCode:
          type: string
          description: 2要素認証が有効な場合に入力するワンタイムコード。
      description: ユーザーがログインする際の認証リクエスト。
    Models.AuthLoginResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - token
        - expiresIn
        - user
      properties:
        accessToken:
          type: string
          description: API呼び出しに利用するアクセストークン。
        refreshToken:
          type: string
          description: アクセストークン再発行に使用するリフレッシュトークン。
        token:
          type: string
          description: トークン種別。常にBearer。
          default: Bearer
        expiresIn:
          type: integer
          format: int32
          description: アクセストークンの有効期限（秒）。
        user:
          allOf:
            - $ref: "#/components/schemas/Models.User"
          description: ログインしたユーザーの情報。
      description: ログイン成功時に返却するトークン情報。
    Models.AuthPasswordChangeRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: 本人確認のための現在パスワード。
        newPassword:
          type: string
          description: 変更後の新しいパスワード。
      description: ログイン中ユーザーがパスワードを変更するためのリクエスト。
    Models.AuthPasswordResetConfirmRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: メールで受け取った再設定トークン。
        newPassword:
          type: string
          description: 新しいパスワード。
      description: パスワード再設定を確定するためのリクエスト。
    Models.AuthPasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: 対象アカウントのメールアドレス。
      description: パスワード再設定メール送信を要求するリクエスト。
    Models.AuthRegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          description: 登録に使用するメールアドレス。
        password:
          type: string
          description: セキュリティ基準を満たすパスワード。
        name:
          type: string
          description: ユーザーの表示名。
        role:
          allOf:
            - $ref: "#/components/schemas/Models.AuthUserRoleType"
          description: 付与するロール。既定はcustomer。
          default: customer
      description: 新規ユーザー登録時のリクエスト。
    Models.AuthSessionListResponse:
      type: object
      required:
        - sessions
        - total
      properties:
        sessions:
          type: array
          items:
            $ref: "#/components/schemas/Models.Session"
          description: 稼働中のセッション配列。
        total:
          type: integer
          format: int32
          description: 該当セッションの総数。
      description: アクティブなセッション一覧を返すレスポンス。
    Models.AuthSuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: 完了メッセージ。
      description: 認証系APIで使用する汎用成功レスポンス。
    Models.AuthTokenRefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: 認証済みセッションに紐づくリフレッシュトークン。
      description: アクセストークンを更新するためのリクエスト。
    Models.AuthTwoFactorDisableRequest:
      type: object
      required:
        - password
        - code
      properties:
        password:
          type: string
          description: 本人確認のための現在パスワード。
        code:
          type: string
          description: 無効化確認のための現在TOTPコード。
      description: 2要素認証を無効化する際の確認リクエスト。
    Models.AuthTwoFactorEnableRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: 本人確認のための現在パスワード。
      description: 2要素認証を有効化する際の認証リクエスト。
    Models.AuthTwoFactorSetupResponse:
      type: object
      required:
        - qrCodeUrl
        - secret
        - backupCodes
      properties:
        qrCodeUrl:
          type: string
          description: 認証アプリで読み取るQRコードURL。
        secret:
          type: string
          description: 手動登録用のシークレットキー。
        backupCodes:
          type: array
          items:
            type: string
          description: 復旧用バックアップコード一覧。
      description: 2要素認証の設定情報を返すレスポンス。
    Models.AuthTwoFactorVerifyRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: 認証アプリが生成したTOTPコード。
      description: 2要素認証コードを検証するリクエスト。
    Models.AuthUserRoleType:
      type: string
      enum:
        - customer
        - staff
        - admin
      description: |-
        認証ユーザーロール区分 - 認証システムにおけるユーザーの役割

        customer: 顧客ロール - サービスの予約が可能
        staff: スタッフロール - 自身のスケジュールと予約を管理可能
        admin: 管理者ロール - システムのフルアクセス権限
    Models.AuthenticationStateDetail:
      type: object
      required:
        - type
        - sessionId
        - expiresAt
        - tempToken
        - until
        - attempts
        - reason
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.AuthenticationStateType"
          description: 現在の認証状態区分。
        sessionId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.SessionId"
          nullable: true
          description: 状態に紐づくセッションID。未確立の場合はnull。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 該当状態が失効する日時。
        tempToken:
          type: string
          nullable: true
          description: 2要素認証や一時アクセスに利用する暫定トークン。
        until:
          type: string
          format: date-time
          nullable: true
          description: ロックや制限状態が解除される予定日時。
        attempts:
          type: integer
          format: int32
          nullable: true
          description: 認証失敗などの試行回数。
        reason:
          type: string
          nullable: true
          description: 状態が発生した具体的な理由メッセージ。
      description: 認証状態ごとの詳細情報を格納するモデル。
    Models.AuthenticationStateType:
      type: string
      enum:
        - unauthenticated
        - authenticated
        - pending_two_factor
        - locked
      description: |-
        認証状態区分 - ユーザーの認証状態を表す区分

        unauthenticated: 未認証 - ログインしていない状態
        authenticated: 認証済み - 正常にログインしている状態
        pending_two_factor: 2要素認証待ち - 2要素認証の入力を待っている状態
        locked: ロック中 - アカウントがロックされている状態
    Models.AvailableSlot:
      type: object
      required:
        - staffId
        - startTime
        - endTime
      properties:
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 対象スタッフのID
        startTime:
          type: string
          format: date-time
          description: 空き枠の開始日時 (UTC)
        endTime:
          type: string
          format: date-time
          description: 空き枠の終了日時 (UTC)
      description: 空き枠情報モデル - スタッフごとの提供可能時間帯を表し、予約可能枠の算出に使用する
    Models.AvailableTimeSlot:
      type: object
      required:
        - startTime
        - endTime
        - availableStaff
        - availability
      properties:
        startTime:
          type: string
          format: date-time
          description: 開始日時
        endTime:
          type: string
          format: date-time
          description: 終了日時
        availableStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSummary"
          description: 対応可能なスタッフの一覧
        availability:
          type: integer
          format: int32
          description: 対応可能枠の充足率（%）
      description: 予約可能な時間帯の詳細情報モデル
    Models.BatchGetRequest:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 100
          description: 取得対象となるリソースIDの配列。1件以上100件以下。
        fields:
          type: string
          description: レスポンスに含めたいフィールドのカンマ区切りリスト。パフォーマンス最適化に活用する。
      description: |-
        複数リソースをまとめて取得するリクエストモデル。
        顧客IDや予約IDを複数指定して最小回数のAPI呼び出しで情報を取得する用途に利用。 
    Models.Booking:
      type: object
      required:
        - id
        - salonId
        - customerId
        - reservationIds
        - status
        - statusCode
        - waitlistEntry
        - deposit
        - totalAmount
        - discountAmount
        - finalAmount
        - balanceDue
        - paymentMethod
        - paymentStatus
        - notes
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 予約を一意に識別するID。
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 予約が紐づくサロンID。
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 予約を行った顧客ID。
        reservationIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReservationId"
          description: 関連する予約リクエストID一覧。
        status:
          allOf:
            - $ref: "#/components/schemas/Models.BookingStatus"
          description: 進行状況ごとの詳細情報。
        statusCode:
          allOf:
            - $ref: "#/components/schemas/Models.BookingStatusCodeType"
          description: 現在のステータスコード。
        waitlistEntry:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.WaitlistEntry"
          nullable: true
          description: ウェイティングリスト情報。対象外の場合はnull。
        deposit:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.BookingDeposit"
          nullable: true
          description: 預かり金に関する情報。必要な場合のみ設定。
        totalAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 割引適用前の合計金額。
        discountAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 適用された割引額
        finalAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 最終的に請求する金額。
        balanceDue:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          nullable: true
          description: 未収金額。完済の場合はnull。
        paymentMethod:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          nullable: true
          description: 予定している支払い方法。未定の場合はnull。
        paymentStatus:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentStatusCodeType"
          nullable: true
          description: 支払いの進捗ステータス。未設定の場合は支払い前。
        notes:
          type: string
          nullable: true
          description: スタッフ・顧客間で共有するメモ。
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: サロンで確定管理する予約の集約モデル。
    Models.BookingDeposit:
      type: object
      required:
        - amount
        - status
        - dueDate
        - paidAt
        - refundedAt
        - paymentId
        - notes
      properties:
        amount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 預かり金額。
        status:
          type: string
          enum:
            - pending
            - paid
            - refunded
            - forfeited
          description: "デポジットの状態区分（pending: 入金待ち／paid: 入金済み／refunded: 返金済み／forfeited: 没収）。"
        dueDate:
          type: string
          format: date-time
          nullable: true
          description: 支払い期日。未設定の場合は即時支払い不要。
        paidAt:
          type: string
          format: date-time
          nullable: true
          description: 入金が確認された日時。
        refundedAt:
          type: string
          format: date-time
          nullable: true
          description: 返金した日時。
        paymentId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          nullable: true
          description: 紐づく決済ID。
        notes:
          type: string
          nullable: true
          description: デポジットに関する備考。
      description: 予約確定前に預かるデポジット情報。
    Models.BookingDepositUpdate:
      type: object
      properties:
        amount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 預かり金額。
        status:
          type: string
          enum:
            - pending
            - paid
            - refunded
            - forfeited
          description: "デポジットの状態区分（pending: 入金待ち／paid: 入金済み／refunded: 返金済み／forfeited: 没収）。"
        dueDate:
          type: string
          format: date-time
          nullable: true
          description: 支払い期日。未設定の場合は即時支払い不要。
        paidAt:
          type: string
          format: date-time
          nullable: true
          description: 入金が確認された日時。
        refundedAt:
          type: string
          format: date-time
          nullable: true
          description: 返金した日時。
        paymentId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          nullable: true
          description: 紐づく決済ID。
        notes:
          type: string
          nullable: true
          description: デポジットに関する備考。
      description: 予約確定前に預かるデポジット情報。
    Models.BookingDetail:
      type: object
      required:
        - reservations
        - customerName
        - salonName
        - paymentHistory
        - waitlistHistory
      properties:
        reservations:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReservationDetail"
          description: 紐づく予約リクエストの詳細一覧。
        customerName:
          type: string
          description: 顧客の表示名。
        salonName:
          type: string
          description: サロンの表示名。
        paymentHistory:
          type: array
          items:
            $ref: "#/components/schemas/Models.PaymentHistory"
          nullable: true
          description: 決済履歴の一覧。未登録の場合はnull。
        waitlistHistory:
          type: array
          items:
            $ref: "#/components/schemas/Models.WaitlistEntry"
          nullable: true
          description: ウェイティングリストの履歴。未登録の場合はnull。
      allOf:
        - $ref: "#/components/schemas/Models.Booking"
      description: 予約と関連情報をまとめた詳細ビュー。
    Models.BookingId:
      type: string
      format: uuid
      description: 確定済みの予約（スケジュール確保）を識別するブランド付きUUID。
    Models.BookingLimit:
      type: object
      required:
        - period
        - count
      properties:
        period:
          type: string
          enum:
            - day
            - week
            - month
          description: 制限期間の単位
        count:
          type: integer
          format: int32
          description: 期間内の最大予約可能数
      description: 顧客単位の予約回数制限
    Models.BookingRequirementDetail:
      type: object
      required:
        - type
        - amount
        - percentage
        - required
        - duration
        - daysInAdvance
        - minAge
        - maxAge
        - allowedGenders
        - requiredTier
        - instructions
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.BookingRequirementType"
          description: 要件の種類
        amount:
          type: integer
          format: int32
          nullable: true
          description: "金額要件（例: デポジット額）"
        percentage:
          type: integer
          format: int32
          nullable: true
          description: 割合で設定する要件
        required:
          type: boolean
          nullable: true
          description: 必須かどうか
        duration:
          type: integer
          format: int32
          nullable: true
          description: 所要時間や準備時間
        daysInAdvance:
          type: integer
          format: int32
          nullable: true
          description: 何日前までに対応が必要か
        minAge:
          type: integer
          format: int32
          nullable: true
          description: 利用可能な最低年齢
        maxAge:
          type: integer
          format: int32
          nullable: true
          description: 利用可能な最高年齢
        allowedGenders:
          type: array
          items:
            type: string
          nullable: true
          description: 利用可能な性別の制限
        requiredTier:
          type: string
          nullable: true
          description: 必要な会員ランク
        instructions:
          type: array
          items:
            type: string
          nullable: true
          description: 顧客への具体的な指示
      description: サービス予約時に必要な要件詳細
    Models.BookingRequirementType:
      type: string
      enum:
        - deposit
        - consultation
        - patch_test
        - age_restriction
        - gender_restriction
        - membership
        - preparation
      description: |-
        予約要件タイプ区分 - サービス予約時に必要な条件や制約

        deposit: デポジット - 予約時に支払う予約金
        consultation: 事前カウンセリング - 施術前の相談・カウンセリング
        patch_test: パッチテスト - アレルギー確認のための事前テスト
        age_restriction: 年齢制限 - 年齢による利用制限
        gender_restriction: 性別制限 - 性別による利用制限
        membership: 会員限定 - 特定の会員ランク以上の制限
        preparation: 事前準備 - 顧客が事前に行うべき準備
    Models.BookingStatus:
      anyOf:
        - $ref: "#/components/schemas/Models.DraftBookingStatus"
        - $ref: "#/components/schemas/Models.PendingBookingStatus"
        - $ref: "#/components/schemas/Models.ConfirmedBookingStatus"
        - $ref: "#/components/schemas/Models.InProgressBookingStatus"
        - $ref: "#/components/schemas/Models.CompletedBookingStatus"
        - $ref: "#/components/schemas/Models.CancelledBookingStatus"
        - $ref: "#/components/schemas/Models.NoShowBookingStatus"
      description: 予約の進行状況ごとに保持する詳細情報ユニオン。
    Models.BookingStatusCodeType:
      type: string
      enum:
        - draft
        - pending
        - confirmed
        - in_progress
        - completed
        - cancelled
        - no_show
      description: |-
        予約ステータスコード区分 - 予約の詳細な進行状態を表す区分

        draft: 下書き - 予約内容を作成中、まだ確定していない状態
        pending: 保留中 - 予約リクエストを受付、確認待ちの状態
        confirmed: 確定 - 予約が確定し、スタッフが割り当てられた状態
        in_progress: 施術中 - 現在サービスを実施中の状態
        completed: 完了 - サービス提供が終了した状態
        cancelled: キャンセル - 予約がキャンセルされた状態
        no_show: 無断キャンセル - 顧客が連絡なしに来店しなかった状態
    Models.BookingStatusUpdate:
      anyOf:
        - $ref: "#/components/schemas/Models.DraftBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.PendingBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.ConfirmedBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.InProgressBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.CompletedBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.CancelledBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.NoShowBookingStatusUpdate"
      description: 予約の進行状況ごとに保持する詳細情報ユニオン。
    Models.BulkSummary:
      type: object
      required:
        - total
        - succeeded
        - failed
        - duration
      properties:
        total:
          type: integer
          format: int32
          description: リクエストに含まれていたアイテム総数。
        succeeded:
          type: integer
          format: int32
          description: 成功したアイテム件数。
        failed:
          type: integer
          format: int32
          description: 失敗したアイテム件数。
        duration:
          type: integer
          format: int32
          description: 処理に要した時間 (ミリ秒)。バッチ最適化の指標。
      description: |-
        一括処理全体の集計情報モデル。
        成功件数・失敗件数を俯瞰し、運用レポートに反映する。
    Models.BusinessHours:
      type: object
      required:
        - dayOfWeek
        - operatingSlots
        - breakSlots
        - isClosed
        - effectivePeriod
        - timezone
      properties:
        dayOfWeek:
          allOf:
            - $ref: "#/components/schemas/Models.DayOfWeekType"
          description: 設定の対象となる曜日。
        operatingSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          description: 営業時間帯の一覧。複数設定で分割営業に対応。
        breakSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          nullable: true
          description: 休憩時間や中断時間帯の一覧。未設定時はnull。
        isClosed:
          type: boolean
          description: 当該曜日を休業扱いとする場合のフラグ。既定値はfalse。
          default: false
        effectivePeriod:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.DateRange"
          nullable: true
          description: 季節営業などの適用期間。未設定時は通年有効。
        timezone:
          type: string
          nullable: true
          description: 営業基準となるタイムゾーンID。未設定時はサロン既定値。
      description: 曜日単位で管理する営業スケジュール設定。
    Models.CancellationFee:
      type: object
      required:
        - hours
        - percentage
        - fixedAmount
      properties:
        hours:
          type: integer
          format: int32
          description: キャンセル料金を適用する期限（時間）
        percentage:
          type: integer
          format: int32
          description: キャンセル料金率（%）
        fixedAmount:
          type: integer
          format: int32
          nullable: true
          description: 固定額で設定するキャンセル料金
      description: キャンセル料金のルール
    Models.CancelledBookingStatus:
      type: object
      required:
        - type
        - cancelledAt
        - reason
        - cancelledBy
      properties:
        type:
          type: string
          enum:
            - cancelled
          description: 固定値cancelled。キャンセル状態であることを示す。
        cancelledAt:
          type: string
          format: date-time
          description: キャンセルが登録された日時。
        reason:
          type: string
          nullable: true
          description: キャンセル理由のメモ。未設定の場合はnull。
        cancelledBy:
          type: string
          enum:
            - customer
            - salon
            - system
          description: "キャンセルを実行した主体（customer: 顧客／salon: サロン側／system: システム判断）。"
      description: 予約がキャンセルされた場合の状態情報。
    Models.CancelledBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - cancelled
          description: 固定値cancelled。キャンセル状態であることを示す。
        cancelledAt:
          type: string
          format: date-time
          description: キャンセルが登録された日時。
        reason:
          type: string
          nullable: true
          description: キャンセル理由のメモ。未設定の場合はnull。
        cancelledBy:
          type: string
          enum:
            - customer
            - salon
            - system
          description: "キャンセルを実行した主体（customer: 顧客／salon: サロン側／system: システム判断）。"
      description: 予約がキャンセルされた場合の状態情報。
    Models.CategoryId:
      type: string
      format: uuid
      description: サービスカテゴリやメニュー分類を識別するブランド付きUUID。
    Models.CategoryModel:
      type: object
      required:
        - id
        - name
        - description
        - parentId
        - displayOrder
        - isActive
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          description: カテゴリ ID
        name:
          type: string
          description: カテゴリ名
        description:
          type: string
          description: カテゴリ説明
        parentId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          nullable: true
          description: 親カテゴリ ID
        displayOrder:
          type: integer
          format: int32
          description: 表示順序
        isActive:
          type: boolean
          description: 有効フラグ
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: サービスカテゴリの管理モデル
    Models.ColorSubCategoryType:
      type: string
      enum:
        - full_color
        - root_touch
        - highlights
        - lowlights
        - balayage
        - ombre
        - bleach
        - color_correction
      description: |-
        カラーサブカテゴリー区分 - ヘアカラーリングサービスの詳細分類

        full_color: フルカラー - 髪全体を染めるサービス
        root_touch: リタッチ - 根元の伸びた部分のみを染めるサービス
        highlights: ハイライト - 部分的に明るい色を入れるサービス
        lowlights: ローライト - 部分的に暗い色を入れるサービス
        balayage: バレイヤージュ - グラデーション染め技法
        ombre: オンブレ - 根元から毛先にかけてグラデーション染め
        bleach: ブリーチ - 髪の色を抜く脱色サービス
        color_correction: カラーコレクション - 色ムラや失敗したカラーの修正
    Models.CompletedBookingStatus:
      type: object
      required:
        - type
        - completedAt
        - paymentId
        - serviceSummary
      properties:
        type:
          type: string
          enum:
            - completed
          description: 固定値completed。完了状態であることを示す。
        completedAt:
          type: string
          format: date-time
          description: 施術が完了した日時。
        paymentId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          nullable: true
          description: 関連する決済ID。未決済の場合はnull。
        serviceSummary:
          type: string
          nullable: true
          description: 施術内容のサマリーメモ。未設定の場合はnull。
      description: 施術が完了した場合の状態情報。
    Models.CompletedBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - completed
          description: 固定値completed。完了状態であることを示す。
        completedAt:
          type: string
          format: date-time
          description: 施術が完了した日時。
        paymentId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          nullable: true
          description: 関連する決済ID。未決済の場合はnull。
        serviceSummary:
          type: string
          nullable: true
          description: 施術内容のサマリーメモ。未設定の場合はnull。
      description: 施術が完了した場合の状態情報。
    Models.CompletedPaymentStatus:
      type: object
      required:
        - type
        - completedAt
        - paidAmount
        - receiptNumber
      properties:
        type:
          type: string
          enum:
            - completed
          description: 状態種別（completed 固定値）
        completedAt:
          type: string
          format: date-time
          description: 支払い完了日時
        paidAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 実際に決済された金額
        receiptNumber:
          type: string
          nullable: true
          description: 発行されたレシート番号
      description: 支払い完了状態の詳細
    Models.CompletedPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - completed
          description: 状態種別（completed 固定値）
        completedAt:
          type: string
          format: date-time
          description: 支払い完了日時
        paidAmount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 実際に決済された金額
        receiptNumber:
          type: string
          nullable: true
          description: 発行されたレシート番号
      description: 支払い完了状態の詳細
    Models.ConfirmedBookingStatus:
      type: object
      required:
        - type
        - confirmedAt
        - staffId
        - expectedStart
      properties:
        type:
          type: string
          enum:
            - confirmed
          description: 固定値confirmed。確定状態であることを示す。
        confirmedAt:
          type: string
          format: date-time
          description: 予約を確定した日時。
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 担当するスタッフID。
        expectedStart:
          type: string
          format: date-time
          description: 施術開始予定日時。
      description: 予約が確定済みの場合の状態情報。
    Models.ConfirmedBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - confirmed
          description: 固定値confirmed。確定状態であることを示す。
        confirmedAt:
          type: string
          format: date-time
          description: 予約を確定した日時。
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 担当するスタッフID。
        expectedStart:
          type: string
          format: date-time
          description: 施術開始予定日時。
      description: 予約が確定済みの場合の状態情報。
    Models.ContactInfo:
      type: object
      required:
        - email
        - phoneNumber
        - alternativePhone
        - websiteUrl
      properties:
        email:
          type: string
          description: 主要連絡先として利用するメールアドレス。
        phoneNumber:
          type: string
          description: 主要連絡先として利用する電話番号。
        alternativePhone:
          type: string
          nullable: true
          description: 緊急連絡用などの予備電話番号。未設定時はnull。
        websiteUrl:
          type: string
          nullable: true
          description: 公式サイトや予約ページのURL。未設定時はnull。
      description: 顧客やサロンの連絡先情報を表す共通モデル。
    Models.ContactInfoUpdate:
      type: object
      properties:
        email:
          type: string
          description: 主要連絡先として利用するメールアドレス。
        phoneNumber:
          type: string
          description: 主要連絡先として利用する電話番号。
        alternativePhone:
          type: string
          nullable: true
          description: 緊急連絡用などの予備電話番号。未設定時はnull。
        websiteUrl:
          type: string
          nullable: true
          description: 公式サイトや予約ページのURL。未設定時はnull。
      description: 顧客やサロンの連絡先情報を表す共通モデル。
    Models.ContactMethodType:
      type: string
      enum:
        - email
        - sms
        - phone
        - push
      description: |-
        連絡方法区分 - 顧客との連絡・コミュニケーション手段の優先設定

        email: Eメール - 電子メールによる連絡方法
        sms: SMS - ショートメッセージサービスによる連絡方法
        phone: 電話 - 音声通話による連絡方法
        push: プッシュ通知 - アプリ内プッシュ通知による連絡方法
    Models.CreateBookingRequest:
      type: object
      required:
        - salonId
        - customerId
        - reservationIds
        - waitlistEntry
        - deposit
        - discountAmount
        - paymentMethod
        - notes
        - metadata
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 予約対象のサロンID。
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 予約を申し込む顧客ID。
        reservationIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReservationId"
          description: 紐付ける予約リクエストID一覧。
        waitlistEntry:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.WaitlistEntry"
          nullable: true
          description: ウェイティングリスト情報。不要な場合はnull。
        deposit:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.BookingDeposit"
          nullable: true
          description: 預かり金設定。不要な場合はnull。
        discountAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 適用する割引額
        paymentMethod:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          nullable: true
          description: 予定している支払い方法。
        notes:
          type: string
          nullable: true
          description: スタッフ向けの備考。
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
          description: 外部連携や業務用に保持する任意メタデータ。
      description: 予約を新規作成する際のリクエスト。
    Models.CreateCustomerRequest:
      type: object
      required:
        - name
        - contactInfo
        - preferences
        - notes
        - tags
        - birthDate
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        preferences:
          type: object
          additionalProperties: {}
        notes:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
          nullable: true
      description: Customer creation request with required and optional fields
    Models.CreateReservationRequest:
      type: object
      required:
        - salonId
        - customerId
        - staffId
        - serviceId
        - startTime
        - notes
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 予約対象のサロンID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 予約を申し込む顧客ID
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 担当予定のスタッフID
        serviceId:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          description: 希望する施術メニューID
        startTime:
          type: string
          format: date-time
          description: 希望する施術開始日時 (UTC)
        notes:
          type: string
          nullable: true
          description: 顧客要望や注意事項のメモ
      description: 予約作成リクエスト - 新規予約登録時に必要なサロン・顧客・メニュー・希望日時の情報を受け取る
    Models.CreateSalonRequest:
      type: object
      required:
        - name
        - description
        - address
        - contactInfo
        - openingHours
        - businessHours
        - imageUrls
        - features
      properties:
        name:
          type: string
          description: 新規登録時に必須となるサロン名
        description:
          type: string
          nullable: true
          description: サロン紹介文。未設定の場合はnullで送信
        address:
          allOf:
            - $ref: "#/components/schemas/Models.Address"
          description: 店舗の正規住所・連絡先配送先
        contactInfo:
          allOf:
            - $ref: "#/components/schemas/Models.ContactInfo"
          description: 顧客問い合わせ用の電話やメール情報
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
          description: 通常営業日の営業時間設定一覧
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
          nullable: true
          description: 特別営業スケジュールやシフト連動の営業時間。不要な場合はnull
        imageUrls:
          type: array
          items:
            type: string
          description: 店舗写真やメニュー画像のURL一覧
        features:
          type: array
          items:
            type: string
          description: バリアフリー対応や個室有無などの特徴タグ一覧
      description: サロン新規登録リクエスト - 全項目のキーが必須で、値は業務要件に応じてnull許可
    Models.CreateServiceRequest:
      type: object
      required:
        - salonId
        - name
        - description
        - duration
        - price
        - category
        - categoryId
        - imageUrl
        - requiredStaffLevel
        - depositAmount
        - isActive
        - maxAdvanceBookingDays
        - minAdvanceBookingHours
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: サービスを登録するサロン ID
        name:
          type: string
          description: サービス名
        description:
          type: string
          description: サービスの説明文
        duration:
          type: integer
          format: int32
          description: 施術時間（分）
        price:
          type: integer
          format: int32
          description: 料金（税抜）
        category:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: サービスカテゴリ区分
        categoryId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          nullable: true
          description: カテゴリ ID
        imageUrl:
          type: string
          nullable: true
          description: サービス画像 URL
        requiredStaffLevel:
          type: integer
          format: int32
          nullable: true
          description: 必要スタッフレベル
        depositAmount:
          type: integer
          format: int32
          nullable: true
          description: 必要なデポジット額
        isActive:
          type: boolean
          nullable: true
          description: 有効フラグ
        maxAdvanceBookingDays:
          type: integer
          format: int32
          nullable: true
          description: 最大全日予約可能日数
        minAdvanceBookingHours:
          type: integer
          format: int32
          nullable: true
          description: 最短予約受付時間（時間）
      description: サービスを新規登録するリクエスト
    Models.CreateStaffRequest:
      type: object
      required:
        - salonId
        - name
        - contactInfo
        - specialties
        - imageUrl
        - bio
        - yearsOfExperience
        - certifications
        - qualifications
        - schedules
        - permissions
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 所属サロンのID
        name:
          type: string
          description: スタッフの氏名
        contactInfo:
          allOf:
            - $ref: "#/components/schemas/Models.ContactInfo"
          description: 連絡先情報
        specialties:
          type: array
          items:
            type: string
          description: 得意分野や専門メニューの一覧
        imageUrl:
          type: string
          nullable: true
          description: プロフィール画像のURL
        bio:
          type: string
          nullable: true
          description: 自己紹介や経歴の概要
        yearsOfExperience:
          type: integer
          format: int32
          nullable: true
          description: 実務経験年数
        certifications:
          type: array
          items:
            type: string
          nullable: true
          description: 保有資格名の一覧
        qualifications:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffQualification"
          nullable: true
          description: 詳細な資格情報の一覧
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSchedule"
          nullable: true
          description: 通常勤務スケジュールの一覧
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPermission"
          nullable: true
          description: 付与する権限の一覧
      description: スタッフ作成リクエスト - 新規スタッフ登録時に必要なプロフィール・連絡先・スケジュール情報を受け取る
    Models.CurrencyCodeType:
      type: string
      enum:
        - JPY
        - USD
        - EUR
        - GBP
        - AUD
        - CAD
        - CNY
        - KRW
        - SGD
        - TWD
      description: |-
        通貨コード区分 - ISO 4217準拠の通貨コード定義

        JPY: 日本円 - Japanese Yen
        USD: 米ドル - United States Dollar
        EUR: ユーロ - Euro
        GBP: 英ポンド - British Pound Sterling
        AUD: 豪ドル - Australian Dollar
        CAD: カナダドル - Canadian Dollar
        CNY: 中国人民元 - Chinese Yuan
        KRW: 韓国ウォン - South Korean Won
        SGD: シンガポールドル - Singapore Dollar
        TWD: 台湾ドル - Taiwan Dollar
    Models.Customer:
      type: object
      required:
        - id
        - name
        - contactInfo
        - gender
        - birthDate
        - address
        - preferences
        - notes
        - tags
        - loyaltyPoints
        - membership
        - notificationSettings
        - health
        - customerPreferences
        - history
        - associations
        - status
        - metadata
        - medicalChartId
        - isActive
        - registrationSource
        - referredBy
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          $ref: "#/components/schemas/Models.CustomerId"
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        gender:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerGenderType"
          nullable: true
          description: Customer gender
        birthDate:
          type: string
          format: date
          nullable: true
          description: Birth date
        address:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.Address"
          nullable: true
          description: Address
        preferences:
          type: object
          additionalProperties: {}
          description: Preferences and requirements
        notes:
          type: string
          nullable: true
          description: Internal notes
        tags:
          type: array
          items:
            type: string
          description: Tags for categorization
        loyaltyPoints:
          type: integer
          format: int32
          description: Current loyalty points
        membership:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.MembershipInfo"
          nullable: true
          description: Membership information
        notificationSettings:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.NotificationSettings"
          nullable: true
          description: NotificationType settings
        health:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.CustomerHealth"
          nullable: true
          description: Health information
        customerPreferences:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.CustomerPreferences"
          nullable: true
          description: Customer preferences
        history:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.CustomerHistory"
          nullable: true
          description: Visit history
        associations:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.CustomerAssociations"
          nullable: true
          description: Customer associations
        status:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.CustomerStatusDetail"
          nullable: true
          description: Customer status
        metadata:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.CustomerMetadata"
          nullable: true
          description: Customer metadata
        medicalChartId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.MedicalChartId"
          nullable: true
          description: Medical chart ID
        isActive:
          type: boolean
          description: Is active customer
          default: true
        registrationSource:
          type: string
          enum:
            - walk_in
            - online
            - phone
            - referral
          nullable: true
          description: Registration source
        referredBy:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          nullable: true
          description: Referrer customer ID
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
    Models.CustomerAssociations:
      type: object
      required:
        - primarySalonId
        - visitedSalonIds
        - familyMemberIds
        - referredBy
        - referredCustomerIds
        - groupId
      properties:
        primarySalonId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          nullable: true
        visitedSalonIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.SalonId"
        familyMemberIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.CustomerId"
          nullable: true
        referredBy:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          nullable: true
        referredCustomerIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.CustomerId"
          nullable: true
        groupId:
          type: string
          nullable: true
    Models.CustomerBookingsGetRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.BookingStatusCodeType"
      description: Customer bookings filter parameters
    Models.CustomerGenderType:
      type: string
      enum:
        - male
        - female
        - other
        - prefer_not_to_say
      description: |-
        性別区分 - 顧客の性別を表す区分（多様性に配慮した選択肢を含む）

        male: 男性
        female: 女性
        other: その他 - 男性・女性以外の性自認を持つ方
        prefer_not_to_say: 回答しない - 性別の回答を希望しない方
    Models.CustomerHealth:
      type: object
      required:
        - allergies
        - hairInfo
        - scalpInfo
        - medicalConditions
        - medications
        - pregnancyStatus
        - specialNeeds
      properties:
        allergies:
          type: array
          items:
            $ref: "#/components/schemas/Models.AllergyInfo"
        hairInfo:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.HairInfo"
          nullable: true
        scalpInfo:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.ScalpInfo"
          nullable: true
        medicalConditions:
          type: array
          items:
            type: string
          nullable: true
        medications:
          type: array
          items:
            type: string
          nullable: true
        pregnancyStatus:
          type: boolean
          nullable: true
        specialNeeds:
          type: string
          nullable: true
    Models.CustomerHistory:
      type: object
      required:
        - visits
        - lastServiceId
        - lastStaffId
        - favoriteServiceIds
        - favoriteStaffIds
        - pastTreatments
        - notes
      properties:
        visits:
          $ref: "#/components/schemas/Models.VisitHistory"
        lastServiceId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
        lastStaffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
        favoriteServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        favoriteStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
        pastTreatments:
          type: array
          items:
            type: string
          nullable: true
        notes:
          type: array
          items:
            type: string
          nullable: true
    Models.CustomerId:
      type: string
      format: uuid
      description: 顧客（来店者）を識別するためのブランド付きUUID。
    Models.CustomerMetadata:
      type: object
      required:
        - source
        - campaign
        - tags
        - customFields
        - internalNotes
        - riskScore
        - lifetimeValue
        - lastUpdatedBy
      properties:
        source:
          type: string
          enum:
            - walk_in
            - online
            - phone
            - referral
            - social_media
            - advertisement
          nullable: true
        campaign:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        customFields:
          type: object
          additionalProperties: {}
          nullable: true
        internalNotes:
          type: array
          items:
            type: string
          nullable: true
        riskScore:
          type: integer
          format: int32
          nullable: true
        lifetimeValue:
          type: integer
          format: int32
          nullable: true
        lastUpdatedBy:
          type: string
          nullable: true
    Models.CustomerPreferences:
      type: object
      required:
        - stylePreferences
        - servicePreferences
        - communicationPreferences
        - preferredStaff
        - avoidStaff
        - preferredDayOfWeek
        - preferredTimeSlots
        - specialRequests
        - language
      properties:
        stylePreferences:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.StylePreference"
          nullable: true
        servicePreferences:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.ServicePreference"
          nullable: true
        communicationPreferences:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.NotificationSettings"
          nullable: true
        preferredStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
          nullable: true
        avoidStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
          nullable: true
        preferredDayOfWeek:
          type: array
          items:
            $ref: "#/components/schemas/Models.DayOfWeekType"
          nullable: true
        preferredTimeSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          nullable: true
        specialRequests:
          type: string
          nullable: true
        language:
          type: string
          nullable: true
    Models.CustomerPreferencesUpdateRequest:
      type: object
      required:
        - contactMethod
        - notifications
        - marketingOptIn
      properties:
        contactMethod:
          allOf:
            - $ref: "#/components/schemas/Models.ContactMethodType"
          description: Preferred contact method
        notifications:
          allOf:
            - $ref: "#/components/schemas/Models.NotificationPreferences"
          description: NotificationType preferences
        marketingOptIn:
          type: boolean
          description: Marketing opt-in status
        preferredLanguage:
          type: string
          description: Preferred language
        accessibilityRequirements:
          type: array
          items:
            type: string
          description: Accessibility requirements
        allergies:
          type: array
          items:
            type: string
          description: Allergies or sensitivities
        preferredTimes:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimePreference"
          description: Preferred appointment times
      description: Customer preferences update model
    Models.CustomerProfile:
      type: object
      required:
        - visitCount
        - lastVisitDate
        - favoriteStaffIds
        - favoriteServiceIds
        - totalSpent
      properties:
        visitCount:
          type: integer
          format: int32
        lastVisitDate:
          type: string
          format: date-time
          nullable: true
        favoriteStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
          nullable: true
        favoriteServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
        totalSpent:
          type: integer
          format: int32
      allOf:
        - $ref: "#/components/schemas/Models.Customer"
    Models.CustomerReservationsGetRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.ReservationStatusType"
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
      description: Customer reservations filter parameters
    Models.CustomerStatistics:
      type: object
      required:
        - totalBookings
        - totalSpent
        - averageBookingValue
        - favoriteServices
        - favoriteStaff
        - loyaltyPoints
        - customerSince
        - cancellationRate
        - noShowRate
      properties:
        totalBookings:
          type: integer
          format: int32
          description: Total bookings
        totalSpent:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: Total spent
        averageBookingValue:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: Average booking value
        lastVisit:
          type: string
          format: date-time
          description: Last visit date
        favoriteServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSummary"
          description: Favorite services
        favoriteStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSummary"
          description: Favorite staff
        loyaltyPoints:
          type: integer
          format: int32
          description: Loyalty points
        customerSince:
          type: string
          format: date-time
          description: Customer since
        cancellationRate:
          type: number
          format: float
          description: Cancellation rate
        noShowRate:
          type: number
          format: float
          description: No-show rate
      description: Customer statistics response
    Models.CustomerStatusDetail:
      type: object
      required:
        - type
        - reason
        - since
        - until
        - by
        - deletedAt
      properties:
        type:
          $ref: "#/components/schemas/Models.CustomerStatusType"
        reason:
          type: string
          nullable: true
        since:
          type: string
          format: date-time
          nullable: true
        until:
          type: string
          format: date-time
          nullable: true
        by:
          type: string
          nullable: true
        deletedAt:
          type: string
          format: date-time
          nullable: true
    Models.CustomerStatusType:
      type: string
      enum:
        - active
        - inactive
        - suspended
        - deleted
        - blacklisted
      description: |-
        顧客ステータス区分 - 顧客アカウントの活動状態や利用可否を表す区分

        active: アクティブ - 通常利用可能な状態
        inactive: 休眠中 - 長期間利用がないがアカウントは維持されている状態
        suspended: 停止中 - 一時的に利用が停止されている状態
        deleted: 削除済み - アカウントが論理削除された状態
        blacklisted: ブラックリスト - 利用を禁止された状態
    Models.CutSubCategoryType:
      type: string
      enum:
        - mens_cut
        - womens_cut
        - kids_cut
        - bang_trim
        - beard_trim
      description: |-
        カットサブカテゴリー区分 - カットサービスの詳細分類

        mens_cut: メンズカット - 男性向けヘアカットサービス
        womens_cut: レディースカット - 女性向けヘアカットサービス
        kids_cut: キッズカット - 子供向けヘアカットサービス
        bang_trim: 前髪カット - 前髪のみのカットサービス
        beard_trim: 髭トリミング - 髭の整えサービス
    Models.DateRange:
      type: object
      required:
        - startDate
        - endDate
      properties:
        startDate:
          type: string
          format: date-time
          description: 期間の開始日時。
        endDate:
          type: string
          format: date-time
          description: 期間の終了日時。
      description: 期間指定や有効期間に利用する共通レンジ型。
    Models.DayOfWeekType:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      description: |-
        曜日区分 - 営業日やスケジュール管理で使用される曜日の定義

        monday: 月曜日
        tuesday: 火曜日
        wednesday: 水曜日
        thursday: 木曜日
        friday: 金曜日
        saturday: 土曜日
        sunday: 日曜日
    Models.DomainErrorDetails:
      type: object
      required:
        - type
        - message
        - code
        - details
        - entity
        - field
        - value
        - service
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.DomainErrorType"
          description: エラー分類タイプ。上位のビジネスルールカテゴリを特定する。
        message:
          type: string
          description: 業務担当者が理解しやすい説明文。ユーザー通知にも使用可能。
        code:
          type: string
          description: 機械判読可能なエラーコード。外部連携やログ分析に利用する。
        details:
          type: object
          additionalProperties: {}
          nullable: true
          description: 追加のエラー文脈。入力値や関連設定など柔軟に格納する。
        entity:
          type: string
          nullable: true
          description: "関連するエンティティ名。例: `Reservation` や `Customer`。"
        field:
          type: string
          nullable: true
          description: 問題が発生したフィールド名。入力フォームとの紐付けに利用。
        value:
          type: string
          nullable: true
          description: 問題があった値。マスキングが不要なケースのみ保持する。
        service:
          type: string
          nullable: true
          description: 外部サービスエラー時の対象サービス名。連携先の切り分けに役立つ。
      description: |-
        ドメインエラーの詳細情報モデル。
        予約・顧客・サロンなどビジネスロジック層で発生したエラーを分類し、運用チームが原因分析しやすい形で保持する。
    Models.DomainErrorFactory:
      type: object
      required:
        - validation
        - notFound
        - alreadyExists
        - businessRule
        - unauthorized
        - forbidden
        - internal
        - database
        - externalService
      properties:
        validation:
          type: object
          properties:
            type:
              type: string
              enum:
                - VALIDATION_ERROR
            defaultCode:
              type: string
              enum:
                - VALIDATION_FAILED
            httpStatus:
              type: number
              enum:
                - 400
          required:
            - type
            - defaultCode
            - httpStatus
          description: 検証エラーを生成するための設定。
        notFound:
          type: object
          properties:
            type:
              type: string
              enum:
                - NOT_FOUND
            defaultCode:
              type: string
              enum:
                - RESOURCE_NOT_FOUND
            httpStatus:
              type: number
              enum:
                - 404
          required:
            - type
            - defaultCode
            - httpStatus
          description: リソース未検出エラーを生成するための設定。
        alreadyExists:
          type: object
          properties:
            type:
              type: string
              enum:
                - ALREADY_EXISTS
            defaultCode:
              type: string
              enum:
                - RESOURCE_ALREADY_EXISTS
            httpStatus:
              type: number
              enum:
                - 409
          required:
            - type
            - defaultCode
            - httpStatus
          description: 重複登録エラーを生成するための設定。
        businessRule:
          type: object
          properties:
            type:
              type: string
              enum:
                - BUSINESS_RULE_VIOLATION
            defaultCode:
              type: string
              enum:
                - BUSINESS_RULE_VIOLATION
            httpStatus:
              type: number
              enum:
                - 422
          required:
            - type
            - defaultCode
            - httpStatus
          description: ビジネスルール違反エラーを生成するための設定。
        unauthorized:
          type: object
          properties:
            type:
              type: string
              enum:
                - UNAUTHORIZED
            defaultCode:
              type: string
              enum:
                - AUTHENTICATION_REQUIRED
            httpStatus:
              type: number
              enum:
                - 401
          required:
            - type
            - defaultCode
            - httpStatus
          description: 未認証エラーを生成するための設定。
        forbidden:
          type: object
          properties:
            type:
              type: string
              enum:
                - FORBIDDEN
            defaultCode:
              type: string
              enum:
                - INSUFFICIENT_PERMISSIONS
            httpStatus:
              type: number
              enum:
                - 403
          required:
            - type
            - defaultCode
            - httpStatus
          description: 権限不足エラーを生成するための設定。
        internal:
          type: object
          properties:
            type:
              type: string
              enum:
                - INTERNAL_ERROR
            defaultCode:
              type: string
              enum:
                - INTERNAL_SERVER_ERROR
            httpStatus:
              type: number
              enum:
                - 500
          required:
            - type
            - defaultCode
            - httpStatus
          description: 内部サーバーエラーを生成するための設定。
        database:
          type: object
          properties:
            type:
              type: string
              enum:
                - DATABASE_ERROR
            defaultCode:
              type: string
              enum:
                - DATABASE_ERROR
            httpStatus:
              type: number
              enum:
                - 500
          required:
            - type
            - defaultCode
            - httpStatus
          description: データベースエラーを生成するための設定。
        externalService:
          type: object
          properties:
            type:
              type: string
              enum:
                - EXTERNAL_SERVICE_ERROR
            defaultCode:
              type: string
              enum:
                - EXTERNAL_SERVICE_ERROR
            httpStatus:
              type: number
              enum:
                - 502
          required:
            - type
            - defaultCode
            - httpStatus
          description: 外部サービス連携エラーを生成するための設定。
      description: |-
        ドメインエラー生成の標準設定モデル。
        各カテゴリごとの既定コードと HTTP ステータスを定義し、再利用可能なエラーファクトリーを構築する。
    Models.DomainErrorMapping:
      type: object
      required:
        - domainType
        - errorCode
        - httpStatus
      properties:
        domainType:
          allOf:
            - $ref: "#/components/schemas/Models.DomainErrorType"
          description: ドメインエラータイプ。ビジネス層で識別されるカテゴリ。
        errorCode:
          allOf:
            - $ref: "#/components/schemas/Models.ErrorCodeType"
          description: 対応する標準エラーコード。`ErrorCodeType` を参照する。
        httpStatus:
          type: integer
          format: int32
          description: レスポンスに適用する HTTP ステータスコード。
      description: |-
        ドメインエラータイプとシステム標準エラーコードの対応表モデル。
        内部ロジックとHTTPレスポンスの整合性を保つために利用する。
    Models.DomainErrorType:
      type: string
      enum:
        - VALIDATION_ERROR
        - NOT_FOUND
        - ALREADY_EXISTS
        - BUSINESS_RULE_VIOLATION
        - UNAUTHORIZED
        - FORBIDDEN
        - INTERNAL_ERROR
        - DATABASE_ERROR
        - EXTERNAL_SERVICE_ERROR
      description: |-
        ドメインエラータイプ区分 - ビジネスロジック層で発生するエラーの分類

        VALIDATION_ERROR: 検証エラー - 入力値の検証で失敗
        NOT_FOUND: 未検出 - 指定されたリソースが存在しない
        ALREADY_EXISTS: 既存 - リソースが既に存在し、重複が許可されない
        BUSINESS_RULE_VIOLATION: ビジネスルール違反 - ビジネスロジックの制約に違反
        UNAUTHORIZED: 未認証 - 認証が必要であるが認証されていない
        FORBIDDEN: 禁止 - 認証されているが権限が不足
        INTERNAL_ERROR: 内部エラー - システム内部で予期しないエラーが発生
        DATABASE_ERROR: データベースエラー - データベース操作中のエラー
        EXTERNAL_SERVICE_ERROR: 外部サービスエラー - 外部APIやサービスでのエラー
    Models.DomainOperationError:
      type: object
      required:
        - domainError
        - problemDetails
        - occurredAt
        - operation
        - stackTrace
      properties:
        domainError:
          allOf:
            - $ref: "#/components/schemas/Models.DomainErrorDetails"
          description: ドメインエラーの詳細情報。ビジネスロジック層で発生した要因を保持する。
        problemDetails:
          allOf:
            - $ref: "#/components/schemas/Models.ProblemDetails"
          description: HTTP レスポンスとして返却可能な ProblemDetails。クライアントへの通知に使用。
        occurredAt:
          type: string
          format: date-time
          description: エラーが発生した日時 (UTC)。再発防止のタイムライン分析に活用。
        operation:
          type: string
          nullable: true
          description: "エラーが発生した操作名やユースケース。例: `CreateReservation`。"
        stackTrace:
          type: string
          nullable: true
          description: デバッグ用のスタックトレース。開発・検証環境のみで出力する。
      description: |-
        ドメイン操作で発生したエラーのコンテキストモデル。
        ビジネス層の例外情報と HTTP レイヤーの問題詳細を紐づけ、ログ出力やモニタリングを容易にする。
    Models.DraftBookingStatus:
      type: object
      required:
        - type
        - createdAt
        - expiresAt
      properties:
        type:
          type: string
          enum:
            - draft
          description: 固定値draft。下書き状態であることを示す。
        createdAt:
          type: string
          format: date-time
          description: 下書きが作成された日時。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 下書きの有効期限。未設定の場合は期限なし。
      description: 予約が下書き段階にある場合の状態情報。
    Models.DraftBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - draft
          description: 固定値draft。下書き状態であることを示す。
        createdAt:
          type: string
          format: date-time
          description: 下書きが作成された日時。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 下書きの有効期限。未設定の場合は期限なし。
      description: 予約が下書き段階にある場合の状態情報。
    Models.EmailVerificationStateDetail:
      type: object
      required:
        - type
        - verifiedAt
        - token
        - expiresAt
        - sentAt
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.EmailVerificationStateType"
          description: 現在の確認状態区分。
        verifiedAt:
          type: string
          format: date-time
          nullable: true
          description: 確認完了日時。未確認の場合はnull。
        token:
          type: string
          nullable: true
          description: 確認メールに含めるトークン。再送未実施の場合はnull。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: トークンの有効期限。
        sentAt:
          type: string
          format: date-time
          nullable: true
          description: 確認メールを送信した日時。
      description: メールアドレス確認フローの進行状況を保持するモデル。
    Models.EmailVerificationStateType:
      type: string
      enum:
        - verified
        - unverified
        - pending
      description: |-
        メール確認状態区分 - メールアドレスの確認状態を表す区分

        verified: 確認済み - メールアドレスが確認された状態
        unverified: 未確認 - メールアドレスが未確認の状態
        pending: 確認中 - 確認メールを送信し、確認待ちの状態
    Models.Error:
      type: object
      required:
        - code
        - message
        - details
      properties:
        code:
          type: string
          description: エラーの種類を特定するアプリケーション固有コード。
        message:
          type: string
          description: ユーザーまたはオペレーターに提示するエラーメッセージ。
        details:
          type: object
          additionalProperties: {}
          nullable: true
          description: デバッグやサポート対応に役立つ追加情報。任意項目。
      description: API全体で共通利用する業務エラーの基本モデル。
    Models.ErrorCodeType:
      type: string
      enum:
        - "1001"
        - "1002"
        - "1003"
        - "1004"
        - "1005"
        - "1006"
        - "1007"
        - "2001"
        - "2002"
        - "2003"
        - "2004"
        - "2005"
        - "3001"
        - "3002"
        - "3003"
        - "3004"
        - "3005"
        - "3006"
        - "3007"
        - "4001"
        - "4002"
        - "4003"
        - "4004"
        - "4005"
      description: |-
        エラーコードタイプ区分 - 一貫したエラー処理のための標準化されたエラーコード

        // 認証・認可 (1xxx)
        1001: 認証必須 - アクセスには認証が必要
        1002: 無効な資格情報 - ユーザー名またはパスワードが不正
        1003: トークン期限切れ - 認証トークンが期限切れ
        1004: トークン無効 - 認証トークンが無効または破損
        1005: 権限不足 - 操作を実行する権限が不足
        1006: アカウントロック - アカウントがロックされている
        1007: 2要素認証必須 - 2要素認証の入力が必要

        // バリデーション (2xxx)
        2001: 検証失敗 - 入力データの検証に失敗
        2002: 不正な形式 - データ形式が不正
        2003: 必須フィールド欠落 - 必須フィールドが入力されていない
        2004: 範囲外の値 - 値が許可された範囲を超えている
        2005: 重複値 - 一意であるべき値が重複している

        // ビジネスロジック (3xxx)
        3001: リソース未検出 - 指定されたリソースが存在しない
        3002: リソース既存 - リソースが既に存在する
        3003: 操作不可 - 現在の状態では操作が許可されない
        3004: ビジネスルール違反 - ビジネスルールに違反している
        3005: 残高不足 - ポイントや残高が不足
        3006: 予約競合 - 予約時間が重複している
        3007: 容量超過 - 利用可能な容量を超えている

        // システム (4xxx)
        4001: 内部サーバーエラー - サーバー内部でエラーが発生
        4002: サービス利用不可 - サービスが一時的に利用できない
        4003: データベースエラー - データベース処理中にエラーが発生
        4004: 外部サービスエラー - 外部サービスでエラーが発生
        4005: レート制限超過 - APIレート制限を超えた
    Models.Facet:
      type: object
      required:
        - value
        - count
      properties:
        value:
          type: string
          description: "ファセットの値。例: `メンズ向け` や `個室あり`。"
        count:
          type: integer
          format: int32
          description: 該当値に一致する件数。
      description: |-
        ファセット集計の単一要素を表すモデル。
        カテゴリや価格帯などの値と、その件数を組みで保持する。
    Models.FailedPaymentStatus:
      type: object
      required:
        - type
        - failedAt
        - reason
        - retryable
      properties:
        type:
          type: string
          enum:
            - failed
          description: 状態種別（failed 固定値）
        failedAt:
          type: string
          format: date-time
          description: 支払いが失敗した日時
        reason:
          type: string
          description: 失敗理由の説明
        retryable:
          type: boolean
          nullable: true
          description: 再試行が可能かどうか
          default: false
      description: 支払い失敗状態の詳細
    Models.FailedPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - failed
          description: 状態種別（failed 固定値）
        failedAt:
          type: string
          format: date-time
          description: 支払いが失敗した日時
        reason:
          type: string
          description: 失敗理由の説明
        retryable:
          type: boolean
          nullable: true
          description: 再試行が可能かどうか
          default: false
      description: 支払い失敗状態の詳細
    Models.FileType:
      type: string
      enum:
        - image
        - document
        - other
      description: |-
        ファイルタイプ区分 - アップロードされるファイルの種類を分類

        image: 画像 - 写真やイラスト等の画像ファイル（jpg, png, gif等）
        document: ドキュメント - PDF、Word、Excel等の文書ファイル
        other: その他 - 上記に分類されないファイル
    Models.HairInfo:
      type: object
      required:
        - type
        - thickness
        - condition
        - chemicalHistory
        - notes
      properties:
        type:
          $ref: "#/components/schemas/Models.HairType"
        thickness:
          $ref: "#/components/schemas/Models.HairThicknessType"
        condition:
          type: array
          items:
            type: string
        chemicalHistory:
          type: array
          items:
            type: string
        notes:
          type: string
          nullable: true
    Models.HairThicknessType:
      type: string
      enum:
        - fine
        - medium
        - thick
      description: |-
        髪の太さ区分 - 髪の毛一本の太さを分類、カットやスタイリングの参考に使用

        fine: 細毛 - 柔らかく細い髪、ボリュームが出にくい
        medium: 普通毛 - 平均的な太さの髪、扱いやすい
        thick: 太毛 - しっかりとした太い髪、ボリュームが出やすい
    Models.HairType:
      type: string
      enum:
        - straight
        - wavy
        - curly
        - coily
      description: |-
        髪質タイプ区分 - 顧客の髪のクセや形状を分類、適切な施術提案に使用

        straight: ストレート - 直毛、クセがほとんどない髪質
        wavy: ウェービー - 緩やかな波状、S字カーブの髪質
        curly: カーリー - 明確なカール、螺旋状の髪質
        coily: コイリー - 非常に細かいカール、ジグザグ状の髪質
    Models.HealthCheck:
      type: object
      required:
        - name
        - status
        - responseTime
        - error
        - details
      properties:
        name:
          type: string
          description: 対象サービス名またはコンポーネント識別子。
        status:
          type: string
          enum:
            - up
            - down
            - degraded
          description: 対象サービスの稼働状態。`up` は正常、`down` は停止、`degraded` は部分的な性能低下を示す。
        responseTime:
          type: integer
          format: int32
          nullable: true
          description: ヘルスチェックに要した時間 (ミリ秒)。応答遅延の指標。
        error:
          type: string
          nullable: true
          description: 停止時のエラーメッセージや原因メモ。
        details:
          type: object
          additionalProperties: {}
          nullable: true
          description: 監視対象固有の追加詳細。再試行回数や依存サービス名などを含める。
      description: |-
        個別サービスのヘルスチェック結果モデル。
        外部サービス連携や内部マイクロサービスごとの状態を把握する。
    Models.HealthStatus:
      type: object
      required:
        - status
        - version
        - timestamp
        - checks
      properties:
        status:
          type: string
          enum:
            - healthy
            - degraded
            - unhealthy
          description: システム全体の稼働状態。`healthy` は正常、`degraded` は性能低下、`unhealthy` は停止を表す。
        version:
          type: string
          description: 稼働中の API バージョン。運用チームのバージョン管理に利用。
        timestamp:
          type: string
          format: date-time
          description: 判定実行時点のサーバー時刻 (UTC)。
        checks:
          type: array
          items:
            $ref: "#/components/schemas/Models.HealthCheck"
          description: 各内部サービスや依存コンポーネントのヘルスチェック結果一覧。
        metadata:
          type: object
          additionalProperties: {}
          description: 監視環境固有の追加メタ情報。必要に応じてキーを拡張する。
      description: |-
        API ヘルスチェック結果モデル。
        監視基盤や運用ダッシュボードにシステム状態を提供し、早期異常検知を実現する。
    Models.InProgressBookingStatus:
      type: object
      required:
        - type
        - startedAt
        - stationName
      properties:
        type:
          type: string
          enum:
            - in_progress
          description: 固定値in_progress。施術中であることを示す。
        startedAt:
          type: string
          format: date-time
          description: 施術を開始した日時。
        stationName:
          type: string
          nullable: true
          description: 施術を行っているブースや席の名称。未設定の場合はnull。
      description: 施術が進行中の場合の状態情報。
    Models.InProgressBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - in_progress
          description: 固定値in_progress。施術中であることを示す。
        startedAt:
          type: string
          format: date-time
          description: 施術を開始した日時。
        stationName:
          type: string
          nullable: true
          description: 施術を行っているブースや席の名称。未設定の場合はnull。
      description: 施術が進行中の場合の状態情報。
    Models.InventoryAlert:
      type: object
      required:
        - itemId
        - threshold
        - currentStock
        - triggeredAt
        - inventoryId
        - alert
        - message
        - severity
      properties:
        itemId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 対象在庫 ID
        threshold:
          type: number
          format: float
          description: 設定した閾値
        currentStock:
          type: number
          format: float
          description: 警告発生時の在庫数
        triggeredAt:
          type: string
          format: date-time
          description: 警告が発生した日時
        inventoryId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 関連する在庫 ID
        alert:
          type: string
          enum:
            - low_stock
            - expiring
            - expired
            - overstock
          description: アラート種別
        message:
          type: string
          description: 通知メッセージ
        severity:
          type: string
          enum:
            - info
            - warning
            - critical
          description: 重要度レベル
        acknowledged:
          type: boolean
          description: 確認済みかどうか
        acknowledgedBy:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 確認したスタッフ ID
        acknowledgedAt:
          type: string
          format: date-time
          description: 確認日時
      description: 在庫に関するアラート情報
    Models.InventoryId:
      type: string
      format: uuid
      description: 在庫アイテムや消耗品を識別するブランド付きUUID。
    Models.InventoryItem:
      type: object
      required:
        - id
        - salonId
        - productCode
        - productName
        - category
        - currentStock
        - minimumStock
        - unit
        - unitCost
        - status
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 在庫 ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 在庫を管理するサロン ID
        productCode:
          type: string
          description: 商品コード・SKU
        productName:
          type: string
          description: 商品名
        description:
          type: string
          description: 商品説明文
        category:
          type: string
          description: 分類カテゴリ
        brand:
          type: string
          description: ブランド名
        supplier:
          type: string
          description: 仕入先情報
        currentStock:
          type: number
          format: float
          description: 現在の在庫数量
        minimumStock:
          type: number
          format: float
          description: 最低在庫数（警告閾値）
        maximumStock:
          type: number
          format: float
          description: 最大在庫数（上限管理用）
        unit:
          type: string
          description: 数量の単位
        unitCost:
          type: number
          format: float
          description: 仕入単価
        sellingPrice:
          type: number
          format: float
          description: 顧客販売価格
        status:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryStatusType"
          description: 在庫状態区分
        location:
          type: string
          description: サロン内の保管場所
        expirationDate:
          type: string
          format: date-time
          description: 賞味・使用期限
        lastRestocked:
          type: string
          format: date-time
          description: 直近の入庫日時
        notes:
          type: string
          description: 備考メモ
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: サロンで管理する在庫アイテムの基本情報
    Models.InventoryItemCreateRequest:
      type: object
      required:
        - salonId
        - productCode
        - productName
        - description
        - category
        - brand
        - supplier
        - currentStock
        - minimumStock
        - maximumStock
        - unit
        - unitCost
        - sellingPrice
        - location
        - expirationDate
        - notes
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 在庫を追加するサロン ID
        productCode:
          type: string
          description: 商品コード・SKU
        productName:
          type: string
          description: 商品名
        description:
          type: string
          nullable: true
          description: 商品説明文
        category:
          type: string
          description: 分類カテゴリ
        brand:
          type: string
          nullable: true
          description: ブランド名
        supplier:
          type: string
          nullable: true
          description: 仕入先情報
        currentStock:
          type: number
          format: float
          description: 登録時点の在庫数量
        minimumStock:
          type: number
          format: float
          description: 最低在庫数
        maximumStock:
          type: number
          format: float
          nullable: true
          description: 最大在庫数
        unit:
          type: string
          description: 数量単位
        unitCost:
          type: number
          format: float
          description: 仕入単価
        sellingPrice:
          type: number
          format: float
          nullable: true
          description: 顧客販売価格
        location:
          type: string
          nullable: true
          description: 保管場所
        expirationDate:
          type: string
          format: date-time
          nullable: true
          description: 賞味・使用期限
        notes:
          type: string
          nullable: true
          description: 備考メモ
      description: 在庫アイテムを新規登録する入力モデル
    Models.InventoryItemUpdateRequest:
      type: object
      properties:
        productName:
          type: string
          description: 更新後の商品名
        description:
          type: string
          nullable: true
          description: 更新後の商品説明
        category:
          type: string
          description: 更新後のカテゴリ
        brand:
          type: string
          nullable: true
          description: 更新後のブランド名
        supplier:
          type: string
          nullable: true
          description: 更新後の仕入先情報
        minimumStock:
          type: number
          format: float
          description: 更新後の最低在庫数
        maximumStock:
          type: number
          format: float
          nullable: true
          description: 更新後の最大在庫数
        unitCost:
          type: number
          format: float
          description: 更新後の仕入単価
        sellingPrice:
          type: number
          format: float
          nullable: true
          description: 更新後の販売価格
        location:
          type: string
          nullable: true
          description: 更新後の保管場所
        expirationDate:
          type: string
          format: date-time
          nullable: true
          description: 更新後の賞味・使用期限
        status:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryStatusType"
          description: 在庫状態の更新
        notes:
          type: string
          nullable: true
          description: 更新後の備考
      description: 在庫アイテムの情報更新入力モデル
    Models.InventoryStatusType:
      type: string
      enum:
        - in_stock
        - low_stock
        - out_of_stock
        - ordered
        - discontinued
      description: |-
        在庫ステータス区分 - 商品・材料の在庫状態を表す区分

        in_stock: 在庫あり - 十分な在庫量がある状態
        low_stock: 在庫僅少 - 在庫量が設定された最小量に近づいている状態
        out_of_stock: 在庫切れ - 在庫がゼロになった状態
        ordered: 発注済み - 補充のための発注が行われた状態
        discontinued: 廃番 - 商品の取り扱いを終了した状態
    Models.InventoryTransaction:
      type: object
      required:
        - id
        - itemId
        - salonId
        - type
        - quantity
        - reason
        - performedBy
        - occurredAt
      properties:
        id:
          type: string
          description: トランザクション ID
        itemId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 対象在庫アイテム ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 処理を行うサロン ID
        type:
          type: string
          enum:
            - in
            - out
            - adjustment
            - transfer
          description: 在庫操作区分（入庫/出庫/調整/移動）
        quantity:
          type: number
          format: float
          description: 操作した数量
        reason:
          type: string
          description: 操作理由
        performedBy:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 操作を担当したスタッフ ID
        occurredAt:
          type: string
          format: date-time
          description: 操作日時
        referenceId:
          type: string
          description: 関連する外部参照 ID
        notes:
          type: string
          description: 備考メモ
        metadata:
          type: object
          additionalProperties: {}
          description: 追加のメタデータ
      description: 在庫の入出庫トランザクション
    Models.LoyaltyTierId:
      type: string
      format: uuid
      description: ロイヤルティプログラムの会員ランクを識別するブランド付きUUID。
    Models.LoyaltyTierType:
      type: string
      enum:
        - bronze
        - silver
        - gold
        - platinum
      description: |-
        ロイヤルティティア区分 - 顧客ロイヤルティプログラムの会員ランク

        bronze: ブロンズ - 基本会員ランク、初期段階の特典を提供
        silver: シルバー - 中級会員ランク、標準的な特典を提供
        gold: ゴールド - 上級会員ランク、優待特典を提供
        platinum: プラチナ - 最上級会員ランク、最高レベルの特典を提供
    Models.MakeupSubCategoryType:
      type: string
      enum:
        - everyday_makeup
        - event_makeup
        - bridal_makeup
        - photoshoot_makeup
      description: |-
        メイクアップサブカテゴリー区分 - メイクアップサービスの詳細分類

        everyday_makeup: デイリーメイク - 普段使いのナチュラルメイク
        event_makeup: イベントメイク - パーティーやイベント用の華やかなメイク
        bridal_makeup: ブライダルメイク - 花嫁向けの特別なメイクアップ
        photoshoot_makeup: 撮影用メイク - 写真撮影用のプロフェッショナルメイク
    Models.MaterialUsage:
      type: object
      required:
        - inventoryId
        - productName
        - quantity
        - unit
        - notes
      properties:
        inventoryId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 使用した在庫 ID
        productName:
          type: string
          description: 資材名
        quantity:
          type: number
          format: float
          description: 使用量
        unit:
          type: string
          description: 数量単位
        notes:
          type: string
          nullable: true
          description: 備考メモ
      description: 施術で使用した資材の記録
    Models.MedicalChart:
      type: object
      required:
        - id
        - customerId
        - allergies
        - scalpCondition
        - hairCondition
        - previousTreatments
        - medicalConditions
        - preferredProducts
        - avoidProducts
        - notes
        - lastUpdated
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.MedicalChartId"
          description: カルテ ID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 対象顧客 ID
        allergies:
          type: array
          items:
            type: string
          nullable: true
          description: アレルギー・敏感情報
        scalpCondition:
          type: string
          nullable: true
          description: 頭皮状態のメモ
        hairCondition:
          type: string
          nullable: true
          description: 毛髪状態のメモ
        previousTreatments:
          type: array
          items:
            $ref: "#/components/schemas/Models.PreviousTreatment"
          nullable: true
          description: 過去に実施したケミカル施術履歴
        medicalConditions:
          type: string
          nullable: true
          description: 注意が必要な持病・体調情報
        preferredProducts:
          type: array
          items:
            type: string
          nullable: true
          description: 好みの商材・ブランド
        avoidProducts:
          type: array
          items:
            type: string
          nullable: true
          description: 避けるべき商材
        notes:
          type: string
          nullable: true
          description: 自由記述メモ
        lastUpdated:
          type: string
          format: date-time
          description: 最終更新日時
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 顧客ごとのカルテ情報
    Models.MedicalChartCreateRequest:
      type: object
      required:
        - customerId
        - allergies
        - scalpCondition
        - hairCondition
        - previousTreatments
        - medicalConditions
        - preferredProducts
        - avoidProducts
        - notes
      properties:
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 対象顧客 ID
        allergies:
          type: array
          items:
            type: string
          nullable: true
          description: アレルギー情報
        scalpCondition:
          type: string
          nullable: true
          description: 頭皮状態
        hairCondition:
          type: string
          nullable: true
          description: 毛髪状態
        previousTreatments:
          type: array
          items:
            $ref: "#/components/schemas/Models.PreviousTreatment"
          nullable: true
          description: 過去施術の履歴
        medicalConditions:
          type: string
          nullable: true
          description: 注意すべき体調・持病
        preferredProducts:
          type: array
          items:
            type: string
          nullable: true
          description: 好みの商材
        avoidProducts:
          type: array
          items:
            type: string
          nullable: true
          description: 避けるべき商材
        notes:
          type: string
          nullable: true
          description: その他メモ
      description: カルテを新規作成する入力モデル
    Models.MedicalChartId:
      type: string
      format: uuid
      description: カルテ（メディカルチャート）を識別するブランド付きUUID。
    Models.MedicalChartUpdateRequest:
      type: object
      properties:
        allergies:
          type: array
          items:
            type: string
          nullable: true
          description: アレルギー情報
        scalpCondition:
          type: string
          nullable: true
          description: 頭皮状態
        hairCondition:
          type: string
          nullable: true
          description: 毛髪状態
        previousTreatments:
          type: array
          items:
            $ref: "#/components/schemas/Models.PreviousTreatment"
          nullable: true
          description: 過去施術の履歴
        medicalConditions:
          type: string
          nullable: true
          description: 注意すべき体調・持病
        preferredProducts:
          type: array
          items:
            type: string
          nullable: true
          description: 好みの商材
        avoidProducts:
          type: array
          items:
            type: string
          nullable: true
          description: 避けるべき商材
        notes:
          type: string
          nullable: true
          description: その他メモ
      description: カルテ情報を更新する入力モデル
    Models.MembershipBenefitDetail:
      type: object
      required:
        - type
        - percentage
        - multiplier
        - service
        - frequency
        - value
        - description
      properties:
        type:
          $ref: "#/components/schemas/Models.MembershipBenefitType"
        percentage:
          type: integer
          format: int32
          nullable: true
        multiplier:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
        service:
          type: string
          nullable: true
        frequency:
          type: string
          enum:
            - monthly
            - quarterly
            - yearly
          nullable: true
        value:
          type: integer
          format: int32
          nullable: true
        description:
          type: string
          nullable: true
    Models.MembershipBenefitType:
      type: string
      enum:
        - discount_rate
        - point_multiplier
        - priority_booking
        - free_service
        - birthday_special
        - exclusive_access
      description: |-
        会員特典タイプ区分 - 会員ランクに応じて提供される特典の種類

        discount_rate: 割引率 - サービス料金に対するパーセンテージ割引
        point_multiplier: ポイント倍率 - 通常のポイント付与率に対する乗数
        priority_booking: 優先予約 - 一般公開前の優先的な予約権利
        free_service: 無料サービス - 特定サービスの無料提供
        birthday_special: 誕生日特典 - 誕生月に提供される特別サービス
        exclusive_access: 特別アクセス権 - VIP専用メニューや特別イベントへの参加権
    Models.MembershipInfo:
      type: object
      required:
        - tier
        - since
        - benefits
        - dedicatedManager
        - points
        - totalPointsEarned
        - totalPointsUsed
        - expiringPoints
        - pointsExpireAt
      properties:
        tier:
          $ref: "#/components/schemas/Models.MembershipTierType"
        since:
          type: string
          format: date-time
        benefits:
          type: array
          items:
            $ref: "#/components/schemas/Models.MembershipBenefitDetail"
        dedicatedManager:
          type: string
          nullable: true
        points:
          type: integer
          format: int32
        totalPointsEarned:
          type: integer
          format: int32
        totalPointsUsed:
          type: integer
          format: int32
        expiringPoints:
          type: integer
          format: int32
          nullable: true
        pointsExpireAt:
          type: string
          format: date-time
          nullable: true
    Models.MembershipTierType:
      type: string
      enum:
        - regular
        - silver
        - gold
        - platinum
        - vip
      description: |-
        会員ランク区分 - 顧客の会員ランクを表し、特典・優待内容を決定する区分

        regular: 一般会員 - 基本ランク、標準的なサービスを提供
        silver: シルバー会員 - 中級ランク、5%の基本割引等の特典付与
        gold: ゴールド会員 - 上級ランク、10%の割引や優先予約等の特典付与
        platinum: プラチナ会員 - 最上級ランク、15%の割引や特別サービス提供
        vip: VIP会員 - 特別会員、完全カスタマイズされた特別待遇を提供
    Models.Money:
      type: object
      required:
        - value
        - currency
        - taxRate
      properties:
        value:
          type: integer
          format: int64
          description: 通貨の最小単位で表現した金額値。
        currency:
          allOf:
            - $ref: "#/components/schemas/Models.CurrencyCodeType"
          description: 使用する通貨コード。
        taxRate:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: 適用税率。任意設定。
      description: 税抜・税込計算に利用する金額モデル。
    Models.MoneyUpdate:
      type: object
      properties:
        value:
          type: integer
          format: int64
          description: 通貨の最小単位で表現した金額値。
        currency:
          allOf:
            - $ref: "#/components/schemas/Models.CurrencyCodeType"
          description: 使用する通貨コード。
        taxRate:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: 適用税率。任意設定。
      description: 税抜・税込計算に利用する金額モデル。
    Models.NailSubCategoryType:
      type: string
      enum:
        - manicure
        - pedicure
        - gel_nail
        - nail_art
        - nail_removal
      description: |-
        ネイルサブカテゴリー区分 - ネイルケアサービスの詳細分類

        manicure: マニキュア - 手の爪のケアと装飾
        pedicure: ペディキュア - 足の爪のケアと装飾
        gel_nail: ジェルネイル - UV/LEDライトで硬化させるジェルネイル
        nail_art: ネイルアート - デザインや装飾を施したアートネイル
        nail_removal: ネイルリムーバル - ジェルやマニキュアの除去サービス
    Models.NoShowBookingStatus:
      type: object
      required:
        - type
        - recordedAt
        - penaltyApplied
      properties:
        type:
          type: string
          enum:
            - no_show
          description: 固定値no_show。無断キャンセル状態であることを示す。
        recordedAt:
          type: string
          format: date-time
          description: 無断キャンセルとして記録した日時。
        penaltyApplied:
          type: boolean
          description: ペナルティを適用したかどうか。既定値はfalse。
          default: false
      description: 来店が確認できなかった場合の状態情報。
    Models.NoShowBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - no_show
          description: 固定値no_show。無断キャンセル状態であることを示す。
        recordedAt:
          type: string
          format: date-time
          description: 無断キャンセルとして記録した日時。
        penaltyApplied:
          type: boolean
          description: ペナルティを適用したかどうか。既定値はfalse。
          default: false
      description: 来店が確認できなかった場合の状態情報。
    Models.NotificationPreferences:
      type: object
      required:
        - email
        - sms
        - push
        - reminderHours
      properties:
        email:
          type: boolean
          description: Email notifications enabled
        sms:
          type: boolean
          description: SMS notifications enabled
        push:
          type: boolean
          description: Push notifications enabled
        reminderHours:
          type: integer
          format: int32
          description: Reminder timing (hours before appointment)
      description: Notification preferences model
    Models.NotificationSettings:
      type: object
      required:
        - types
        - reminderTimings
        - enabled
      properties:
        types:
          type: array
          items:
            $ref: "#/components/schemas/Models.NotificationType"
          description: 利用を許可する通知チャネルの一覧。
        reminderTimings:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReminderTimingType"
          description: リマインダー送信タイミングの一覧。
        enabled:
          type: boolean
          description: 通知機能全体の有効・無効フラグ。
      description: 顧客への通知チャネルとリマインダー設定をまとめたモデル。
    Models.NotificationType:
      type: string
      enum:
        - email
        - sms
        - push
        - line
      description: |-
        通知タイプ区分 - 顧客への通知・連絡手段の種類

        email: Eメール - 電子メールによる通知
        sms: SMS - ショートメッセージサービスによる通知
        push: プッシュ通知 - モバイルアプリのプッシュ通知
        line: LINE - LINEメッセージングサービスによる通知
    Models.OffsetPaginationParams:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          description: 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。
          default: 20
        offset:
          type: integer
          format: int32
          minimum: 0
          description: スキップする件数。リスト冒頭からのオフセット値を指定する。
          default: 0
        sortBy:
          type: string
          description: ソート対象フィールド。予約一覧や顧客一覧の表示順を決定する。
        sortOrder:
          type: string
          enum:
            - asc
            - desc
          description: ソート順序。`asc` は昇順、`desc` は降順を表す。
          default: asc
      description: |-
        オフセット方式のページネーション指定モデル。
        既存基盤や BI 連携でカーソル方式に移行できないケース向けの互換パラメータを提供する。
    Models.OpeningHours:
      type: object
      required:
        - dayOfWeek
        - date
        - openTime
        - closeTime
        - isHoliday
        - holidayName
        - notes
      properties:
        dayOfWeek:
          allOf:
            - $ref: "#/components/schemas/Models.DayOfWeekType"
          nullable: true
          description: 対象となる曜日。特定日設定のみの場合はnull。
        date:
          type: string
          format: date
          nullable: true
          description: 特別営業日の個別日付。通常スケジュールの場合はnull。
        openTime:
          type: string
          nullable: true
          description: 開店時刻（HH:mm形式）。未設定の場合は休業扱い。
        closeTime:
          type: string
          nullable: true
          description: 閉店時刻（HH:mm形式）。未設定の場合は休業扱い。
        isHoliday:
          type: boolean
          description: 休業日かどうかを示すフラグ。
        holidayName:
          type: string
          nullable: true
          description: 祝日名称や社内呼称などの休業理由。未設定時はnull。
        notes:
          type: string
          nullable: true
          description: 備考や注意事項。未設定時はnull。
      description: 曜日別および特定日の営業時間を管理するモデル。
    Models.OrderId:
      type: string
      format: uuid
      description: サプライヤー発注・仕入れオーダーを識別するブランド付きUUID。
    Models.OrderItem:
      type: object
      required:
        - inventoryId
        - productCode
        - productName
        - quantity
        - unit
        - unitPrice
        - totalPrice
      properties:
        inventoryId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 紐づく在庫 ID
        productCode:
          type: string
          description: 商品コード
        productName:
          type: string
          description: 商品名
        quantity:
          type: number
          format: float
          description: 発注数量
        unit:
          type: string
          description: 数量単位
        unitPrice:
          type: number
          format: float
          description: 単価
        totalPrice:
          type: number
          format: float
          description: 明細ごとの金額
        notes:
          type: string
          description: 備考メモ
      description: 発注明細の詳細情報
    Models.OrderStatusType:
      type: string
      enum:
        - draft
        - pending
        - approved
        - ordered
        - shipped
        - delivered
        - cancelled
      description: |-
        発注ステータス区分 - 商品発注の進行状態を表す区分

        draft: 下書き - 発注内容を作成中の状態
        pending: 承認待ち - 発注内容が確定し、承認を待っている状態
        approved: 承認済み - 責任者により発注が承認された状態
        ordered: 発注済み - サプライヤーへ正式に発注が行われた状態
        shipped: 発送済み - サプライヤーから商品が発送された状態
        delivered: 配送完了 - 商品が到着し、受領が完了した状態
        cancelled: キャンセル - 発注が取り消された状態
    Models.PaginatedAttachments:
      type: object
      required:
        - items
        - total
        - page
        - limit
        - totalPages
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Models.Attachment"
          description: 該当ページの添付ファイル配列。
        total:
          type: integer
          format: int32
          description: 全体の添付ファイル件数。
        page:
          type: integer
          format: int32
          description: 現在のページ番号。
        limit:
          type: integer
          format: int32
          description: 1ページあたりの取得件数。
        totalPages:
          type: integer
          format: int32
          description: 計算された総ページ数。
      description: 添付ファイル一覧をページネーション付きで返すレスポンスモデル。
    Models.PaginationLinks:
      type: object
      required:
        - self
        - first
        - last
        - next
        - prev
      properties:
        self:
          type: string
          description: 現在ページを指すリンク。
        first:
          type: string
          nullable: true
          description: 最初のページへのリンク。総件数が確定しない場合は null。
        last:
          type: string
          nullable: true
          description: 最後のページへのリンク。カーソル算出ができない場合は null。
        next:
          type: string
          nullable: true
          description: 次ページへのリンク。さらに結果がある場合のみ設定される。
        prev:
          type: string
          nullable: true
          description: 前ページへのリンク。戻り操作が不要な場合は null。
      description: |-
        ページ遷移に利用するリンク情報モデル。
        API クライアントや外部連携がRESTフローで次・前のリソースを辿る際に利用する。
    Models.PaginationMeta:
      type: object
      required:
        - total
        - limit
        - hasMore
        - cursor
        - nextCursor
        - prevCursor
      properties:
        total:
          type: integer
          format: int32
          nullable: true
          description: 取得対象全体の総件数。件数計測ができない場合は null。
        limit:
          type: integer
          format: int32
          description: 1ページあたりの取得件数。クエリパラメータ `limit` と一致する。
        hasMore:
          type: boolean
          description: 次ページが存在するかを示すフラグ。無限スクロールの継続判定に使用。
        cursor:
          type: string
          nullable: true
          description: 現在ページのカーソル値。次リクエストで `cursor` に指定することで同位置から再開できる。
        nextCursor:
          type: string
          nullable: true
          description: 次ページを取得するためのカーソル値。存在しない場合は null。
        prevCursor:
          type: string
          nullable: true
          description: 前ページへ戻るためのカーソル値。戻り操作が不要な場合は null。
      description: |-
        ページネーションに関する統計情報モデル。
        総件数やカーソル位置を保持し、フロントエンドの続き取得や無限スクロールの制御に利用する。
    Models.PartialRefundPaymentStatus:
      type: object
      required:
        - type
        - refundedAt
        - refundAmount
        - remainingAmount
        - refundId
      properties:
        type:
          type: string
          enum:
            - partial_refund
          description: 状態種別（partial_refund 固定値）
        refundedAt:
          type: string
          format: date-time
          description: 返金が行われた日時
        refundAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 返金された金額
        remainingAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 返金後に残る請求金額
        refundId:
          allOf:
            - $ref: "#/components/schemas/Models.RefundId"
          description: 関連する返金 ID
      description: 部分返金済み状態の詳細
    Models.PartialRefundPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - partial_refund
          description: 状態種別（partial_refund 固定値）
        refundedAt:
          type: string
          format: date-time
          description: 返金が行われた日時
        refundAmount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 返金された金額
        remainingAmount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 返金後に残る請求金額
        refundId:
          allOf:
            - $ref: "#/components/schemas/Models.RefundId"
          description: 関連する返金 ID
      description: 部分返金済み状態の詳細
    Models.PasswordResetStateDetail:
      type: object
      required:
        - type
        - token
        - expiresAt
        - requestedAt
        - completedAt
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.PasswordResetStateType"
          description: 現在のリセット状態区分。
        token:
          type: string
          nullable: true
          description: リセット手続きに使用するトークン。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: トークンの有効期限。
        requestedAt:
          type: string
          format: date-time
          nullable: true
          description: リセットを要求した日時。
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: リセット完了日時。未完了の場合はnull。
      description: パスワード再設定リクエストの状態管理モデル。
    Models.PasswordResetStateType:
      type: string
      enum:
        - none
        - requested
        - completed
      description: |-
        パスワードリセット状態区分 - パスワードリセットの進行状態を表す区分

        none: なし - パスワードリセットが要求されていない状態
        requested: リクエスト中 - パスワードリセットが要求された状態
        completed: 完了 - パスワードリセットが完了した状態
    Models.Payment:
      type: object
      required:
        - id
        - salonId
        - customerId
        - method
        - status
        - amounts
        - history
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          description: 決済レコード ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 決済が紐づくサロン ID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 支払いを行う顧客 ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 関連する予約 ID
        treatmentRecordId:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentRecordId"
          description: 関連する施術記録 ID
        method:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          description: 使用した支払い方法
        status:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentStatus"
          description: 現在の支払い状態の詳細
        amounts:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentAmounts"
          description: 請求金額の内訳情報
        pointsUsed:
          type: integer
          format: int32
          description: 使用したポイント数
        depositApplied:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 予約時に適用した預り金額
        outstandingAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 未収残高がある場合の金額
        externalReference:
          type: string
          description: 外部決済サービスの参照番号
        receiptNumber:
          type: string
          description: 発行したレシート番号
        history:
          type: array
          items:
            $ref: "#/components/schemas/Models.PaymentHistory"
          description: 状態変遷の履歴一覧
        refunds:
          type: array
          items:
            $ref: "#/components/schemas/Models.Refund"
          description: 関連する返金記録の一覧
        metadata:
          type: object
          additionalProperties: {}
          description: 外部サービス連携向けのメタデータ
        notes:
          type: string
          description: スタッフ用の備考メモ
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: サロンで発生する支払いを管理する決済記録
    Models.PaymentAmounts:
      type: object
      required:
        - billed
        - totalPayable
      properties:
        billed:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: サービス代金の税抜合計
        tax:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 課税対象額に対する税額
        discount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 割引金額の合計
        tip:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: チップとして受領する金額
        totalPayable:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 最終的な支払金額
      description: 請求金額の内訳
    Models.PaymentBreakdown:
      type: object
      required:
        - subtotal
        - tax
        - discount
        - total
      properties:
        subtotal:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 商品の税抜小計
        tax:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 適用される税額
        discount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 割引金額
        pointsDiscount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: ポイント適用による割引額
        total:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 支払総額
      description: 支払金額の内訳プレビュー
    Models.PaymentCreateRequest:
      type: object
      required:
        - salonId
        - customerId
        - method
        - amounts
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 決済を登録するサロン ID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 支払う顧客 ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 紐づく予約 ID
        treatmentRecordId:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentRecordId"
          description: 紐づく施術記録 ID
        method:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          description: 利用する支払い方法
        amounts:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentAmounts"
          description: 請求金額の内訳
        pointsUsed:
          type: integer
          format: int32
          description: 使用するポイント数
        depositApplied:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 適用する預り金額
        externalReference:
          type: string
          description: 外部決済参照番号
        notes:
          type: string
          description: 備考メモ
        metadata:
          type: object
          additionalProperties: {}
          description: 外部システム連携向けメタデータ
      description: 決済登録時に利用する入力モデル
    Models.PaymentHistory:
      type: object
      required:
        - eventId
        - paymentId
        - status
        - occurredAt
      properties:
        eventId:
          type: string
          description: 履歴イベント ID
        paymentId:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          description: 対象となる決済 ID
        status:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentStatus"
          description: 変更後の支払い状態
        occurredAt:
          type: string
          format: date-time
          description: 変更が発生した日時
        actor:
          type: string
          enum:
            - system
            - staff
            - customer
          description: 操作主体の区分
        actorId:
          type: string
          description: 操作主体の ID
        note:
          type: string
          description: 変更内容の補足メモ
        metadata:
          type: object
          additionalProperties: {}
          description: 履歴に紐づく追加メタデータ
      description: 決済状態の変更履歴
    Models.PaymentId:
      type: string
      format: uuid
      description: 決済取引や請求のレコードを識別するブランド付きUUID。
    Models.PaymentMethodType:
      type: string
      enum:
        - cash
        - credit_card
        - debit_card
        - e_money
        - qr_payment
        - bank_transfer
        - point
      description: |-
        支払い方法区分 - サロンで利用可能な決済手段の種類

        cash: 現金 - 現金による支払い
        credit_card: クレジットカード - クレジットカードによる支払い
        debit_card: デビットカード - 銀行口座から直接引き落としのカード支払い
        e_money: 電子マネー - Suica、PASMO等の電子マネーによる支払い
        qr_payment: QRコード決済 - PayPay、LINE Pay等のQRコード決済
        bank_transfer: 銀行振込 - 銀行口座への振込による支払い
        point: ポイント - サロンのポイントを使用した支払い
    Models.PaymentPreview:
      type: object
      required:
        - salonId
        - breakdown
        - recommendedMethods
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 見積対象のサロン ID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 見積対象の顧客 ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 関連する予約 ID
        breakdown:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentBreakdown"
          description: 金額内訳のプレビュー
        recommendedMethods:
          type: array
          items:
            $ref: "#/components/schemas/Models.PaymentMethodType"
          description: 推奨する支払い方法の一覧
        notes:
          type: string
          description: 顧客・スタッフ向けの備考
      description: 決済前の支払見積情報
    Models.PaymentStatus:
      anyOf:
        - $ref: "#/components/schemas/Models.PendingPaymentStatus"
        - $ref: "#/components/schemas/Models.ProcessingPaymentStatus"
        - $ref: "#/components/schemas/Models.CompletedPaymentStatus"
        - $ref: "#/components/schemas/Models.FailedPaymentStatus"
        - $ref: "#/components/schemas/Models.RefundedPaymentStatus"
        - $ref: "#/components/schemas/Models.PartialRefundPaymentStatus"
      description: 支払い状態の詳細情報を表すユニオン
    Models.PaymentStatusCodeType:
      type: string
      enum:
        - pending
        - processing
        - completed
        - failed
        - refunded
        - partial_refund
      description: |-
        支払いステータス区分 - 決済処理の進行状態を表す区分

        pending: 支払い待ち - 支払いが開始されたがまだ完了していない状態
        processing: 処理中 - 決済処理が進行中の状態
        completed: 完了 - 支払いが正常に完了した状態
        failed: 失敗 - 支払い処理が失敗した状態
        refunded: 返金済み - 全額返金が完了した状態
        partial_refund: 部分返金 - 一部金額の返金が完了した状態
    Models.PaymentStatusUpdate:
      anyOf:
        - $ref: "#/components/schemas/Models.PendingPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.ProcessingPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.CompletedPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.FailedPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.RefundedPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.PartialRefundPaymentStatusUpdate"
      description: 支払い状態の詳細情報を表すユニオン
    Models.PaymentUpdateRequest:
      type: object
      properties:
        method:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          description: 変更後の支払い方法
        status:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentStatusUpdate"
          description: 変更後の支払い状態
        outstandingAmount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 再計算した未収残高
        depositApplied:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          nullable: true
          description: 更新後の預り金額（null 指定で解除）
        externalReference:
          type: string
          nullable: true
          description: 更新後の外部参照番号（null 指定で解除）
        receiptNumber:
          type: string
          nullable: true
          description: 更新後のレシート番号（null 指定で解除）
        notes:
          type: string
          nullable: true
          description: 更新後の備考（null 指定で解除）
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
          description: 更新後のメタデータ（null 指定で解除）
      description: 決済情報の更新入力モデル
    Models.PendingBookingStatus:
      type: object
      required:
        - type
        - requestedAt
        - holdExpiresAt
        - assignedStaffId
      properties:
        type:
          type: string
          enum:
            - pending
          description: 固定値pending。保留状態であることを示す。
        requestedAt:
          type: string
          format: date-time
          description: 顧客から予約リクエストを受け付けた日時。
        holdExpiresAt:
          type: string
          format: date-time
          nullable: true
          description: 保留状態の有効期限。未設定の場合は期限なし。
        assignedStaffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 仮割り当てされたスタッフID。未確定の場合はnull。
      description: 予約が確認待ち段階にある場合の状態情報。
    Models.PendingBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - pending
          description: 固定値pending。保留状態であることを示す。
        requestedAt:
          type: string
          format: date-time
          description: 顧客から予約リクエストを受け付けた日時。
        holdExpiresAt:
          type: string
          format: date-time
          nullable: true
          description: 保留状態の有効期限。未設定の場合は期限なし。
        assignedStaffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 仮割り当てされたスタッフID。未確定の場合はnull。
      description: 予約が確認待ち段階にある場合の状態情報。
    Models.PendingPaymentStatus:
      type: object
      required:
        - type
        - createdAt
      properties:
        type:
          type: string
          enum:
            - pending
          description: 状態種別（pending 固定値）
        createdAt:
          type: string
          format: date-time
          description: 支払いが登録された日時
      description: 支払い待ち状態の詳細
    Models.PendingPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - pending
          description: 状態種別（pending 固定値）
        createdAt:
          type: string
          format: date-time
          description: 支払いが登録された日時
      description: 支払い待ち状態の詳細
    Models.PermSubCategoryType:
      type: string
      enum:
        - regular_perm
        - digital_perm
        - spiral_perm
        - body_wave
        - straightening
      description: |-
        パーマサブカテゴリー区分 - パーマネントサービスの詳細分類

        regular_perm: 通常パーマ - コールドパーマ等の標準的なパーマ
        digital_perm: デジタルパーマ - 熱を使った形状記憶パーマ
        spiral_perm: スパイラルパーマ - 螺旋状の強いカールを作るパーマ
        body_wave: ボディウェーブ - 大きなウェーブを作るパーマ
        straightening: ストレートパーマ - 縮毛矯正や髪をストレートにする施術
    Models.Permission:
      type: object
      required:
        - id
        - key
        - name
        - description
        - resource
        - action
        - scope
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.PermissionId"
          description: 権限 ID
        key:
          type: string
          description: "権限キー（例: booking.create）"
        name:
          type: string
          description: 権限の名称
        description:
          type: string
          nullable: true
          description: 権限の説明
        resource:
          type: string
          description: 対象リソース種別
        action:
          type: string
          description: 許可する操作区分
        scope:
          type: string
          enum:
            - own
            - salon
            - all
          nullable: true
          description: 権限の適用範囲（own/salon/all）
      description: 操作権限の定義
    Models.PermissionCheckRequest:
      type: object
      required:
        - userId
        - permissions
      properties:
        userId:
          type: string
          description: 確認対象のユーザー ID
        permissions:
          type: array
          items:
            type: string
          description: 確認したい権限キー一覧
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: サロン単位の権限チェック時のサロン ID
      description: 複数権限の保有状況を確認する入力モデル
    Models.PermissionCheckResult:
      type: object
      required:
        - userId
        - permissions
      properties:
        userId:
          type: string
          description: 確認対象のユーザー ID
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.PermissionStatus"
          description: 各権限の判定結果一覧
      description: 権限チェックの結果モデル
    Models.PermissionId:
      type: string
      format: uuid
      description: アクセス許可や操作権限を識別するブランド付きUUID。
    Models.PermissionStatus:
      type: object
      required:
        - permission
        - granted
        - source
      properties:
        permission:
          type: string
          description: 権限キー
        granted:
          type: boolean
          description: 権限が付与されているかどうか
        source:
          type: string
          nullable: true
          description: 権限を付与したロール情報
      description: 個別権限の判定結果
    Models.PointInfo:
      type: object
      required:
        - currentPoints
        - totalEarnedPoints
        - totalUsedPoints
        - expiringPoints
        - expirationDate
      properties:
        currentPoints:
          type: integer
          format: int32
          description: 現在保持している有効ポイント数。
        totalEarnedPoints:
          type: integer
          format: int32
          description: 累計で獲得したポイント総数。
        totalUsedPoints:
          type: integer
          format: int32
          description: 累計で利用（消費）したポイント総数。
        expiringPoints:
          type: integer
          format: int32
          nullable: true
          description: 失効予定のポイント数。未設定時はnull。
        expirationDate:
          type: string
          format: date-time
          nullable: true
          description: 最も早く失効するポイントの失効日。未設定時はnull。
      description: 顧客ロイヤルティポイントの累積状況を表すモデル。
    Models.PointTransaction:
      type: object
      required:
        - id
        - customerId
        - type
        - points
        - balanceAfter
        - description
        - transactedAt
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.PointTransactionId"
          description: ポイント取引 ID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 対象顧客 ID
        type:
          type: string
          enum:
            - earn
            - use
            - expire
            - adjust
          description: 取引種別（獲得・利用など）
        points:
          type: integer
          format: int32
          description: ポイント変動量（獲得は正、利用は負）
        balanceAfter:
          type: integer
          format: int32
          description: 取引後のポイント残高
        paymentId:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          description: 関連する決済 ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 関連する予約 ID
        description:
          type: string
          description: 取引内容の説明
        expiresAt:
          type: string
          format: date-time
          description: 獲得ポイントの有効期限
        transactedAt:
          type: string
          format: date-time
          description: 取引発生日時
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 顧客ポイントの付与・利用履歴
    Models.PointTransactionCreateRequest:
      type: object
      required:
        - customerId
        - type
        - points
        - description
      properties:
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 対象顧客 ID
        type:
          type: string
          enum:
            - earn
            - use
            - expire
            - adjust
          description: ポイント取引種別
        points:
          type: integer
          format: int32
          description: ポイント変動量
        paymentId:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          description: 関連する決済 ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 関連する予約 ID
        description:
          type: string
          description: 取引内容の説明
        expiresAt:
          type: string
          format: date-time
          description: ポイントの有効期限
      description: ポイント取引を登録する入力モデル
    Models.PointTransactionId:
      type: string
      format: uuid
      description: 顧客ポイントの加算・減算履歴を識別するブランド付きUUID。
    Models.PreviousTreatment:
      type: object
      required:
        - treatment
        - date
        - salonName
        - notes
      properties:
        treatment:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentType"
          description: 施術タイプ
        date:
          type: string
          format: date-time
          description: 施術日
        salonName:
          type: string
          nullable: true
          description: 施術を受けたサロン名
        notes:
          type: string
          nullable: true
          description: 施術に関するメモ
      description: 過去施術の履歴
    Models.PriceRangeFilter:
      type: object
      properties:
        minPrice:
          type: number
          format: float
          description: 下限価格。未指定の場合は制限なし。
        maxPrice:
          type: number
          format: float
          description: 上限価格。未指定の場合は制限なし。
      description: 金額レンジで絞り込むための共通クエリモデル。
    Models.PriceTier:
      type: object
      required:
        - name
        - description
        - price
        - duration
        - conditions
      properties:
        name:
          type: string
          description: 価格段階の名称
        description:
          type: string
          nullable: true
          description: 段階の説明
        price:
          type: integer
          format: int32
          description: 適用価格（税抜）
        duration:
          type: integer
          format: int32
          nullable: true
          description: この段階での施術時間
        conditions:
          type: array
          items:
            type: string
          nullable: true
          description: 適用条件の説明リスト
      description: 段階制価格の設定情報
    Models.PricingFactor:
      type: object
      required:
        - type
        - multipliers
        - peakHours
        - peakMultiplier
        - threshold
        - seasons
      properties:
        type:
          type: string
          enum:
            - day_of_week
            - time_of_day
            - staff_level
            - demand
            - season
          description: 変動要因の種類
        multipliers:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: 条件に応じた倍率設定
        peakHours:
          type: array
          items:
            type: string
          nullable: true
          description: ピーク時間帯の指定
        peakMultiplier:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: ピーク時間帯に適用する倍率
        threshold:
          type: integer
          format: int32
          nullable: true
          description: 需要に応じた閾値設定
        seasons:
          type: array
          items:
            $ref: "#/components/schemas/Models.Season"
          nullable: true
          description: 季節要因の詳細設定
      description: 料金調整に使用する変動要因
    Models.PricingStrategyDetail:
      type: object
      required:
        - type
        - amount
        - tiers
        - basePrice
        - factors
        - services
        - discountRate
        - memberPrice
        - nonMemberPrice
        - description
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.PricingStrategyType"
          description: 価格戦略タイプ
        amount:
          type: integer
          format: int32
          nullable: true
          description: 固定価格型の場合の金額
        tiers:
          type: array
          items:
            $ref: "#/components/schemas/Models.PriceTier"
          nullable: true
          description: 段階価格の設定一覧
        basePrice:
          type: integer
          format: int32
          nullable: true
          description: 基準価格
        factors:
          type: array
          items:
            $ref: "#/components/schemas/Models.PricingFactor"
          nullable: true
          description: 価格変動要因の設定
        services:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: セット対象となるサービス ID
        discountRate:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: 割引率（%）
        memberPrice:
          type: integer
          format: int32
          nullable: true
          description: 会員向け特別価格
        nonMemberPrice:
          type: integer
          format: int32
          nullable: true
          description: 非会員向け価格
        description:
          type: string
          nullable: true
          description: 戦略の説明
      description: 採用している価格戦略の詳細
    Models.PricingStrategyType:
      type: string
      enum:
        - fixed
        - tiered
        - dynamic
        - package
        - membership
        - custom
      description: |-
        価格戦略タイプ区分 - サービスの価格設定方法を定義

        fixed: 固定価格 - 常に同じ価格で提供
        tiered: 段階価格 - 条件によって価格が変わる段階制
        dynamic: 動的価格 - 需要や時間帯によって変動する価格
        package: パッケージ価格 - 複数サービスをセットで提供
        membership: 会員価格 - 会員ランクに応じた特別価格
        custom: カスタム価格 - 個別に設定される特別価格
    Models.ProblemDetails:
      type: object
      required:
        - type
        - title
        - status
        - detail
        - instance
        - code
        - errors
        - correlationId
        - timestamp
      properties:
        type:
          type: string
          description: エラー種別を特定するための URI。参照することで関連ドキュメントに誘導できる。
        title:
          type: string
          description: ユーザーに短く要点を伝えるエラー概要メッセージ。
        status:
          type: integer
          format: int32
          description: レスポンスに付与される HTTP ステータスコード。
        detail:
          type: string
          nullable: true
          description: 今回の発生状況に固有の詳細説明。サポート対応時の一次情報となる。
        instance:
          type: string
          nullable: true
          description: この事象を一意に識別するための URI。監査ログやダッシュボードと連携する。
        code:
          allOf:
            - $ref: "#/components/schemas/Models.ErrorCodeType"
          description: システム全体で共有する機械判読可能なエラーコード。画面表示や分岐処理に使用する。
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Models.ValidationError"
          nullable: true
          description: フィールド単位の検証エラーなど、追加のエラー詳細情報一覧。
        correlationId:
          type: string
          nullable: true
          description: 障害調査や問い合わせで利用する相関 ID。リクエスト単位で一意。
        timestamp:
          type: string
          format: date-time
          description: エラー発生日時 (UTC)。サーバーログの検索キーとして使用する。
      description: |-
        RFC 7807 に準拠した標準エラーレスポンスモデル。
        美容サロン予約システム全体で一貫したエラー情報を提供し、顧客・スタッフ双方の操作ログと連携する。
    Models.ProcessingPaymentStatus:
      type: object
      required:
        - type
        - startedAt
        - processorId
      properties:
        type:
          type: string
          enum:
            - processing
          description: 状態種別（processing 固定値）
        startedAt:
          type: string
          format: date-time
          description: 処理開始日時
        processorId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 処理を担当しているスタッフ ID
      description: 決済処理中の状態の詳細
    Models.ProcessingPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - processing
          description: 状態種別（processing 固定値）
        startedAt:
          type: string
          format: date-time
          description: 処理開始日時
        processorId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 処理を担当しているスタッフ ID
      description: 決済処理中の状態の詳細
    Models.PurchaseOrder:
      type: object
      required:
        - id
        - salonId
        - orderNumber
        - supplier
        - status
        - items
        - subtotal
        - taxAmount
        - totalAmount
        - orderDate
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.OrderId"
          description: 発注 ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 発注を行うサロン ID
        orderNumber:
          type: string
          description: 発注番号
        supplier:
          type: string
          description: 仕入先名
        status:
          allOf:
            - $ref: "#/components/schemas/Models.OrderStatusType"
          description: 発注ステータス区分
        items:
          type: array
          items:
            $ref: "#/components/schemas/Models.OrderItem"
          description: 発注明細の一覧
        subtotal:
          type: number
          format: float
          description: 税抜小計金額
        taxAmount:
          type: number
          format: float
          description: 税額
        shippingCost:
          type: number
          format: float
          description: 送料
        totalAmount:
          type: number
          format: float
          description: 発注合計金額
        orderDate:
          type: string
          format: date-time
          description: 発注日
        expectedDelivery:
          type: string
          format: date-time
          description: 予定納期
        actualDelivery:
          type: string
          format: date-time
          description: 実際の納品日
        deliveryNotes:
          type: string
          description: 納品に関するメモ
        paymentTerms:
          type: string
          description: 支払条件
        notes:
          type: string
          description: その他備考
        approvedBy:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 発注承認を行ったスタッフ ID
        approvedAt:
          type: string
          format: date-time
          description: 承認日時
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 仕入れ発注の基本情報
    Models.PurchaseOrderCreateRequest:
      type: object
      required:
        - supplier
        - items
        - taxAmount
        - shippingCost
        - expectedDelivery
        - paymentTerms
        - notes
      properties:
        supplier:
          type: string
          description: 仕入先名
        items:
          type: array
          items:
            $ref: "#/components/schemas/Models.OrderItem"
          description: 発注明細一覧
        taxAmount:
          type: number
          format: float
          description: 税額
        shippingCost:
          type: number
          format: float
          nullable: true
          description: 送料
        expectedDelivery:
          type: string
          format: date-time
          nullable: true
          description: 予定納期
        paymentTerms:
          type: string
          nullable: true
          description: 支払条件
        notes:
          type: string
          nullable: true
          description: 備考メモ
      description: 仕入れ発注を作成する入力モデル
    Models.PurchaseOrderUpdateRequest:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/Models.OrderStatusType"
          description: 更新後の発注ステータス
        expectedDelivery:
          type: string
          format: date-time
          description: 更新後の予定納期
        actualDelivery:
          type: string
          format: date-time
          description: 実際の納品日
        deliveryNotes:
          type: string
          description: 納品関連の備考
        notes:
          type: string
          description: その他の備考
      description: 仕入れ発注の更新入力モデル
    Models.RateLimitInfo:
      type: object
      description: |-
        レート制限に関する HTTP ヘッダ情報モデル。
        API 呼び出し頻度をクライアントに通知し、適切なリトライ制御を促す。
    Models.Refund:
      type: object
      required:
        - id
        - paymentId
        - amount
        - reason
        - refundedAt
        - status
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.RefundId"
          description: 返金 ID
        paymentId:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          description: 元となる決済 ID
        amount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 返金金額
        reason:
          type: string
          description: 返金理由
        refundedAt:
          type: string
          format: date-time
          description: 返金処理日時
        status:
          type: string
          enum:
            - requested
            - processing
            - completed
            - failed
          description: 返金処理の進捗状態
        processedBy:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 返金処理を担当したスタッフ ID
        method:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          description: 返金に使用した支払い方法
        referenceCode:
          type: string
          description: 外部返金参照コード
        notes:
          type: string
          description: 返金処理に関する備考
      description: 返金処理の記録
    Models.RefundCreateRequest:
      type: object
      required:
        - paymentId
        - amount
        - reason
      properties:
        paymentId:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          description: 対象となる決済 ID
        amount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 返金する金額
        reason:
          type: string
          description: 返金理由の説明
        referenceCode:
          type: string
          description: 外部返金参照コード
        processedBy:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 返金を担当するスタッフ ID
        notes:
          type: string
          description: 返金に関する備考
      description: 返金処理を開始するための入力モデル
    Models.RefundId:
      type: string
      format: uuid
      description: 返金処理のトランザクションを識別するブランド付きUUID。
    Models.RefundedPaymentStatus:
      type: object
      required:
        - type
        - refundedAt
        - refundAmount
        - refundId
      properties:
        type:
          type: string
          enum:
            - refunded
          description: 状態種別（refunded 固定値）
        refundedAt:
          type: string
          format: date-time
          description: 返金が完了した日時
        refundAmount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 返金金額
        refundId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.RefundId"
          nullable: true
          description: 関連する返金 ID
      description: 全額返金済み状態の詳細
    Models.RefundedPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - refunded
          description: 状態種別（refunded 固定値）
        refundedAt:
          type: string
          format: date-time
          description: 返金が完了した日時
        refundAmount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 返金金額
        refundId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.RefundId"
          nullable: true
          description: 関連する返金 ID
      description: 全額返金済み状態の詳細
    Models.ReminderTimingType:
      type: string
      enum:
        - one_day_before
        - three_hours_before
        - one_hour_before
        - thirty_minutes_before
      description: |-
        リマインダータイミング区分 - 予約リマインダーを送信するタイミングの設定

        one_day_before: 1日前 - 予約日の24時間前に通知
        three_hours_before: 3時間前 - 予約時刻の3時間前に通知
        one_hour_before: 1時間前 - 予約時刻の1時間前に通知
        thirty_minutes_before: 30分前 - 予約時刻の30分前に通知
    Models.Reservation:
      type: object
      required:
        - id
        - salonId
        - customerId
        - staffId
        - serviceId
        - startTime
        - endTime
        - status
        - notes
        - totalAmount
        - depositAmount
        - isPaid
        - cancellationReason
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.ReservationId"
          description: 予約を一意に識別するID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 予約が紐づくサロンのID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 予約を行った顧客のID
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 施術を担当するスタッフのID
        serviceId:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          description: 予約された施術メニューのID
        startTime:
          type: string
          format: date-time
          description: 施術開始予定日時 (UTC)
        endTime:
          type: string
          format: date-time
          description: 施術終了予定日時 (UTC)
        status:
          allOf:
            - $ref: "#/components/schemas/Models.ReservationStatusType"
          description: 予約の現在ステータスを表す区分値
        notes:
          type: string
          nullable: true
          description: 顧客からの特記事項やサロン側メモ
        totalAmount:
          type: integer
          format: int32
          description: 施術料金の合計金額 (税・割引適用後)
        depositAmount:
          type: integer
          format: int32
          nullable: true
          description: 事前に受領した内金・デポジット金額
        isPaid:
          type: boolean
          description: 予約に対する決済が完了しているかを示すフラグ
        cancellationReason:
          type: string
          nullable: true
          description: キャンセルが発生した場合の理由
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 予約モデル - 顧客がサロンに依頼した施術予約の全情報を保持し、日時・担当者・料金・支払い状態を一元管理する中核レコード
    Models.ReservationDetail:
      type: object
      required:
        - customerName
        - staffName
        - serviceName
        - serviceCategory
        - serviceDuration
      properties:
        customerName:
          type: string
          description: 顧客の表示名
        staffName:
          type: string
          description: 担当スタッフの表示名
        serviceName:
          type: string
          description: 施術メニューの名称
        serviceCategory:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: 施術メニューが属するカテゴリ区分
        serviceDuration:
          type: integer
          format: int32
          description: 施術メニューの所要時間 (分)
      allOf:
        - $ref: "#/components/schemas/Models.Reservation"
      description: 予約詳細モデル - 基本予約情報に顧客・スタッフ・メニュー名称やカテゴリなどの表示用情報を付加した拡張ビュー
    Models.ReservationId:
      type: string
      format: uuid
      description: 予約申込レコードを識別するためのブランド付きUUID。
    Models.ReservationStatusType:
      type: string
      enum:
        - pending
        - confirmed
        - cancelled
        - completed
        - no_show
      description: |-
        予約ステータス区分 - 予約の進行状態を表す状態定義

        pending: 保留中 - 予約申込を受け付けたが、まだ確定していない状態
        confirmed: 確定済み - サロン側で予約が承認・確定された状態
        cancelled: キャンセル済み - 顧客またはサロン側により予約が取り消された状態
        completed: 完了 - 予約された施術が実施され、サービス提供が完了した状態
        no_show: 無断キャンセル - 顧客が事前連絡なしに来店しなかった状態
    Models.ResponseMeta:
      type: object
      required:
        - correlationId
        - timestamp
        - version
      properties:
        correlationId:
          type: string
          description: リクエストを一意に紐づける相関 ID。ログ横断調査に使用する。
        timestamp:
          type: string
          format: date-time
          description: レスポンス生成日時 (UTC)。障害時のタイムライン整理に利用。
        version:
          type: string
          description: レスポンスを返却した API バージョン。
      additionalProperties: {}
      description: |-
        レスポンス共通メタデータモデル。
        問い合わせ対応やロギングで必要となる識別情報を保持する。
    Models.Review:
      type: object
      required:
        - id
        - salonId
        - customerId
        - bookingId
        - staffId
        - overallRating
        - comment
        - title
        - serviceRating
        - staffRating
        - cleanlinessRating
        - valueRating
        - imageUrls
        - isVerified
        - helpfulCount
        - reportCount
        - ownerResponse
        - ownerRespondedAt
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.ReviewId"
          description: レビューを一意に識別するID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: レビュー対象のサロンID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: レビューを投稿した顧客ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 紐づく来店予約を示すID (DBカラム booking_id と整合)
        staffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 評価対象のスタッフID。スタッフ未指定レビューの場合は省略
        overallRating:
          type: integer
          format: int32
          description: "全体満足度の評価値 (例: 1〜5)"
        comment:
          type: string
          nullable: true
          description: 自由記述のレビューコメント
        title:
          type: string
          nullable: true
          description: レビュータイトルや要約
        serviceRating:
          type: integer
          format: int32
          nullable: true
          description: 施術サービスそのものに対する評価値
        staffRating:
          type: integer
          format: int32
          nullable: true
          description: スタッフの接客・技術に対する評価値
        cleanlinessRating:
          type: integer
          format: int32
          nullable: true
          description: 店内の清潔さ・衛生面に対する評価値
        valueRating:
          type: integer
          format: int32
          nullable: true
          description: 価格に対する価値・コストパフォーマンス評価値
        imageUrls:
          type: array
          items:
            type: string
          nullable: true
          description: レビューに添付された画像URLの一覧
        isVerified:
          type: boolean
          description: 実来店が確認済みかを表す検証フラグ
        helpfulCount:
          type: integer
          format: int32
          description: レビューが「参考になった」と評価された累積回数
          default: 0
        reportCount:
          type: integer
          format: int32
          description: 不適切報告が入った累積回数
          default: 0
        ownerResponse:
          type: string
          nullable: true
          description: サロン運営からの公式返信本文
        ownerRespondedAt:
          type: string
          format: date-time
          nullable: true
          description: 運営が返信した日時 (UTC)
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: レビューモデル - 施術後の顧客体験を定量・定性的に記録し、サロン品質の改善と信頼性向上に活用する
    Models.ReviewCreateRequest:
      type: object
      required:
        - salonId
        - customerId
        - bookingId
        - staffId
        - overallRating
        - comment
        - title
        - serviceRating
        - staffRating
        - cleanlinessRating
        - valueRating
        - imageUrls
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: レビュー対象のサロンID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: レビュー投稿者の顧客ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 紐づく来店予約ID (booking_id)
        staffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 評価対象スタッフのID
        overallRating:
          type: integer
          format: int32
          description: 全体満足度の評価値
        comment:
          type: string
          nullable: true
          description: 自由記述のコメント
        title:
          type: string
          nullable: true
          description: レビュータイトル
        serviceRating:
          type: integer
          format: int32
          nullable: true
          description: サービス品質に対する評価値
        staffRating:
          type: integer
          format: int32
          nullable: true
          description: スタッフ対応に対する評価値
        cleanlinessRating:
          type: integer
          format: int32
          nullable: true
          description: 清潔さ・衛生状態に対する評価値
        valueRating:
          type: integer
          format: int32
          nullable: true
          description: 価格に見合う価値の評価値
        imageUrls:
          type: array
          items:
            type: string
          nullable: true
          description: 添付画像のURL一覧
      description: レビュー作成リクエスト - 顧客が新規レビュー投稿時に入力する評価情報と任意コメント・画像を受け取る
    Models.ReviewId:
      type: string
      format: uuid
      description: 顧客レビューや口コミを識別するブランド付きUUID。
    Models.ReviewSummary:
      type: object
      required:
        - averageRating
        - totalReviews
        - ratingDistribution
      properties:
        averageRating:
          type: number
          format: float
          description: 全体平均評価 (小数)
        totalReviews:
          type: integer
          format: int32
          description: レビュー総件数
        ratingDistribution:
          type: object
          additionalProperties:
            type: integer
            format: int32
          description: 評価値ごとのレビュー件数分布
      description: レビュー集計モデル - 平均評価や件数分布を保持し、ダッシュボードやランキング表示に活用する
    Models.ReviewUpdateRequest:
      type: object
      properties:
        overallRating:
          type: integer
          format: int32
          description: 更新後の全体満足度評価
        comment:
          type: string
          nullable: true
          description: 更新後のコメント本文（null指定で初期化可能）
        title:
          type: string
          nullable: true
          description: 更新後のレビュータイトル（null指定で初期化可能）
        serviceRating:
          type: integer
          format: int32
          nullable: true
          description: 更新後のサービス品質評価（null指定で初期化可能）
        staffRating:
          type: integer
          format: int32
          nullable: true
          description: 更新後のスタッフ評価（null指定で初期化可能）
        cleanlinessRating:
          type: integer
          format: int32
          nullable: true
          description: 更新後の清潔さ評価（null指定で初期化可能）
        valueRating:
          type: integer
          format: int32
          nullable: true
          description: 更新後の価格価値評価（null指定で初期化可能）
        imageUrls:
          type: array
          items:
            type: string
          nullable: true
          description: 画像URL一覧の更新内容（null指定で初期化可能）
      description: レビュー更新リクエスト - 任意項目を部分更新し、既存レビューの評価やコメントを調整する。null指定で値をリセット可能
    Models.Role:
      type: object
      required:
        - id
        - name
        - displayName
        - description
        - permissions
        - isSystem
        - isActive
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.RoleId"
          description: ロール ID
        name:
          type: string
          description: ロールのシステム内部名
        displayName:
          type: string
          description: 管理画面などで表示する名称
        description:
          type: string
          nullable: true
          description: ロールの詳細説明
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.Permission"
          description: 付与されている権限一覧
        isSystem:
          type: boolean
          description: システム標準ロールかどうか
        isActive:
          type: boolean
          description: ロールが有効状態かどうか
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 権限管理におけるロール定義
    Models.RoleCreateRequest:
      type: object
      required:
        - name
        - displayName
        - permissions
      properties:
        name:
          type: string
          description: ロールの内部名
        displayName:
          type: string
          description: 表示用のロール名
        description:
          type: string
          description: ロール説明文
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.PermissionId"
          description: 付与する権限 ID リスト
      description: ロール新規作成時の入力モデル
    Models.RoleId:
      type: string
      format: uuid
      description: ロールベース権限管理で利用する役割IDを識別するブランド付きUUID。
    Models.RoleUpdateRequest:
      type: object
      properties:
        displayName:
          type: string
          description: 更新後の表示名
        description:
          type: string
          description: 更新後の説明文
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.PermissionId"
          description: 更新後の権限 ID リスト
        isActive:
          type: boolean
          description: 有効/無効の切り替え
      description: ロール情報の更新入力モデル
    Models.SalesByCategory:
      type: object
      required:
        - category
        - amount
        - count
        - percentage
      properties:
        category:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: サービスカテゴリ区分
        amount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 売上金額
        count:
          type: integer
          format: int32
          description: 提供件数
        percentage:
          type: number
          format: float
          description: 総売上に対する構成比率（%）
      description: サービスカテゴリ別の売上集計行
    Models.SalesByMethod:
      type: object
      required:
        - method
        - amount
        - count
        - percentage
      properties:
        method:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          description: 支払い方法区分
        amount:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 売上金額
        count:
          type: integer
          format: int32
          description: 取引件数
        percentage:
          type: number
          format: float
          description: 総売上に対する構成比率（%）
      description: 支払い方法別の売上集計行
    Models.SalesReport:
      type: object
      required:
        - salonId
        - periodStart
        - periodEnd
        - totalSales
        - totalTax
        - totalDiscounts
        - totalRefunds
        - netSales
        - transactionCount
        - averageTransactionValue
        - salesByMethod
        - salesByCategory
        - topStaff
      properties:
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 対象サロン ID
        periodStart:
          type: string
          format: date-time
          description: 集計期間の開始日時
        periodEnd:
          type: string
          format: date-time
          description: 集計期間の終了日時
        totalSales:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 総売上額
        totalTax:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 累計税額
        totalDiscounts:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 累計割引額
        totalRefunds:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 累計返金額
        netSales:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 返金考慮後の純売上額
        transactionCount:
          type: integer
          format: int32
          description: 取引件数
        averageTransactionValue:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 平均取引単価
        salesByMethod:
          type: array
          items:
            $ref: "#/components/schemas/Models.SalesByMethod"
          description: 支払い方法別の売上内訳
        salesByCategory:
          type: array
          items:
            $ref: "#/components/schemas/Models.SalesByCategory"
          description: サービスカテゴリ別の売上内訳
        topStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPerformance"
          description: 売上貢献度の高いスタッフ情報
      description: 期間内の売上実績を集計したレポート
    Models.Salon:
      type: object
      required:
        - id
        - name
        - description
        - address
        - contactInfo
        - openingHours
        - businessHours
        - imageUrls
        - features
        - rating
        - reviewCount
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: サロンを一意に識別するID
        name:
          type: string
          description: 公式名称またはブランド名称
        description:
          type: string
          nullable: true
          description: サロンの特徴やコンセプトを伝える説明文。未設定の場合はnull
        address:
          allOf:
            - $ref: "#/components/schemas/Models.Address"
          description: 所在地・アクセス・郵便番号等を含む住所情報
        contactInfo:
          allOf:
            - $ref: "#/components/schemas/Models.ContactInfo"
          description: 電話・メール・SNS等の問い合わせ窓口情報
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
          description: 曜日別の基本営業時間帯一覧
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
          nullable: true
          description: 季節やキャンペーン等に合わせた営業スケジュール。未設定時はnull
        imageUrls:
          type: array
          items:
            type: string
          description: 店舗写真や内装画像のURL一覧
        features:
          type: array
          items:
            type: string
          description: 設備・サービス・こだわりポイント等の特徴タグ一覧
        rating:
          type: number
          format: float
          nullable: true
          description: 顧客レビューから算出した平均評価。評価が無い場合はnull
        reviewCount:
          type: integer
          format: int32
          nullable: true
          description: 蓄積されたレビュー件数。レビュー未登録の場合はnull
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: サロン基本情報モデル - 美容室の店舗情報、顧客向け公開情報、運営に必要な基礎データを一元管理する
    Models.SalonAvailabilityRequest:
      type: object
      required:
        - serviceId
        - date
      properties:
        serviceId:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          description: 空き状況を確認したいサービスのID
        date:
          type: string
          format: date
          description: 希望する施術日
        timeSlot:
          allOf:
            - $ref: "#/components/schemas/Models.TimeSlot"
          description: 希望する時間帯。未指定の場合は全時間帯を対象
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 指名したいスタッフのID。指名なしの場合はnull
        slots:
          type: integer
          format: int32
          minimum: 1
          description: 必要な枠数。デフォルトは1枠
          default: 1
      description: 指定した条件でサロンの予約枠の空き状況を確認するためのリクエスト
    Models.SalonAvailabilityResponse:
      type: object
      required:
        - availableSlots
        - waitlistAvailable
      properties:
        availableSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.AvailableTimeSlot"
          description: 予約可能な時間帯候補一覧
        nextAvailableDate:
          type: string
          format: date
          description: 希望日が満席の場合に提示する次の空き日
        waitlistAvailable:
          type: boolean
          description: ウェイトリスト登録の可否
      description: サロンの空き状況照会結果を返すレスポンス
    Models.SalonId:
      type: string
      format: uuid
      description: サロン店舗・拠点を識別するためのブランド付きUUID。
    Models.SalonRecommendation:
      type: object
      required:
        - score
        - reasons
        - matchingServices
      properties:
        score:
          type: integer
          format: int32
          description: サロン推薦スコア（0-100）
        reasons:
          type: array
          items:
            type: string
          description: 推薦理由のリスト
        matchingServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSummary"
          description: 要望に合致したサービス一覧
      allOf:
        - $ref: "#/components/schemas/Models.SalonSummary"
      description: パーソナライズされたおすすめ度スコアを含むサロン推薦モデル
    Models.SalonStatistics:
      type: object
      required:
        - totalServices
        - totalStaff
        - totalReviews
        - monthlyBookings
        - popularServices
        - busyHours
      properties:
        totalServices:
          type: integer
          format: int32
          description: 登録されている提供メニューの総数
        totalStaff:
          type: integer
          format: int32
          description: 在籍スタッフの総数
        averageRating:
          type: number
          format: float
          description: レビューから算出した平均評価
        totalReviews:
          type: integer
          format: int32
          description: 累計レビュー件数
        monthlyBookings:
          type: integer
          format: int32
          description: 当月の予約件数合計
        monthlyRevenue:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 当月の売上総額
        popularServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSummary"
          description: 人気の高いサービス一覧
        busyHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          description: 予約が集中する時間帯の一覧
      description: サロン運営指標を集計したダッシュボード向けレスポンスモデル
    Models.SalonSubscriptionRequest:
      type: object
      required:
        - customerId
        - notificationTypes
      properties:
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 通知を受け取る顧客ID
        notificationTypes:
          type: array
          items:
            $ref: "#/components/schemas/Models.NotificationType"
          description: 希望する通知カテゴリの種類一覧
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: 関心の高いサービスカテゴリ。未指定の場合は全カテゴリ対象
      description: サロンからの最新情報通知を希望する顧客の購読リクエスト
    Models.SalonSubscriptionResponse:
      type: object
      required:
        - subscriptionId
        - status
      properties:
        subscriptionId:
          type: string
          description: 購読設定を一意に識別するID
        status:
          type: string
          enum:
            - active
          description: 購読状態（常にactiveを返却）
        expiresAt:
          type: string
          format: date-time
          description: 購読の有効期限。無期限の場合はnull
      description: サロン通知購読の作成結果を返すレスポンスモデル
    Models.SalonSummary:
      type: object
      required:
        - id
        - name
        - address
        - rating
        - reviewCount
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 対象サロンの一意なID
        name:
          type: string
          description: 表示用のサロン名称
        address:
          allOf:
            - $ref: "#/components/schemas/Models.Address"
          description: ユーザーに提示する所在地情報
        rating:
          type: number
          format: float
          nullable: true
          description: レビュー平均値。評価が無い場合はnull
        reviewCount:
          type: integer
          format: int32
          nullable: true
          description: レビュー件数。未集計の場合はnull
      description: サロン概要モデル - リスト表示や検索結果に必要な要約情報を提供
    Models.SalonWithDistance:
      type: object
      required:
        - distance
      properties:
        distance:
          type: number
          format: float
          description: 基準地点からの距離（km）
        travelTime:
          type: integer
          format: int32
          description: 想定移動時間（分）。計算不能時はnull
      allOf:
        - $ref: "#/components/schemas/Models.Salon"
      description: 検索基準地点からの距離情報を付与したサロンモデル
    Models.ScalpConditionType:
      type: string
      enum:
        - normal
        - dry
        - oily
        - sensitive
        - dandruff
      description: |-
        頭皮状態区分 - 頭皮の状態を分類、適切なケア方法の選択に使用

        normal: 正常 - 健康的な頭皮状態、特別なケア不要
        dry: 乾燥 - 乾燥しやすい頭皮、保湿ケアが必要
        oily: 脂性 - 皮脂分泌が多い頭皮、洗浄力のあるケアが必要
        sensitive: 敏感 - 刺激に弱い頭皮、低刺激の製品使用が必要
    Models.ScalpInfo:
      type: object
      required:
        - condition
        - sensitivities
        - notes
      properties:
        condition:
          $ref: "#/components/schemas/Models.ScalpConditionType"
        sensitivities:
          type: array
          items:
            type: string
        notes:
          type: string
          nullable: true
    Models.ScheduleException:
      type: object
      required:
        - date
        - type
      properties:
        date:
          type: string
          format: date
          description: 例外が適用される日付
        type:
          type: string
          enum:
            - holiday
            - sick_leave
            - vacation
            - training
            - other
          description: 例外の種別（休暇・病欠など）
        description:
          type: string
          description: 補足説明や注意事項。不要な場合はnull
        alternativeStaffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 代替対応するスタッフのID。未手配の場合はnull
      description: スタッフに発生する例外スケジュール（休暇・研修等）を表すモデル
    Models.ScoreRange:
      type: object
      required:
        - min
        - max
      properties:
        min:
          type: number
          format: float
          description: 関連度スコアの最小値。
        max:
          type: number
          format: float
          description: 関連度スコアの最大値。
      description: |-
        検索結果の関連度スコア範囲を表すモデル。
        スコアの分布を把握し、しきい値設定を検討する際に利用する。
    Models.SearchMeta:
      type: object
      required:
        - total
        - duration
      properties:
        total:
          type: integer
          format: int32
          description: 検索条件に一致した総件数。
        query:
          type: string
          description: 利用された検索キーワード。ログ分析やABテストで活用する。
        filters:
          type: array
          items:
            type: string
          description: 適用されたフィルター一覧。ユーザー選択内容を表示する際に使用。
        duration:
          type: integer
          format: int32
          description: 検索処理に要した時間 (ミリ秒)。パフォーマンスKPIの指標。
        scoreRange:
          allOf:
            - $ref: "#/components/schemas/Models.ScoreRange"
          description: 関連度スコアの範囲。ランキング調整やチューニングに活用する。
      description: |-
        検索処理に関するメタ情報モデル。
        件数や所要時間を記録し、UX 改善やパフォーマンス監視に利用する。
    Models.Season:
      type: object
      required:
        - name
        - startMonth
        - endMonth
        - multiplier
      properties:
        name:
          type: string
          description: 季節名
        startMonth:
          type: integer
          format: int32
          description: 開始月
        endMonth:
          type: integer
          format: int32
          description: 終了月
        multiplier:
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          description: 適用倍率
      description: 季節要因の定義
    Models.Service:
      type: object
      required:
        - id
        - salonId
        - info
        - category
        - categoryId
        - pricing
        - duration
        - availability
        - requirements
        - options
        - restrictions
        - performance
        - associations
        - metadata
        - status
        - name
        - description
        - price
        - imageUrl
        - requiredStaffLevel
        - isActive
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          description: サービス ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: サービスを提供するサロン ID
        info:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceInfo"
          description: サービスの紹介情報
        category:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: サービスカテゴリ区分
        categoryId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          nullable: true
          description: カテゴリ ID（分類ツリー連携用）
        pricing:
          allOf:
            - $ref: "#/components/schemas/Models.ServicePricing"
          description: 料金設定情報
        duration:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceDuration"
          description: 提供時間の設定
        availability:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.ServiceAvailabilityDetail"
          nullable: true
          description: 提供可能条件の設定
        requirements:
          type: array
          items:
            $ref: "#/components/schemas/Models.BookingRequirementDetail"
          nullable: true
          description: 予約時に必要な要件一覧
        options:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceOptionDetail"
          nullable: true
          description: 追加オプション設定
        restrictions:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.ServiceRestrictions"
          nullable: true
          description: 提供上の制約条件
        performance:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.ServicePerformance"
          nullable: true
          description: サービス実績の指標
        associations:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.ServiceAssociations"
          nullable: true
          description: 関連サービス・担当者情報
        metadata:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.ServiceMetadata"
          nullable: true
          description: メタデータ・表示設定
        status:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceStatusDetail"
          description: 現在の提供ステータス
        name:
          type: string
          description: 互換性維持のための旧項目：サービス名
        description:
          type: string
          description: 互換性維持のための旧項目：説明文
        price:
          type: integer
          format: int32
          description: 互換性維持のための旧項目：料金
        imageUrl:
          type: string
          nullable: true
          description: 互換性維持のための旧項目：画像 URL
        requiredStaffLevel:
          type: integer
          format: int32
          nullable: true
          description: 互換性維持のための旧項目：スタッフレベル
        isActive:
          type: boolean
          description: 互換性維持のための旧項目：有効フラグ
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: サロンで提供するサービスの統合モデル
    Models.ServiceAssociations:
      type: object
      required:
        - categoryId
        - parentServiceId
        - childServiceIds
        - requiredServiceIds
        - recommendedServiceIds
        - qualifiedStaffIds
        - preferredStaffIds
      properties:
        categoryId:
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          description: 紐づくカテゴリ ID
        parentServiceId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 親サービス ID
        childServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 子サービス ID 一覧
        requiredServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 予約時に必須のサービス ID
        recommendedServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 併用を推奨するサービス ID
        qualifiedStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 施術資格を持つスタッフ ID
        preferredStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 優先的に担当させたいスタッフ ID
      description: サービス間・スタッフとの関連情報
    Models.ServiceAvailabilityDetail:
      type: object
      required:
        - type
        - schedule
        - requiresApproval
        - seasons
        - maxPerDay
        - maxPerWeek
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceAvailabilityType"
          description: 提供可否タイプ
        schedule:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSchedule"
          nullable: true
          description: 曜日・時間帯のスケジュール
        requiresApproval:
          type: boolean
          nullable: true
          description: 事前承認が必要かどうか
        seasons:
          type: array
          items:
            $ref: "#/components/schemas/Models.Season"
          nullable: true
          description: 季節限定時の季節設定
        maxPerDay:
          type: integer
          format: int32
          nullable: true
          description: 1 日あたりの提供上限
        maxPerWeek:
          type: integer
          format: int32
          nullable: true
          description: 1 週間あたりの提供上限
      description: サービスの提供可否設定
    Models.ServiceAvailabilityType:
      type: string
      enum:
        - always
        - scheduled
        - by_appointment
        - seasonal
        - limited
      description: |-
        サービス提供可能性タイプ区分 - サービスが提供される時期や条件

        always: 常時提供 - いつでも利用可能なサービス
        scheduled: スケジュール制 - 特定の時間帯のみ提供
        by_appointment: 予約制 - 事前予約が必要なサービス
        seasonal: 季節限定 - 特定の季節のみ提供
        limited: 数量限定 - 提供数に制限があるサービス
    Models.ServiceCategoryType:
      type: string
      enum:
        - cut
        - color
        - perm
        - treatment
        - spa
        - other
      description: |-
        サービスカテゴリー区分 - サロンで提供される主要なサービスカテゴリーの定義

        cut: カット - ヘアカット、トリミング等の切断系サービス
        color: カラー - ヘアカラー、ハイライト等の染色系サービス
        perm: パーマ - パーマネント、デジタルパーマ等のウェーブ形成サービス
        treatment: トリートメント - ヘアトリートメント、ヘアケア等の補修・改善サービス
        spa: スパ - ヘッドスパ、リラクゼーション等の癒し系サービス
        other: その他 - 上記カテゴリーに分類されないサービス
    Models.ServiceDuration:
      type: object
      required:
        - standard
        - minimum
        - maximum
        - bufferBefore
        - bufferAfter
        - includesConsultation
      properties:
        standard:
          type: integer
          format: int32
          description: 標準施術時間（分）
        minimum:
          type: integer
          format: int32
          nullable: true
          description: 最短施術時間
        maximum:
          type: integer
          format: int32
          nullable: true
          description: 最長施術時間
        bufferBefore:
          type: integer
          format: int32
          nullable: true
          description: 施術前のバッファ時間
        bufferAfter:
          type: integer
          format: int32
          nullable: true
          description: 施術後のバッファ時間
        includesConsultation:
          type: boolean
          description: カウンセリング時間を含むか
      description: サービス提供時間の設定
    Models.ServiceId:
      type: string
      format: uuid
      description: 提供メニュー・施術サービスを識別するためのブランド付きUUID。
    Models.ServiceInfo:
      type: object
      required:
        - name
        - nameKana
        - description
        - shortDescription
        - benefits
        - targetCustomer
        - imageUrls
        - videoUrl
      properties:
        name:
          type: string
          description: サービス名称
        nameKana:
          type: string
          nullable: true
          description: サービス名の読み仮名
        description:
          type: string
          description: サービス詳細説明文
        shortDescription:
          type: string
          nullable: true
          description: 短めの紹介文
        benefits:
          type: array
          items:
            type: string
          nullable: true
          description: 提供価値・メリットの一覧
        targetCustomer:
          type: string
          nullable: true
          description: 主な対象顧客層
        imageUrls:
          type: array
          items:
            type: string
          nullable: true
          description: サービス画像の URL 一覧
        videoUrl:
          type: string
          nullable: true
          description: 紹介動画の URL
      description: サービスの基本的な紹介情報
    Models.ServiceMetadata:
      type: object
      required:
        - tags
        - keywords
        - seoTitle
        - seoDescription
        - internalNotes
        - sortOrder
        - featured
        - hideFromMenu
      properties:
        tags:
          type: array
          items:
            type: string
          nullable: true
          description: タグ一覧
        keywords:
          type: array
          items:
            type: string
          nullable: true
          description: 検索キーワード
        seoTitle:
          type: string
          nullable: true
          description: SEO 用タイトル
        seoDescription:
          type: string
          nullable: true
          description: SEO 用ディスクリプション
        internalNotes:
          type: string
          nullable: true
          description: 内部向けメモ
        sortOrder:
          type: integer
          format: int32
          nullable: true
          description: 表示順序
        featured:
          type: boolean
          nullable: true
          description: 注目サービスとして表示するか
        hideFromMenu:
          type: boolean
          nullable: true
          description: メニュー非表示フラグ
      description: サービスのメタデータ情報
    Models.ServiceOptionDetail:
      type: object
      required:
        - type
        - name
        - price
        - duration
        - description
        - fromLevel
        - toLevel
        - additionalPrice
        - extension
        - productId
        - required
        - withService
        - discountAmount
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceOptionType"
          description: オプションの種類
        name:
          type: string
          nullable: true
          description: オプション名
        price:
          type: integer
          format: int32
          nullable: true
          description: オプション料金
        duration:
          type: integer
          format: int32
          nullable: true
          description: 追加される施術時間
        description:
          type: string
          nullable: true
          description: オプションの説明
        fromLevel:
          type: string
          nullable: true
          description: アップグレード元のレベル
        toLevel:
          type: string
          nullable: true
          description: アップグレード先のレベル
        additionalPrice:
          type: integer
          format: int32
          nullable: true
          description: 追加料金
        extension:
          type: integer
          format: int32
          nullable: true
          description: 時間延長（分）
        productId:
          type: string
          nullable: true
          description: 関連商品 ID
        required:
          type: boolean
          nullable: true
          description: 必須オプションかどうか
        withService:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 同時予約が必要なサービス ID
        discountAmount:
          type: integer
          format: int32
          nullable: true
          description: 割引金額
      description: サービスに付随するオプション設定
    Models.ServiceOptionType:
      type: string
      enum:
        - addon
        - upgrade
        - duration
        - product
        - combo
      description: |-
        サービスオプションタイプ区分 - サービスに追加できるオプションの種類

        addon: アドオン - 基本サービスに追加できるオプション
        upgrade: アップグレード - サービスのグレードを上げるオプション
        duration: 時間延長 - サービス時間を延長するオプション
        product: 商品追加 - サービスに商品を含めるオプション
        combo: コンボ - 複数サービスの組み合わせオプション
    Models.ServicePerformance:
      type: object
      required:
        - bookingCount
        - completionRate
        - averageRating
        - reviewCount
        - revenue
        - popularityScore
        - repeatRate
      properties:
        bookingCount:
          type: integer
          format: int32
          description: 予約件数
        completionRate:
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          description: 施術完了率
        averageRating:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: 平均評価スコア
        reviewCount:
          type: integer
          format: int32
          description: レビュー件数
        revenue:
          type: integer
          format: int64
          description: 売上実績（円）
        popularityScore:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: 人気度スコア
        repeatRate:
          type: number
          allOf:
            - $ref: "#/components/schemas/Models.decimal"
          nullable: true
          description: リピート率
      description: サービスの実績指標
    Models.ServicePreference:
      type: object
      required:
        - favoriteServices
        - avoidServices
        - preferredDuration
        - preferredPriceRange
      properties:
        favoriteServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
        avoidServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
        preferredDuration:
          type: integer
          format: int32
          nullable: true
        preferredPriceRange:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.PriceRangeFilter"
          nullable: true
    Models.ServicePricing:
      type: object
      required:
        - strategy
        - taxIncluded
        - currency
        - minimumPrice
        - maximumPrice
        - depositRequired
        - depositAmount
        - cancellationFee
      properties:
        strategy:
          allOf:
            - $ref: "#/components/schemas/Models.PricingStrategyDetail"
          description: 採用している価格戦略
        taxIncluded:
          type: boolean
          description: 税込価格かどうか
        currency:
          allOf:
            - $ref: "#/components/schemas/Models.CurrencyCodeType"
          description: 通貨コード
        minimumPrice:
          type: integer
          format: int32
          nullable: true
          description: 設定されている最低料金
        maximumPrice:
          type: integer
          format: int32
          nullable: true
          description: 設定されている最高料金
        depositRequired:
          type: boolean
          description: 予約時にデポジットが必要か
        depositAmount:
          type: integer
          format: int32
          nullable: true
          description: 必要なデポジット金額
        cancellationFee:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.CancellationFee"
          nullable: true
          description: キャンセル料金の設定
      description: サービスの料金設定情報
    Models.ServiceRestrictions:
      type: object
      required:
        - requiredStaffLevel
        - requiredCertifications
        - maxConcurrent
        - minIntervalDays
        - maxBookingsPerCustomer
        - blackoutDates
      properties:
        requiredStaffLevel:
          allOf:
            - $ref: "#/components/schemas/Models.StaffLevelType"
          nullable: true
          description: 必要なスタッフレベル
        requiredCertifications:
          type: array
          items:
            type: string
          nullable: true
          description: 必要資格の一覧
        maxConcurrent:
          type: integer
          format: int32
          nullable: true
          description: 同時提供可能な最大件数
        minIntervalDays:
          type: integer
          format: int32
          nullable: true
          description: 再予約までの最短間隔（日）
        maxBookingsPerCustomer:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.BookingLimit"
          nullable: true
          description: 顧客ごとの予約上限設定
        blackoutDates:
          type: array
          items:
            type: string
            format: date-time
          nullable: true
          description: 提供不可日（ブラックアウト）一覧
      description: サービス提供時の制約条件
    Models.ServiceSchedule:
      type: object
      required:
        - dayOfWeek
        - startTime
        - endTime
        - maxBookings
      properties:
        dayOfWeek:
          allOf:
            - $ref: "#/components/schemas/Models.DayOfWeekType"
          description: 曜日
        startTime:
          type: string
          description: 提供開始時刻（HH:mm）
        endTime:
          type: string
          description: 提供終了時刻（HH:mm）
        maxBookings:
          type: integer
          format: int32
          nullable: true
          description: 予約受け入れ上限数
      description: サービス提供スケジュール
    Models.ServiceStatusDetail:
      type: object
      required:
        - type
        - reason
        - since
        - availableMonths
        - availableUntil
        - remainingSlots
        - discontinuedAt
        - replacementId
        - launchDate
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceStatusType"
          description: ステータス区分
        reason:
          type: string
          nullable: true
          description: ステータス変更理由
        since:
          type: string
          format: date-time
          nullable: true
          description: この状態が開始した日時
        availableMonths:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          description: 提供可能な月の一覧
        availableUntil:
          type: string
          format: date-time
          nullable: true
          description: 提供終了予定日
        remainingSlots:
          type: integer
          format: int32
          nullable: true
          description: 残り提供可能枠数
        discontinuedAt:
          type: string
          format: date-time
          nullable: true
          description: 廃止日時
        replacementId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 代替サービス ID
        launchDate:
          type: string
          format: date-time
          nullable: true
          description: 公開予定日
      description: サービスの提供状態の詳細
    Models.ServiceStatusType:
      type: string
      enum:
        - active
        - inactive
        - seasonal
        - limited
        - discontinued
        - coming_soon
      description: |-
        サービスステータス区分 - サービスの提供状態を表す区分

        active: 有効 - 現在提供中のサービス
        inactive: 一時停止 - 一時的に提供を停止しているサービス
        seasonal: 季節限定 - 特定の季節のみ提供されるサービス
        limited: 数量限定 - 残りわずかなサービス
        discontinued: 廃止 - 提供を終了したサービス
        coming_soon: 近日公開 - 近々提供予定のサービス
    Models.ServiceSummary:
      type: object
      required:
        - id
        - name
        - bookingCount
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          description: サービスメニューを識別するID。
        name:
          type: string
          description: 顧客向けに表示するサービス名称。
        bookingCount:
          type: integer
          format: int32
          nullable: true
          description: 対象サービスの予約件数。統計未計算時はnull。
      description: サービスメニューを一覧表示や候補選択で参照する際の要約情報。
    Models.Session:
      type: object
      required:
        - id
        - userId
        - refreshToken
        - ipAddress
        - userAgent
        - expiresAt
        - rememberMe
        - createdAt
        - lastActivityAt
      properties:
        id:
          type: string
          description: セッションを一意に識別するID。
        userId:
          allOf:
            - $ref: "#/components/schemas/Models.UserId"
          description: セッション所有者のユーザーID。
        refreshToken:
          type: string
          description: アクセストークン再発行に使用するリフレッシュトークン。
        ipAddress:
          type: string
          description: セッション発行元のIPアドレス。
        userAgent:
          type: string
          description: ブラウザやアプリを示すユーザーエージェント文字列。
        expiresAt:
          type: string
          format: date-time
          description: セッションの有効期限。
        rememberMe:
          type: boolean
          description: 永続化セッション（Remember me）を希望するかのフラグ。
          default: false
        createdAt:
          type: string
          format: date-time
          description: セッション作成日時。
        lastActivityAt:
          type: string
          format: date-time
          description: 直近のアクティビティ日時。
      description: ログインセッションの状態と追跡情報。
    Models.SessionId:
      type: string
      format: uuid
      description: ログインセッションを追跡するためのブランド付きUUID。
    Models.ShareLink:
      type: object
      required:
        - id
        - token
        - attachmentId
        - expiresAt
        - maxDownloads
        - downloadCount
        - hasPassword
        - allowedEmails
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          description: 共有リンクを一意に識別するID。
        token:
          type: string
          description: 共有アクセス時に利用するトークン。
        attachmentId:
          type: string
          description: 共有対象の添付ファイルID。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 共有リンクの有効期限。任意設定。
        maxDownloads:
          type: integer
          format: int32
          nullable: true
          description: 許可する最大ダウンロード回数。任意設定。
        downloadCount:
          type: integer
          format: int32
          description: これまでのダウンロード累計数。
        hasPassword:
          type: boolean
          description: 共有リンクがパスワード保護されているか。
        allowedEmails:
          type: array
          items:
            type: string
          nullable: true
          description: アクセスを許可するメールアドレス一覧。任意設定。
        createdBy:
          type: string
          description: 共有リンクを作成したユーザーID。
        createdAt:
          type: string
          format: date-time
          description: 共有リンクを作成した日時。
      description: 外部共有用に発行された添付ファイルの共有リンク情報。
    Models.ShareLinkAccessRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          nullable: true
          description: 共有リンクのパスワード。保護されている場合に入力。
      description: パスワード保護された共有リンクへアクセスする際のリクエスト。
    Models.ShareLinkCreateRequest:
      type: object
      required:
        - expiresAt
        - maxDownloads
        - password
        - allowedEmails
      properties:
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 共有リンクの有効期限。任意設定。
        maxDownloads:
          type: integer
          format: int32
          nullable: true
          description: 許可する最大ダウンロード回数。任意設定。
        password:
          type: string
          nullable: true
          description: 共有リンク保護用のパスワード。任意設定。
        allowedEmails:
          type: array
          items:
            type: string
          nullable: true
          description: アクセスを許可するメールアドレス一覧。任意設定。
      description: 添付ファイルの共有リンクを新規発行する際のリクエスト。
    Models.SoftDelete:
      type: object
      required:
        - isDeleted
        - deletedAt
        - deletedBy
        - deletionReason
      properties:
        isDeleted:
          type: boolean
          description: 論理削除フラグ。true の場合は通常の検索結果から除外する。
          default: false
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: 削除操作が実行された日時 (UTC)。
        deletedBy:
          type: string
          nullable: true
          description: 削除操作を実施したユーザーID またはサービス名。
        deletionReason:
          type: string
          nullable: true
          description: 削除理由や補足メモ。カスタマーサポート対応に利用する。
      description: |-
        ソフトデリート情報モデル。
        論理削除されたレコードの状態や削除理由を記録し、監査ログや復旧オペレーションに活用する。
    Models.SpaSubCategoryType:
      type: string
      enum:
        - head_spa
        - scalp_massage
        - aromatherapy
        - relaxation
      description: |-
        スパサブカテゴリー区分 - スパ・リラクゼーションサービスの詳細分類

        head_spa: ヘッドスパ - 頭部のマッサージと頭皮ケアを組み合わせたスパ
        scalp_massage: スカルプマッサージ - 頭皮の血行促進マッサージ
        aromatherapy: アロマテラピー - アロマオイルを使用したリラクゼーション
        relaxation: リラクゼーション - ストレス解消を目的とした総合的なケア
    Models.Staff:
      type: object
      required:
        - id
        - salonId
        - name
        - contactInfo
        - specialties
        - imageUrl
        - bio
        - yearsOfExperience
        - certifications
        - qualifications
        - schedules
        - isActive
        - permissions
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: スタッフを一意に識別するID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 所属サロンのID
        name:
          type: string
          description: スタッフの氏名
        contactInfo:
          allOf:
            - $ref: "#/components/schemas/Models.ContactInfo"
          description: 連絡先情報 (電話・メール等)
        specialties:
          type: array
          items:
            type: string
          description: 得意分野や専門メニューの一覧
        imageUrl:
          type: string
          nullable: true
          description: プロフィール画像のURL
        bio:
          type: string
          nullable: true
          description: 自己紹介や経歴の概要
        yearsOfExperience:
          type: integer
          format: int32
          nullable: true
          description: 実務経験年数
        certifications:
          type: array
          items:
            type: string
          nullable: true
          description: 保有資格名の一覧 (テキスト管理)
        qualifications:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffQualification"
          nullable: true
          description: 詳細な資格情報の一覧
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSchedule"
          nullable: true
          description: 通常勤務スケジュールの一覧
        isActive:
          type: boolean
          description: 現在スタッフがアクティブに勤務可能かを示すフラグ
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPermission"
          nullable: true
          description: システム上で付与されている追加権限一覧
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: スタッフモデル - サロンに所属するスタッフのプロフィール・資格・スケジュール・権限を統合管理する
    Models.StaffAvailability:
      type: object
      required:
        - staffId
        - dayOfWeek
        - startTime
        - endTime
        - breakStart
        - breakEnd
      properties:
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 対象スタッフのID
        dayOfWeek:
          allOf:
            - $ref: "#/components/schemas/Models.DayOfWeekType"
          description: 対象曜日
        startTime:
          type: string
          description: 空き枠の開始時刻 (HH:mm)
        endTime:
          type: string
          description: 空き枠の終了時刻 (HH:mm)
        breakStart:
          type: string
          nullable: true
          description: 休憩などの開始時刻
        breakEnd:
          type: string
          nullable: true
          description: 休憩などの終了時刻
      description: スタッフ空き状況モデル - 個別時間帯の空き枠を表し、スポット予約や検索レスポンスに利用する
    Models.StaffId:
      type: string
      format: uuid
      description: 施術スタッフや従業員を識別するためのブランド付きUUID。
    Models.StaffLevelType:
      type: string
      enum:
        - junior
        - stylist
        - senior
        - expert
        - director
      description: |-
        スタッフレベル区分 - スタッフの技術レベルや経験を表す階層

        junior: ジュニア - 新人・見習いレベル、基本的な施術が可能
        stylist: スタイリスト - 標準レベル、一般的な施術が可能
        senior: シニア - 上級レベル、高度な技術と経験を保有
        expert: エキスパート - 専門家レベル、特殊技術や指導が可能
        director: ディレクター - 管理職レベル、サロンの技術的な指導を担当
    Models.StaffPerformance:
      type: object
      required:
        - staffId
        - staffName
        - totalSales
        - serviceCount
        - averageServiceValue
      properties:
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: スタッフ ID
        staffName:
          type: string
          description: スタッフ名
        totalSales:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 担当した売上金額
        serviceCount:
          type: integer
          format: int32
          description: 提供したサービス件数
        averageServiceValue:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: 平均サービス単価
        customerSatisfaction:
          type: number
          format: float
          description: 顧客満足度評価（任意）
      description: スタッフ別の売上パフォーマンス指標
    Models.StaffPermission:
      type: object
      required:
        - resource
        - actions
        - scope
        - expiresAt
      properties:
        resource:
          type: string
          description: 操作対象リソースの識別子
        actions:
          type: array
          items:
            type: string
          description: 許可されたアクションの一覧
        scope:
          type: string
          nullable: true
          description: 権限が適用される範囲や条件
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 権限の有効期限 (UTC)
      description: スタッフ権限モデル - スタッフアカウントに付与された操作対象と権限範囲を定義する
    Models.StaffQualification:
      type: object
      required:
        - name
        - certificationDate
        - expiryDate
        - issuer
        - credentialId
      properties:
        name:
          type: string
          description: 資格・認定の名称
        certificationDate:
          type: string
          format: date
          description: 資格を取得した日付
        expiryDate:
          type: string
          format: date
          nullable: true
          description: 資格の有効期限。無期限の場合は省略
        issuer:
          type: string
          nullable: true
          description: 資格を発行した機関名
        credentialId:
          type: string
          nullable: true
          description: 資格証明番号などの識別子
      description: スタッフ資格モデル - 保有資格や認定情報を管理し、サービス提供に必要なスキル証明を保持する
    Models.StaffSchedule:
      type: object
      required:
        - dayOfWeek
        - startTime
        - endTime
        - breakTime
        - effectivePeriod
      properties:
        dayOfWeek:
          allOf:
            - $ref: "#/components/schemas/Models.DayOfWeekType"
          description: 対象となる曜日
        startTime:
          type: string
          description: "勤務開始時刻 (フォーマット例: HH:mm)"
        endTime:
          type: string
          description: "勤務終了時刻 (フォーマット例: HH:mm)"
        breakTime:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          nullable: true
          description: 当日の休憩時間帯リスト
        effectivePeriod:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.DateRange"
          nullable: true
          description: シフトが有効となる期間
      description: スタッフシフトモデル - 通常勤務スケジュールと休憩時間、適用期間を定義し、予約可能時間の算出に利用する
    Models.StaffScheduleManagement:
      type: object
      required:
        - staffId
        - salonId
        - regularHours
        - exceptions
        - effectiveFrom
        - effectiveTo
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
        - version
        - isDeleted
        - deletedAt
        - deletedBy
        - deletionReason
      properties:
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 対象スタッフのID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 所属サロンのID
        regularHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
          description: 通常勤務時間帯の一覧
        exceptions:
          type: array
          items:
            $ref: "#/components/schemas/Models.ScheduleException"
          description: 休暇や研修などの例外設定一覧
        effectiveFrom:
          type: string
          format: date-time
          description: スケジュールが有効になる開始日時
        effectiveTo:
          type: string
          format: date-time
          nullable: true
          description: スケジュールの終了日時。無期限の場合はnull
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時 (UTC)。
        createdBy:
          type: string
          description: レコードを作成したユーザーID またはサービス名。
        updatedAt:
          type: string
          format: date-time
          description: 最終更新日時 (UTC)。
        updatedBy:
          type: string
          description: 最後に更新したユーザーID またはサービス名。
        version:
          type: integer
          format: int32
          description: 楽観的ロックに使用するバージョン番号。
        isDeleted:
          type: boolean
          description: 論理削除フラグ。true の場合は通常の検索結果から除外する。
          default: false
        deletedAt:
          type: string
          format: date-time
          nullable: true
          description: 削除操作が実行された日時 (UTC)。
        deletedBy:
          type: string
          nullable: true
          description: 削除操作を実施したユーザーID またはサービス名。
        deletionReason:
          type: string
          nullable: true
          description: 削除理由や補足メモ。カスタマーサポート対応に利用する。
      description: スタッフの勤務スケジュールと例外設定を管理するモデル
    Models.StaffScheduleUpdateRequest:
      type: object
      required:
        - regularHours
        - exceptions
        - effectiveFrom
        - effectiveTo
      properties:
        regularHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
          description: 更新後の通常勤務時間帯一覧
        exceptions:
          type: array
          items:
            $ref: "#/components/schemas/Models.ScheduleException"
          nullable: true
          description: 休暇や特例などの例外設定一覧。変更がない場合はnull
        effectiveFrom:
          type: string
          format: date-time
          description: 更新内容の適用開始日時
        effectiveTo:
          type: string
          format: date-time
          nullable: true
          description: 適用終了日時。未定の場合はnull
      description: スタッフの勤務スケジュールを更新するためのリクエスト
    Models.StaffSummary:
      type: object
      required:
        - id
        - name
        - rating
        - bookingCount
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: スタッフを識別するID。
        name:
          type: string
          description: スタッフの表示名。
        rating:
          type: number
          format: float
          nullable: true
          description: 平均評価スコア。未評価の場合はnull。
        bookingCount:
          type: integer
          format: int32
          nullable: true
          description: 担当した予約件数。統計未計算時はnull。
      description: スタッフ一覧や選択候補で利用する要約情報。
    Models.StockAlert:
      type: object
      required:
        - itemId
        - threshold
        - currentStock
        - triggeredAt
      properties:
        itemId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 対象在庫 ID
        threshold:
          type: number
          format: float
          description: 設定した閾値
        currentStock:
          type: number
          format: float
          description: 警告発生時の在庫数
        triggeredAt:
          type: string
          format: date-time
          description: 警告が発生した日時
      description: 在庫残量の閾値警告
    Models.StockMovement:
      type: object
      required:
        - id
        - itemId
        - salonId
        - type
        - quantity
        - reason
        - performedBy
        - occurredAt
        - inventoryId
        - stockAfter
        - movedAt
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          type: string
          description: トランザクション ID
        itemId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 対象在庫アイテム ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 処理を行うサロン ID
        type:
          type: string
          enum:
            - in
            - out
            - adjustment
            - transfer
          description: 在庫操作区分（入庫/出庫/調整/移動）
        quantity:
          type: number
          format: float
          description: 操作した数量
        reason:
          type: string
          description: 操作理由
        performedBy:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 操作を担当したスタッフ ID
        occurredAt:
          type: string
          format: date-time
          description: 操作日時
        referenceId:
          type: string
          description: 関連する外部参照 ID
        notes:
          type: string
          description: 備考メモ
        metadata:
          type: object
          additionalProperties: {}
          description: 追加のメタデータ
        inventoryId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 対象在庫アイテム ID
        stockAfter:
          type: number
          format: float
          description: 移動後の在庫数量
        orderId:
          allOf:
            - $ref: "#/components/schemas/Models.OrderId"
          description: 紐づく発注 ID
        treatmentRecordId:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentRecordId"
          description: 紐づく施術記録 ID
        movedAt:
          type: string
          format: date-time
          description: 移動が確定した日時
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 在庫の移動履歴
    Models.StockMovementCreateRequest:
      type: object
      required:
        - inventoryId
        - type
        - quantity
        - reason
        - orderId
        - treatmentRecordId
        - notes
      properties:
        inventoryId:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryId"
          description: 対象在庫 ID
        type:
          type: string
          enum:
            - in
            - out
            - adjustment
            - transfer
          description: 在庫操作区分
        quantity:
          type: number
          format: float
          description: 操作数量
        reason:
          type: string
          description: 操作理由
        orderId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.OrderId"
          nullable: true
          description: 関連する発注 ID
        treatmentRecordId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentRecordId"
          nullable: true
          description: 関連する施術記録 ID
        notes:
          type: string
          nullable: true
          description: 備考メモ
      description: 在庫移動処理を登録する入力モデル
    Models.StylePreference:
      type: object
      required:
        - preferredLength
        - preferredColors
        - avoidStyles
        - inspirationImages
      properties:
        preferredLength:
          type: string
          nullable: true
        preferredColors:
          type: array
          items:
            type: string
          nullable: true
        avoidStyles:
          type: array
          items:
            type: string
          nullable: true
        inspirationImages:
          type: array
          items:
            type: string
          nullable: true
    Models.StylingSubCategoryType:
      type: string
      enum:
        - blowout
        - updo
        - braiding
        - extensions
        - event_styling
      description: |-
        スタイリングサブカテゴリー区分 - ヘアスタイリングサービスの詳細分類

        blowout: ブローアウト - ブロードライでボリュームを出すスタイリング
        updo: アップスタイル - まとめ髪、シニヨン等のヘアアレンジ
        braiding: 編み込み - 三つ編み、編み込みアレンジ等
        extensions: エクステンション - ヘアエクステの装着サービス
        event_styling: イベントスタイリング - 結婚式、パーティー等の特別なスタイリング
    Models.SystemRoleType:
      type: string
      enum:
        - super_admin
        - salon_owner
        - salon_manager
        - senior_staff
        - staff
        - receptionist
        - customer
        - guest
      description: |-
        システムロールタイプ区分 - システムで事前定義されたロールの種類

        super_admin: スーパー管理者 - システム全体へのフルアクセス権限
        salon_owner: サロンオーナー - サロン全体へのフルアクセス権限
        salon_manager: サロンマネージャー - サロンの管理業務権限
        senior_staff: シニアスタッフ - 上級スタイリスト・セラピストの権限
        staff: スタッフ - 一般スタッフの権限
        receptionist: 受付 - フロントデスク業務の権限
        customer: 顧客 - 顧客セルフサービスの権限
        guest: ゲスト - 限定的なゲストアクセス権限
    Models.TimePreference:
      type: object
      required:
        - dayOfWeek
        - timeSlots
      properties:
        dayOfWeek:
          allOf:
            - $ref: "#/components/schemas/Models.DayOfWeekType"
          description: Day of week
        timeSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          description: Preferred time slots
      description: Time preference model
    Models.TimeSlot:
      type: object
      required:
        - startTime
        - endTime
      properties:
        startTime:
          type: string
          description: 開始時刻（HH:mm形式、24時間表記）。
        endTime:
          type: string
          description: 終了時刻（HH:mm形式、24時間表記）。
      description: 営業時間や休憩時間を表現する単一の時間帯スロット。
    Models.TreatmentRecord:
      type: object
      required:
        - id
        - bookingId
        - customerId
        - staffId
        - salonId
        - treatment
        - serviceIds
        - startTime
        - endTime
        - notes
        - usedMaterials
        - photos
        - customerFeedback
        - nextRecommendations
        - totalAmount
        - discountAmount
        - pointsEarned
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentRecordId"
          description: 施術記録 ID
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 紐づく予約 ID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 施術を受けた顧客 ID
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 施術担当スタッフ ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: 施術を実施したサロン ID
        treatment:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentType"
          description: 実施した施術タイプ
        serviceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          description: 施術で提供したサービス ID 一覧
        startTime:
          type: string
          format: date-time
          description: 施術開始日時
        endTime:
          type: string
          format: date-time
          description: 施術終了日時
        notes:
          type: string
          nullable: true
          description: 施術の詳細メモ
        usedMaterials:
          type: array
          items:
            $ref: "#/components/schemas/Models.MaterialUsage"
          nullable: true
          description: 使用した資材・商材の記録
        photos:
          type: array
          items:
            $ref: "#/components/schemas/Models.AttachmentId"
          nullable: true
          description: 施術前後の写真 ID
        customerFeedback:
          type: string
          nullable: true
          description: 顧客のフィードバック
        nextRecommendations:
          type: string
          nullable: true
          description: 次回来店への提案内容
        totalAmount:
          type: number
          format: float
          description: 請求総額
        discountAmount:
          type: number
          format: float
          nullable: true
          description: 適用した割引額
        pointsEarned:
          type: integer
          format: int32
          nullable: true
          description: 付与したポイント数
        createdAt:
          type: string
          format: date-time
          description: レコード作成日時。
        createdBy:
          type: string
          nullable: true
          description: レコードを作成したユーザーID。匿名作成の場合はnull。
        updatedAt:
          type: string
          format: date-time
          description: レコード最終更新日時。
        updatedBy:
          type: string
          nullable: true
          description: レコードを最後に更新したユーザーID。匿名更新の場合はnull。
      description: 顧客来店時の施術記録
    Models.TreatmentRecordCreateRequest:
      type: object
      required:
        - bookingId
        - customerId
        - staffId
        - treatment
        - serviceIds
        - startTime
        - endTime
        - notes
        - usedMaterials
        - customerFeedback
        - nextRecommendations
        - totalAmount
        - discountAmount
        - pointsEarned
      properties:
        bookingId:
          allOf:
            - $ref: "#/components/schemas/Models.BookingId"
          description: 紐づく予約 ID
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: 施術を受けた顧客 ID
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 施術担当スタッフ ID
        treatment:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentType"
          description: 施術タイプ
        serviceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          description: 提供したサービス ID 一覧
        startTime:
          type: string
          format: date-time
          description: 施術開始日時
        endTime:
          type: string
          format: date-time
          description: 施術終了日時
        notes:
          type: string
          nullable: true
          description: 施術メモ
        usedMaterials:
          type: array
          items:
            $ref: "#/components/schemas/Models.MaterialUsage"
          nullable: true
          description: 使用した資材一覧
        customerFeedback:
          type: string
          nullable: true
          description: 顧客フィードバック
        nextRecommendations:
          type: string
          nullable: true
          description: 次回来店への提案内容
        totalAmount:
          type: number
          format: float
          description: 請求総額
        discountAmount:
          type: number
          format: float
          nullable: true
          description: 割引額
        pointsEarned:
          type: integer
          format: int32
          nullable: true
          description: 付与ポイント数
      description: 施術記録を新規登録する入力モデル
    Models.TreatmentRecordId:
      type: string
      format: uuid
      description: 施術記録やカウンセリングメモを識別するブランド付きUUID。
    Models.TreatmentRecordUpdateRequest:
      type: object
      properties:
        notes:
          type: string
          nullable: true
          description: 施術メモ
        usedMaterials:
          type: array
          items:
            $ref: "#/components/schemas/Models.MaterialUsage"
          nullable: true
          description: 使用した資材一覧
        customerFeedback:
          type: string
          nullable: true
          description: 顧客フィードバック
        nextRecommendations:
          type: string
          nullable: true
          description: 次回来店への提案内容
        photos:
          type: array
          items:
            $ref: "#/components/schemas/Models.AttachmentId"
          nullable: true
          description: 施術前後写真 ID
      description: 施術記録を更新する入力モデル
    Models.TreatmentSubCategoryType:
      type: string
      enum:
        - deep_conditioning
        - protein_treatment
        - scalp_treatment
        - keratin_treatment
        - olaplex
      description: |-
        トリートメントサブカテゴリー区分 - ヘアトリートメントサービスの詳細分類

        deep_conditioning: ディープコンディショニング - 髪の内部まで栄養を浸透させるトリートメント
        protein_treatment: プロテイントリートメント - タンパク質を補給し髪を強化するトリートメント
        scalp_treatment: スカルプトリートメント - 頭皮ケアに特化したトリートメント
        keratin_treatment: ケラチントリートメント - ケラチンを補充し髪をストレートにするトリートメント
        olaplex: オラプレックス - ダメージした髪の内部結合を修復するトリートメント
    Models.TreatmentType:
      type: string
      enum:
        - cut
        - color
        - perm
        - treatment
        - head_spa
        - styling
        - extension
        - nail
        - eyelash
        - other
      description: |-
        施術タイプ区分 - サロンで提供される具体的な施術の種類

        cut: カット - ヘアカット、レイヤーカット等の切断技術
        color: カラー - ヘアカラー、白髪染め、ハイライト等の染色技術
        perm: パーマ - コールドパーマ、デジタルパーマ等のウェーブ技術
        treatment: トリートメント - ダメージケア、栄養補給等の毛髪改善技術
        head_spa: ヘッドスパ - 頭皮マッサージ、スカルプケア等の頭皮ケア技術
        styling: スタイリング - セット、アレンジ等のスタイリング技術
        extension: エクステンション - ヘアエクステ、増毛等の毛髪追加技術
        nail: ネイル - マニキュア、ジェルネイル等の爪装飾技術
        eyelash: まつげ - まつげエクステ、まつげパーマ等のまつげ装飾技術
        other: その他 - 上記に分類されない施術
    Models.TwoFactorStatusType:
      type: string
      enum:
        - disabled
        - pending
        - enabled
      description: |-
        2要素認証ステータス区分 - 2要素認証の設定状態

        disabled: 無効 - 2要素認証が設定されていない状態
        pending: 設定中 - 2要素認証の設定が進行中の状態
        enabled: 有効 - 2要素認証が有効化されている状態
    Models.UnauthorizedError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - UNAUTHORIZED
          description: 固定値UNAUTHORIZED。クライアントでのハンドリングを容易にする識別子。
        message:
          type: string
          description: エラー内容を伝えるメッセージ。
      description: 認証されていないアクセスを表す標準エラーモデル。
    Models.UpdateBookingRequest:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/Models.BookingStatusUpdate"
          description: ステータス詳細の更新。
        statusCode:
          allOf:
            - $ref: "#/components/schemas/Models.BookingStatusCodeType"
          description: ステータスコードの更新。
        waitlistEntry:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.WaitlistEntryUpdate"
          nullable: true
          description: ウェイティングリスト情報の更新またはリセット。
        deposit:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.BookingDepositUpdate"
          nullable: true
          description: デポジット情報の更新またはリセット。
        paymentMethod:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          nullable: true
          description: 支払い方法の更新またはリセット。
        paymentStatus:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentStatusCodeType"
          nullable: true
          description: 支払いステータスの更新またはリセット。
        discountAmount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 割引額の更新
        finalAmount:
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          description: 最終請求額の更新。
        balanceDue:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          nullable: true
          description: 未収金額の更新またはリセット。
        notes:
          type: string
          nullable: true
          description: 備考の更新またはリセット。
        metadata:
          type: object
          additionalProperties: {}
          description: 任意メタデータの更新。
      description: 予約情報を部分更新するためのリクエスト。null指定で値をリセット可能。
    Models.UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        preferences:
          type: object
          additionalProperties: {}
        notes:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
          nullable: true
      description: Customer update request with optional fields for partial updates. null指定で値をリセット可能
    Models.UpdateCustomerRequestUpdate:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfoUpdate"
        preferences:
          type: object
          additionalProperties: {}
        notes:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
          nullable: true
      description: Customer update request with optional fields for partial updates. null指定で値をリセット可能
    Models.UpdateReservationRequest:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/Models.ReservationStatusType"
          description: 更新後の予約ステータス
        notes:
          type: string
          nullable: true
          description: 最新の顧客メモや社内備考（null指定で初期化可能）
        startTime:
          type: string
          format: date-time
          description: 調整後の施術開始日時 (UTC)
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: 再割当先のスタッフID
      description: 予約更新リクエスト - 部分更新に対応した任意項目の変更指示を受け取り、既存予約を調整する。null指定で値をリセット可能
    Models.UpdateSalonRequest:
      type: object
      properties:
        name:
          type: string
          description: 名称変更を行う場合に指定
        description:
          type: string
          nullable: true
          description: 紹介文を更新する場合に指定（null指定で初期化可能）
        address:
          allOf:
            - $ref: "#/components/schemas/Models.Address"
          description: 住所情報の差し替えが必要な場合に指定
        contactInfo:
          allOf:
            - $ref: "#/components/schemas/Models.ContactInfo"
          description: 電話番号やメールアドレス等の連絡先を更新する場合に指定
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
          description: 通常営業時間の更新が必要な場合に指定
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
          nullable: true
          description: 特別営業時間やシフト設定の更新に利用（null指定で初期化可能）
        imageUrls:
          type: array
          items:
            type: string
          description: 画像URLリストを更新する場合に指定
        features:
          type: array
          items:
            type: string
          description: 特徴タグの追加・削除を行う場合に指定
      description: サロン情報を部分更新するためのリクエスト。null指定で値をリセット可能
    Models.UpdateSalonRequestUpdate:
      type: object
      properties:
        name:
          type: string
          description: 名称変更を行う場合に指定
        description:
          type: string
          nullable: true
          description: 紹介文を更新する場合に指定（null指定で初期化可能）
        address:
          allOf:
            - $ref: "#/components/schemas/Models.AddressUpdate"
          description: 住所情報の差し替えが必要な場合に指定
        contactInfo:
          allOf:
            - $ref: "#/components/schemas/Models.ContactInfoUpdate"
          description: 電話番号やメールアドレス等の連絡先を更新する場合に指定
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
          description: 通常営業時間の更新が必要な場合に指定
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
          nullable: true
          description: 特別営業時間やシフト設定の更新に利用（null指定で初期化可能）
        imageUrls:
          type: array
          items:
            type: string
          description: 画像URLリストを更新する場合に指定
        features:
          type: array
          items:
            type: string
          description: 特徴タグの追加・削除を行う場合に指定
      description: サロン情報を部分更新するためのリクエスト。null指定で値をリセット可能
    Models.UpdateServiceRequest:
      type: object
      required:
        - description
        - duration
      properties:
        name:
          type: string
          description: 更新後のサービス名
        description:
          type: string
          nullable: true
          description: 更新後の説明文
        duration:
          type: integer
          format: int32
          nullable: true
          description: 更新後の施術時間
        price:
          type: integer
          format: int32
          description: 更新後の料金
        category:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: 更新後のサービスカテゴリ
        categoryId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          nullable: true
          description: 更新後のカテゴリ ID（null 指定で解除）
        imageUrl:
          type: string
          nullable: true
          description: 更新後の画像 URL（null 指定で解除）
        requiredStaffLevel:
          type: integer
          format: int32
          nullable: true
          description: 更新後の必要スタッフレベル（null 指定で解除）
        depositAmount:
          type: integer
          format: int32
          nullable: true
          description: 更新後のデポジット額（null 指定で解除）
        isActive:
          type: boolean
          description: 更新後の有効フラグ
        maxAdvanceBookingDays:
          type: integer
          format: int32
          nullable: true
          description: 更新後の最大予約日数（null 指定で解除）
        minAdvanceBookingHours:
          type: integer
          format: int32
          nullable: true
          description: 更新後の最短予約受付時間（null 指定で解除）
      description: サービス情報を部分更新するリクエスト。null指定で値をリセット可能
    Models.UpdateServiceRequestUpdate:
      type: object
      properties:
        name:
          type: string
          description: 更新後のサービス名
        description:
          type: string
          nullable: true
          description: 更新後の説明文
        duration:
          type: integer
          format: int32
          nullable: true
          description: 更新後の施術時間
        price:
          type: integer
          format: int32
          description: 更新後の料金
        category:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: 更新後のサービスカテゴリ
        categoryId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          nullable: true
          description: 更新後のカテゴリ ID（null 指定で解除）
        imageUrl:
          type: string
          nullable: true
          description: 更新後の画像 URL（null 指定で解除）
        requiredStaffLevel:
          type: integer
          format: int32
          nullable: true
          description: 更新後の必要スタッフレベル（null 指定で解除）
        depositAmount:
          type: integer
          format: int32
          nullable: true
          description: 更新後のデポジット額（null 指定で解除）
        isActive:
          type: boolean
          description: 更新後の有効フラグ
        maxAdvanceBookingDays:
          type: integer
          format: int32
          nullable: true
          description: 更新後の最大予約日数（null 指定で解除）
        minAdvanceBookingHours:
          type: integer
          format: int32
          nullable: true
          description: 更新後の最短予約受付時間（null 指定で解除）
      description: サービス情報を部分更新するリクエスト。null指定で値をリセット可能
    Models.UpdateStaffRequest:
      type: object
      properties:
        name:
          type: string
          description: スタッフ名の更新
        contactInfo:
          allOf:
            - $ref: "#/components/schemas/Models.ContactInfo"
          description: 連絡先情報の更新
        specialties:
          type: array
          items:
            type: string
          description: 得意分野一覧の更新
        imageUrl:
          type: string
          nullable: true
          description: プロフィール画像URLの更新（null指定で初期化可能）
        bio:
          type: string
          nullable: true
          description: 自己紹介文の更新（null指定で初期化可能）
        yearsOfExperience:
          type: integer
          format: int32
          nullable: true
          description: 経験年数の更新（null指定で初期化可能）
        certifications:
          type: array
          items:
            type: string
          nullable: true
          description: 資格名一覧の更新（null指定で初期化可能）
        qualifications:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffQualification"
          nullable: true
          description: 資格詳細一覧の更新（null指定で初期化可能）
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSchedule"
          nullable: true
          description: 勤務スケジュール一覧の更新（null指定で初期化可能）
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPermission"
          nullable: true
          description: 付与権限一覧の更新（null指定で初期化可能）
        isActive:
          type: boolean
          description: アクティブ状態の更新
      description: スタッフ更新リクエスト - 任意項目を部分更新し、プロフィールや勤務状況を柔軟に調整する。null指定で値をリセット可能
    Models.User:
      type: object
      required:
        - id
        - email
        - name
        - role
        - status
        - emailVerified
        - emailVerificationToken
        - emailVerificationTokenExpiry
        - twoFactorStatus
        - twoFactorSecret
        - backupCodes
        - failedLoginAttempts
        - lockedAt
        - passwordResetToken
        - passwordResetTokenExpiry
        - lastPasswordChangeAt
        - passwordHistory
        - trustedIpAddresses
        - customerId
        - staffId
        - roleDetail
        - authState
        - emailVerificationState
        - passwordResetState
        - createdAt
        - updatedAt
        - lastLoginAt
        - lastLoginIp
      properties:
        id:
          type: string
          description: ユーザーを一意に識別するID。
        email:
          type: string
          description: ログインに利用するメールアドレス（ユニーク）。
        name:
          type: string
          description: 顧客・スタッフの表示名。
        role:
          allOf:
            - $ref: "#/components/schemas/Models.AuthUserRoleType"
          description: 認証システム上での役割区分。
        status:
          allOf:
            - $ref: "#/components/schemas/Models.UserAccountStatusType"
          description: アカウントの稼働状態。
        emailVerified:
          type: boolean
          description: メールアドレスが確認済みかどうか。
        emailVerificationToken:
          type: string
          nullable: true
          description: メール確認に利用するトークン。内部管理用。
        emailVerificationTokenExpiry:
          type: string
          format: date-time
          nullable: true
          description: メール確認トークンの有効期限。
        twoFactorStatus:
          allOf:
            - $ref: "#/components/schemas/Models.TwoFactorStatusType"
          description: 2要素認証の設定状態。
        twoFactorSecret:
          type: string
          nullable: true
          description: 暗号化された2要素認証シークレット。
        backupCodes:
          type: array
          items:
            type: string
          nullable: true
          description: 2要素認証の復旧用バックアップコード一覧。
        failedLoginAttempts:
          type: integer
          format: int32
          description: 連続したログイン失敗回数。
          default: 0
        lockedAt:
          type: string
          format: date-time
          nullable: true
          description: アカウントをロックした日時。未ロックの場合はnull。
        passwordResetToken:
          type: string
          nullable: true
          description: パスワードリセットに利用するトークン。内部管理用。
        passwordResetTokenExpiry:
          type: string
          format: date-time
          nullable: true
          description: パスワードリセットトークンの有効期限。
        lastPasswordChangeAt:
          type: string
          format: date-time
          nullable: true
          description: 最後にパスワードを変更した日時。
        passwordHistory:
          type: array
          items:
            type: string
          nullable: true
          description: 再利用防止のため保持する過去パスワードハッシュ。
        trustedIpAddresses:
          type: array
          items:
            type: string
          nullable: true
          description: 信頼済みIPアドレスのリスト。
        customerId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          nullable: true
          description: ユーザーが顧客の場合の顧客プロファイルID。
        staffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: ユーザーがスタッフの場合のスタッフプロファイルID。
        roleDetail:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.UserRoleDetail"
          nullable: true
          description: 担当サロンやレベル等を含む拡張ロール情報。
        authState:
          allOf:
            - $ref: "#/components/schemas/Models.AuthenticationStateType"
          nullable: true
          description: 現在の認証状態区分。
        emailVerificationState:
          allOf:
            - $ref: "#/components/schemas/Models.EmailVerificationStateType"
          nullable: true
          description: メール確認状態区分。
        passwordResetState:
          allOf:
            - $ref: "#/components/schemas/Models.PasswordResetStateType"
          nullable: true
          description: パスワードリセット状態区分。
        createdAt:
          type: string
          format: date-time
          description: ユーザーアカウント作成日時。
        updatedAt:
          type: string
          format: date-time
          description: ユーザー情報の最終更新日時。
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          description: 直近のログイン日時。
        lastLoginIp:
          type: string
          nullable: true
          description: 直近ログイン時のIPアドレス。
      description: 認証基盤で管理するユーザーアカウント情報。
    Models.UserAccountStatusType:
      type: string
      enum:
        - active
        - unverified
        - locked
        - suspended
        - deleted
      description: |-
        ユーザーアカウントステータス区分 - アカウントの利用可否状態

        active: アクティブ - 正常に利用可能なアカウント
        unverified: メール未確認 - メールアドレスが確認されていないアカウント
        locked: ロック - ログイン失敗回数超過によりロックされたアカウント
        suspended: 停止 - 管理者によって停止されたアカウント
        deleted: 削除済み - 削除されたアカウント
    Models.UserId:
      type: string
      format: uuid
      description: システム利用者（顧客・スタッフ・管理者）を一意に識別するブランド付きUUID。
    Models.UserRoleAssignRequest:
      type: object
      required:
        - userId
        - roleId
      properties:
        userId:
          type: string
          description: 対象ユーザー ID
        roleId:
          allOf:
            - $ref: "#/components/schemas/Models.RoleId"
          description: 割当対象のロール ID
        salonId:
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          description: サロン単位の場合のサロン ID
        expiresAt:
          type: string
          format: date-time
          description: 割当の有効期限
      description: ユーザーへロールを割り当てる入力モデル
    Models.UserRoleAssignment:
      type: object
      required:
        - userId
        - roleId
        - salonId
        - assignedAt
        - assignedBy
        - expiresAt
        - isActive
      properties:
        userId:
          type: string
          description: 対象ユーザー ID（スタッフ/顧客いずれも可）
        roleId:
          allOf:
            - $ref: "#/components/schemas/Models.RoleId"
          description: 割り当てるロール ID
        salonId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          nullable: true
          description: サロン単位のロールの場合の対象サロン ID
        assignedAt:
          type: string
          format: date-time
          description: 割当日時
        assignedBy:
          type: string
          description: 割当を実施したユーザー ID
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: ロール割当の有効期限
        isActive:
          type: boolean
          description: 割当が現在有効かどうか
      description: ユーザーへのロール割当情報
    Models.UserRoleDetail:
      type: object
      required:
        - type
        - salonId
        - level
      properties:
        type:
          allOf:
            - $ref: "#/components/schemas/Models.UserRoleType"
          description: システム内での基礎的な役割区分。
        salonId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.SalonId"
          nullable: true
          description: 役割が適用されるサロンID。全社権限の場合はnull。
        level:
          allOf:
            - $ref: "#/components/schemas/Models.StaffLevelType"
          nullable: true
          description: スタッフに対して設定される技術レベル。
      description: ユーザーの詳細な役割情報と所属を表すモデル。
    Models.UserRoleType:
      type: string
      enum:
        - customer
        - staff
        - manager
        - admin
        - owner
      description: |-
        ユーザーロール区分 - システム内でのユーザーの役割と権限レベル

        customer: 顧客 - サービスの予約・利用が可能なユーザー
        staff: スタッフ - 施術を提供するサロン従業員
        manager: マネージャー - サロンの管理業務を担当する管理者
        admin: 管理者 - システム全体の管理権限を持つユーザー
        owner: オーナー - サロンの所有者、最高権限を保持
    Models.ValidationError:
      type: object
      required:
        - field
        - rule
        - message
        - value
        - constraint
      properties:
        field:
          type: string
          description: 検証に失敗したフィールドパス。ネストしたキーをドット記法で表現する。
        rule:
          type: string
          description: 違反した検証ルール名またはコード。
        message:
          type: string
          description: ユーザーに提示する具体的なエラーメッセージ。
        value:
          nullable: true
          description: 検証対象となった実際の値。セキュリティ観点で出力が許容される場合のみ利用する。
        constraint:
          nullable: true
          description: 期待される値や制約条件。入力補助やUI表示のガイダンスに使用する。
      description: |-
        入力検証での失敗内容を表すモデル。
        画面入力フォームやAPI連携時のフィールド単位のエラー詳細を格納し、顧客やスタッフへのフィードバックに利用する。
    Models.Versioned:
      type: object
      required:
        - version
        - lastModified
      properties:
        version:
          type: integer
          format: int32
          description: 内部的に管理するバージョン番号。更新ごとにインクリメントする。
        lastModified:
          type: string
          format: date-time
          description: 最終更新日時 (UTC)。キャッシュ制御や監査に利用。
      description: |-
        楽観的ロックを実現するためのバージョン管理モデル。
        エンティティの更新競合を検知し、整合性を担保する。
    Models.VisitHistory:
      type: object
      required:
        - visitCount
        - firstVisitDate
        - lastVisitDate
        - averageSpendPerVisit
        - totalSpent
        - cancelCount
        - noShowCount
        - completedServices
      properties:
        visitCount:
          type: integer
          format: int32
        firstVisitDate:
          type: string
          format: date-time
          nullable: true
        lastVisitDate:
          type: string
          format: date-time
          nullable: true
        averageSpendPerVisit:
          type: integer
          format: int32
          nullable: true
        totalSpent:
          type: integer
          format: int32
        cancelCount:
          type: integer
          format: int32
        noShowCount:
          type: integer
          format: int32
        completedServices:
          type: integer
          format: int32
    Models.WaitlistEntry:
      type: object
      required:
        - position
        - estimatedTime
        - joinedAt
        - expiresAt
        - notifiedAt
        - preferredStaffId
        - preferredServiceId
        - notes
      properties:
        position:
          type: integer
          format: int32
          description: 現在の待機順序。
        estimatedTime:
          type: string
          format: date-time
          nullable: true
          description: 呼び出し予想時刻。未確定の場合はnull。
        joinedAt:
          type: string
          format: date-time
          description: ウェイティングリストに参加した日時。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 待機権が失効する日時。
        notifiedAt:
          type: string
          format: date-time
          nullable: true
          description: 呼び出し通知を送信した日時。
        preferredStaffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 希望スタッフID。任意指定。
        preferredServiceId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 希望サービスID。任意指定。
        notes:
          type: string
          nullable: true
          description: 追加メモ。
      description: ウェイティングリストに登録された顧客情報。
    Models.WaitlistEntryUpdate:
      type: object
      properties:
        position:
          type: integer
          format: int32
          description: 現在の待機順序。
        estimatedTime:
          type: string
          format: date-time
          nullable: true
          description: 呼び出し予想時刻。未確定の場合はnull。
        joinedAt:
          type: string
          format: date-time
          description: ウェイティングリストに参加した日時。
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: 待機権が失効する日時。
        notifiedAt:
          type: string
          format: date-time
          nullable: true
          description: 呼び出し通知を送信した日時。
        preferredStaffId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          nullable: true
          description: 希望スタッフID。任意指定。
        preferredServiceId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          nullable: true
          description: 希望サービスID。任意指定。
        notes:
          type: string
          nullable: true
          description: 追加メモ。
      description: ウェイティングリストに登録された顧客情報。
    Models.decimal:
      type: number
      format: double
      description: 税率や金額計算で用いる汎用小数型。
    Operations.AuditEntry:
      type: object
      required:
        - id
        - entityId
        - entity
        - operation
        - userId
        - timestamp
      properties:
        id:
          type: string
          description: Audit entry ID
        entityId:
          type: string
          description: Entity ID
        entity:
          type: string
          description: Entity type
        operation:
          type: string
          enum:
            - create
            - update
            - delete
            - restore
          description: Operation performed
        userId:
          type: string
          description: User who performed the operation
        userName:
          type: string
          description: User display name
        ipAddress:
          type: string
          description: IP address
        userAgent:
          type: string
          description: User agent
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the operation
        changes:
          type: array
          items:
            $ref: "#/components/schemas/Operations.ChangeSet"
          description: Changes made
        before:
          description: Entity snapshot before change
        after:
          description: Entity snapshot after change
        metadata:
          type: object
          additionalProperties: {}
          description: Additional metadata
      description: 監査ログ1件分の詳細を保持するモデルです。誰がいつどのような変更を行ったかを記録します。
    Operations.ChangeSet:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: Field that was changed
        oldValue:
          description: Previous value
        newValue:
          description: New value
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
servers:
  - url: http://localhost:3000
    description: Local Development Server
    variables: {}
  - url: https://staging-api.beauty-salon.com
    description: Staging API Server
    variables: {}
  - url: https://api.beauty-salon.com
    description: Production API Server
    variables: {}
