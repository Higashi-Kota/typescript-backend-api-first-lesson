openapi: 3.0.0
info:
  title: Beauty Salon API
  description: Comprehensive REST API for managing beauty salon operations including salons, staff, services, customers, reservations, bookings, treatments, payments, inventory, and access control. Built with TypeSpec for type-safe API-first development.
  version: "2.0"
tags:
  - name: Authentication
  - name: Admin - Authentication
  - name: Salons
  - name: System
  - name: Staff
  - name: Services
  - name: Customers
  - name: Reservations
  - name: Bookings
  - name: Reviews
  - name: Attachments
  - name: Share
  - name: Treatments
  - name: Medical Charts
  - name: Payments
  - name: Sales Reports
  - name: Points
  - name: Inventory
  - name: Purchase Orders
  - name: Inventory Alerts
  - name: Roles & Permissions
  - name: Permissions
  - name: User Roles
  - name: Access Control
paths:
  /access-control/check:
    post:
      operationId: AccessControlOperations_checkAccess
      description: Check user access
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.AccessResult"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Access Control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.AccessCheck"
  /access-control/check-permissions:
    post:
      operationId: AccessControlOperations_checkPermissions
      description: Check multiple permissions
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PermissionCheckResult"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Access Control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PermissionCheckInput"
  /access-control/resource/{resource}/access:
    get:
      operationId: AccessControlOperations_getResourceAccess
      description: Get resource access list
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: string
                            userName:
                              type: string
                            hasAccess:
                              type: boolean
                            grantedBy:
                              type: array
                              items:
                                type: string
                          required:
                            - userId
                            - hasAccess
                            - grantedBy
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Access Control
  /access-control/user/{userId}/permissions:
    get:
      operationId: AccessControlOperations_getUserPermissions
      description: Get user effective permissions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          userId:
                            type: string
                          permissions:
                            type: array
                            items:
                              type: string
                          roles:
                            type: array
                            items:
                              type: object
                              properties:
                                roleId:
                                  $ref: "#/components/schemas/Models.RoleId"
                                roleName:
                                  type: string
                                permissions:
                                  type: array
                                  items:
                                    type: string
                              required:
                                - roleId
                                - roleName
                                - permissions
                        required:
                          - userId
                          - permissions
                          - roles
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Access Control
  /access-control/validate:
    post:
      operationId: AccessControlOperations_validatePermissions
      description: Validate role permissions
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          isValid:
                            type: boolean
                          missingPermissions:
                            type: array
                            items:
                              type: string
                          extraPermissions:
                            type: array
                            items:
                              type: string
                        required:
                          - isValid
                          - missingPermissions
                          - extraPermissions
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Access Control
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  $ref: "#/components/schemas/Models.RoleId"
                requiredPermissions:
                  type: array
                  items:
                    type: string
              required:
                - roleId
                - requiredPermissions
  /api/system/alive:
    get:
      operationId: SystemOperations_alive
      summary: Check API liveness
      description: Liveness check for Kubernetes
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    enum:
                      - true
                required:
                  - alive
      tags:
        - System
  /api/system/health:
    get:
      operationId: SystemOperations_health
      summary: Check API health
      description: Health check endpoint
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.HealthStatus"
        "503":
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.HealthStatus"
      tags:
        - System
  /api/system/metrics:
    get:
      operationId: SystemOperations_metrics
      summary: Get API metrics
      description: Get API metrics
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - System
  /api/system/ready:
    get:
      operationId: SystemOperations_ready
      summary: Check API readiness
      description: Readiness check for Kubernetes
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                required:
                  - ready
        "503":
          description: Service unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                  reason:
                    type: string
                required:
                  - ready
      tags:
        - System
  /api/system/version:
    get:
      operationId: SystemOperations_version
      summary: Get API version
      description: Get API version and build information
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  buildTime:
                    type: string
                    format: date-time
                  gitCommit:
                    type: string
                  gitBranch:
                    type: string
                  environment:
                    type: string
                required:
                  - version
                  - buildTime
      tags:
        - System
  /api/v1/admin/auth/trusted-ip/{userId}:
    post:
      operationId: AdminAuthOperations_addTrustedIp
      description: Add trusted IP address for a user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Admin - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ipAddress:
                  type: string
              required:
                - ipAddress
    delete:
      operationId: AdminAuthOperations_removeTrustedIp
      description: Remove trusted IP address for a user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: ipAddress
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Admin - Authentication
  /api/v1/admin/auth/unlock/{userId}:
    post:
      operationId: AdminAuthOperations_unlockAccount
      description: Unlock a locked user account
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Admin - Authentication
  /api/v1/attachments:
    get:
      operationId: AttachmentOperations_list
      description: 添付ファイルの一覧取得
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
          explode: false
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.PaginatedAttachments"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
  /api/v1/attachments/share-links/{shareLinkId}:
    delete:
      operationId: AttachmentOperations_deleteShareLink
      description: 共有リンクの削除
      parameters:
        - name: shareLinkId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
      tags:
        - Attachments
  /api/v1/attachments/upload:
    post:
      operationId: AttachmentOperations_uploadFile
      description: |-
        ファイルの直接アップロード
        JSONでファイル情報をアップロード
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Attachment"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UploadAttachmentRequest"
  /api/v1/attachments/upload-url:
    post:
      operationId: AttachmentOperations_getUploadUrl
      description: |-
        署名付きアップロードURLの取得
        クライアントが直接ストレージにアップロードするためのURL
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.UploadUrlResponse"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.GetUploadUrlRequest"
  /api/v1/attachments/{attachmentId}:
    get:
      operationId: AttachmentOperations_get
      description: 添付ファイル情報の取得
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Attachment"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
    delete:
      operationId: AttachmentOperations_delete
      description: 添付ファイルの削除
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
      tags:
        - Attachments
  /api/v1/attachments/{attachmentId}/download-url:
    get:
      operationId: AttachmentOperations_getDownloadUrl
      description: 署名付きダウンロードURLの取得
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
        - name: inline
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.DownloadUrlResponse"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
  /api/v1/attachments/{attachmentId}/share-links:
    post:
      operationId: AttachmentOperations_createShareLink
      description: 共有リンクの作成
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.ShareLink"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateShareLinkRequest"
    get:
      operationId: AttachmentOperations_listShareLinks
      description: 共有リンクの一覧取得
      parameters:
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/Models.ShareLink"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Attachments
  /api/v1/auth/2fa/backup-codes:
    post:
      operationId: AuthOperations_generateBackupCodes
      description: Generate new backup codes for 2FA
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  backupCodes:
                    type: array
                    items:
                      type: string
                required:
                  - backupCodes
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TwoFactorVerifyRequest"
  /api/v1/auth/2fa/disable:
    post:
      operationId: AuthOperations_disableTwoFactor
      description: Disable two-factor authentication
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TwoFactorDisableRequest"
  /api/v1/auth/2fa/enable:
    post:
      operationId: AuthOperations_enableTwoFactor
      description: Enable two-factor authentication
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.TwoFactorSetupResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TwoFactorEnableRequest"
  /api/v1/auth/2fa/qr-code:
    get:
      operationId: AuthOperations_getTwoFactorQRCode
      description: Get QR code for 2FA setup
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.TwoFactorSetupResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/2fa/verify:
    post:
      operationId: AuthOperations_verifyTwoFactor
      description: Verify two-factor authentication code
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TwoFactorVerifyRequest"
  /api/v1/auth/change-password:
    post:
      operationId: AuthOperations_changePassword
      description: Change password
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PasswordChangeRequest"
  /api/v1/auth/forgot-password:
    post:
      operationId: AuthOperations_forgotPassword
      description: Request password reset
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "429":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PasswordResetRequest"
      security:
        - {}
  /api/v1/auth/login:
    post:
      operationId: AuthOperations_login
      description: Login with email and password
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.LoginResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "423":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.LoginRequest"
      security:
        - {}
  /api/v1/auth/logout:
    post:
      operationId: AuthOperations_logout
      description: Logout and invalidate session
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/logout-all:
    post:
      operationId: AuthOperations_logoutAll
      description: Logout from all sessions
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/me:
    get:
      operationId: AuthOperations_getCurrentUser
      description: Get current user information
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.User"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/refresh:
    post:
      operationId: AuthOperations_refreshToken
      description: Refresh access token
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.LoginResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TokenRefreshRequest"
      security:
        - {}
  /api/v1/auth/register:
    post:
      operationId: AuthOperations_register
      description: Register a new user account
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.User"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.RegisterRequest"
      security:
        - {}
  /api/v1/auth/reset-password:
    post:
      operationId: AuthOperations_resetPassword
      description: Reset password with token
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PasswordResetConfirmRequest"
      security:
        - {}
  /api/v1/auth/reset-password/verify:
    get:
      operationId: AuthOperations_verifyResetToken
      description: Verify password reset token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      security:
        - {}
  /api/v1/auth/sessions:
    get:
      operationId: AuthOperations_getSessions
      description: Get active sessions
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.SessionListResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/sessions/{sessionId}:
    delete:
      operationId: AuthOperations_revokeSession
      description: Revoke a specific session
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/auth/verify-email/confirm:
    post:
      operationId: AuthOperations_confirmEmailVerification
      description: Confirm email verification
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.EmailVerificationRequest"
      security:
        - {}
  /api/v1/auth/verify-email/send:
    post:
      operationId: AuthOperations_sendEmailVerification
      description: Send email verification
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.AuthSuccessResponse"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "429":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Authentication
  /api/v1/bookings:
    get:
      operationId: BookingOperations_list
      summary: List bookings
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.BookingStatusCodeType"
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.BookingDetail"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Bookings
    post:
      operationId: BookingOperations_create
      summary: Create booking
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateBookingRequest"
  /api/v1/bookings/{id}:
    get:
      operationId: BookingOperations_get
      summary: Get booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.BookingDetail"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
    patch:
      operationId: BookingOperations_update
      summary: Update booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateBookingRequest"
    delete:
      operationId: BookingOperations_delete
      summary: Delete booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
  /api/v1/bookings/{id}/cancel:
    post:
      operationId: BookingOperations_cancel
      summary: Cancel booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                cancelReservations:
                  type: boolean
  /api/v1/bookings/{id}/confirm:
    post:
      operationId: BookingOperations_confirm
      summary: Confirm booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
  /api/v1/bookings/{id}/payment:
    post:
      operationId: BookingOperations_processPayment
      summary: Process payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  booking:
                    $ref: "#/components/schemas/Models.Booking"
                  paymentId:
                    $ref: "#/components/schemas/Models.PaymentId"
                required:
                  - booking
                  - paymentId
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  $ref: "#/components/schemas/Models.PaymentMethodType"
                amount:
                  $ref: "#/components/schemas/Models.Money"
                transactionId:
                  type: string
              required:
                - paymentMethod
                - amount
  /api/v1/bookings/{id}/reservations:
    post:
      operationId: BookingOperations_addReservation
      summary: Add reservation to booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId:
                  $ref: "#/components/schemas/Models.ReservationId"
              required:
                - reservationId
  /api/v1/bookings/{id}/reservations/{reservationId}:
    delete:
      operationId: BookingOperations_removeReservation
      summary: Remove reservation from booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.BookingId"
        - name: reservationId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Booking"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Bookings
  /api/v1/customers/:
    get:
      operationId: CustomerCrud_list
      summary: List {Name} resources
      description: List resources with pagination and filtering
      parameters:
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.search"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.tags"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.registeredFrom"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.registeredTo"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.status"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.loyaltyTier"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            X-RateLimit-Limit:
              required: true
              description: Request limit per window
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: Remaining requests in current window
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: Window reset timestamp
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: Retry after (seconds) when rate limited
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Customer"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "429":
          description: Client error
          headers:
            X-RateLimit-Limit:
              required: true
              description: Request limit per window
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: Remaining requests in current window
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: Window reset timestamp
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: Retry after (seconds) when rate limited
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
    post:
      operationId: CustomerCrud_create
      summary: Create new {Name}
      description: Create a new resource
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateCustomerRequest"
  /api/v1/customers/batch/get:
    post:
      operationId: CustomerCrud_batchGet
      summary: Batch get {Name} resources
      description: Batch get multiple resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.BatchGetRequest"
  /api/v1/customers/bulk:
    post:
      operationId: CustomerCrud_bulkCreate
      summary: Bulk create {Name} resources
      description: Bulk create resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Customer"
                          description: Processed result
                    description: Successfully processed items
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: Error details
                    description: Failed items
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: Summary statistics
                description: Response from bulk operations
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.CreateCustomerRequest"
                  minItems: 1
                  maxItems: 100
                  description: Array of items to process
                continueOnError:
                  type: boolean
                  description: Whether to continue on error
                  default: false
                transactional:
                  type: boolean
                  description: Whether to process in transaction
                  default: true
              description: Request for bulk operations
    put:
      operationId: CustomerCrud_bulkUpdate
      summary: Bulk update {Name} resources
      description: Bulk update resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Customer"
                          description: Processed result
                    description: Successfully processed items
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: Error details
                    description: Failed items
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: Summary statistics
                description: Response from bulk operations
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      contactInfo:
                        $ref: "#/components/schemas/Models.ContactInfo"
                      preferences:
                        type: string
                      notes:
                        type: string
                      tags:
                        type: array
                        items:
                          type: string
                      birthDate:
                        type: string
                        format: date
                      id:
                        $ref: "#/components/schemas/Models.CustomerId"
                    required:
                      - id
                  minItems: 1
                  maxItems: 100
                  description: Array of items to process
                continueOnError:
                  type: boolean
                  description: Whether to continue on error
                  default: false
                transactional:
                  type: boolean
                  description: Whether to process in transaction
                  default: true
              description: Request for bulk operations
    delete:
      operationId: CustomerCrud_bulkDelete
      summary: Bulk delete {Name} resources
      description: Bulk delete resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        result:
                          type: object
                          properties:
                            id:
                              $ref: "#/components/schemas/Models.CustomerId"
                            deleted:
                              type: boolean
                          required:
                            - id
                            - deleted
                          description: Processed result
                    description: Successfully processed items
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: Error details
                    description: Failed items
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: Summary statistics
                description: Response from bulk operations
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.CustomerId"
                permanent:
                  type: boolean
              required:
                - ids
  /api/v1/customers/export:
    post:
      operationId: CustomerCrud_export
      summary: Export {Name} search results
      description: Export search results
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "202":
          description: The request has been accepted for processing, but processing has not yet completed.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum:
                      - pending
                  estimatedTime:
                    type: integer
                    format: int32
                required:
                  - jobId
                  - status
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                search:
                  type: string
                  description: Search in customer name, email, or phone
                tags:
                  type: array
                  items:
                    type: string
                  description: Filter by customer tags
                registeredFrom:
                  type: string
                  format: date-time
                  description: Filter by registration date from
                registeredTo:
                  type: string
                  format: date-time
                  description: Filter by registration date to
                status:
                  type: string
                  enum:
                    - active
                    - inactive
                    - suspended
                    - deleted
                    - blacklisted
                  description: Filter by customer status
                loyaltyTier:
                  type: string
                  enum:
                    - bronze
                    - silver
                    - gold
                    - platinum
                  description: Filter by loyalty tier
                q:
                  type: string
                  description: Full-text search query
                filter:
                  type: string
                  description: Filter expression (e.g., 'status:active AND category:premium')
                fields:
                  type: string
                  description: Fields to include in response
                exclude:
                  type: string
                  description: Fields to exclude from response
                facets:
                  type: boolean
                  description: Enable faceted search results
                  default: false
                facetFields:
                  type: array
                  items:
                    type: string
                  description: Facet fields to aggregate
                limit:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 100
                  description: Maximum number of items to return (1-100)
                  default: 20
                cursor:
                  type: string
                  description: Cursor for the next page
                sortBy:
                  type: string
                  description: Field to sort by
                sortOrder:
                  type: string
                  enum:
                    - asc
                    - desc
                  description: Sort order
                  default: asc
                format:
                  type: string
                  enum:
                    - csv
                    - json
                    - excel
                exportFields:
                  type: array
                  items:
                    type: string
              required:
                - format
  /api/v1/customers/merge:
    post:
      operationId: CustomerOperations_merge
      summary: Merge customer records
      description: Merge customer records
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                primaryCustomerId:
                  allOf:
                    - $ref: "#/components/schemas/Models.CustomerId"
                  description: Primary customer ID to keep
                secondaryCustomerId:
                  allOf:
                    - $ref: "#/components/schemas/Models.CustomerId"
                  description: Secondary customer ID to merge and delete
                conflictResolution:
                  type: string
                  enum:
                    - keep_primary
                    - keep_secondary
                    - keep_newest
                  description: Strategy for handling conflicts
              required:
                - primaryCustomerId
                - secondaryCustomerId
  /api/v1/customers/search:
    get:
      operationId: CustomerCrud_search
      summary: Search {Name} resources
      description: Advanced search with facets
      parameters:
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.search"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.tags"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.registeredFrom"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.registeredTo"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.status"
        - $ref: "#/components/parameters/Operations.CustomerSearchParams.loyaltyTier"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - meta
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Customer"
                    description: Search results
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.SearchMeta"
                    description: Search metadata
                  facets:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/components/schemas/Models.Facet"
                    description: Faceted aggregations
                description: Search response with faceted results
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}:
    get:
      operationId: CustomerCrud_get
      summary: Get {Name} by ID
      description: Get a single resource by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: fields
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-None-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
            Last-Modified:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "304":
          description: The client has made a conditional request and the resource has not been modified.
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
    put:
      operationId: CustomerCrud_update
      summary: Update {Name}
      description: Update a resource (full update)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateCustomerRequest"
    patch:
      operationId: CustomerCrud_patch
      summary: Partially update {Name}
      description: Partially update a resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/Models.FieldMask"
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateCustomerRequestUpdate"
    delete:
      operationId: CustomerCrud_delete
      summary: Delete {Name}
      description: Delete a resource (soft delete by default)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: permanent
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/bookings:
    get:
      operationId: CustomerOperations_getBookings
      summary: Get customer bookings
      description: Get customer bookings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.BookingStatusCodeType"
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.BookingDetail"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/deletion-request:
    post:
      operationId: CustomerOperations_requestDeletion
      summary: Request customer data deletion
      description: Request customer data deletion (GDPR compliance)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "202":
          description: The request has been accepted for processing, but processing has not yet completed.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    properties:
                      requestId:
                        type: string
                        description: Deletion request ID
                      scheduledDate:
                        type: string
                        format: date-time
                        description: Scheduled deletion date
                      gracePeriodDays:
                        type: integer
                        format: int32
                        description: Grace period in days
                    required:
                      - requestId
                      - scheduledDate
                      - gracePeriodDays
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for deletion
                confirmed:
                  type: boolean
                  description: Confirm understanding of consequences
              required:
                - reason
                - confirmed
  /api/v1/customers/{id}/export:
    get:
      operationId: CustomerOperations_exportData
      summary: Export customer data
      description: Export customer data (GDPR compliance)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: format
          in: query
          required: false
          description: Export format
          schema:
            type: string
            enum:
              - json
              - csv
              - pdf
            default: json
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            Content-Disposition:
              required: true
              schema:
                type: string
          content:
            "*/*":
              schema:
                type: string
                format: binary
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/history:
    get:
      operationId: CustomerCrud_getHistory
      summary: Get {Name} audit history
      description: Get audit history for a resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Operations.AuditEntry"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/loyalty-points:
    post:
      operationId: CustomerOperations_addLoyaltyPoints
      summary: Add loyalty points
      description: Add loyalty points
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    properties:
                      balance:
                        type: integer
                        format: int32
                        description: New points balance
                      transactionId:
                        type: string
                        description: Transaction ID
                    required:
                      - balance
                      - transactionId
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                points:
                  type: integer
                  format: int32
                  minimum: 1
                  description: Points to add
                reason:
                  type: string
                  description: Reason for adding points
                referenceId:
                  type: string
                  description: Reference ID (e.g., booking ID)
              required:
                - points
                - reason
  /api/v1/customers/{id}/preferences:
    put:
      operationId: CustomerOperations_updatePreferences
      summary: Update customer preferences
      description: Update customer preferences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Operations.CustomerPreferences"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Operations.CustomerPreferences"
  /api/v1/customers/{id}/profile:
    get:
      operationId: CustomerOperations_getProfile
      summary: Get customer profile
      description: Get customer profile with extended information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.CustomerProfile"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/reservations:
    get:
      operationId: CustomerOperations_getReservations
      summary: Get customer reservations
      description: Get customer reservations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.ReservationStatusType"
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ReservationDetail"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/restore:
    post:
      operationId: CustomerCrud_restore
      summary: Restore deleted {Name}
      description: Restore a deleted resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/statistics:
    get:
      operationId: CustomerOperations_getStatistics
      summary: Get customer statistics
      description: Get customer statistics
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: period
          in: query
          required: false
          description: Period for statistics (e.g., '7d', '1m', '3m', '1y')
          schema:
            type: string
            default: 1y
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Operations.CustomerStatistics"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/customers/{id}/versions/{version}:
    get:
      operationId: CustomerCrud_getVersion
      summary: Get {Name} version
      description: Get specific version of a resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: version
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Customer"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Customers
  /api/v1/reservations:
    get:
      operationId: ReservationOperations_list
      summary: List reservations
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.ReservationStatusType"
          explode: false
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ReservationDetail"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reservations
    post:
      operationId: ReservationOperations_create
      summary: Create reservation
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateReservationRequest"
  /api/v1/reservations/{id}:
    get:
      operationId: ReservationOperations_get
      summary: Get reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ReservationDetail"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
    patch:
      operationId: ReservationOperations_update
      summary: Update reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateReservationRequest"
  /api/v1/reservations/{id}/cancel:
    post:
      operationId: ReservationOperations_cancel
      summary: Cancel reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
  /api/v1/reservations/{id}/complete:
    post:
      operationId: ReservationOperations_complete
      summary: Complete reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
  /api/v1/reservations/{id}/reschedule:
    post:
      operationId: ReservationOperations_reschedule
      summary: Reschedule reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReservationId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Reservation"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newStartTime:
                  type: string
                  format: date-time
                staffId:
                  $ref: "#/components/schemas/Models.StaffId"
              required:
                - newStartTime
  /api/v1/reviews:
    get:
      operationId: ReviewOperations_list
      summary: List reviews
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: bookingId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.BookingId"
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: minRating
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
        - name: isVerified
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Review"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reviews
    post:
      operationId: ReviewOperations_create
      summary: Create review
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Review"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateReviewRequest"
  /api/v1/reviews/{id}:
    get:
      operationId: ReviewOperations_get
      summary: Get review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Review"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
    patch:
      operationId: ReviewOperations_update
      summary: Update review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Review"
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateReviewRequest"
    delete:
      operationId: ReviewOperations_delete
      summary: Delete review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "403":
          description: Access is forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
  /api/v1/reviews/{id}/helpful:
    post:
      operationId: ReviewOperations_markHelpful
      summary: Mark review as helpful
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  helpfulCount:
                    type: integer
                    format: int32
                required:
                  - helpfulCount
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
  /api/v1/reviews/{id}/report:
    post:
      operationId: ReviewOperations_report
      summary: Report review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ReviewId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportId:
                    type: string
                required:
                  - reportId
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                details:
                  type: string
              required:
                - reason
  /api/v1/salons/:
    get:
      operationId: SalonCrud_list
      summary: List {Name} resources
      description: List resources with pagination and filtering
      parameters:
        - $ref: "#/components/parameters/Operations.SalonSearchParams.city"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.category"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.minRating"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.maxDistance"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.lat"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.lon"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.features"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.openNow"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.openAt"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            X-RateLimit-Limit:
              required: true
              description: Request limit per window
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: Remaining requests in current window
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: Window reset timestamp
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: Retry after (seconds) when rate limited
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Salon"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "429":
          description: Client error
          headers:
            X-RateLimit-Limit:
              required: true
              description: Request limit per window
              schema:
                type: integer
                format: int32
            X-RateLimit-Remaining:
              required: true
              description: Remaining requests in current window
              schema:
                type: integer
                format: int32
            X-RateLimit-Reset:
              required: true
              description: Window reset timestamp
              schema:
                type: integer
                format: int32
            Retry-After:
              required: false
              description: Retry after (seconds) when rate limited
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
    post:
      operationId: SalonCrud_create
      summary: Create new {Name}
      description: Create a new resource
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateSalonRequest"
  /api/v1/salons/batch/get:
    post:
      operationId: SalonCrud_batchGet
      summary: Batch get {Name} resources
      description: Batch get multiple resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Salon"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.BatchGetRequest"
  /api/v1/salons/bulk:
    post:
      operationId: SalonCrud_bulkCreate
      summary: Bulk create {Name} resources
      description: Bulk create resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Salon"
                          description: Processed result
                    description: Successfully processed items
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: Error details
                    description: Failed items
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: Summary statistics
                description: Response from bulk operations
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.CreateSalonRequest"
                  minItems: 1
                  maxItems: 100
                  description: Array of items to process
                continueOnError:
                  type: boolean
                  description: Whether to continue on error
                  default: false
                transactional:
                  type: boolean
                  description: Whether to process in transaction
                  default: true
              description: Request for bulk operations
    put:
      operationId: SalonCrud_bulkUpdate
      summary: Bulk update {Name} resources
      description: Bulk update resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        result:
                          allOf:
                            - $ref: "#/components/schemas/Models.Salon"
                          description: Processed result
                    description: Successfully processed items
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: Error details
                    description: Failed items
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: Summary statistics
                description: Response from bulk operations
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      description:
                        type: string
                      address:
                        $ref: "#/components/schemas/Models.Address"
                      contactInfo:
                        $ref: "#/components/schemas/Models.ContactInfo"
                      openingHours:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.OpeningHours"
                      businessHours:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.BusinessHours"
                      imageUrls:
                        type: array
                        items:
                          type: string
                      features:
                        type: array
                        items:
                          type: string
                      id:
                        $ref: "#/components/schemas/Models.SalonId"
                    required:
                      - id
                  minItems: 1
                  maxItems: 100
                  description: Array of items to process
                continueOnError:
                  type: boolean
                  description: Whether to continue on error
                  default: false
                transactional:
                  type: boolean
                  description: Whether to process in transaction
                  default: true
              description: Request for bulk operations
    delete:
      operationId: SalonCrud_bulkDelete
      summary: Bulk delete {Name} resources
      description: Bulk delete resources
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "207":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                  - failed
                  - summary
                properties:
                  succeeded:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - result
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        result:
                          type: object
                          properties:
                            id:
                              $ref: "#/components/schemas/Models.SalonId"
                            deleted:
                              type: boolean
                          required:
                            - id
                            - deleted
                          description: Processed result
                    description: Successfully processed items
                  failed:
                    type: array
                    items:
                      type: object
                      required:
                        - index
                        - error
                      properties:
                        index:
                          type: integer
                          format: int32
                          description: Index in the original request
                        error:
                          allOf:
                            - $ref: "#/components/schemas/Models.ProblemDetails"
                          description: Error details
                    description: Failed items
                  summary:
                    allOf:
                      - $ref: "#/components/schemas/Models.BulkSummary"
                    description: Summary statistics
                description: Response from bulk operations
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.SalonId"
                permanent:
                  type: boolean
              required:
                - ids
  /api/v1/salons/export:
    post:
      operationId: SalonCrud_export
      summary: Export {Name} search results
      description: Export search results
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "202":
          description: The request has been accepted for processing, but processing has not yet completed.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum:
                      - pending
                  estimatedTime:
                    type: integer
                    format: int32
                required:
                  - jobId
                  - status
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                city:
                  type: string
                  description: Filter by city name
                category:
                  type: string
                  enum:
                    - cut
                    - color
                    - perm
                    - treatment
                    - spa
                    - other
                  description: Filter by service category
                minRating:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 5
                  description: Filter by minimum rating
                maxDistance:
                  type: number
                  format: float
                  minimum: 0
                  description: Maximum distance in kilometers
                lat:
                  type: number
                  format: double
                  description: Reference latitude for distance calculation
                lon:
                  type: number
                  format: double
                  description: Reference longitude for distance calculation
                features:
                  type: string
                  description: Filter by features (comma-separated)
                openNow:
                  type: boolean
                  description: Filter by opening hours
                openAt:
                  type: string
                  format: date-time
                  description: Filter by specific day and time
                q:
                  type: string
                  description: Full-text search query
                filter:
                  type: string
                  description: Filter expression (e.g., 'status:active AND category:premium')
                fields:
                  type: string
                  description: Fields to include in response
                exclude:
                  type: string
                  description: Fields to exclude from response
                facets:
                  type: boolean
                  description: Enable faceted search results
                  default: false
                facetFields:
                  type: array
                  items:
                    type: string
                  description: Facet fields to aggregate
                limit:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 100
                  description: Maximum number of items to return (1-100)
                  default: 20
                cursor:
                  type: string
                  description: Cursor for the next page
                sortBy:
                  type: string
                  description: Field to sort by
                sortOrder:
                  type: string
                  enum:
                    - asc
                    - desc
                  description: Sort order
                  default: asc
                format:
                  type: string
                  enum:
                    - csv
                    - json
                    - excel
                exportFields:
                  type: array
                  items:
                    type: string
              required:
                - format
  /api/v1/salons/nearby:
    get:
      operationId: SalonOperations_getNearby
      summary: Get nearby salons
      description: Get nearby salons
      parameters:
        - name: lat
          in: query
          required: true
          description: Latitude
          schema:
            type: number
            format: double
          explode: false
        - name: lon
          in: query
          required: true
          description: Longitude
          schema:
            type: number
            format: double
          explode: false
        - name: radius
          in: query
          required: false
          description: Radius in kilometers
          schema:
            type: number
            format: float
            minimum: 0.1
            maximum: 100
            default: 5
          explode: false
        - name: category
          in: query
          required: false
          description: Service category filter
          schema:
            $ref: "#/components/schemas/Models.ServiceCategoryType"
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Operations.SalonWithDistance"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/recommendations:
    get:
      operationId: SalonOperations_getRecommendations
      summary: Get personalized salon recommendations
      description: Get salon recommendations
      parameters:
        - name: customerId
          in: query
          required: false
          description: Customer ID for personalization
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: categories
          in: query
          required: false
          description: Service categories of interest
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Models.ServiceCategoryType"
          explode: false
        - name: priceRange
          in: query
          required: false
          description: Price range preference
          schema:
            type: string
            enum:
              - budget
              - medium
              - premium
          explode: false
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Operations.SalonRecommendation"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/search:
    get:
      operationId: SalonCrud_search
      summary: Search {Name} resources
      description: Advanced search with facets
      parameters:
        - $ref: "#/components/parameters/Operations.SalonSearchParams.city"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.category"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.minRating"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.maxDistance"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.lat"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.lon"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.features"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.openNow"
        - $ref: "#/components/parameters/Operations.SalonSearchParams.openAt"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.q"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.filter"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.fields"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.exclude"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facets"
        - $ref: "#/components/parameters/Models.AdvancedSearchParams.facetFields"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - meta
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Salon"
                    description: Search results
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.SearchMeta"
                    description: Search metadata
                  facets:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/components/schemas/Models.Facet"
                    description: Faceted aggregations
                description: Search response with faceted results
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}:
    get:
      operationId: SalonCrud_get
      summary: Get {Name} by ID
      description: Get a single resource by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: fields
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-None-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
            Last-Modified:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "304":
          description: The client has made a conditional request and the resource has not been modified.
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
    put:
      operationId: SalonCrud_update
      summary: Update {Name}
      description: Update a resource (full update)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateSalonRequest"
    patch:
      operationId: SalonCrud_patch
      summary: Partially update {Name}
      description: Partially update a resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/Models.FieldMask"
      responses:
        "200":
          description: The request has succeeded.
          headers:
            ETag:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "422":
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateSalonRequestUpdate"
    delete:
      operationId: SalonCrud_delete
      summary: Delete {Name}
      description: Delete a resource (soft delete by default)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: permanent
          in: query
          required: false
          schema:
            type: boolean
            default: false
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
        - name: If-Match
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/availability:
    post:
      operationId: SalonOperations_checkAvailability
      summary: Check salon availability
      description: Check salon availability
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Operations.SalonAvailabilityResponse"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Operations.SalonAvailabilityRequest"
  /api/v1/salons/{id}/history:
    get:
      operationId: SalonCrud_getHistory
      summary: Get {Name} audit history
      description: Get audit history for a resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.limit"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.cursor"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortBy"
        - $ref: "#/components/parameters/Models.CursorPaginationParams.sortOrder"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - meta
                  - links
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Operations.AuditEntry"
                    description: Array of items for current page
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationMeta"
                    description: Pagination metadata
                  links:
                    allOf:
                      - $ref: "#/components/schemas/Models.PaginationLinks"
                    description: Navigation links
                description: Paginated response with cursor navigation
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/images/{imageId}:
    delete:
      operationId: SalonOperations_deleteImage
      summary: Delete salon image
      description: Delete salon image
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: imageId
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/restore:
    post:
      operationId: SalonCrud_restore
      summary: Restore deleted {Name}
      description: Restore a deleted resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/staff/{staffId}/schedule:
    put:
      operationId: SalonOperations_updateStaffSchedule
      summary: Update staff schedule
      description: Manage salon staff schedule
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Operations.StaffSchedule"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                regularHours:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.BusinessHours"
                exceptions:
                  type: array
                  items:
                    $ref: "#/components/schemas/Operations.ScheduleException"
                effectiveFrom:
                  type: string
                  format: date-time
                effectiveTo:
                  type: string
                  format: date-time
              required:
                - regularHours
                - effectiveFrom
  /api/v1/salons/{id}/statistics:
    get:
      operationId: SalonOperations_getStatistics
      summary: Get salon statistics
      description: Get salon statistics
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: period
          in: query
          required: false
          description: Period for statistics (e.g., '7d', '1m', '3m')
          schema:
            type: string
            default: 1m
          explode: false
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Operations.SalonStatistics"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{id}/subscribe:
    post:
      operationId: SalonOperations_subscribe
      summary: Subscribe to salon updates
      description: Subscribe to salon updates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    properties:
                      subscriptionId:
                        type: string
                      status:
                        type: string
                        enum:
                          - active
                      expiresAt:
                        type: string
                        format: date-time
                    required:
                      - subscriptionId
                      - status
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  $ref: "#/components/schemas/Models.CustomerId"
                notificationTypes:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.NotificationType"
                categories:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.ServiceCategoryType"
              required:
                - customerId
                - notificationTypes
  /api/v1/salons/{id}/versions/{version}:
    get:
      operationId: SalonCrud_getVersion
      summary: Get {Name} version
      description: Get specific version of a resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: version
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Models.Salon"
                    description: Response data
                  meta:
                    allOf:
                      - $ref: "#/components/schemas/Models.ResponseMeta"
                    description: Response metadata
                  links:
                    type: object
                    additionalProperties:
                      type: string
                    description: Related links
                description: Standard successful response wrapper
        "401":
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ProblemDetails"
      tags:
        - Salons
  /api/v1/salons/{salonId}/available-slots:
    get:
      operationId: AvailabilityOperations_getAvailableSlots
      summary: Get available slots
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: serviceId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
          explode: false
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
        - name: duration
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Models.AvailableSlot"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Reservations
  /api/v1/salons/{salonId}/available-slots/check:
    post:
      operationId: AvailabilityOperations_checkAvailability
      summary: Check availability
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAvailable:
                    type: boolean
                  conflicts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ReservationId"
                required:
                  - isAvailable
      tags:
        - Reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staffId:
                  $ref: "#/components/schemas/Models.StaffId"
                serviceId:
                  $ref: "#/components/schemas/Models.ServiceId"
                startTime:
                  type: string
                  format: date-time
              required:
                - staffId
                - serviceId
                - startTime
  /api/v1/salons/{salonId}/reviews:
    get:
      operationId: SalonReviewOperations_getSalonReviews
      summary: Get salon reviews
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum:
              - recent
              - rating
              - helpful
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Review"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reviews
  /api/v1/salons/{salonId}/reviews/summary:
    get:
      operationId: SalonReviewOperations_getSummary
      summary: Get salon reviews summary
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ReviewSummary"
      tags:
        - Reviews
  /api/v1/salons/{salonId}/services:
    get:
      operationId: ServiceOperations_list
      summary: List salon services
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: category
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.ServiceCategoryType"
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Service"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Services
    post:
      operationId: ServiceOperations_create
      summary: Create service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Service"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateServiceRequest"
  /api/v1/salons/{salonId}/services/bulk:
    patch:
      operationId: ServiceOperations_bulkUpdate
      summary: Bulk update services
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.ServiceId"
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceId:
                          $ref: "#/components/schemas/Models.ServiceId"
                        error:
                          type: string
                      required:
                        - serviceId
                        - error
                required:
                  - updated
                  - failed
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.ServiceId"
                updates:
                  $ref: "#/components/schemas/Models.UpdateServiceRequest"
  /api/v1/salons/{salonId}/services/{id}:
    get:
      operationId: ServiceOperations_get
      summary: Get service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Service"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
    put:
      operationId: ServiceOperations_update
      summary: Update service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Service"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateServiceRequest"
    delete:
      operationId: ServiceOperations_delete
      summary: Delete service
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.ServiceId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
  /api/v1/salons/{salonId}/staff:
    get:
      operationId: StaffOperations_list
      summary: List staff members
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Staff"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Staff
    post:
      operationId: StaffOperations_create
      summary: Create staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          headers:
            location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Staff"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.CreateStaffRequest"
  /api/v1/salons/{salonId}/staff/{id}:
    get:
      operationId: StaffOperations_get
      summary: Get staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Staff"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
    put:
      operationId: StaffOperations_update
      summary: Update staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Staff"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UpdateStaffRequest"
    delete:
      operationId: StaffOperations_delete
      summary: Delete staff member
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
  /api/v1/salons/{salonId}/staff/{id}/availability:
    get:
      operationId: StaffOperations_getAvailability
      summary: Get staff availability
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Models.StaffAvailability"
      tags:
        - Staff
    put:
      operationId: StaffOperations_updateAvailability
      summary: Update staff availability
      parameters:
        - name: salonId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Models.StaffAvailability"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Staff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Models.StaffAvailability"
  /api/v1/service-categories:
    get:
      operationId: CategoryOperations_listCategories
      summary: List service categories
      parameters:
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.CategoryModel"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Services
    post:
      operationId: CategoryOperations_createCategory
      summary: Create service category
      parameters: []
      responses:
        "201":
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.CategoryModel"
        "400":
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  $ref: "#/components/schemas/Models.CategoryId"
                displayOrder:
                  type: integer
                  format: int32
              required:
                - name
                - description
                - displayOrder
  /api/v1/service-categories/{id}:
    put:
      operationId: CategoryOperations_updateCategory
      summary: Update service category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CategoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.CategoryModel"
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  $ref: "#/components/schemas/Models.CategoryId"
                displayOrder:
                  type: integer
                  format: int32
                isActive:
                  type: boolean
    delete:
      operationId: CategoryOperations_deleteCategory
      summary: Delete service category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CategoryId"
      responses:
        "204":
          description: "There is no content to send for this request, but the headers may be useful. "
        "404":
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
        "409":
          description: The request conflicts with the current state of the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.Error"
      tags:
        - Services
  /api/v1/share/{shareToken}:
    get:
      operationId: ShareOperations_getSharedFile
      description: 共有リンクからファイル情報を取得
      parameters:
        - name: shareToken
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.Attachment"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Share
  /api/v1/share/{shareToken}/download:
    get:
      operationId: ShareOperations_downloadSharedFile
      description: 共有リンクからダウンロードURLを取得
      parameters:
        - name: shareToken
          in: path
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Models.DownloadUrlResponse"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
                  - $ref: "#/components/schemas/Models.Error"
      tags:
        - Share
  /api/v1/staff/search:
    get:
      operationId: GlobalStaffOperations_searchStaff
      summary: Search staff across all salons
      parameters:
        - name: specialty
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: city
          in: query
          required: false
          schema:
            type: string
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Staff"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Staff
  /api/v1/staff/{staffId}/reviews:
    get:
      operationId: StaffReviewOperations_getStaffReviews
      summary: Get staff reviews
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - total
                  - limit
                  - offset
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Models.Review"
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
      tags:
        - Reviews
  /api/v1/staff/{staffId}/reviews/summary:
    get:
      operationId: StaffReviewOperations_getStaffSummary
      summary: Get staff reviews summary
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Models.ReviewSummary"
      tags:
        - Reviews
  /inventory:
    get:
      operationId: InventoryOperations_listInventoryItems
      description: List inventory items with filters
      parameters:
        - $ref: "#/components/parameters/Models.InventorySearchParams.salonId"
        - $ref: "#/components/parameters/Models.InventorySearchParams.category"
        - $ref: "#/components/parameters/Models.InventorySearchParams.status"
        - $ref: "#/components/parameters/Models.InventorySearchParams.lowStock"
        - $ref: "#/components/parameters/Models.InventorySearchParams.expiringSoon"
        - $ref: "#/components/parameters/Models.SearchParams.q"
        - $ref: "#/components/parameters/Models.SearchParams.sortBy"
        - $ref: "#/components/parameters/Models.SearchParams.sortOrder"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.InventoryItem"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
    post:
      operationId: InventoryOperations_createInventoryItem
      description: Create new inventory item
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.InventoryItem"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.InventoryItemCreateInput"
  /inventory-alerts:
    get:
      operationId: InventoryAlertOperations_getActiveAlerts
      description: Get active inventory alerts
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - low_stock
              - expiring
              - expired
              - overstock
          explode: false
        - name: severity
          in: query
          required: false
          schema:
            type: string
            enum:
              - info
              - warning
              - critical
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.InventoryAlert"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory Alerts
  /inventory-alerts/summary:
    get:
      operationId: InventoryAlertOperations_getAlertSummary
      description: Get alert summary
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          totalAlerts:
                            type: integer
                            format: int32
                          criticalAlerts:
                            type: integer
                            format: int32
                          warningAlerts:
                            type: integer
                            format: int32
                          infoAlerts:
                            type: integer
                            format: int32
                          unacknowledged:
                            type: integer
                            format: int32
                        required:
                          - totalAlerts
                          - criticalAlerts
                          - warningAlerts
                          - infoAlerts
                          - unacknowledged
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory Alerts
  /inventory-alerts/{inventoryId}/acknowledge:
    post:
      operationId: InventoryAlertOperations_acknowledgeAlert
      description: Acknowledge alert
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.InventoryAlert"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acknowledgedBy:
                  $ref: "#/components/schemas/Models.StaffId"
                notes:
                  type: string
              required:
                - acknowledgedBy
  /inventory/expiring:
    get:
      operationId: InventoryOperations_getExpiringItems
      description: Get expiring items
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: days
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 30
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.InventoryItem"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
  /inventory/low-stock:
    get:
      operationId: InventoryOperations_getLowStockItems
      description: Get low stock items
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: threshold
          in: query
          required: false
          schema:
            type: number
            format: float
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.InventoryItem"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
  /inventory/movement:
    post:
      operationId: InventoryOperations_recordStockMovement
      description: Record stock movement
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.StockMovement"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.StockMovementInput"
  /inventory/stock-count:
    post:
      operationId: InventoryOperations_performStockCount
      description: Perform stock count
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          adjustments:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.StockMovement"
                          discrepancies:
                            type: array
                            items:
                              type: object
                              properties:
                                inventoryId:
                                  $ref: "#/components/schemas/Models.InventoryId"
                                expected:
                                  type: number
                                  format: float
                                counted:
                                  type: number
                                  format: float
                                difference:
                                  type: number
                                  format: float
                              required:
                                - inventoryId
                                - expected
                                - counted
                                - difference
                        required:
                          - adjustments
                          - discrepancies
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                salonId:
                  $ref: "#/components/schemas/Models.SalonId"
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      inventoryId:
                        $ref: "#/components/schemas/Models.InventoryId"
                      countedQuantity:
                        type: number
                        format: float
                    required:
                      - inventoryId
                      - countedQuantity
                notes:
                  type: string
              required:
                - salonId
                - items
  /inventory/value-report:
    get:
      operationId: InventoryOperations_getInventoryValueReport
      description: Get inventory value report
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: category
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          totalValue:
                            type: number
                            format: float
                          totalItems:
                            type: integer
                            format: int32
                          categories:
                            type: array
                            items:
                              type: object
                              properties:
                                category:
                                  type: string
                                value:
                                  type: number
                                  format: float
                                itemCount:
                                  type: integer
                                  format: int32
                              required:
                                - category
                                - value
                                - itemCount
                        required:
                          - totalValue
                          - totalItems
                          - categories
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
  /inventory/{id}:
    get:
      operationId: InventoryOperations_getInventoryItem
      description: Get inventory item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.InventoryItem"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
    patch:
      operationId: InventoryOperations_updateInventoryItem
      description: Update inventory item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.InventoryItem"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.InventoryItemUpdateInput"
    delete:
      operationId: InventoryOperations_deleteInventoryItem
      description: Delete inventory item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
  /inventory/{id}/movements:
    get:
      operationId: InventoryOperations_getStockMovements
      description: Get stock movement history
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.InventoryId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.StockMovement"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Inventory
  /medical-charts:
    post:
      operationId: MedicalChartOperations_createMedicalChart
      description: Create medical chart for customer
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.MedicalChart"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Medical Charts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.MedicalChartCreateInput"
    get:
      operationId: MedicalChartOperations_searchMedicalCharts
      description: Search medical charts
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: hasAllergies
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.MedicalChart"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Medical Charts
  /medical-charts/customer/{customerId}:
    get:
      operationId: MedicalChartOperations_getCustomerMedicalChart
      description: Get medical chart by customer ID
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.MedicalChart"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Medical Charts
  /medical-charts/customer/{customerId}/allergies:
    get:
      operationId: MedicalChartOperations_getCustomerAllergies
      description: Get allergy warnings for customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          customerId:
                            $ref: "#/components/schemas/Models.CustomerId"
                          allergies:
                            type: array
                            items:
                              type: string
                          avoidProducts:
                            type: array
                            items:
                              type: string
                          lastUpdated:
                            type: string
                            format: date-time
                        required:
                          - customerId
                          - allergies
                          - avoidProducts
                          - lastUpdated
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Medical Charts
  /medical-charts/{id}:
    patch:
      operationId: MedicalChartOperations_updateMedicalChart
      description: Update medical chart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.MedicalChartId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.MedicalChart"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Medical Charts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.MedicalChartUpdateInput"
  /payments:
    get:
      operationId: PaymentOperations_listPayments
      description: List payments with filters
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.PaymentStatusCodeType"
          explode: false
        - name: method
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.PaymentMethodType"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Payment"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
    post:
      operationId: PaymentOperations_createPayment
      description: Create new payment
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Payment"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PaymentCreateInput"
  /payments/calculate:
    post:
      operationId: PaymentOperations_calculatePayment
      description: Calculate payment summary
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PaymentPreview"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                services:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.ServiceId"
                discountCode:
                  type: string
                pointsToUse:
                  type: integer
                  format: int32
                customerId:
                  $ref: "#/components/schemas/Models.CustomerId"
                bookingId:
                  $ref: "#/components/schemas/Models.BookingId"
              required:
                - services
  /payments/customer/{customerId}:
    get:
      operationId: PaymentOperations_getCustomerPayments
      description: Get customer payment history
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Payment"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
  /payments/{id}:
    get:
      operationId: PaymentOperations_getPayment
      description: Get payment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Payment"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
    patch:
      operationId: PaymentOperations_updatePayment
      description: Update payment status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Payment"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PaymentUpdateInput"
  /payments/{id}/cancel:
    post:
      operationId: PaymentOperations_cancelPayment
      description: Cancel payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Payment"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
              required:
                - reason
  /payments/{id}/process:
    post:
      operationId: PaymentOperations_processPayment
      description: Process payment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Payment"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
  /payments/{id}/receipt:
    get:
      operationId: PaymentOperations_getReceipt
      description: Get payment receipt
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          receiptNumber:
                            type: string
                          payment:
                            $ref: "#/components/schemas/Models.Payment"
                          items:
                            type: array
                            items:
                              type: object
                              additionalProperties: {}
                          issuedAt:
                            type: string
                            format: date-time
                        required:
                          - receiptNumber
                          - payment
                          - items
                          - issuedAt
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
  /payments/{id}/refund:
    post:
      operationId: PaymentOperations_processRefund
      description: Process refund
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.PaymentId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Payment"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.RefundInput"
  /permissions:
    get:
      operationId: PermissionOperations_listPermissions
      description: List all permissions
      parameters:
        - name: resource
          in: query
          required: false
          schema:
            type: string
          explode: false
        - name: action
          in: query
          required: false
          schema:
            type: string
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.Permission"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Permissions
  /permissions/by-resource/{resource}:
    get:
      operationId: PermissionOperations_getPermissionsByResource
      description: Get permissions by resource
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.Permission"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Permissions
  /permissions/groups:
    get:
      operationId: PermissionOperations_getPermissionGroups
      description: Get permission groups
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            resource:
                              type: string
                            permissions:
                              type: array
                              items:
                                $ref: "#/components/schemas/Models.Permission"
                          required:
                            - resource
                            - permissions
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Permissions
  /points/adjust:
    post:
      operationId: PointOperations_adjustPoints
      description: Adjust customer points
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PointTransaction"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PointTransactionCreateInput"
  /points/customer/{customerId}/balance:
    get:
      operationId: PointOperations_getPointBalance
      description: Get customer point balance
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PointInfo"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Points
  /points/customer/{customerId}/expiring:
    get:
      operationId: PointOperations_getExpiringPoints
      description: Get expiring points
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - name: days
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 30
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          customerId:
                            $ref: "#/components/schemas/Models.CustomerId"
                          expiringPoints:
                            type: integer
                            format: int32
                          expirationDate:
                            type: string
                            format: date-time
                          transactions:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.PointTransaction"
                        required:
                          - customerId
                          - expiringPoints
                          - expirationDate
                          - transactions
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Points
  /points/customer/{customerId}/transactions:
    get:
      operationId: PointOperations_getPointTransactions
      description: Get point transaction history
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.PointTransaction"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Points
  /points/earn:
    post:
      operationId: PointOperations_earnPoints
      description: Add points to customer
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PointTransaction"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PointTransactionCreateInput"
  /points/expire:
    post:
      operationId: PointOperations_processExpiredPoints
      description: Process expired points
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          processedCount:
                            type: integer
                            format: int32
                          totalPoints:
                            type: integer
                            format: int32
                        required:
                          - processedCount
                          - totalPoints
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  $ref: "#/components/schemas/Models.CustomerId"
                processBefore:
                  type: string
                  format: date-time
  /points/use:
    post:
      operationId: PointOperations_usePoints
      description: Use customer points
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PointTransaction"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Points
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PointTransactionCreateInput"
  /purchase-orders:
    get:
      operationId: PurchaseOrderOperations_listPurchaseOrders
      description: List purchase orders
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: status
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.OrderStatusType"
          explode: false
        - name: supplier
          in: query
          required: false
          schema:
            type: string
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.PurchaseOrder"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
    post:
      operationId: PurchaseOrderOperations_createPurchaseOrder
      description: Create purchase order
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PurchaseOrder"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PurchaseOrderCreateInput"
  /purchase-orders/reorder-suggestions:
    get:
      operationId: PurchaseOrderOperations_getReorderSuggestions
      description: Generate reorder suggestions
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            inventoryId:
                              $ref: "#/components/schemas/Models.InventoryId"
                            productName:
                              type: string
                            currentStock:
                              type: number
                              format: float
                            minimumStock:
                              type: number
                              format: float
                            suggestedQuantity:
                              type: number
                              format: float
                            supplier:
                              type: string
                            lastOrderDate:
                              type: string
                              format: date-time
                          required:
                            - inventoryId
                            - productName
                            - currentStock
                            - minimumStock
                            - suggestedQuantity
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
  /purchase-orders/{id}:
    get:
      operationId: PurchaseOrderOperations_getPurchaseOrder
      description: Get purchase order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PurchaseOrder"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
    patch:
      operationId: PurchaseOrderOperations_updatePurchaseOrder
      description: Update purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PurchaseOrder"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.PurchaseOrderUpdateInput"
  /purchase-orders/{id}/approve:
    post:
      operationId: PurchaseOrderOperations_approvePurchaseOrder
      description: Approve purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PurchaseOrder"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                approvedBy:
                  $ref: "#/components/schemas/Models.StaffId"
                notes:
                  type: string
              required:
                - approvedBy
  /purchase-orders/{id}/cancel:
    post:
      operationId: PurchaseOrderOperations_cancelPurchaseOrder
      description: Cancel purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PurchaseOrder"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
              required:
                - reason
  /purchase-orders/{id}/receive:
    post:
      operationId: PurchaseOrderOperations_receivePurchaseOrder
      description: Receive purchase order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.OrderId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.PurchaseOrder"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Purchase Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receivedItems:
                  type: array
                  items:
                    type: object
                    properties:
                      inventoryId:
                        $ref: "#/components/schemas/Models.InventoryId"
                      receivedQuantity:
                        type: number
                        format: float
                      notes:
                        type: string
                    required:
                      - inventoryId
                      - receivedQuantity
                deliveryNotes:
                  type: string
              required:
                - receivedItems
  /roles:
    get:
      operationId: RoleOperations_listRoles
      description: List all roles
      parameters:
        - name: isSystem
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Role"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Roles & Permissions
    post:
      operationId: RoleOperations_createRole
      description: Create new role
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Role"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.RoleCreateInput"
  /roles/system:
    get:
      operationId: RoleOperations_getSystemRoles
      description: Get system roles
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.Role"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Roles & Permissions
  /roles/{id}:
    get:
      operationId: RoleOperations_getRole
      description: Get role by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Role"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Roles & Permissions
    patch:
      operationId: RoleOperations_updateRole
      description: Update role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Role"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.RoleUpdateInput"
    delete:
      operationId: RoleOperations_deleteRole
      description: Delete role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Roles & Permissions
  /roles/{id}/clone:
    post:
      operationId: RoleOperations_cloneRole
      description: Clone role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.Role"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                displayName:
                  type: string
              required:
                - name
                - displayName
  /sales-reports:
    get:
      operationId: SalesReportOperations_getSalesReport
      description: Get sales report for a period
      parameters:
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.SalesReportQuery.groupBy"
        - $ref: "#/components/parameters/Models.SalesReportQuery.includeRefunds"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.SalesReport"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Sales Reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.SalesReportQuery"
  /sales-reports/by-category:
    get:
      operationId: SalesReportOperations_getSalesByCategory
      description: Get sales by service category
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.SalesByCategory"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Sales Reports
  /sales-reports/by-staff:
    get:
      operationId: SalesReportOperations_getSalesByStaff
      description: Get sales by staff
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.StaffPerformance"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Sales Reports
  /sales-reports/daily:
    get:
      operationId: SalesReportOperations_getDailySales
      description: Get daily sales summary
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          date:
                            type: string
                            format: date
                          sales:
                            $ref: "#/components/schemas/Models.Money"
                          transactions:
                            type: integer
                            format: int32
                          refunds:
                            $ref: "#/components/schemas/Models.Money"
                          net:
                            $ref: "#/components/schemas/Models.Money"
                        required:
                          - date
                          - sales
                          - transactions
                          - refunds
                          - net
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Sales Reports
  /sales-reports/export:
    post:
      operationId: SalesReportOperations_exportSalesReport
      description: Export sales report
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          downloadUrl:
                            type: string
                        required:
                          - downloadUrl
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Sales Reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                salonId:
                  $ref: "#/components/schemas/Models.SalonId"
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                format:
                  type: string
                  enum:
                    - csv
                    - excel
                    - pdf
              required:
                - salonId
                - startDate
                - endDate
                - format
  /sales-reports/trends:
    get:
      operationId: SalesReportOperations_getSalesTrends
      description: Get sales trends
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum:
              - daily
              - weekly
              - monthly
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          labels:
                            type: array
                            items:
                              type: string
                          sales:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Money"
                          transactions:
                            type: array
                            items:
                              type: integer
                              format: int32
                          average:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.Money"
                        required:
                          - labels
                          - sales
                          - transactions
                          - average
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Sales Reports
  /treatments:
    get:
      operationId: TreatmentOperations_listTreatments
      description: List treatment records with filters
      parameters:
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - name: customerId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
          explode: false
        - name: staffId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.StaffId"
          explode: false
        - name: treatment
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.TreatmentType"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.TreatmentRecord"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
    post:
      operationId: TreatmentOperations_createTreatment
      description: Create new treatment record
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.TreatmentRecord"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TreatmentRecordCreateInput"
  /treatments/customer/{customerId}/history:
    get:
      operationId: TreatmentOperations_getCustomerTreatmentHistory
      description: Get treatment history for a customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.CustomerId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.TreatmentRecord"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
  /treatments/staff/{staffId}:
    get:
      operationId: TreatmentOperations_getStaffTreatments
      description: Get treatments by staff member
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.StaffId"
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.TreatmentRecord"
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
  /treatments/statistics:
    get:
      operationId: TreatmentOperations_getTreatmentStatistics
      description: Get treatment statistics
      parameters:
        - name: salonId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.DateRangeFilter.startDate"
        - $ref: "#/components/parameters/Models.DateRangeFilter.endDate"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          totalTreatments:
                            type: integer
                            format: int32
                          treatmentsBy:
                            type: object
                            additionalProperties:
                              type: integer
                              format: int32
                          averageDuration:
                            type: number
                            format: float
                          topServices:
                            type: array
                            items:
                              $ref: "#/components/schemas/Models.ServiceId"
                        required:
                          - totalTreatments
                          - treatmentsBy
                          - averageDuration
                          - topServices
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
  /treatments/{id}:
    get:
      operationId: TreatmentOperations_getTreatment
      description: Get treatment record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.TreatmentRecord"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
    patch:
      operationId: TreatmentOperations_updateTreatment
      description: Update treatment record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.TreatmentRecord"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.TreatmentRecordUpdateInput"
    delete:
      operationId: TreatmentOperations_deleteTreatment
      description: Delete treatment record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
  /treatments/{id}/photos:
    post:
      operationId: TreatmentOperations_addTreatmentPhotos
      description: Add photos to treatment record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.TreatmentRecordId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.TreatmentRecord"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - Treatments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Models.AttachmentId"
  /user-roles:
    post:
      operationId: UserRoleTypeOperations_assignUserRoleType
      description: Assign role to user
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.UserRoleType"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - User Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Models.UserRoleAssignInput"
  /user-roles/bulk-assign:
    post:
      operationId: UserRoleTypeOperations_bulkAssignRoles
      description: Bulk assign roles
      parameters: []
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        properties:
                          assigned:
                            type: integer
                            format: int32
                          failed:
                            type: integer
                            format: int32
                          errors:
                            type: array
                            items:
                              type: string
                        required:
                          - assigned
                          - failed
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - User Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                roleIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Models.RoleId"
                salonId:
                  $ref: "#/components/schemas/Models.SalonId"
              required:
                - userIds
                - roleIds
  /user-roles/role/{roleId}/users:
    get:
      operationId: UserRoleTypeOperations_getUsersByRole
      description: Get users by role
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
        - $ref: "#/components/parameters/Models.PaginationParams.limit"
        - $ref: "#/components/parameters/Models.PaginationParams.offset"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                        required:
                          - data
                          - total
                          - limit
                          - offset
                        properties:
                          data:
                            type: array
                            items:
                              type: object
                              properties:
                                userId:
                                  type: string
                                userName:
                                  type: string
                                assignedAt:
                                  type: string
                                  format: date-time
                                expiresAt:
                                  type: string
                                  format: date-time
                              required:
                                - userId
                                - assignedAt
                          total:
                            type: integer
                            format: int32
                          limit:
                            type: integer
                            format: int32
                          offset:
                            type: integer
                            format: int32
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - User Roles
  /user-roles/user/{userId}:
    get:
      operationId: UserRoleTypeOperations_getUserRoleTypes
      description: Get user roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Models.UserRoleType"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - User Roles
  /user-roles/user/{userId}/role/{roleId}:
    delete:
      operationId: UserRoleTypeOperations_revokeUserRoleType
      description: Revoke user role
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
        - name: salonId
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Models.SalonId"
          explode: false
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        type: object
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - User Roles
    patch:
      operationId: UserRoleTypeOperations_updateUserRoleType
      description: Update user role
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Models.RoleId"
      responses:
        "200":
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - status
                      - data
                    properties:
                      status:
                        type: string
                        enum:
                          - success
                      data:
                        $ref: "#/components/schemas/Models.UserRoleType"
                  - type: object
                    required:
                      - status
                      - error
                    properties:
                      status:
                        type: string
                        enum:
                          - error
                      error:
                        $ref: "#/components/schemas/Models.Error"
      tags:
        - User Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expiresAt:
                  type: string
                  format: date-time
                isActive:
                  type: boolean
security:
  - BearerAuth: []
components:
  parameters:
    Models.AdvancedSearchParams.exclude:
      name: exclude
      in: query
      required: false
      description: Fields to exclude from response
      schema:
        type: string
      explode: false
    Models.AdvancedSearchParams.facetFields:
      name: facetFields
      in: query
      required: false
      description: Facet fields to aggregate
      schema:
        type: array
        items:
          type: string
      explode: false
    Models.AdvancedSearchParams.facets:
      name: facets
      in: query
      required: false
      description: Enable faceted search results
      schema:
        type: boolean
        default: false
      explode: false
    Models.AdvancedSearchParams.fields:
      name: fields
      in: query
      required: false
      description: Fields to include in response
      schema:
        type: string
      explode: false
    Models.AdvancedSearchParams.filter:
      name: filter
      in: query
      required: false
      description: Filter expression (e.g., 'status:active AND category:premium')
      schema:
        type: string
      explode: false
    Models.AdvancedSearchParams.q:
      name: q
      in: query
      required: false
      description: Full-text search query
      schema:
        type: string
      explode: false
    Models.CursorPaginationParams.cursor:
      name: cursor
      in: query
      required: false
      description: Cursor for the next page
      schema:
        type: string
      explode: false
    Models.CursorPaginationParams.limit:
      name: limit
      in: query
      required: false
      description: Maximum number of items to return (1-100)
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
      explode: false
    Models.CursorPaginationParams.sortBy:
      name: sortBy
      in: query
      required: false
      description: Field to sort by
      schema:
        type: string
      explode: false
    Models.CursorPaginationParams.sortOrder:
      name: sortOrder
      in: query
      required: false
      description: Sort order
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
      explode: false
    Models.DateRangeFilter.endDate:
      name: endDate
      in: query
      required: false
      schema:
        type: string
        format: date-time
      explode: false
    Models.DateRangeFilter.startDate:
      name: startDate
      in: query
      required: false
      schema:
        type: string
        format: date-time
      explode: false
    Models.FieldMask:
      name: updateMask
      in: query
      required: false
      description: Comma-separated list of field paths to update
      schema:
        type: string
      explode: false
    Models.InventorySearchParams.category:
      name: category
      in: query
      required: false
      schema:
        type: string
      explode: false
    Models.InventorySearchParams.expiringSoon:
      name: expiringSoon
      in: query
      required: false
      schema:
        type: boolean
      explode: false
    Models.InventorySearchParams.lowStock:
      name: lowStock
      in: query
      required: false
      schema:
        type: boolean
      explode: false
    Models.InventorySearchParams.salonId:
      name: salonId
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/Models.SalonId"
      explode: false
    Models.InventorySearchParams.status:
      name: status
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/Models.InventoryStatusType"
      explode: false
    Models.PaginationParams.limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 20
      explode: false
    Models.PaginationParams.offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 0
      explode: false
    Models.SalesReportQuery.groupBy:
      name: groupBy
      in: query
      required: false
      schema:
        type: string
        enum:
          - day
          - week
          - month
      explode: false
    Models.SalesReportQuery.includeRefunds:
      name: includeRefunds
      in: query
      required: false
      schema:
        type: boolean
        default: true
      explode: false
    Models.SearchParams.q:
      name: q
      in: query
      required: false
      schema:
        type: string
      explode: false
    Models.SearchParams.sortBy:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
      explode: false
    Models.SearchParams.sortOrder:
      name: sortOrder
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
      explode: false
    Operations.CustomerSearchParams.loyaltyTier:
      name: loyaltyTier
      in: query
      required: false
      description: Filter by loyalty tier
      schema:
        $ref: "#/components/schemas/Models.LoyaltyTierType"
      explode: false
    Operations.CustomerSearchParams.registeredFrom:
      name: registeredFrom
      in: query
      required: false
      description: Filter by registration date from
      schema:
        type: string
        format: date-time
      explode: false
    Operations.CustomerSearchParams.registeredTo:
      name: registeredTo
      in: query
      required: false
      description: Filter by registration date to
      schema:
        type: string
        format: date-time
      explode: false
    Operations.CustomerSearchParams.search:
      name: search
      in: query
      required: false
      description: Search in customer name, email, or phone
      schema:
        type: string
      explode: false
    Operations.CustomerSearchParams.status:
      name: status
      in: query
      required: false
      description: Filter by customer status
      schema:
        $ref: "#/components/schemas/Models.CustomerStatusType"
      explode: false
    Operations.CustomerSearchParams.tags:
      name: tags
      in: query
      required: false
      description: Filter by customer tags
      schema:
        type: array
        items:
          type: string
      explode: false
    Operations.SalonSearchParams.category:
      name: category
      in: query
      required: false
      description: Filter by service category
      schema:
        $ref: "#/components/schemas/Models.ServiceCategoryType"
      explode: false
    Operations.SalonSearchParams.city:
      name: city
      in: query
      required: false
      description: Filter by city name
      schema:
        type: string
      explode: false
    Operations.SalonSearchParams.features:
      name: features
      in: query
      required: false
      description: Filter by features (comma-separated)
      schema:
        type: string
      explode: false
    Operations.SalonSearchParams.lat:
      name: lat
      in: query
      required: false
      description: Reference latitude for distance calculation
      schema:
        type: number
        format: double
      explode: false
    Operations.SalonSearchParams.lon:
      name: lon
      in: query
      required: false
      description: Reference longitude for distance calculation
      schema:
        type: number
        format: double
      explode: false
    Operations.SalonSearchParams.maxDistance:
      name: maxDistance
      in: query
      required: false
      description: Maximum distance in kilometers
      schema:
        type: number
        format: float
        minimum: 0
      explode: false
    Operations.SalonSearchParams.minRating:
      name: minRating
      in: query
      required: false
      description: Filter by minimum rating
      schema:
        type: number
        format: float
        minimum: 0
        maximum: 5
      explode: false
    Operations.SalonSearchParams.openAt:
      name: openAt
      in: query
      required: false
      description: Filter by specific day and time
      schema:
        type: string
        format: date-time
      explode: false
    Operations.SalonSearchParams.openNow:
      name: openNow
      in: query
      required: false
      description: Filter by opening hours
      schema:
        type: boolean
      explode: false
  schemas:
    Models.AccessCheck:
      type: object
      required:
        - userId
        - resource
        - action
      properties:
        userId:
          type: string
        resource:
          type: string
        action:
          type: string
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        resourceId:
          type: string
      description: Access control check
    Models.AccessResult:
      type: object
      required:
        - allowed
      properties:
        allowed:
          type: boolean
        reason:
          type: string
        requiredPermissions:
          type: array
          items:
            type: string
        userPermissions:
          type: array
          items:
            type: string
      description: Access control result
    Models.AccessShareLinkRequest:
      type: object
      properties:
        password:
          type: string
          description: パスワード（パスワード保護されている場合）
      description: 共有リンクアクセスリクエスト
    Models.Address:
      type: object
      required:
        - street
        - city
        - state
        - postalCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
          default: Japan
    Models.AddressUpdate:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
          default: Japan
    Models.AllergyInfo:
      type: object
      required:
        - type
        - severity
      properties:
        type:
          $ref: "#/components/schemas/Models.AllergyType"
        substances:
          type: array
          items:
            type: string
        fragrances:
          type: array
          items:
            type: string
        metals:
          type: array
          items:
            type: string
        plants:
          type: array
          items:
            type: string
        description:
          type: string
        severity:
          $ref: "#/components/schemas/Models.AllergySeverityType"
    Models.AllergySeverityType:
      type: string
      enum:
        - mild
        - moderate
        - severe
    Models.AllergyType:
      type: string
      enum:
        - chemical
        - fragrance
        - metal
        - latex
        - plant
        - other
    Models.Attachment:
      type: object
      required:
        - id
        - key
        - filename
        - content
        - size
        - file
        - uploadedBy
        - uploadedAt
        - updatedAt
      properties:
        id:
          type: string
          description: 添付ファイルID (UUID)
        key:
          type: string
          description: ストレージキー
        filename:
          type: string
          description: オリジナルファイル名
        content:
          type: string
          description: Content-Type
        size:
          type: integer
          format: int32
          description: ファイルサイズ（バイト）
        file:
          type: object
          required:
            - contents
          properties:
            contentType:
              type: string
              description: |-
                The allowed media (MIME) types of the file contents.

                In file bodies, this value comes from the `Content-Type` header of the request or response. In JSON bodies,
                this value is serialized as a field in the response.

                NOTE: this is not _necessarily_ the same as the `Content-Type` header of the request or response, but
                it will be for file bodies. It may be different if the file is serialized as a JSON object. It always refers to the
                _contents_ of the file, and not necessarily the way the file itself is transmitted or serialized.
              title: The allowed media (MIME) types of the file contents.
            filename:
              type: string
              description: |-
                The name of the file, if any.

                In file bodies, this value comes from the `filename` parameter of the `Content-Disposition` header of the response
                or multipart payload. In JSON bodies, this value is serialized as a field in the response.

                NOTE: By default, `filename` cannot be sent in request payloads and can only be sent in responses and multipart
                payloads, as the `Content-Disposition` header is not valid in requests. If you want to send the `filename` in a request,
                you must extend the `File` model and override the `filename` property with a different location defined by HTTP metadata
                decorators.
              title: The name of the file, if any.
            contents:
              type: string
              format: byte
              description: |-
                The contents of the file.

                In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
                this value is serialized as a field in the response.
              title: The contents of the file.
          description: ファイルタイプ
          title: A file in an HTTP request, response, or multipart payload.
        uploadedBy:
          type: string
          description: アップロードしたユーザーID
        salonId:
          type: string
          description: 関連するサロンID（オプション）
        metadata:
          type: object
          additionalProperties: {}
          description: メタデータ
        tags:
          type: object
          additionalProperties:
            type: string
          description: タグ
        uploadedAt:
          type: string
          format: date-time
          description: アップロード日時
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
      description: 添付ファイル情報
    Models.AttachmentId:
      type: string
      format: uuid
      description: Branded UUID type for Attachment ID
    Models.AuditInfo:
      type: object
      required:
        - createdAt
        - updatedAt
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.AuditTrail:
      type: object
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
        - version
        - isDeleted
      properties:
        createdAt:
          type: string
          format: date-time
          description: Record creation timestamp
        createdBy:
          type: string
          description: User who created the record
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: string
          description: User who last updated the record
        version:
          type: integer
          format: int32
          description: Version number for optimistic locking
        isDeleted:
          type: boolean
          description: Whether the record is deleted
          default: false
        deletedAt:
          type: string
          format: date-time
          description: Deletion timestamp
        deletedBy:
          type: string
          description: User who deleted the record
        deletionReason:
          type: string
          description: Deletion reason
      description: Complete audit information
    Models.AuthSuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message
      description: Generic auth success response
    Models.AuthUserRoleType:
      type: string
      enum:
        - customer
        - staff
        - admin
      description: User roles in the system
    Models.AuthenticationStateDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.AuthenticationStateType"
        sessionId:
          $ref: "#/components/schemas/Models.SessionId"
        expiresAt:
          type: string
          format: date-time
        tempToken:
          type: string
        until:
          type: string
          format: date-time
        attempts:
          type: integer
          format: int32
        reason:
          type: string
    Models.AuthenticationStateType:
      type: string
      enum:
        - unauthenticated
        - authenticated
        - pending_two_factor
        - locked
    Models.AvailableSlot:
      type: object
      required:
        - staffId
        - startTime
        - endTime
      properties:
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    Models.BatchGetRequest:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 100
          description: Array of IDs to retrieve
        fields:
          type: string
          description: Fields to include in response
      description: Request for batch retrieval
    Models.Booking:
      type: object
      required:
        - id
        - salonId
        - customerId
        - reservationIds
        - status
        - statusCode
        - totalAmount
        - finalAmount
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.BookingId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        reservationIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReservationId"
        status:
          $ref: "#/components/schemas/Models.BookingStatus"
        statusCode:
          $ref: "#/components/schemas/Models.BookingStatusCodeType"
        waitlistEntry:
          $ref: "#/components/schemas/Models.WaitlistEntry"
        deposit:
          $ref: "#/components/schemas/Models.BookingDeposit"
        totalAmount:
          $ref: "#/components/schemas/Models.Money"
        discountAmount:
          $ref: "#/components/schemas/Models.Money"
        finalAmount:
          $ref: "#/components/schemas/Models.Money"
        balanceDue:
          $ref: "#/components/schemas/Models.Money"
        paymentMethod:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        paymentStatus:
          $ref: "#/components/schemas/Models.PaymentStatusCodeType"
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.BookingDeposit:
      type: object
      required:
        - amount
        - status
      properties:
        amount:
          $ref: "#/components/schemas/Models.Money"
        status:
          type: string
          enum:
            - pending
            - paid
            - refunded
            - forfeited
        dueDate:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time
        refundedAt:
          type: string
          format: date-time
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        notes:
          type: string
    Models.BookingDepositUpdate:
      type: object
      properties:
        amount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        status:
          type: string
          enum:
            - pending
            - paid
            - refunded
            - forfeited
        dueDate:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time
        refundedAt:
          type: string
          format: date-time
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        notes:
          type: string
    Models.BookingDetail:
      type: object
      required:
        - reservations
        - customerName
        - salonName
      properties:
        reservations:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReservationDetail"
        customerName:
          type: string
        salonName:
          type: string
        paymentHistory:
          type: array
          items:
            $ref: "#/components/schemas/Models.PaymentHistory"
        waitlistHistory:
          type: array
          items:
            $ref: "#/components/schemas/Models.WaitlistEntry"
      allOf:
        - $ref: "#/components/schemas/Models.Booking"
    Models.BookingId:
      type: string
      format: uuid
      description: Branded UUID type for Booking ID
    Models.BookingLimit:
      type: object
      required:
        - period
        - count
      properties:
        period:
          type: string
          enum:
            - day
            - week
            - month
        count:
          type: integer
          format: int32
    Models.BookingRequirementDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.BookingRequirementType"
        amount:
          type: integer
          format: int32
        percentage:
          type: integer
          format: int32
        required:
          type: boolean
        duration:
          type: integer
          format: int32
        daysInAdvance:
          type: integer
          format: int32
        minAge:
          type: integer
          format: int32
        maxAge:
          type: integer
          format: int32
        allowedGenders:
          type: array
          items:
            type: string
        requiredTier:
          type: string
        instructions:
          type: array
          items:
            type: string
    Models.BookingRequirementType:
      type: string
      enum:
        - deposit
        - consultation
        - patch_test
        - age_restriction
        - gender_restriction
        - membership
        - preparation
    Models.BookingStatus:
      anyOf:
        - $ref: "#/components/schemas/Models.DraftBookingStatus"
        - $ref: "#/components/schemas/Models.PendingBookingStatus"
        - $ref: "#/components/schemas/Models.ConfirmedBookingStatus"
        - $ref: "#/components/schemas/Models.InProgressBookingStatus"
        - $ref: "#/components/schemas/Models.CompletedBookingStatus"
        - $ref: "#/components/schemas/Models.CancelledBookingStatus"
        - $ref: "#/components/schemas/Models.NoShowBookingStatus"
    Models.BookingStatusCodeType:
      type: string
      enum:
        - draft
        - pending
        - confirmed
        - in_progress
        - completed
        - cancelled
        - no_show
    Models.BookingStatusUpdate:
      anyOf:
        - $ref: "#/components/schemas/Models.DraftBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.PendingBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.ConfirmedBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.InProgressBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.CompletedBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.CancelledBookingStatusUpdate"
        - $ref: "#/components/schemas/Models.NoShowBookingStatusUpdate"
    Models.BulkSummary:
      type: object
      required:
        - total
        - succeeded
        - failed
        - duration
      properties:
        total:
          type: integer
          format: int32
          description: Total items processed
        succeeded:
          type: integer
          format: int32
          description: Number of successful items
        failed:
          type: integer
          format: int32
          description: Number of failed items
        duration:
          type: integer
          format: int32
          description: Processing duration in milliseconds
    Models.BusinessHours:
      type: object
      required:
        - dayOfWeek
        - operatingSlots
        - isClosed
      properties:
        dayOfWeek:
          $ref: "#/components/schemas/Models.DayOfWeekType"
        operatingSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
        breakSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
        isClosed:
          type: boolean
          default: false
        effectivePeriod:
          $ref: "#/components/schemas/Models.DateRange"
        timezone:
          type: string
    Models.CancellationFee:
      type: object
      required:
        - hours
        - percentage
      properties:
        hours:
          type: integer
          format: int32
        percentage:
          type: integer
          format: int32
        fixedAmount:
          type: integer
          format: int32
    Models.CancelledBookingStatus:
      type: object
      required:
        - type
        - cancelledAt
        - cancelledBy
      properties:
        type:
          type: string
          enum:
            - cancelled
        cancelledAt:
          type: string
          format: date-time
        reason:
          type: string
        cancelledBy:
          type: string
          enum:
            - customer
            - salon
            - system
    Models.CancelledBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - cancelled
        cancelledAt:
          type: string
          format: date-time
        reason:
          type: string
        cancelledBy:
          type: string
          enum:
            - customer
            - salon
            - system
    Models.CategoryId:
      type: string
      format: uuid
      description: Branded UUID type for Category ID
    Models.CategoryModel:
      type: object
      required:
        - id
        - name
        - description
        - displayOrder
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.CategoryId"
        name:
          type: string
        description:
          type: string
        parentId:
          $ref: "#/components/schemas/Models.CategoryId"
        displayOrder:
          type: integer
          format: int32
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ColorSubCategoryType:
      type: string
      enum:
        - full_color
        - root_touch
        - highlights
        - lowlights
        - balayage
        - ombre
        - bleach
        - color_correction
    Models.CompletedBookingStatus:
      type: object
      required:
        - type
        - completedAt
      properties:
        type:
          type: string
          enum:
            - completed
        completedAt:
          type: string
          format: date-time
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        serviceSummary:
          type: string
    Models.CompletedBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - completed
        completedAt:
          type: string
          format: date-time
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        serviceSummary:
          type: string
    Models.CompletedPaymentStatus:
      type: object
      required:
        - type
        - completedAt
        - paidAmount
      properties:
        type:
          type: string
          enum:
            - completed
        completedAt:
          type: string
          format: date-time
        paidAmount:
          $ref: "#/components/schemas/Models.Money"
        receiptNumber:
          type: string
    Models.CompletedPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - completed
        completedAt:
          type: string
          format: date-time
        paidAmount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        receiptNumber:
          type: string
    Models.ConfirmedBookingStatus:
      type: object
      required:
        - type
        - confirmedAt
        - staffId
        - expectedStart
      properties:
        type:
          type: string
          enum:
            - confirmed
        confirmedAt:
          type: string
          format: date-time
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        expectedStart:
          type: string
          format: date-time
    Models.ConfirmedBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - confirmed
        confirmedAt:
          type: string
          format: date-time
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        expectedStart:
          type: string
          format: date-time
    Models.ContactInfo:
      type: object
      required:
        - email
        - phoneNumber
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        alternativePhone:
          type: string
    Models.ContactInfoUpdate:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        alternativePhone:
          type: string
    Models.ContactMethodType:
      type: string
      enum:
        - email
        - sms
        - phone
        - push
      description: Contact method enum
    Models.CreateBookingRequest:
      type: object
      required:
        - salonId
        - customerId
        - reservationIds
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        reservationIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReservationId"
        waitlistEntry:
          $ref: "#/components/schemas/Models.WaitlistEntry"
        deposit:
          $ref: "#/components/schemas/Models.BookingDeposit"
        discountAmount:
          $ref: "#/components/schemas/Models.Money"
        paymentMethod:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        notes:
          type: string
        metadata:
          type: object
          additionalProperties: {}
    Models.CreateCustomerRequest:
      type: object
      required:
        - name
        - contactInfo
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        preferences:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
      description: Customer creation request with required and optional fields
    Models.CreateReservationRequest:
      type: object
      required:
        - salonId
        - customerId
        - staffId
        - serviceId
        - startTime
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        serviceId:
          $ref: "#/components/schemas/Models.ServiceId"
        startTime:
          type: string
          format: date-time
        notes:
          type: string
    Models.CreateReviewRequest:
      type: object
      required:
        - salonId
        - customerId
        - bookingId
        - overallRating
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        overallRating:
          type: integer
          format: int32
        comment:
          type: string
        title:
          type: string
        serviceRating:
          type: integer
          format: int32
        staffRating:
          type: integer
          format: int32
        cleanlinessRating:
          type: integer
          format: int32
        valueRating:
          type: integer
          format: int32
        imageUrls:
          type: array
          items:
            type: string
    Models.CreateSalonRequest:
      type: object
      required:
        - name
        - description
        - address
        - contactInfo
        - openingHours
      properties:
        name:
          type: string
        description:
          type: string
        address:
          $ref: "#/components/schemas/Models.Address"
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
        imageUrls:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
      description: Salon creation request with required and optional fields
    Models.CreateServiceRequest:
      type: object
      required:
        - salonId
        - name
        - description
        - duration
        - price
        - category
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        category:
          $ref: "#/components/schemas/Models.ServiceCategoryType"
        categoryId:
          $ref: "#/components/schemas/Models.CategoryId"
        imageUrl:
          type: string
        requiredStaffLevel:
          type: integer
          format: int32
        depositAmount:
          type: integer
          format: int32
        isActive:
          type: boolean
        maxAdvanceBookingDays:
          type: integer
          format: int32
        minAdvanceBookingHours:
          type: integer
          format: int32
    Models.CreateShareLinkRequest:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
          description: 有効期限（オプション）
        maxDownloads:
          type: integer
          format: int32
          description: 最大ダウンロード数（オプション）
        password:
          type: string
          description: パスワード（オプション）
        allowedEmails:
          type: array
          items:
            type: string
          description: 許可されたメールアドレス（オプション）
      description: 共有リンク作成リクエスト
    Models.CreateStaffRequest:
      type: object
      required:
        - salonId
        - name
        - contactInfo
        - specialties
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        bio:
          type: string
        yearsOfExperience:
          type: integer
          format: int32
        certifications:
          type: array
          items:
            type: string
        qualifications:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffQualification"
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSchedule"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPermission"
    Models.CurrencyCodeType:
      type: string
      enum:
        - JPY
        - USD
        - EUR
        - GBP
        - AUD
        - CAD
        - CNY
        - KRW
        - SGD
        - TWD
    Models.Customer:
      type: object
      required:
        - id
        - name
        - contactInfo
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.CustomerId"
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        gender:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerGenderType"
          description: Customer gender
        birthDate:
          type: string
          format: date
          description: Birth date
        address:
          allOf:
            - $ref: "#/components/schemas/Models.Address"
          description: Address
        preferences:
          type: string
          description: Preferences and requirements
        notes:
          type: string
          description: Internal notes
        tags:
          type: array
          items:
            type: string
          description: Tags for categorization
        loyaltyPoints:
          type: integer
          format: int32
          description: Current loyalty points
        membership:
          allOf:
            - $ref: "#/components/schemas/Models.MembershipInfo"
          description: Membership information
        notificationSettings:
          allOf:
            - $ref: "#/components/schemas/Models.NotificationSettings"
          description: NotificationType settings
        health:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerHealth"
          description: Health information
        customerPreferences:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerPreferences"
          description: Customer preferences
        history:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerHistory"
          description: Visit history
        associations:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerAssociations"
          description: Customer associations
        status:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerStatusDetail"
          description: Customer status
        metadata:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerMetadata"
          description: Customer metadata
        medicalChartId:
          allOf:
            - $ref: "#/components/schemas/Models.MedicalChartId"
          description: Medical chart ID
        isActive:
          type: boolean
          description: Is active customer
          default: true
        registrationSource:
          type: string
          enum:
            - walk_in
            - online
            - phone
            - referral
          description: Registration source
        referredBy:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: Referrer customer ID
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.CustomerAssociations:
      type: object
      required:
        - visitedSalonIds
      properties:
        primarySalonId:
          $ref: "#/components/schemas/Models.SalonId"
        visitedSalonIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.SalonId"
        familyMemberIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.CustomerId"
        referredBy:
          $ref: "#/components/schemas/Models.CustomerId"
        referredCustomerIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.CustomerId"
        groupId:
          type: string
    Models.CustomerGenderType:
      type: string
      enum:
        - male
        - female
        - other
        - prefer_not_to_say
    Models.CustomerHealth:
      type: object
      required:
        - allergies
      properties:
        allergies:
          type: array
          items:
            $ref: "#/components/schemas/Models.AllergyInfo"
        hairInfo:
          $ref: "#/components/schemas/Models.HairInfo"
        scalpInfo:
          $ref: "#/components/schemas/Models.ScalpInfo"
        medicalConditions:
          type: array
          items:
            type: string
        medications:
          type: array
          items:
            type: string
        pregnancyStatus:
          type: boolean
        specialNeeds:
          type: string
    Models.CustomerHistory:
      type: object
      required:
        - visits
        - favoriteServiceIds
        - favoriteStaffIds
      properties:
        visits:
          $ref: "#/components/schemas/Models.VisitHistory"
        lastServiceId:
          $ref: "#/components/schemas/Models.ServiceId"
        lastStaffId:
          $ref: "#/components/schemas/Models.StaffId"
        favoriteServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        favoriteStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
        pastTreatments:
          type: array
          items:
            type: string
        notes:
          type: array
          items:
            type: string
    Models.CustomerId:
      type: string
      format: uuid
      description: Branded UUID type for Customer ID
    Models.CustomerMetadata:
      type: object
      properties:
        source:
          type: string
          enum:
            - walk_in
            - online
            - phone
            - referral
            - social_media
            - advertisement
        campaign:
          type: string
        tags:
          type: array
          items:
            type: string
        customFields:
          type: object
          additionalProperties: {}
        internalNotes:
          type: array
          items:
            type: string
        riskScore:
          type: integer
          format: int32
        lifetimeValue:
          type: integer
          format: int32
        lastUpdatedBy:
          type: string
    Models.CustomerPreferences:
      type: object
      properties:
        stylePreferences:
          $ref: "#/components/schemas/Models.StylePreference"
        servicePreferences:
          $ref: "#/components/schemas/Models.ServicePreference"
        communicationPreferences:
          $ref: "#/components/schemas/Models.NotificationSettings"
        preferredStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
        avoidStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
        preferredDayOfWeek:
          type: array
          items:
            $ref: "#/components/schemas/Models.DayOfWeekType"
        preferredTimeSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
        specialRequests:
          type: string
        language:
          type: string
    Models.CustomerProfile:
      type: object
      required:
        - visitCount
        - totalSpent
      properties:
        visitCount:
          type: integer
          format: int32
        lastVisitDate:
          type: string
          format: date-time
        favoriteStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
        favoriteServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        totalSpent:
          type: integer
          format: int32
      allOf:
        - $ref: "#/components/schemas/Models.Customer"
    Models.CustomerStatusDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.CustomerStatusType"
        reason:
          type: string
        since:
          type: string
          format: date-time
        until:
          type: string
          format: date-time
        by:
          type: string
        deletedAt:
          type: string
          format: date-time
    Models.CustomerStatusType:
      type: string
      enum:
        - active
        - inactive
        - suspended
        - deleted
        - blacklisted
    Models.CutSubCategoryType:
      type: string
      enum:
        - mens_cut
        - womens_cut
        - kids_cut
        - bang_trim
        - beard_trim
    Models.DateRange:
      type: object
      required:
        - startDate
        - endDate
      properties:
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    Models.DayOfWeekType:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    Models.DownloadUrlResponse:
      type: object
      required:
        - downloadUrl
        - expiresAt
      properties:
        downloadUrl:
          type: string
          description: 署名付きダウンロードURL
        expiresAt:
          type: string
          format: date-time
          description: URL有効期限
      description: 署名付きダウンロードURL取得レスポンス
    Models.DraftBookingStatus:
      type: object
      required:
        - type
        - createdAt
      properties:
        type:
          type: string
          enum:
            - draft
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    Models.DraftBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - draft
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    Models.EmailVerificationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Email verification token
      description: Email verification request
    Models.EmailVerificationStateDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.EmailVerificationStateType"
        verifiedAt:
          type: string
          format: date-time
        token:
          type: string
        expiresAt:
          type: string
          format: date-time
        sentAt:
          type: string
          format: date-time
    Models.EmailVerificationStateType:
      type: string
      enum:
        - verified
        - unverified
        - pending
    Models.Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: {}
    Models.ErrorCodeType:
      type: string
      enum:
        - "1001"
        - "1002"
        - "1003"
        - "1004"
        - "1005"
        - "1006"
        - "1007"
        - "2001"
        - "2002"
        - "2003"
        - "2004"
        - "2005"
        - "3001"
        - "3002"
        - "3003"
        - "3004"
        - "3005"
        - "3006"
        - "3007"
        - "4001"
        - "4002"
        - "4003"
        - "4004"
        - "4005"
      description: Standardized error codes for consistent error handling
    Models.Facet:
      type: object
      required:
        - value
        - count
      properties:
        value:
          type: string
          description: Facet value
        count:
          type: integer
          format: int32
          description: Number of items with this value
    Models.FailedPaymentStatus:
      type: object
      required:
        - type
        - failedAt
        - reason
      properties:
        type:
          type: string
          enum:
            - failed
        failedAt:
          type: string
          format: date-time
        reason:
          type: string
        retryable:
          type: boolean
          default: false
    Models.FailedPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - failed
        failedAt:
          type: string
          format: date-time
        reason:
          type: string
        retryable:
          type: boolean
          default: false
    Models.FileType:
      type: string
      enum:
        - image
        - document
        - other
      description: ファイルタイプ
    Models.GetCustomerBookingsRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.BookingStatusCodeType"
      description: Customer bookings filter parameters
    Models.GetCustomerReservationsRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.ReservationStatusType"
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
      description: Customer reservations filter parameters
    Models.GetUploadUrlRequest:
      type: object
      required:
        - filename
        - content
        - size
      properties:
        filename:
          type: string
          description: ファイル名
        content:
          type: string
          description: Content-Type
        size:
          type: integer
          format: int32
          description: ファイルサイズ（バイト）
        salonId:
          type: string
          description: サロンID（オプション）
      description: 署名付きアップロードURL取得リクエスト
    Models.HairInfo:
      type: object
      required:
        - type
        - thickness
        - condition
        - chemicalHistory
      properties:
        type:
          $ref: "#/components/schemas/Models.HairType"
        thickness:
          $ref: "#/components/schemas/Models.HairThicknessType"
        condition:
          type: array
          items:
            type: string
        chemicalHistory:
          type: array
          items:
            type: string
        notes:
          type: string
    Models.HairThicknessType:
      type: string
      enum:
        - fine
        - medium
        - thick
    Models.HairType:
      type: string
      enum:
        - straight
        - wavy
        - curly
        - coily
    Models.HealthCheck:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: Service name
        status:
          type: string
          enum:
            - up
            - down
            - degraded
          description: Service status
        responseTime:
          type: integer
          format: int32
          description: Response time in milliseconds
        error:
          type: string
          description: Error message if service is down
        details:
          type: object
          additionalProperties: {}
          description: Additional details
    Models.HealthStatus:
      type: object
      required:
        - status
        - version
        - timestamp
        - checks
      properties:
        status:
          type: string
          enum:
            - healthy
            - degraded
            - unhealthy
          description: Overall health status
        version:
          type: string
          description: API version
        timestamp:
          type: string
          format: date-time
          description: Server timestamp
        checks:
          type: array
          items:
            $ref: "#/components/schemas/Models.HealthCheck"
          description: Individual service health checks
        metadata:
          type: object
          additionalProperties: {}
          description: Additional metadata
      description: API health status
    Models.InProgressBookingStatus:
      type: object
      required:
        - type
        - startedAt
      properties:
        type:
          type: string
          enum:
            - in_progress
        startedAt:
          type: string
          format: date-time
        stationName:
          type: string
    Models.InProgressBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - in_progress
        startedAt:
          type: string
          format: date-time
        stationName:
          type: string
    Models.InventoryAlert:
      type: object
      required:
        - itemId
        - threshold
        - currentStock
        - triggeredAt
        - inventoryId
        - alert
        - message
        - severity
      properties:
        itemId:
          $ref: "#/components/schemas/Models.InventoryId"
        threshold:
          type: number
          format: float
        currentStock:
          type: number
          format: float
        triggeredAt:
          type: string
          format: date-time
        inventoryId:
          $ref: "#/components/schemas/Models.InventoryId"
        alert:
          type: string
          enum:
            - low_stock
            - expiring
            - expired
            - overstock
        message:
          type: string
        severity:
          type: string
          enum:
            - info
            - warning
            - critical
        acknowledged:
          type: boolean
        acknowledgedBy:
          $ref: "#/components/schemas/Models.StaffId"
        acknowledgedAt:
          type: string
          format: date-time
      description: Inventory alert
    Models.InventoryId:
      type: string
      format: uuid
      description: Branded UUID type for Inventory ID
    Models.InventoryItem:
      type: object
      required:
        - id
        - salonId
        - productCode
        - productName
        - category
        - currentStock
        - minimumStock
        - unit
        - unitCost
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.InventoryId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        productCode:
          type: string
          description: Product code/SKU
        productName:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        category:
          type: string
          description: Category
        brand:
          type: string
          description: Brand
        supplier:
          type: string
          description: Supplier information
        currentStock:
          type: number
          format: float
          description: Current stock quantity
        minimumStock:
          type: number
          format: float
          description: Minimum stock level
        maximumStock:
          type: number
          format: float
          description: Maximum stock level
        unit:
          type: string
          description: Unit of measurement
        unitCost:
          type: number
          format: float
          description: Unit cost
        sellingPrice:
          type: number
          format: float
          description: Selling price (if sold to customers)
        status:
          allOf:
            - $ref: "#/components/schemas/Models.InventoryStatusType"
          description: Stock status
        location:
          type: string
          description: Location in salon
        expirationDate:
          type: string
          format: date-time
          description: Expiration date
        lastRestocked:
          type: string
          format: date-time
          description: Last restocked date
        notes:
          type: string
          description: Notes
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: Inventory item
    Models.InventoryItemCreateInput:
      type: object
      required:
        - salonId
        - productCode
        - productName
        - category
        - currentStock
        - minimumStock
        - unit
        - unitCost
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        productCode:
          type: string
        productName:
          type: string
        description:
          type: string
        category:
          type: string
        brand:
          type: string
        supplier:
          type: string
        currentStock:
          type: number
          format: float
        minimumStock:
          type: number
          format: float
        maximumStock:
          type: number
          format: float
        unit:
          type: string
        unitCost:
          type: number
          format: float
        sellingPrice:
          type: number
          format: float
        location:
          type: string
        expirationDate:
          type: string
          format: date-time
        notes:
          type: string
    Models.InventoryItemUpdateInput:
      type: object
      properties:
        productName:
          type: string
        description:
          type: string
        category:
          type: string
        brand:
          type: string
        supplier:
          type: string
        minimumStock:
          type: number
          format: float
        maximumStock:
          type: number
          format: float
        unitCost:
          type: number
          format: float
        sellingPrice:
          type: number
          format: float
        location:
          type: string
        expirationDate:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/Models.InventoryStatusType"
        notes:
          type: string
    Models.InventoryStatusType:
      type: string
      enum:
        - in_stock
        - low_stock
        - out_of_stock
        - ordered
        - discontinued
    Models.InventoryTransaction:
      type: object
      required:
        - id
        - itemId
        - salonId
        - type
        - quantity
        - reason
        - performedBy
        - occurredAt
      properties:
        id:
          type: string
        itemId:
          $ref: "#/components/schemas/Models.InventoryId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        type:
          type: string
          enum:
            - in
            - out
            - adjustment
            - transfer
        quantity:
          type: number
          format: float
        reason:
          type: string
        performedBy:
          $ref: "#/components/schemas/Models.StaffId"
        occurredAt:
          type: string
          format: date-time
        referenceId:
          type: string
        notes:
          type: string
        metadata:
          type: object
          additionalProperties: {}
    Models.LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password
        rememberMe:
          type: boolean
          description: Remember me flag for extended session
          default: false
        twoFactorCode:
          type: string
          description: Two-factor authentication code (if 2FA is enabled)
      description: Login request
    Models.LoginResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - token
        - expiresIn
        - user
      properties:
        accessToken:
          type: string
          description: Access token for API requests
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
        token:
          type: string
          description: Token type (always 'Bearer')
          default: Bearer
        expiresIn:
          type: integer
          format: int32
          description: Access token expiry in seconds
        user:
          allOf:
            - $ref: "#/components/schemas/Models.User"
          description: Logged in user information
      description: Login response
    Models.LoyaltyTierId:
      type: string
      format: uuid
      description: Branded UUID type for Loyalty Tier ID
    Models.LoyaltyTierType:
      type: string
      enum:
        - bronze
        - silver
        - gold
        - platinum
      description: Loyalty tier enum
    Models.MakeupSubCategoryType:
      type: string
      enum:
        - everyday_makeup
        - event_makeup
        - bridal_makeup
        - photoshoot_makeup
    Models.MaterialUsage:
      type: object
      required:
        - inventoryId
        - productName
        - quantity
        - unit
      properties:
        inventoryId:
          $ref: "#/components/schemas/Models.InventoryId"
        productName:
          type: string
        quantity:
          type: number
          format: float
        unit:
          type: string
        notes:
          type: string
      description: Material usage record
    Models.MedicalChart:
      type: object
      required:
        - id
        - customerId
        - lastUpdated
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.MedicalChartId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        allergies:
          type: array
          items:
            type: string
          description: Allergies and sensitivities
        scalpCondition:
          type: string
          description: Scalp condition
        hairCondition:
          type: string
          description: Hair condition
        previousTreatments:
          type: array
          items:
            $ref: "#/components/schemas/Models.PreviousTreatment"
          description: Previous chemical treatments
        medicalConditions:
          type: string
          description: Medical conditions to be aware of
        preferredProducts:
          type: array
          items:
            type: string
          description: Preferred products
        avoidProducts:
          type: array
          items:
            type: string
          description: Products to avoid
        notes:
          type: string
          description: General notes
        lastUpdated:
          type: string
          format: date-time
          description: Last updated date
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: Medical chart for customer
    Models.MedicalChartCreateInput:
      type: object
      required:
        - customerId
      properties:
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        allergies:
          type: array
          items:
            type: string
        scalpCondition:
          type: string
        hairCondition:
          type: string
        previousTreatments:
          type: array
          items:
            $ref: "#/components/schemas/Models.PreviousTreatment"
        medicalConditions:
          type: string
        preferredProducts:
          type: array
          items:
            type: string
        avoidProducts:
          type: array
          items:
            type: string
        notes:
          type: string
    Models.MedicalChartId:
      type: string
      format: uuid
      description: Branded UUID type for Medical Chart ID
    Models.MedicalChartUpdateInput:
      type: object
      properties:
        allergies:
          type: array
          items:
            type: string
        scalpCondition:
          type: string
        hairCondition:
          type: string
        previousTreatments:
          type: array
          items:
            $ref: "#/components/schemas/Models.PreviousTreatment"
        medicalConditions:
          type: string
        preferredProducts:
          type: array
          items:
            type: string
        avoidProducts:
          type: array
          items:
            type: string
        notes:
          type: string
    Models.MembershipBenefitDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.MembershipBenefitType"
        percentage:
          type: integer
          format: int32
        multiplier:
          $ref: "#/components/schemas/Models.decimal"
        service:
          type: string
        frequency:
          type: string
          enum:
            - monthly
            - quarterly
            - yearly
        value:
          type: integer
          format: int32
        description:
          type: string
    Models.MembershipBenefitType:
      type: string
      enum:
        - discount_rate
        - point_multiplier
        - priority_booking
        - free_service
        - birthday_special
        - exclusive_access
    Models.MembershipInfo:
      type: object
      required:
        - tier
        - since
        - benefits
        - points
        - totalPointsEarned
        - totalPointsUsed
      properties:
        tier:
          $ref: "#/components/schemas/Models.MembershipTierType"
        since:
          type: string
          format: date-time
        benefits:
          type: array
          items:
            $ref: "#/components/schemas/Models.MembershipBenefitDetail"
        dedicatedManager:
          type: string
        points:
          type: integer
          format: int32
        totalPointsEarned:
          type: integer
          format: int32
        totalPointsUsed:
          type: integer
          format: int32
        expiringPoints:
          type: integer
          format: int32
        pointsExpireAt:
          type: string
          format: date-time
    Models.MembershipTierType:
      type: string
      enum:
        - regular
        - silver
        - gold
        - platinum
        - vip
    Models.Money:
      type: object
      required:
        - value
        - currency
      properties:
        value:
          type: integer
          format: int64
        currency:
          $ref: "#/components/schemas/Models.CurrencyCodeType"
        taxRate:
          $ref: "#/components/schemas/Models.decimal"
    Models.MoneyUpdate:
      type: object
      properties:
        value:
          type: integer
          format: int64
        currency:
          $ref: "#/components/schemas/Models.CurrencyCodeType"
        taxRate:
          $ref: "#/components/schemas/Models.decimal"
    Models.NailSubCategoryType:
      type: string
      enum:
        - manicure
        - pedicure
        - gel_nail
        - nail_art
        - nail_removal
    Models.NoShowBookingStatus:
      type: object
      required:
        - type
        - recordedAt
      properties:
        type:
          type: string
          enum:
            - no_show
        recordedAt:
          type: string
          format: date-time
        penaltyApplied:
          type: boolean
          default: false
    Models.NoShowBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - no_show
        recordedAt:
          type: string
          format: date-time
        penaltyApplied:
          type: boolean
          default: false
    Models.NotificationSettings:
      type: object
      required:
        - types
        - reminderTimings
        - enabled
      properties:
        types:
          type: array
          items:
            $ref: "#/components/schemas/Models.NotificationType"
        reminderTimings:
          type: array
          items:
            $ref: "#/components/schemas/Models.ReminderTimingType"
        enabled:
          type: boolean
    Models.NotificationType:
      type: string
      enum:
        - email
        - sms
        - push
        - line
    Models.OffsetPaginationParams:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          description: Maximum number of items to return (1-100)
          default: 20
        offset:
          type: integer
          format: int32
          minimum: 0
          description: Number of items to skip
          default: 0
        sortBy:
          type: string
          description: Field to sort by
        sortOrder:
          type: string
          enum:
            - asc
            - desc
          description: Sort order
          default: asc
      description: Offset-based pagination parameters
    Models.OpeningHours:
      type: object
      required:
        - dayOfWeek
        - openTime
        - closeTime
        - isHoliday
      properties:
        dayOfWeek:
          $ref: "#/components/schemas/Models.DayOfWeekType"
        openTime:
          type: string
        closeTime:
          type: string
        isHoliday:
          type: boolean
    Models.OrderId:
      type: string
      format: uuid
      description: Branded UUID type for Order ID
    Models.OrderItem:
      type: object
      required:
        - inventoryId
        - productCode
        - productName
        - quantity
        - unit
        - unitPrice
        - totalPrice
      properties:
        inventoryId:
          $ref: "#/components/schemas/Models.InventoryId"
        productCode:
          type: string
        productName:
          type: string
        quantity:
          type: number
          format: float
        unit:
          type: string
        unitPrice:
          type: number
          format: float
        totalPrice:
          type: number
          format: float
        notes:
          type: string
      description: Order item detail
    Models.OrderStatusType:
      type: string
      enum:
        - draft
        - pending
        - approved
        - ordered
        - shipped
        - delivered
        - cancelled
    Models.PaginatedAttachments:
      type: object
      required:
        - items
        - total
        - page
        - limit
        - totalPages
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Models.Attachment"
          description: 添付ファイル一覧
        total:
          type: integer
          format: int32
          description: 合計件数
        page:
          type: integer
          format: int32
          description: 現在のページ
        limit:
          type: integer
          format: int32
          description: ページあたりの件数
        totalPages:
          type: integer
          format: int32
          description: 総ページ数
      description: ページネーション付き添付ファイル一覧
    Models.PaginationLinks:
      type: object
      required:
        - self
      properties:
        self:
          type: string
          description: Link to current page
        first:
          type: string
          description: Link to first page
        last:
          type: string
          description: Link to last page
        next:
          type: string
          description: Link to next page
        prev:
          type: string
          description: Link to previous page
    Models.PaginationMeta:
      type: object
      required:
        - limit
        - hasMore
      properties:
        total:
          type: integer
          format: int32
          description: Total number of items
        limit:
          type: integer
          format: int32
          description: Number of items per page
        hasMore:
          type: boolean
          description: Whether there are more pages
        cursor:
          type: string
          description: Current cursor position
        nextCursor:
          type: string
          description: Next cursor for pagination
        prevCursor:
          type: string
          description: Previous cursor for pagination
    Models.PartialRefundPaymentStatus:
      type: object
      required:
        - type
        - refundedAt
        - refundAmount
        - remainingAmount
        - refundId
      properties:
        type:
          type: string
          enum:
            - partial_refund
        refundedAt:
          type: string
          format: date-time
        refundAmount:
          $ref: "#/components/schemas/Models.Money"
        remainingAmount:
          $ref: "#/components/schemas/Models.Money"
        refundId:
          $ref: "#/components/schemas/Models.RefundId"
    Models.PartialRefundPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - partial_refund
        refundedAt:
          type: string
          format: date-time
        refundAmount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        remainingAmount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        refundId:
          $ref: "#/components/schemas/Models.RefundId"
    Models.PasswordChangeRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password for verification
        newPassword:
          type: string
          description: New password
      description: Password change request
    Models.PasswordResetConfirmRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset token from email
        newPassword:
          type: string
          description: New password
      description: Password reset confirmation
    Models.PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: Email address of the account
      description: Password reset request
    Models.PasswordResetStateDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.PasswordResetStateType"
        token:
          type: string
        expiresAt:
          type: string
          format: date-time
        requestedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
    Models.PasswordResetStateType:
      type: string
      enum:
        - none
        - requested
        - completed
    Models.Payment:
      type: object
      required:
        - id
        - salonId
        - customerId
        - method
        - status
        - amounts
        - history
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.PaymentId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        treatmentRecordId:
          $ref: "#/components/schemas/Models.TreatmentRecordId"
        method:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        status:
          $ref: "#/components/schemas/Models.PaymentStatus"
        amounts:
          $ref: "#/components/schemas/Models.PaymentAmounts"
        pointsUsed:
          type: integer
          format: int32
        depositApplied:
          $ref: "#/components/schemas/Models.Money"
        outstandingAmount:
          $ref: "#/components/schemas/Models.Money"
        externalReference:
          type: string
        receiptNumber:
          type: string
        history:
          type: array
          items:
            $ref: "#/components/schemas/Models.PaymentHistory"
        refunds:
          type: array
          items:
            $ref: "#/components/schemas/Models.Refund"
        metadata:
          type: object
          additionalProperties: {}
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: Payment record for services
    Models.PaymentAmounts:
      type: object
      required:
        - billed
        - totalPayable
      properties:
        billed:
          $ref: "#/components/schemas/Models.Money"
        tax:
          $ref: "#/components/schemas/Models.Money"
        discount:
          $ref: "#/components/schemas/Models.Money"
        tip:
          $ref: "#/components/schemas/Models.Money"
        totalPayable:
          $ref: "#/components/schemas/Models.Money"
    Models.PaymentBreakdown:
      type: object
      required:
        - subtotal
        - tax
        - discount
        - total
      properties:
        subtotal:
          $ref: "#/components/schemas/Models.Money"
        tax:
          $ref: "#/components/schemas/Models.Money"
        discount:
          $ref: "#/components/schemas/Models.Money"
        pointsDiscount:
          $ref: "#/components/schemas/Models.Money"
        total:
          $ref: "#/components/schemas/Models.Money"
    Models.PaymentCreateInput:
      type: object
      required:
        - salonId
        - customerId
        - method
        - amounts
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        treatmentRecordId:
          $ref: "#/components/schemas/Models.TreatmentRecordId"
        method:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        amounts:
          $ref: "#/components/schemas/Models.PaymentAmounts"
        pointsUsed:
          type: integer
          format: int32
        depositApplied:
          $ref: "#/components/schemas/Models.Money"
        externalReference:
          type: string
        notes:
          type: string
        metadata:
          type: object
          additionalProperties: {}
    Models.PaymentHistory:
      type: object
      required:
        - eventId
        - paymentId
        - status
        - occurredAt
      properties:
        eventId:
          type: string
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        status:
          $ref: "#/components/schemas/Models.PaymentStatus"
        occurredAt:
          type: string
          format: date-time
        actor:
          type: string
          enum:
            - system
            - staff
            - customer
        actorId:
          type: string
        note:
          type: string
        metadata:
          type: object
          additionalProperties: {}
    Models.PaymentId:
      type: string
      format: uuid
      description: Branded UUID type for Payment ID
    Models.PaymentMethodType:
      type: string
      enum:
        - cash
        - credit_card
        - debit_card
        - e_money
        - qr_payment
        - bank_transfer
        - point
    Models.PaymentPreview:
      type: object
      required:
        - salonId
        - breakdown
        - recommendedMethods
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        breakdown:
          $ref: "#/components/schemas/Models.PaymentBreakdown"
        recommendedMethods:
          type: array
          items:
            $ref: "#/components/schemas/Models.PaymentMethodType"
        notes:
          type: string
    Models.PaymentStatus:
      anyOf:
        - $ref: "#/components/schemas/Models.PendingPaymentStatus"
        - $ref: "#/components/schemas/Models.ProcessingPaymentStatus"
        - $ref: "#/components/schemas/Models.CompletedPaymentStatus"
        - $ref: "#/components/schemas/Models.FailedPaymentStatus"
        - $ref: "#/components/schemas/Models.RefundedPaymentStatus"
        - $ref: "#/components/schemas/Models.PartialRefundPaymentStatus"
    Models.PaymentStatusCodeType:
      type: string
      enum:
        - pending
        - processing
        - completed
        - failed
        - refunded
        - partial_refund
    Models.PaymentStatusUpdate:
      anyOf:
        - $ref: "#/components/schemas/Models.PendingPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.ProcessingPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.CompletedPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.FailedPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.RefundedPaymentStatusUpdate"
        - $ref: "#/components/schemas/Models.PartialRefundPaymentStatusUpdate"
    Models.PaymentUpdateInput:
      type: object
      properties:
        method:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        status:
          $ref: "#/components/schemas/Models.PaymentStatusUpdate"
        outstandingAmount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        depositApplied:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.MoneyUpdate"
          nullable: true
        externalReference:
          type: string
          nullable: true
        receiptNumber:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
    Models.PendingBookingStatus:
      type: object
      required:
        - type
        - requestedAt
      properties:
        type:
          type: string
          enum:
            - pending
        requestedAt:
          type: string
          format: date-time
        holdExpiresAt:
          type: string
          format: date-time
        assignedStaffId:
          $ref: "#/components/schemas/Models.StaffId"
    Models.PendingBookingStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - pending
        requestedAt:
          type: string
          format: date-time
        holdExpiresAt:
          type: string
          format: date-time
        assignedStaffId:
          $ref: "#/components/schemas/Models.StaffId"
    Models.PendingPaymentStatus:
      type: object
      required:
        - type
        - createdAt
      properties:
        type:
          type: string
          enum:
            - pending
        createdAt:
          type: string
          format: date-time
    Models.PendingPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - pending
        createdAt:
          type: string
          format: date-time
    Models.PermSubCategoryType:
      type: string
      enum:
        - regular_perm
        - digital_perm
        - spiral_perm
        - body_wave
        - straightening
    Models.Permission:
      type: object
      required:
        - id
        - key
        - name
        - resource
        - action
      properties:
        id:
          $ref: "#/components/schemas/Models.PermissionId"
        key:
          type: string
          description: Permission key (e.g., 'booking.create')
        name:
          type: string
          description: Permission name
        description:
          type: string
          description: Permission description
        resource:
          type: string
          description: Resource type
        action:
          type: string
          description: Action type
        scope:
          type: string
          enum:
            - own
            - salon
            - all
          description: Scope (own, salon, all)
      description: Permission definition
    Models.PermissionCheckInput:
      type: object
      required:
        - userId
        - permissions
      properties:
        userId:
          type: string
        permissions:
          type: array
          items:
            type: string
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
    Models.PermissionCheckResult:
      type: object
      required:
        - userId
        - permissions
      properties:
        userId:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.PermissionStatus"
    Models.PermissionId:
      type: string
      format: uuid
      description: Branded UUID type for Permission ID
    Models.PermissionStatus:
      type: object
      required:
        - permission
        - granted
      properties:
        permission:
          type: string
        granted:
          type: boolean
        source:
          type: string
    Models.PointInfo:
      type: object
      required:
        - currentPoints
        - totalEarnedPoints
        - totalUsedPoints
      properties:
        currentPoints:
          type: integer
          format: int32
        totalEarnedPoints:
          type: integer
          format: int32
        totalUsedPoints:
          type: integer
          format: int32
        expiringPoints:
          type: integer
          format: int32
        expirationDate:
          type: string
          format: date-time
    Models.PointTransaction:
      type: object
      required:
        - id
        - customerId
        - type
        - points
        - balanceAfter
        - description
        - transactedAt
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.PointTransactionId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        type:
          type: string
          enum:
            - earn
            - use
            - expire
            - adjust
          description: "Transaction type: earn or use"
        points:
          type: integer
          format: int32
          description: Points amount (positive for earn, negative for use)
        balanceAfter:
          type: integer
          format: int32
          description: Balance after transaction
        paymentId:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentId"
          description: Related payment or booking
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        description:
          type: string
          description: Transaction description
        expiresAt:
          type: string
          format: date-time
          description: Expiration date for earned points
        transactedAt:
          type: string
          format: date-time
          description: Transaction timestamp
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: Point transaction record
    Models.PointTransactionCreateInput:
      type: object
      required:
        - customerId
        - type
        - points
        - description
      properties:
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        type:
          type: string
          enum:
            - earn
            - use
            - expire
            - adjust
        points:
          type: integer
          format: int32
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        description:
          type: string
        expiresAt:
          type: string
          format: date-time
    Models.PointTransactionId:
      type: string
      format: uuid
      description: Branded UUID type for Point Transaction ID
    Models.PreviousTreatment:
      type: object
      required:
        - treatment
        - date
      properties:
        treatment:
          $ref: "#/components/schemas/Models.TreatmentType"
        date:
          type: string
          format: date-time
        salonName:
          type: string
        notes:
          type: string
      description: Previous treatment history
    Models.PriceRangeFilter:
      type: object
      properties:
        minPrice:
          type: number
          format: float
        maxPrice:
          type: number
          format: float
    Models.PriceTier:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int32
        duration:
          type: integer
          format: int32
        conditions:
          type: array
          items:
            type: string
    Models.PricingFactor:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - day_of_week
            - time_of_day
            - staff_level
            - demand
            - season
        multipliers:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Models.decimal"
        peakHours:
          type: array
          items:
            type: string
        peakMultiplier:
          $ref: "#/components/schemas/Models.decimal"
        threshold:
          type: integer
          format: int32
        seasons:
          type: array
          items:
            $ref: "#/components/schemas/Models.Season"
    Models.PricingStrategyDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.PricingStrategyType"
        amount:
          type: integer
          format: int32
        tiers:
          type: array
          items:
            $ref: "#/components/schemas/Models.PriceTier"
        basePrice:
          type: integer
          format: int32
        factors:
          type: array
          items:
            $ref: "#/components/schemas/Models.PricingFactor"
        services:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        discountRate:
          $ref: "#/components/schemas/Models.decimal"
        memberPrice:
          type: integer
          format: int32
        nonMemberPrice:
          type: integer
          format: int32
        description:
          type: string
    Models.PricingStrategyType:
      type: string
      enum:
        - fixed
        - tiered
        - dynamic
        - package
        - membership
        - custom
    Models.ProblemDetails:
      type: object
      required:
        - type
        - title
        - status
        - code
        - timestamp
      properties:
        type:
          type: string
          description: URI reference that identifies the problem type
        title:
          type: string
          description: Short, human-readable summary of the problem
        status:
          type: integer
          format: int32
          description: HTTP status code
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence
        instance:
          type: string
          description: URI reference that identifies the specific occurrence
        code:
          allOf:
            - $ref: "#/components/schemas/Models.ErrorCodeType"
          description: Machine-readable error code for programmatic handling
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Models.ValidationError"
          description: Additional error context and validation details
        correlationId:
          type: string
          description: Correlation ID for tracing
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the error
      description: Standardized error response following RFC 7807
    Models.ProcessingPaymentStatus:
      type: object
      required:
        - type
        - startedAt
      properties:
        type:
          type: string
          enum:
            - processing
        startedAt:
          type: string
          format: date-time
        processorId:
          $ref: "#/components/schemas/Models.StaffId"
    Models.ProcessingPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - processing
        startedAt:
          type: string
          format: date-time
        processorId:
          $ref: "#/components/schemas/Models.StaffId"
    Models.PurchaseOrder:
      type: object
      required:
        - id
        - salonId
        - orderNumber
        - supplier
        - status
        - items
        - subtotal
        - taxAmount
        - totalAmount
        - orderDate
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.OrderId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        orderNumber:
          type: string
          description: Order number
        supplier:
          type: string
          description: Supplier name
        status:
          allOf:
            - $ref: "#/components/schemas/Models.OrderStatusType"
          description: Order status
        items:
          type: array
          items:
            $ref: "#/components/schemas/Models.OrderItem"
          description: Order items
        subtotal:
          type: number
          format: float
          description: Subtotal amount
        taxAmount:
          type: number
          format: float
          description: Tax amount
        shippingCost:
          type: number
          format: float
          description: Shipping cost
        totalAmount:
          type: number
          format: float
          description: Total amount
        orderDate:
          type: string
          format: date-time
          description: Order date
        expectedDelivery:
          type: string
          format: date-time
          description: Expected delivery date
        actualDelivery:
          type: string
          format: date-time
          description: Actual delivery date
        deliveryNotes:
          type: string
          description: Delivery notes
        paymentTerms:
          type: string
          description: Payment terms
        notes:
          type: string
          description: Order notes
        approvedBy:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: Approved by
        approvedAt:
          type: string
          format: date-time
          description: Approved date
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: Purchase order
    Models.PurchaseOrderCreateInput:
      type: object
      required:
        - supplier
        - items
        - taxAmount
      properties:
        supplier:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/Models.OrderItem"
        taxAmount:
          type: number
          format: float
        shippingCost:
          type: number
          format: float
        expectedDelivery:
          type: string
          format: date-time
        paymentTerms:
          type: string
        notes:
          type: string
    Models.PurchaseOrderUpdateInput:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.OrderStatusType"
        expectedDelivery:
          type: string
          format: date-time
        actualDelivery:
          type: string
          format: date-time
        deliveryNotes:
          type: string
        notes:
          type: string
    Models.RateLimitInfo:
      type: object
      description: Rate limiting information
    Models.Refund:
      type: object
      required:
        - id
        - paymentId
        - amount
        - reason
        - refundedAt
        - status
      properties:
        id:
          $ref: "#/components/schemas/Models.RefundId"
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        amount:
          $ref: "#/components/schemas/Models.Money"
        reason:
          type: string
        refundedAt:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - requested
            - processing
            - completed
            - failed
        processedBy:
          $ref: "#/components/schemas/Models.StaffId"
        method:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        referenceCode:
          type: string
        notes:
          type: string
    Models.RefundId:
      type: string
      format: uuid
      description: Branded UUID type for Refund ID
    Models.RefundInput:
      type: object
      required:
        - paymentId
        - amount
        - reason
      properties:
        paymentId:
          $ref: "#/components/schemas/Models.PaymentId"
        amount:
          $ref: "#/components/schemas/Models.Money"
        reason:
          type: string
        referenceCode:
          type: string
        processedBy:
          $ref: "#/components/schemas/Models.StaffId"
        notes:
          type: string
    Models.RefundedPaymentStatus:
      type: object
      required:
        - type
        - refundedAt
        - refundAmount
      properties:
        type:
          type: string
          enum:
            - refunded
        refundedAt:
          type: string
          format: date-time
        refundAmount:
          $ref: "#/components/schemas/Models.Money"
        refundId:
          $ref: "#/components/schemas/Models.RefundId"
    Models.RefundedPaymentStatusUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - refunded
        refundedAt:
          type: string
          format: date-time
        refundAmount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        refundId:
          $ref: "#/components/schemas/Models.RefundId"
    Models.RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password (must meet security requirements)
        name:
          type: string
          description: User's display name
        role:
          allOf:
            - $ref: "#/components/schemas/Models.AuthUserRoleType"
          description: User's role (defaults to customer)
          default: customer
      description: Registration request
    Models.ReminderTimingType:
      type: string
      enum:
        - one_day_before
        - three_hours_before
        - one_hour_before
        - thirty_minutes_before
    Models.Reservation:
      type: object
      required:
        - id
        - salonId
        - customerId
        - staffId
        - serviceId
        - startTime
        - endTime
        - status
        - totalAmount
        - isPaid
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.ReservationId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        serviceId:
          $ref: "#/components/schemas/Models.ServiceId"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/Models.ReservationStatusType"
        notes:
          type: string
        totalAmount:
          type: integer
          format: int32
        depositAmount:
          type: integer
          format: int32
        isPaid:
          type: boolean
        cancellationReason:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ReservationDetail:
      type: object
      required:
        - customerName
        - staffName
        - serviceName
        - serviceCategory
        - serviceDuration
      properties:
        customerName:
          type: string
        staffName:
          type: string
        serviceName:
          type: string
        serviceCategory:
          $ref: "#/components/schemas/Models.ServiceCategoryType"
        serviceDuration:
          type: integer
          format: int32
      allOf:
        - $ref: "#/components/schemas/Models.Reservation"
    Models.ReservationId:
      type: string
      format: uuid
      description: Branded UUID type for Reservation ID
    Models.ReservationStatusType:
      type: string
      enum:
        - pending
        - confirmed
        - cancelled
        - completed
        - no_show
    Models.ResponseMeta:
      type: object
      required:
        - correlationId
        - timestamp
        - version
      properties:
        correlationId:
          type: string
          description: Request correlation ID
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
        version:
          type: string
          description: API version
      additionalProperties: {}
    Models.Review:
      type: object
      required:
        - id
        - salonId
        - customerId
        - bookingId
        - overallRating
        - isVerified
        - helpfulCount
        - reportCount
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.ReviewId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        overallRating:
          type: integer
          format: int32
        comment:
          type: string
        title:
          type: string
        serviceRating:
          type: integer
          format: int32
        staffRating:
          type: integer
          format: int32
        cleanlinessRating:
          type: integer
          format: int32
        valueRating:
          type: integer
          format: int32
        imageUrls:
          type: array
          items:
            type: string
        isVerified:
          type: boolean
        helpfulCount:
          type: integer
          format: int32
          default: 0
        reportCount:
          type: integer
          format: int32
          default: 0
        ownerResponse:
          type: string
        ownerRespondedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ReviewId:
      type: string
      format: uuid
      description: Branded UUID type for Review ID
    Models.ReviewSummary:
      type: object
      required:
        - averageRating
        - totalReviews
        - ratingDistribution
      properties:
        averageRating:
          type: number
          format: float
        totalReviews:
          type: integer
          format: int32
        ratingDistribution:
          type: object
          additionalProperties:
            type: integer
            format: int32
    Models.Role:
      type: object
      required:
        - id
        - name
        - displayName
        - permissions
        - isSystem
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.RoleId"
        name:
          type: string
          description: Role name
        displayName:
          type: string
          description: Role display name
        description:
          type: string
          description: Role description
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.Permission"
          description: Permissions assigned to this role
        isSystem:
          type: boolean
          description: Is this a system role
        isActive:
          type: boolean
          description: Is role active
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: Role definition for access control
    Models.RoleCreateInput:
      type: object
      required:
        - name
        - displayName
        - permissions
      properties:
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.PermissionId"
    Models.RoleId:
      type: string
      format: uuid
      description: Branded UUID type for Role ID
    Models.RoleUpdateInput:
      type: object
      properties:
        displayName:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.PermissionId"
        isActive:
          type: boolean
    Models.SalesByCategory:
      type: object
      required:
        - category
        - amount
        - count
        - percentage
      properties:
        category:
          $ref: "#/components/schemas/Models.ServiceCategoryType"
        amount:
          $ref: "#/components/schemas/Models.Money"
        count:
          type: integer
          format: int32
        percentage:
          type: number
          format: float
      description: Sales breakdown by category
    Models.SalesByMethod:
      type: object
      required:
        - method
        - amount
        - count
        - percentage
      properties:
        method:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        amount:
          $ref: "#/components/schemas/Models.Money"
        count:
          type: integer
          format: int32
        percentage:
          type: number
          format: float
      description: Sales breakdown by payment method
    Models.SalesReport:
      type: object
      required:
        - salonId
        - periodStart
        - periodEnd
        - totalSales
        - totalTax
        - totalDiscounts
        - totalRefunds
        - netSales
        - transactionCount
        - averageTransactionValue
        - salesByMethod
        - salesByCategory
        - topStaff
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        periodStart:
          type: string
          format: date-time
        periodEnd:
          type: string
          format: date-time
        totalSales:
          $ref: "#/components/schemas/Models.Money"
        totalTax:
          $ref: "#/components/schemas/Models.Money"
        totalDiscounts:
          $ref: "#/components/schemas/Models.Money"
        totalRefunds:
          $ref: "#/components/schemas/Models.Money"
        netSales:
          $ref: "#/components/schemas/Models.Money"
        transactionCount:
          type: integer
          format: int32
        averageTransactionValue:
          $ref: "#/components/schemas/Models.Money"
        salesByMethod:
          type: array
          items:
            $ref: "#/components/schemas/Models.SalesByMethod"
        salesByCategory:
          type: array
          items:
            $ref: "#/components/schemas/Models.SalesByCategory"
        topStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPerformance"
      description: Sales report summary
    Models.SalesReportQuery:
      type: object
      required:
        - salonId
      properties:
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
    Models.Salon:
      type: object
      required:
        - id
        - name
        - description
        - address
        - contactInfo
        - openingHours
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.SalonId"
        name:
          type: string
        description:
          type: string
        address:
          $ref: "#/components/schemas/Models.Address"
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
        imageUrls:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.SalonId:
      type: string
      format: uuid
      description: Branded UUID type for Salon ID
    Models.SalonSummary:
      type: object
      required:
        - id
        - name
        - address
      properties:
        id:
          $ref: "#/components/schemas/Models.SalonId"
        name:
          type: string
        address:
          $ref: "#/components/schemas/Models.Address"
        rating:
          type: number
          format: float
        reviewCount:
          type: integer
          format: int32
    Models.ScalpConditionType:
      type: string
      enum:
        - normal
        - dry
        - oily
        - sensitive
        - dandruff
    Models.ScalpInfo:
      type: object
      required:
        - condition
        - sensitivities
      properties:
        condition:
          $ref: "#/components/schemas/Models.ScalpConditionType"
        sensitivities:
          type: array
          items:
            type: string
        notes:
          type: string
    Models.ScoreRange:
      type: object
      required:
        - min
        - max
      properties:
        min:
          type: number
          format: float
          description: Minimum relevance score
        max:
          type: number
          format: float
          description: Maximum relevance score
    Models.SearchCustomerRequest:
      type: object
      properties:
        search:
          type: string
        tags:
          type: array
          items:
            type: string
      description: Customer search parameters - all fields are optional
    Models.SearchMeta:
      type: object
      required:
        - total
        - duration
      properties:
        total:
          type: integer
          format: int32
          description: Total matching results
        query:
          type: string
          description: Search query used
        filters:
          type: array
          items:
            type: string
          description: Applied filters
        duration:
          type: integer
          format: int32
          description: Search duration in milliseconds
        scoreRange:
          allOf:
            - $ref: "#/components/schemas/Models.ScoreRange"
          description: Search relevance score range
    Models.SearchSalonRequest:
      type: object
      properties:
        keyword:
          type: string
        city:
          type: string
        category:
          $ref: "#/components/schemas/Models.ServiceCategoryType"
      description: Salon search parameters - all fields are optional
    Models.Season:
      type: object
      required:
        - name
        - startMonth
        - endMonth
        - multiplier
      properties:
        name:
          type: string
        startMonth:
          type: integer
          format: int32
        endMonth:
          type: integer
          format: int32
        multiplier:
          $ref: "#/components/schemas/Models.decimal"
    Models.Service:
      type: object
      required:
        - id
        - salonId
        - info
        - category
        - pricing
        - duration
        - status
        - name
        - description
        - price
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.ServiceId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        info:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceInfo"
          description: Service basic information
        category:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceCategoryType"
          description: Service category and sub-category
        categoryId:
          $ref: "#/components/schemas/Models.CategoryId"
        pricing:
          allOf:
            - $ref: "#/components/schemas/Models.ServicePricing"
          description: Pricing information
        duration:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceDuration"
          description: Duration settings
        availability:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceAvailabilityDetail"
          description: Availability settings
        requirements:
          type: array
          items:
            $ref: "#/components/schemas/Models.BookingRequirementDetail"
          description: Booking requirements
        options:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceOptionDetail"
          description: Service options and addons
        restrictions:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceRestrictions"
          description: Service restrictions
        performance:
          allOf:
            - $ref: "#/components/schemas/Models.ServicePerformance"
          description: Performance metrics
        associations:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceAssociations"
          description: Service associations
        metadata:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceMetadata"
          description: Service metadata
        status:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceStatusDetail"
          description: Service status
        name:
          type: string
          description: Legacy fields for compatibility
        description:
          type: string
        price:
          type: integer
          format: int32
        imageUrl:
          type: string
        requiredStaffLevel:
          type: integer
          format: int32
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.ServiceAssociations:
      type: object
      required:
        - categoryId
      properties:
        categoryId:
          $ref: "#/components/schemas/Models.CategoryId"
        parentServiceId:
          $ref: "#/components/schemas/Models.ServiceId"
        childServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        requiredServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        recommendedServiceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        qualifiedStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
        preferredStaffIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffId"
    Models.ServiceAvailabilityDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.ServiceAvailabilityType"
        schedule:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSchedule"
        requiresApproval:
          type: boolean
        seasons:
          type: array
          items:
            $ref: "#/components/schemas/Models.Season"
        maxPerDay:
          type: integer
          format: int32
        maxPerWeek:
          type: integer
          format: int32
    Models.ServiceAvailabilityType:
      type: string
      enum:
        - always
        - scheduled
        - by_appointment
        - seasonal
        - limited
    Models.ServiceCategoryType:
      type: string
      enum:
        - cut
        - color
        - perm
        - treatment
        - spa
        - other
      description: Service category types
    Models.ServiceDuration:
      type: object
      required:
        - standard
        - includesConsultation
      properties:
        standard:
          type: integer
          format: int32
        minimum:
          type: integer
          format: int32
        maximum:
          type: integer
          format: int32
        bufferBefore:
          type: integer
          format: int32
        bufferAfter:
          type: integer
          format: int32
        includesConsultation:
          type: boolean
    Models.ServiceId:
      type: string
      format: uuid
      description: Branded UUID type for Service ID
    Models.ServiceInfo:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        nameKana:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        benefits:
          type: array
          items:
            type: string
        targetCustomer:
          type: string
        imageUrls:
          type: array
          items:
            type: string
        videoUrl:
          type: string
    Models.ServiceMetadata:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        keywords:
          type: array
          items:
            type: string
        seoTitle:
          type: string
        seoDescription:
          type: string
        internalNotes:
          type: string
        sortOrder:
          type: integer
          format: int32
        featured:
          type: boolean
        hideFromMenu:
          type: boolean
    Models.ServiceOptionDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.ServiceOptionType"
        name:
          type: string
        price:
          type: integer
          format: int32
        duration:
          type: integer
          format: int32
        description:
          type: string
        fromLevel:
          type: string
        toLevel:
          type: string
        additionalPrice:
          type: integer
          format: int32
        extension:
          type: integer
          format: int32
        productId:
          type: string
        required:
          type: boolean
        withService:
          $ref: "#/components/schemas/Models.ServiceId"
        discountAmount:
          type: integer
          format: int32
    Models.ServiceOptionType:
      type: string
      enum:
        - addon
        - upgrade
        - duration
        - product
        - combo
    Models.ServicePerformance:
      type: object
      required:
        - bookingCount
        - completionRate
        - reviewCount
        - revenue
      properties:
        bookingCount:
          type: integer
          format: int32
        completionRate:
          $ref: "#/components/schemas/Models.decimal"
        averageRating:
          $ref: "#/components/schemas/Models.decimal"
        reviewCount:
          type: integer
          format: int32
        revenue:
          type: integer
          format: int64
        popularityScore:
          $ref: "#/components/schemas/Models.decimal"
        repeatRate:
          $ref: "#/components/schemas/Models.decimal"
    Models.ServicePreference:
      type: object
      properties:
        favoriteServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        avoidServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        preferredDuration:
          type: integer
          format: int32
        preferredPriceRange:
          $ref: "#/components/schemas/Models.PriceRangeFilter"
    Models.ServicePricing:
      type: object
      required:
        - strategy
        - taxIncluded
        - currency
        - depositRequired
      properties:
        strategy:
          $ref: "#/components/schemas/Models.PricingStrategyDetail"
        taxIncluded:
          type: boolean
        currency:
          $ref: "#/components/schemas/Models.CurrencyCodeType"
        minimumPrice:
          type: integer
          format: int32
        maximumPrice:
          type: integer
          format: int32
        depositRequired:
          type: boolean
        depositAmount:
          type: integer
          format: int32
        cancellationFee:
          $ref: "#/components/schemas/Models.CancellationFee"
    Models.ServiceRestrictions:
      type: object
      properties:
        requiredStaffLevel:
          $ref: "#/components/schemas/Models.StaffLevelType"
        requiredCertifications:
          type: array
          items:
            type: string
        maxConcurrent:
          type: integer
          format: int32
        minIntervalDays:
          type: integer
          format: int32
        maxBookingsPerCustomer:
          $ref: "#/components/schemas/Models.BookingLimit"
        blackoutDates:
          type: array
          items:
            type: string
            format: date-time
    Models.ServiceSchedule:
      type: object
      required:
        - dayOfWeek
        - startTime
        - endTime
      properties:
        dayOfWeek:
          $ref: "#/components/schemas/Models.DayOfWeekType"
        startTime:
          type: string
        endTime:
          type: string
        maxBookings:
          type: integer
          format: int32
    Models.ServiceStatusDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.ServiceStatusType"
        reason:
          type: string
        since:
          type: string
          format: date-time
        availableMonths:
          type: array
          items:
            type: integer
            format: int32
        availableUntil:
          type: string
          format: date-time
        remainingSlots:
          type: integer
          format: int32
        discontinuedAt:
          type: string
          format: date-time
        replacementId:
          $ref: "#/components/schemas/Models.ServiceId"
        launchDate:
          type: string
          format: date-time
    Models.ServiceStatusType:
      type: string
      enum:
        - active
        - inactive
        - seasonal
        - limited
        - discontinued
        - coming_soon
    Models.ServiceSummary:
      type: object
      required:
        - id
        - name
      properties:
        id:
          $ref: "#/components/schemas/Models.ServiceId"
        name:
          type: string
        bookingCount:
          type: integer
          format: int32
      description: Service summary for various contexts
    Models.Session:
      type: object
      required:
        - id
        - userId
        - refreshToken
        - ipAddress
        - userAgent
        - expiresAt
        - rememberMe
        - createdAt
        - lastActivityAt
      properties:
        id:
          type: string
          description: Unique session identifier
        userId:
          allOf:
            - $ref: "#/components/schemas/Models.UserId"
          description: User ID associated with this session
        refreshToken:
          type: string
          description: Refresh token for this session
        ipAddress:
          type: string
          description: IP address from which the session was created
        userAgent:
          type: string
          description: User agent string
        expiresAt:
          type: string
          format: date-time
          description: Session expiry time
        rememberMe:
          type: boolean
          description: Remember me flag
          default: false
        createdAt:
          type: string
          format: date-time
          description: Session creation timestamp
        lastActivityAt:
          type: string
          format: date-time
          description: Last activity timestamp
      description: Session information
    Models.SessionId:
      type: string
      format: uuid
      description: Branded UUID type for Session ID
    Models.SessionListResponse:
      type: object
      required:
        - sessions
        - total
      properties:
        sessions:
          type: array
          items:
            $ref: "#/components/schemas/Models.Session"
          description: Active sessions
        total:
          type: integer
          format: int32
          description: Total number of sessions
      description: Session list response
    Models.ShareLink:
      type: object
      required:
        - id
        - token
        - attachmentId
        - downloadCount
        - hasPassword
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          description: 共有リンクID
        token:
          type: string
          description: 共有トークン
        attachmentId:
          type: string
          description: 添付ファイルID
        expiresAt:
          type: string
          format: date-time
          description: 有効期限（オプション）
        maxDownloads:
          type: integer
          format: int32
          description: 最大ダウンロード数（オプション）
        downloadCount:
          type: integer
          format: int32
          description: 現在のダウンロード数
        hasPassword:
          type: boolean
          description: パスワード保護
        allowedEmails:
          type: array
          items:
            type: string
          description: 許可されたメールアドレス（オプション）
        createdBy:
          type: string
          description: 作成者ID
        createdAt:
          type: string
          format: date-time
          description: 作成日時
      description: 共有リンク
    Models.SoftDelete:
      type: object
      required:
        - isDeleted
      properties:
        isDeleted:
          type: boolean
          description: Whether the record is deleted
          default: false
        deletedAt:
          type: string
          format: date-time
          description: Deletion timestamp
        deletedBy:
          type: string
          description: User who deleted the record
        deletionReason:
          type: string
          description: Deletion reason
      description: Soft delete information
    Models.SpaSubCategoryType:
      type: string
      enum:
        - head_spa
        - scalp_massage
        - aromatherapy
        - relaxation
    Models.Staff:
      type: object
      required:
        - id
        - salonId
        - name
        - contactInfo
        - specialties
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.StaffId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        bio:
          type: string
        yearsOfExperience:
          type: integer
          format: int32
        certifications:
          type: array
          items:
            type: string
        qualifications:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffQualification"
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSchedule"
        isActive:
          type: boolean
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPermission"
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
    Models.StaffAvailability:
      type: object
      required:
        - staffId
        - dayOfWeek
        - startTime
        - endTime
      properties:
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        dayOfWeek:
          $ref: "#/components/schemas/Models.DayOfWeekType"
        startTime:
          type: string
        endTime:
          type: string
        breakStart:
          type: string
        breakEnd:
          type: string
    Models.StaffId:
      type: string
      format: uuid
      description: Branded UUID type for Staff ID
    Models.StaffLevelType:
      type: string
      enum:
        - junior
        - stylist
        - senior
        - expert
        - director
    Models.StaffPerformance:
      type: object
      required:
        - staffId
        - staffName
        - totalSales
        - serviceCount
        - averageServiceValue
      properties:
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        staffName:
          type: string
        totalSales:
          $ref: "#/components/schemas/Models.Money"
        serviceCount:
          type: integer
          format: int32
        averageServiceValue:
          $ref: "#/components/schemas/Models.Money"
        customerSatisfaction:
          type: number
          format: float
      description: Staff performance metrics
    Models.StaffPermission:
      type: object
      required:
        - resource
        - actions
      properties:
        resource:
          type: string
        actions:
          type: array
          items:
            type: string
        scope:
          type: string
        expiresAt:
          type: string
          format: date-time
    Models.StaffQualification:
      type: object
      required:
        - name
        - certificationDate
      properties:
        name:
          type: string
        certificationDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
        issuer:
          type: string
        credentialId:
          type: string
    Models.StaffSchedule:
      type: object
      required:
        - dayOfWeek
        - startTime
        - endTime
      properties:
        dayOfWeek:
          $ref: "#/components/schemas/Models.DayOfWeekType"
        startTime:
          type: string
        endTime:
          type: string
        breakTime:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
        effectivePeriod:
          $ref: "#/components/schemas/Models.DateRange"
    Models.StaffSummary:
      type: object
      required:
        - id
        - name
      properties:
        id:
          $ref: "#/components/schemas/Models.StaffId"
        name:
          type: string
        rating:
          type: number
          format: float
        bookingCount:
          type: integer
          format: int32
      description: Staff summary for various contexts
    Models.StockAlert:
      type: object
      required:
        - itemId
        - threshold
        - currentStock
        - triggeredAt
      properties:
        itemId:
          $ref: "#/components/schemas/Models.InventoryId"
        threshold:
          type: number
          format: float
        currentStock:
          type: number
          format: float
        triggeredAt:
          type: string
          format: date-time
    Models.StockMovement:
      type: object
      required:
        - id
        - itemId
        - salonId
        - type
        - quantity
        - reason
        - performedBy
        - occurredAt
        - inventoryId
        - stockAfter
        - movedAt
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        itemId:
          $ref: "#/components/schemas/Models.InventoryId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        type:
          type: string
          enum:
            - in
            - out
            - adjustment
            - transfer
        quantity:
          type: number
          format: float
        reason:
          type: string
        performedBy:
          $ref: "#/components/schemas/Models.StaffId"
        occurredAt:
          type: string
          format: date-time
        referenceId:
          type: string
        notes:
          type: string
        metadata:
          type: object
          additionalProperties: {}
        inventoryId:
          $ref: "#/components/schemas/Models.InventoryId"
        stockAfter:
          type: number
          format: float
          description: Stock level after movement
        orderId:
          allOf:
            - $ref: "#/components/schemas/Models.OrderId"
          description: Reason for movement
        treatmentRecordId:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentRecordId"
          description: Related treatment
        movedAt:
          type: string
          format: date-time
          description: Movement timestamp
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: Stock movement record
    Models.StockMovementInput:
      type: object
      required:
        - inventoryId
        - type
        - quantity
        - reason
      properties:
        inventoryId:
          $ref: "#/components/schemas/Models.InventoryId"
        type:
          type: string
          enum:
            - in
            - out
            - adjustment
            - transfer
        quantity:
          type: number
          format: float
        reason:
          type: string
        orderId:
          $ref: "#/components/schemas/Models.OrderId"
        treatmentRecordId:
          $ref: "#/components/schemas/Models.TreatmentRecordId"
        notes:
          type: string
    Models.StylePreference:
      type: object
      properties:
        preferredLength:
          type: string
        preferredColors:
          type: array
          items:
            type: string
        avoidStyles:
          type: array
          items:
            type: string
        inspirationImages:
          type: array
          items:
            type: string
    Models.StylingSubCategoryType:
      type: string
      enum:
        - blowout
        - updo
        - braiding
        - extensions
        - event_styling
    Models.SystemRoleType:
      type: string
      enum:
        - super_admin
        - salon_owner
        - salon_manager
        - senior_staff
        - staff
        - receptionist
        - customer
        - guest
    Models.TimeSlot:
      type: object
      required:
        - startTime
        - endTime
      properties:
        startTime:
          type: string
        endTime:
          type: string
    Models.TokenRefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token
      description: Token refresh request
    Models.TreatmentRecord:
      type: object
      required:
        - id
        - bookingId
        - customerId
        - staffId
        - salonId
        - treatment
        - serviceIds
        - startTime
        - endTime
        - totalAmount
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: "#/components/schemas/Models.TreatmentRecordId"
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        treatment:
          allOf:
            - $ref: "#/components/schemas/Models.TreatmentType"
          description: Type of treatment performed
        serviceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
          description: Services performed during this treatment
        startTime:
          type: string
          format: date-time
          description: TreatmentType start time
        endTime:
          type: string
          format: date-time
          description: TreatmentType end time
        notes:
          type: string
          description: Detailed notes about the treatment
        usedMaterials:
          type: array
          items:
            $ref: "#/components/schemas/Models.MaterialUsage"
          description: Materials and products used
        photos:
          type: array
          items:
            $ref: "#/components/schemas/Models.AttachmentId"
          description: Before/after photos
        customerFeedback:
          type: string
          description: Customer feedback and notes
        nextRecommendations:
          type: string
          description: Recommendations for next visit
        totalAmount:
          type: number
          format: float
          description: Total amount charged
        discountAmount:
          type: number
          format: float
          description: Discount applied
        pointsEarned:
          type: integer
          format: int32
          description: Points earned
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
      description: TreatmentType record for customer visit
    Models.TreatmentRecordCreateInput:
      type: object
      required:
        - bookingId
        - customerId
        - staffId
        - treatment
        - serviceIds
        - startTime
        - endTime
        - totalAmount
      properties:
        bookingId:
          $ref: "#/components/schemas/Models.BookingId"
        customerId:
          $ref: "#/components/schemas/Models.CustomerId"
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        treatment:
          $ref: "#/components/schemas/Models.TreatmentType"
        serviceIds:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceId"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        notes:
          type: string
        usedMaterials:
          type: array
          items:
            $ref: "#/components/schemas/Models.MaterialUsage"
        customerFeedback:
          type: string
        nextRecommendations:
          type: string
        totalAmount:
          type: number
          format: float
        discountAmount:
          type: number
          format: float
        pointsEarned:
          type: integer
          format: int32
    Models.TreatmentRecordId:
      type: string
      format: uuid
      description: Branded UUID type for TreatmentType Record ID
    Models.TreatmentRecordUpdateInput:
      type: object
      properties:
        notes:
          type: string
        usedMaterials:
          type: array
          items:
            $ref: "#/components/schemas/Models.MaterialUsage"
        customerFeedback:
          type: string
        nextRecommendations:
          type: string
        photos:
          type: array
          items:
            $ref: "#/components/schemas/Models.AttachmentId"
    Models.TreatmentSubCategoryType:
      type: string
      enum:
        - deep_conditioning
        - protein_treatment
        - scalp_treatment
        - keratin_treatment
        - olaplex
    Models.TreatmentType:
      type: string
      enum:
        - cut
        - color
        - perm
        - treatment
        - head_spa
        - styling
        - extension
        - nail
        - eyelash
        - other
    Models.TwoFactorDisableRequest:
      type: object
      required:
        - password
        - code
      properties:
        password:
          type: string
          description: Current password for verification
        code:
          type: string
          description: Current TOTP code for verification
      description: Two-factor authentication disable request
    Models.TwoFactorEnableRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: Current password for verification
      description: Two-factor authentication enable request
    Models.TwoFactorSetupResponse:
      type: object
      required:
        - qrCodeUrl
        - secret
        - backupCodes
      properties:
        qrCodeUrl:
          type: string
          description: QR code URL for authenticator app
        secret:
          type: string
          description: Manual entry secret
        backupCodes:
          type: array
          items:
            type: string
          description: Backup codes for recovery
      description: Two-factor authentication setup response
    Models.TwoFactorStatusType:
      type: string
      enum:
        - disabled
        - pending
        - enabled
      description: Two-factor authentication status
    Models.TwoFactorVerifyRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: TOTP code from authenticator app
      description: Two-factor authentication verify request
    Models.UnauthorizedError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum:
            - UNAUTHORIZED
        message:
          type: string
    Models.UpdateBookingRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.BookingStatusUpdate"
        statusCode:
          $ref: "#/components/schemas/Models.BookingStatusCodeType"
        waitlistEntry:
          $ref: "#/components/schemas/Models.WaitlistEntryUpdate"
        deposit:
          $ref: "#/components/schemas/Models.BookingDepositUpdate"
        paymentMethod:
          $ref: "#/components/schemas/Models.PaymentMethodType"
        paymentStatus:
          $ref: "#/components/schemas/Models.PaymentStatusCodeType"
        discountAmount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        finalAmount:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        balanceDue:
          $ref: "#/components/schemas/Models.MoneyUpdate"
        notes:
          type: string
        metadata:
          type: object
          additionalProperties: {}
      description: Booking update request with optional fields for partial updates
    Models.UpdateBookingRequestWithReset:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.BookingStatus"
        statusCode:
          $ref: "#/components/schemas/Models.BookingStatusCodeType"
        waitlistEntry:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.WaitlistEntry"
          nullable: true
        deposit:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.BookingDeposit"
          nullable: true
        paymentMethod:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentMethodType"
          nullable: true
        paymentStatus:
          allOf:
            - $ref: "#/components/schemas/Models.PaymentStatusCodeType"
          nullable: true
        discountAmount:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          nullable: true
        finalAmount:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          nullable: true
        balanceDue:
          type: object
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          nullable: true
        notes:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
      description: Booking update request with reset capability
    Models.UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        preferences:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
      description: Customer update request with optional fields for partial updates
    Models.UpdateCustomerRequestUpdate:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfoUpdate"
        preferences:
          type: string
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        birthDate:
          type: string
          format: date
      description: Customer update request with optional fields for partial updates
    Models.UpdateCustomerRequestWithReset:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        preferences:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
      description: Customer update request with reset capability
    Models.UpdateReservationRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.ReservationStatusType"
        notes:
          type: string
        startTime:
          type: string
          format: date-time
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
      description: Reservation update request with optional fields for partial updates
    Models.UpdateReservationRequestWithReset:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Models.ReservationStatusType"
        notes:
          type: string
          nullable: true
        startTime:
          type: string
          format: date-time
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
      description: Reservation update request with reset capability
    Models.UpdateReviewRequest:
      type: object
      properties:
        overallRating:
          type: integer
          format: int32
        comment:
          type: string
        title:
          type: string
        serviceRating:
          type: integer
          format: int32
        staffRating:
          type: integer
          format: int32
        cleanlinessRating:
          type: integer
          format: int32
        valueRating:
          type: integer
          format: int32
        imageUrls:
          type: array
          items:
            type: string
      description: Review update request with optional fields for partial updates
    Models.UpdateReviewRequestWithReset:
      type: object
      properties:
        overallRating:
          type: integer
          format: int32
        comment:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        serviceRating:
          type: integer
          format: int32
          nullable: true
        staffRating:
          type: integer
          format: int32
          nullable: true
        cleanlinessRating:
          type: integer
          format: int32
          nullable: true
        valueRating:
          type: integer
          format: int32
          nullable: true
        imageUrls:
          type: array
          items:
            type: string
          nullable: true
      description: Review update request with reset capability
    Models.UpdateSalonRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          $ref: "#/components/schemas/Models.Address"
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
        imageUrls:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
      description: Salon update request with optional fields for partial updates
    Models.UpdateSalonRequestUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          $ref: "#/components/schemas/Models.AddressUpdate"
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfoUpdate"
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
        imageUrls:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
      description: Salon update request with optional fields for partial updates
    Models.UpdateSalonRequestWithReset:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          $ref: "#/components/schemas/Models.Address"
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        openingHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.OpeningHours"
        businessHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
          nullable: true
        imageUrls:
          type: array
          items:
            type: string
          nullable: true
        features:
          type: array
          items:
            type: string
          nullable: true
      description: Salon update request with reset capability
    Models.UpdateServiceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        category:
          $ref: "#/components/schemas/Models.ServiceCategoryType"
        categoryId:
          $ref: "#/components/schemas/Models.CategoryId"
        imageUrl:
          type: string
        requiredStaffLevel:
          type: integer
          format: int32
        depositAmount:
          type: integer
          format: int32
        isActive:
          type: boolean
        maxAdvanceBookingDays:
          type: integer
          format: int32
        minAdvanceBookingHours:
          type: integer
          format: int32
      description: Service update request with optional fields for partial updates
    Models.UpdateServiceRequestWithReset:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        duration:
          type: integer
          format: int32
        price:
          type: integer
          format: int32
        category:
          $ref: "#/components/schemas/Models.ServiceCategoryType"
        categoryId:
          type: string
          allOf:
            - $ref: "#/components/schemas/Models.CategoryId"
          nullable: true
        imageUrl:
          type: string
          nullable: true
        requiredStaffLevel:
          type: integer
          format: int32
          nullable: true
        depositAmount:
          type: integer
          format: int32
          nullable: true
        isActive:
          type: boolean
        maxAdvanceBookingDays:
          type: integer
          format: int32
          nullable: true
        minAdvanceBookingHours:
          type: integer
          format: int32
          nullable: true
      description: Service update request with reset capability
    Models.UpdateStaffRequest:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        bio:
          type: string
        yearsOfExperience:
          type: integer
          format: int32
        certifications:
          type: array
          items:
            type: string
        qualifications:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffQualification"
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSchedule"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPermission"
        isActive:
          type: boolean
      description: Staff update request with optional fields for partial updates
    Models.UpdateStaffRequestWithReset:
      type: object
      properties:
        name:
          type: string
        contactInfo:
          $ref: "#/components/schemas/Models.ContactInfo"
        specialties:
          type: array
          items:
            type: string
        imageUrl:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        yearsOfExperience:
          type: integer
          format: int32
          nullable: true
        certifications:
          type: array
          items:
            type: string
          nullable: true
        qualifications:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffQualification"
          nullable: true
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSchedule"
          nullable: true
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffPermission"
          nullable: true
        isActive:
          type: boolean
      description: Staff update request with reset capability
    Models.UploadAttachmentRequest:
      type: object
      required:
        - file
        - filename
        - content
      properties:
        file:
          type: string
          format: byte
          description: ファイル本体
        filename:
          type: string
          description: ファイル名
        content:
          type: string
          description: Content-Type
        salonId:
          type: string
          description: サロンID（オプション）
        tags:
          type: string
          description: タグ（オプション）
      description: ファイルアップロードリクエスト（マルチパート）
    Models.UploadUrlResponse:
      type: object
      required:
        - uploadUrl
        - key
        - expiresAt
      properties:
        uploadUrl:
          type: string
          description: 署名付きアップロードURL
        key:
          type: string
          description: ストレージキー
        expiresAt:
          type: string
          format: date-time
          description: URL有効期限
      description: 署名付きアップロードURLレスポンス
    Models.User:
      type: object
      required:
        - id
        - email
        - name
        - role
        - status
        - emailVerified
        - twoFactorStatus
        - failedLoginAttempts
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          description: User's email address (unique)
        name:
          type: string
          description: User's display name
        role:
          allOf:
            - $ref: "#/components/schemas/Models.AuthUserRoleType"
          description: User's role in the system
        status:
          allOf:
            - $ref: "#/components/schemas/Models.UserAccountStatusType"
          description: Account status
        emailVerified:
          type: boolean
          description: Email verification status
        emailVerificationToken:
          type: string
          description: Email verification token (internal use)
        emailVerificationTokenExpiry:
          type: string
          format: date-time
          description: Email verification token expiry
        twoFactorStatus:
          allOf:
            - $ref: "#/components/schemas/Models.TwoFactorStatusType"
          description: Two-factor authentication status
        twoFactorSecret:
          type: string
          description: Two-factor authentication secret (encrypted)
        backupCodes:
          type: array
          items:
            type: string
          description: Backup codes for 2FA recovery
        failedLoginAttempts:
          type: integer
          format: int32
          description: Number of failed login attempts
          default: 0
        lockedAt:
          type: string
          format: date-time
          description: Time when the account was locked
        passwordResetToken:
          type: string
          description: Password reset token (internal use)
        passwordResetTokenExpiry:
          type: string
          format: date-time
          description: Password reset token expiry
        lastPasswordChangeAt:
          type: string
          format: date-time
          description: Last password change timestamp
        passwordHistory:
          type: array
          items:
            type: string
          description: Previous password hashes for history check
        trustedIpAddresses:
          type: array
          items:
            type: string
          description: Trusted IP addresses for this user
        customerId:
          allOf:
            - $ref: "#/components/schemas/Models.CustomerId"
          description: Reference to customer profile if user is a customer
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: Reference to staff profile if user is staff
        roleDetail:
          allOf:
            - $ref: "#/components/schemas/Models.UserRoleDetail"
          description: Extended role information
        authState:
          allOf:
            - $ref: "#/components/schemas/Models.AuthenticationStateType"
          description: Authentication state
        emailVerificationState:
          allOf:
            - $ref: "#/components/schemas/Models.EmailVerificationStateType"
          description: Email verification state
        passwordResetState:
          allOf:
            - $ref: "#/components/schemas/Models.PasswordResetStateType"
          description: Password reset state
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp
        lastLoginIp:
          type: string
          description: Last login IP address
      description: User authentication information
    Models.UserAccountStatusType:
      type: string
      enum:
        - active
        - unverified
        - locked
        - suspended
        - deleted
      description: User account status
    Models.UserId:
      type: string
      format: uuid
      description: Branded UUID type for User ID
    Models.UserRoleAssignInput:
      type: object
      required:
        - userId
        - roleId
      properties:
        userId:
          type: string
        roleId:
          $ref: "#/components/schemas/Models.RoleId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        expiresAt:
          type: string
          format: date-time
    Models.UserRoleAssignment:
      type: object
      required:
        - userId
        - roleId
        - assignedAt
        - assignedBy
        - isActive
      properties:
        userId:
          type: string
        roleId:
          $ref: "#/components/schemas/Models.RoleId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        assignedAt:
          type: string
          format: date-time
          description: Assignment date
        assignedBy:
          type: string
          description: Assigned by
        expiresAt:
          type: string
          format: date-time
          description: Expiration date
        isActive:
          type: boolean
          description: Is active
      description: User role assignment
    Models.UserRoleDetail:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/Models.UserRoleType"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        level:
          $ref: "#/components/schemas/Models.StaffLevelType"
    Models.UserRoleType:
      type: string
      enum:
        - customer
        - staff
        - manager
        - admin
        - owner
    Models.ValidationError:
      type: object
      required:
        - field
        - rule
        - message
      properties:
        field:
          type: string
          description: Field path that failed validation
        rule:
          type: string
          description: Validation rule that failed
        message:
          type: string
          description: Human-readable error message
        value:
          description: Actual value that failed validation
        constraint:
          description: Expected value or constraint
      description: Validation error details
    Models.Versioned:
      type: object
      required:
        - version
        - lastModified
      properties:
        version:
          type: integer
          format: int32
          description: Version number
        lastModified:
          type: string
          format: date-time
          description: Last modification timestamp
      description: Version information for optimistic locking
    Models.VisitHistory:
      type: object
      required:
        - visitCount
        - totalSpent
        - cancelCount
        - noShowCount
        - completedServices
      properties:
        visitCount:
          type: integer
          format: int32
        firstVisitDate:
          type: string
          format: date-time
        lastVisitDate:
          type: string
          format: date-time
        averageSpendPerVisit:
          type: integer
          format: int32
        totalSpent:
          type: integer
          format: int32
        cancelCount:
          type: integer
          format: int32
        noShowCount:
          type: integer
          format: int32
        completedServices:
          type: integer
          format: int32
    Models.WaitlistEntry:
      type: object
      required:
        - position
        - joinedAt
      properties:
        position:
          type: integer
          format: int32
        estimatedTime:
          type: string
          format: date-time
        joinedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        notifiedAt:
          type: string
          format: date-time
        preferredStaffId:
          $ref: "#/components/schemas/Models.StaffId"
        preferredServiceId:
          $ref: "#/components/schemas/Models.ServiceId"
        notes:
          type: string
    Models.WaitlistEntryUpdate:
      type: object
      properties:
        position:
          type: integer
          format: int32
        estimatedTime:
          type: string
          format: date-time
        joinedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        notifiedAt:
          type: string
          format: date-time
        preferredStaffId:
          $ref: "#/components/schemas/Models.StaffId"
        preferredServiceId:
          $ref: "#/components/schemas/Models.ServiceId"
        notes:
          type: string
    Models.decimal:
      type: number
      format: double
    Operations.AuditEntry:
      type: object
      required:
        - id
        - entityId
        - entity
        - operation
        - userId
        - timestamp
      properties:
        id:
          type: string
          description: Audit entry ID
        entityId:
          type: string
          description: Entity ID
        entity:
          type: string
          description: Entity type
        operation:
          type: string
          enum:
            - create
            - update
            - delete
            - restore
          description: Operation performed
        userId:
          type: string
          description: User who performed the operation
        userName:
          type: string
          description: User display name
        ipAddress:
          type: string
          description: IP address
        userAgent:
          type: string
          description: User agent
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the operation
        changes:
          type: array
          items:
            $ref: "#/components/schemas/Operations.ChangeSet"
          description: Changes made
        before:
          description: Entity snapshot before change
        after:
          description: Entity snapshot after change
        metadata:
          type: object
          additionalProperties: {}
          description: Additional metadata
      description: Audit entry model
    Operations.AvailableTimeSlot:
      type: object
      required:
        - startTime
        - endTime
        - availableStaff
        - availability
      properties:
        startTime:
          type: string
          format: date-time
          description: Start time
        endTime:
          type: string
          format: date-time
          description: End time
        availableStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSummary"
          description: Available staff members
        availability:
          type: integer
          format: int32
          description: Availability percentage
    Operations.ChangeSet:
      type: object
      required:
        - field
      properties:
        field:
          type: string
          description: Field that was changed
        oldValue:
          description: Previous value
        newValue:
          description: New value
    Operations.CustomerPreferences:
      type: object
      required:
        - contactMethod
        - notifications
        - marketingOptIn
      properties:
        contactMethod:
          allOf:
            - $ref: "#/components/schemas/Models.ContactMethodType"
          description: Preferred contact method
        notifications:
          allOf:
            - $ref: "#/components/schemas/Operations.NotificationPreferences"
          description: NotificationType preferences
        marketingOptIn:
          type: boolean
          description: Marketing opt-in status
        preferredLanguage:
          type: string
          description: Preferred language
        accessibilityRequirements:
          type: array
          items:
            type: string
          description: Accessibility requirements
        allergies:
          type: array
          items:
            type: string
          description: Allergies or sensitivities
        preferredTimes:
          type: array
          items:
            $ref: "#/components/schemas/Operations.TimePreference"
          description: Preferred appointment times
      description: Customer preferences model
    Operations.CustomerStatistics:
      type: object
      required:
        - totalBookings
        - totalSpent
        - averageBookingValue
        - favoriteServices
        - favoriteStaff
        - loyaltyPoints
        - customerSince
        - cancellationRate
        - noShowRate
      properties:
        totalBookings:
          type: integer
          format: int32
          description: Total bookings
        totalSpent:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: Total spent
        averageBookingValue:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: Average booking value
        lastVisit:
          type: string
          format: date-time
          description: Last visit date
        favoriteServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSummary"
          description: Favorite services
        favoriteStaff:
          type: array
          items:
            $ref: "#/components/schemas/Models.StaffSummary"
          description: Favorite staff
        loyaltyPoints:
          type: integer
          format: int32
          description: Loyalty points
        customerSince:
          type: string
          format: date-time
          description: Customer since
        cancellationRate:
          type: number
          format: float
          description: Cancellation rate
        noShowRate:
          type: number
          format: float
          description: No-show rate
      description: Customer statistics response
    Operations.NotificationPreferences:
      type: object
      required:
        - email
        - sms
        - push
        - reminderHours
      properties:
        email:
          type: boolean
          description: Email notifications enabled
        sms:
          type: boolean
          description: SMS notifications enabled
        push:
          type: boolean
          description: Push notifications enabled
        reminderHours:
          type: integer
          format: int32
          description: Reminder timing (hours before appointment)
    Operations.SalonAvailabilityRequest:
      type: object
      required:
        - serviceId
        - date
      properties:
        serviceId:
          allOf:
            - $ref: "#/components/schemas/Models.ServiceId"
          description: Service ID to check availability for
        date:
          type: string
          format: date
          description: Preferred date
        timeSlot:
          allOf:
            - $ref: "#/components/schemas/Models.TimeSlot"
          description: Preferred time slot
        staffId:
          allOf:
            - $ref: "#/components/schemas/Models.StaffId"
          description: Preferred staff ID
        slots:
          type: integer
          format: int32
          minimum: 1
          description: Number of slots needed
          default: 1
      description: Salon availability check
    Operations.SalonAvailabilityResponse:
      type: object
      required:
        - availableSlots
        - waitlistAvailable
      properties:
        availableSlots:
          type: array
          items:
            $ref: "#/components/schemas/Operations.AvailableTimeSlot"
          description: Available time slots
        nextAvailableDate:
          type: string
          format: date
          description: Next available date if requested date is full
        waitlistAvailable:
          type: boolean
          description: Waitlist available
    Operations.SalonRecommendation:
      type: object
      required:
        - score
        - reasons
        - matchingServices
      properties:
        score:
          type: integer
          format: int32
          description: Recommendation score (0-100)
        reasons:
          type: array
          items:
            type: string
          description: Reasons for recommendation
        matchingServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSummary"
          description: Matching services
      allOf:
        - $ref: "#/components/schemas/Models.SalonSummary"
    Operations.SalonStatistics:
      type: object
      required:
        - totalServices
        - totalStaff
        - totalReviews
        - monthlyBookings
        - popularServices
        - busyHours
      properties:
        totalServices:
          type: integer
          format: int32
          description: Total number of services
        totalStaff:
          type: integer
          format: int32
          description: Total number of staff
        averageRating:
          type: number
          format: float
          description: Average rating
        totalReviews:
          type: integer
          format: int32
          description: Total reviews
        monthlyBookings:
          type: integer
          format: int32
          description: Total bookings this month
        monthlyRevenue:
          allOf:
            - $ref: "#/components/schemas/Models.Money"
          description: Revenue this month
        popularServices:
          type: array
          items:
            $ref: "#/components/schemas/Models.ServiceSummary"
          description: Popular services
        busyHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          description: Busy hours
      description: Salon statistics response
    Operations.SalonWithDistance:
      type: object
      required:
        - distance
      properties:
        distance:
          type: number
          format: float
          description: Distance from reference point in kilometers
        travelTime:
          type: integer
          format: int32
          description: Estimated travel time in minutes
      allOf:
        - $ref: "#/components/schemas/Models.Salon"
      description: Extended models for improved operations
    Operations.ScheduleException:
      type: object
      required:
        - date
        - type
      properties:
        date:
          type: string
          format: date
        type:
          type: string
          enum:
            - holiday
            - sick_leave
            - vacation
            - training
            - other
        description:
          type: string
        alternativeStaffId:
          $ref: "#/components/schemas/Models.StaffId"
    Operations.StaffSchedule:
      type: object
      required:
        - staffId
        - salonId
        - regularHours
        - exceptions
        - effectiveFrom
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
        - version
        - isDeleted
      properties:
        staffId:
          $ref: "#/components/schemas/Models.StaffId"
        salonId:
          $ref: "#/components/schemas/Models.SalonId"
        regularHours:
          type: array
          items:
            $ref: "#/components/schemas/Models.BusinessHours"
        exceptions:
          type: array
          items:
            $ref: "#/components/schemas/Operations.ScheduleException"
        effectiveFrom:
          type: string
          format: date-time
        effectiveTo:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
          description: Record creation timestamp
        createdBy:
          type: string
          description: User who created the record
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        updatedBy:
          type: string
          description: User who last updated the record
        version:
          type: integer
          format: int32
          description: Version number for optimistic locking
        isDeleted:
          type: boolean
          description: Whether the record is deleted
          default: false
        deletedAt:
          type: string
          format: date-time
          description: Deletion timestamp
        deletedBy:
          type: string
          description: User who deleted the record
        deletionReason:
          type: string
          description: Deletion reason
    Operations.TimePreference:
      type: object
      required:
        - dayOfWeek
        - timeSlots
      properties:
        dayOfWeek:
          allOf:
            - $ref: "#/components/schemas/Models.DayOfWeekType"
          description: Day of week
        timeSlots:
          type: array
          items:
            $ref: "#/components/schemas/Models.TimeSlot"
          description: Preferred time slots
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
servers:
  - url: http://localhost:3000
    description: Local Development Server
    variables: {}
  - url: https://staging-api.beauty-salon.com
    description: Staging API Server
    variables: {}
  - url: https://api.beauty-salon.com
    description: Production API Server
    variables: {}
