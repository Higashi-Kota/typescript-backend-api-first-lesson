// Generated from TypeSpec/OpenAPI using openapi-typescript
// DO NOT EDIT MANUALLY
// Last generated: 2025-08-03T01:51:53.874Z





// Base types from OpenAPI
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/admin/auth/trusted-ip/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add trusted IP address for a user */
        post: operations["AdminAuthOperations_addTrustedIp"];
        /** @description Remove trusted IP address for a user */
        delete: operations["AdminAuthOperations_removeTrustedIp"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/auth/unlock/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Unlock a locked user account */
        post: operations["AdminAuthOperations_unlockAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 添付ファイルの一覧取得 */
        get: operations["AttachmentOperations_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/attachments/share-links/{shareLinkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description 共有リンクの削除 */
        delete: operations["AttachmentOperations_deleteShareLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/attachments/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description ファイルの直接アップロード
         *     JSONでファイル情報をアップロード */
        post: operations["AttachmentOperations_uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/attachments/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description 署名付きアップロードURLの取得
         *     クライアントが直接ストレージにアップロードするためのURL */
        post: operations["AttachmentOperations_getUploadUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/attachments/{attachmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 添付ファイル情報の取得 */
        get: operations["AttachmentOperations_get"];
        put?: never;
        post?: never;
        /** @description 添付ファイルの削除 */
        delete: operations["AttachmentOperations_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/attachments/{attachmentId}/download-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 署名付きダウンロードURLの取得 */
        get: operations["AttachmentOperations_getDownloadUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/attachments/{attachmentId}/share-links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 共有リンクの一覧取得 */
        get: operations["AttachmentOperations_listShareLinks"];
        put?: never;
        /** @description 共有リンクの作成 */
        post: operations["AttachmentOperations_createShareLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/2fa/backup-codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate new backup codes for 2FA */
        post: operations["AuthOperations_generateBackupCodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/2fa/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Disable two-factor authentication */
        post: operations["AuthOperations_disableTwoFactor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/2fa/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Enable two-factor authentication */
        post: operations["AuthOperations_enableTwoFactor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/2fa/qr-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get QR code for 2FA setup */
        get: operations["AuthOperations_getTwoFactorQRCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/2fa/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verify two-factor authentication code */
        post: operations["AuthOperations_verifyTwoFactor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Change password */
        post: operations["AuthOperations_changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Request password reset */
        post: operations["AuthOperations_forgotPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Login with email and password */
        post: operations["AuthOperations_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout and invalidate session */
        post: operations["AuthOperations_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout from all sessions */
        post: operations["AuthOperations_logoutAll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user information */
        get: operations["AuthOperations_getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refresh access token */
        post: operations["AuthOperations_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register a new user account */
        post: operations["AuthOperations_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset password with token */
        post: operations["AuthOperations_resetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/reset-password/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Verify password reset token */
        get: operations["AuthOperations_verifyResetToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get active sessions */
        get: operations["AuthOperations_getSessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/sessions/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Revoke a specific session */
        delete: operations["AuthOperations_revokeSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify-email/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Confirm email verification */
        post: operations["AuthOperations_confirmEmailVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify-email/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Send email verification */
        post: operations["AuthOperations_sendEmailVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List bookings */
        get: operations["BookingOperations_list"];
        put?: never;
        /** Create booking */
        post: operations["BookingOperations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get booking */
        get: operations["BookingOperations_get"];
        put?: never;
        post?: never;
        /** Delete booking */
        delete: operations["BookingOperations_delete"];
        options?: never;
        head?: never;
        /** Update booking */
        patch: operations["BookingOperations_update"];
        trace?: never;
    };
    "/api/v1/bookings/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel booking */
        post: operations["BookingOperations_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/{id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm booking */
        post: operations["BookingOperations_confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/{id}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process payment */
        post: operations["BookingOperations_processPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/{id}/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add reservation to booking */
        post: operations["BookingOperations_addReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/{id}/reservations/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove reservation from booking */
        delete: operations["BookingOperations_removeReservation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List customers */
        get: operations["CustomerOperations_list"];
        put?: never;
        /** Create customer */
        post: operations["CustomerOperations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Merge customer records */
        post: operations["CustomerOperations_merge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer */
        get: operations["CustomerOperations_get"];
        /** Update customer */
        put: operations["CustomerOperations_update"];
        post?: never;
        /** Delete customer */
        delete: operations["CustomerOperations_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/{id}/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer bookings */
        get: operations["CustomerOperations_getBookings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/{id}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer profile */
        get: operations["CustomerOperations_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/{id}/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer reservations */
        get: operations["CustomerOperations_getReservations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List reservations */
        get: operations["ReservationOperations_list"];
        put?: never;
        /** Create reservation */
        post: operations["ReservationOperations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get reservation */
        get: operations["ReservationOperations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update reservation */
        patch: operations["ReservationOperations_update"];
        trace?: never;
    };
    "/api/v1/reservations/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel reservation */
        post: operations["ReservationOperations_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservations/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete reservation */
        post: operations["ReservationOperations_complete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservations/{id}/reschedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reschedule reservation */
        post: operations["ReservationOperations_reschedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List reviews */
        get: operations["ReviewOperations_list"];
        put?: never;
        /** Create review */
        post: operations["ReviewOperations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get review */
        get: operations["ReviewOperations_get"];
        put?: never;
        post?: never;
        /** Delete review */
        delete: operations["ReviewOperations_delete"];
        options?: never;
        head?: never;
        /** Update review */
        patch: operations["ReviewOperations_update"];
        trace?: never;
    };
    "/api/v1/reviews/{id}/helpful": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark review as helpful */
        post: operations["ReviewOperations_markHelpful"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{id}/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Report review */
        post: operations["ReviewOperations_report"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all salons */
        get: operations["SalonOperations_list"];
        put?: never;
        /** Create a new salon */
        post: operations["SalonOperations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search salons */
        get: operations["SalonOperations_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get salon by ID */
        get: operations["SalonOperations_get"];
        /** Update salon */
        put: operations["SalonOperations_update"];
        post?: never;
        /** Delete salon */
        delete: operations["SalonOperations_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/available-slots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available slots */
        get: operations["AvailabilityOperations_getAvailableSlots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/available-slots/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check availability */
        post: operations["AvailabilityOperations_checkAvailability"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get salon reviews */
        get: operations["SalonReviewOperations_getSalonReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/reviews/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get salon reviews summary */
        get: operations["SalonReviewOperations_getSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List salon services */
        get: operations["ServiceOperations_list"];
        put?: never;
        /** Create service */
        post: operations["ServiceOperations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/services/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Bulk update services */
        patch: operations["ServiceOperations_bulkUpdate"];
        trace?: never;
    };
    "/api/v1/salons/{salonId}/services/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get service */
        get: operations["ServiceOperations_get"];
        /** Update service */
        put: operations["ServiceOperations_update"];
        post?: never;
        /** Delete service */
        delete: operations["ServiceOperations_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/staff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List staff members */
        get: operations["StaffOperations_list"];
        put?: never;
        /** Create staff member */
        post: operations["StaffOperations_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/staff/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get staff member */
        get: operations["StaffOperations_get"];
        /** Update staff member */
        put: operations["StaffOperations_update"];
        post?: never;
        /** Delete staff member */
        delete: operations["StaffOperations_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/salons/{salonId}/staff/{id}/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get staff availability */
        get: operations["StaffOperations_getAvailability"];
        /** Update staff availability */
        put: operations["StaffOperations_updateAvailability"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List service categories */
        get: operations["ServiceCategoryOperations_listCategories"];
        put?: never;
        /** Create service category */
        post: operations["ServiceCategoryOperations_createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update service category */
        put: operations["ServiceCategoryOperations_updateCategory"];
        post?: never;
        /** Delete service category */
        delete: operations["ServiceCategoryOperations_deleteCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/share/{shareToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 共有リンクからファイル情報を取得 */
        get: operations["ShareOperations_getSharedFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/share/{shareToken}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 共有リンクからダウンロードURLを取得 */
        get: operations["ShareOperations_downloadSharedFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staff/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search staff across all salons */
        get: operations["GlobalStaffOperations_searchStaff"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staff/{staffId}/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get staff reviews */
        get: operations["StaffReviewOperations_getStaffReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staff/{staffId}/reviews/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get staff reviews summary */
        get: operations["StaffReviewOperations_getStaffSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description 共有リンクアクセスリクエスト */
        "Models.AccessShareLinkRequest": {
            /** @description パスワード（パスワード保護されている場合） */
            password?: string;
        };
        "Models.Address": {
            street: string;
            city: string;
            state: string;
            postalCode: string;
            /** @default Japan */
            country: string;
        };
        /** @description 添付ファイル情報 */
        "Models.Attachment": {
            /** @description 添付ファイルID (UUID) */
            id: string;
            /** @description ストレージキー */
            key: string;
            /** @description オリジナルファイル名 */
            filename: string;
            /** @description Content-Type */
            contentType: string;
            /**
             * Format: int32
             * @description ファイルサイズ（バイト）
             */
            size: number;
            /** @description ファイルタイプ */
            fileType: components["schemas"]["Models.FileType"];
            /** @description アップロードしたユーザーID */
            uploadedBy: string;
            /** @description 関連するサロンID（オプション） */
            salonId?: string;
            /** @description メタデータ */
            metadata?: {
                [key: string]: unknown;
            };
            /** @description タグ */
            tags?: {
                [key: string]: string;
            };
            /**
             * Format: date-time
             * @description アップロード日時
             */
            uploadedAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        "Models.AuditInfo": {
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        /** @description Generic auth success response */
        "Models.AuthSuccessResponse": {
            /** @description Success message */
            message: string;
        };
        "Models.AvailableSlot": {
            staffId: components["schemas"]["Models.StaffId"];
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
        };
        "Models.Booking": {
            id: components["schemas"]["Models.BookingId"];
            salonId: components["schemas"]["Models.SalonId"];
            customerId: components["schemas"]["Models.CustomerId"];
            reservationIds: components["schemas"]["Models.ReservationId"][];
            status: components["schemas"]["Models.BookingStatus"];
            /** Format: int32 */
            totalAmount: number;
            /** Format: int32 */
            discountAmount?: number;
            /** Format: int32 */
            finalAmount: number;
            paymentMethod?: string;
            paymentStatus: string;
            notes?: string;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        "Models.BookingDetail": {
            reservations: components["schemas"]["Models.ReservationDetail"][];
            customerName: string;
            salonName: string;
        } & components["schemas"]["Models.Booking"];
        "Models.BookingId": string;
        /** @enum {string} */
        "Models.BookingStatus": "draft" | "pending" | "confirmed" | "in_progress" | "completed" | "cancelled" | "no_show";
        "Models.CategoryId": string;
        "Models.ContactInfo": {
            email: string;
            phoneNumber: string;
            alternativePhone?: string;
        };
        "Models.CreateBookingRequest": {
            salonId: components["schemas"]["Models.SalonId"];
            customerId: components["schemas"]["Models.CustomerId"];
            reservationIds: components["schemas"]["Models.ReservationId"][];
            /** Format: int32 */
            discountAmount?: number;
            paymentMethod?: string;
            notes?: string;
        };
        /** @description Customer creation request with required and optional fields */
        "Models.CreateCustomerRequest": {
            name: string;
            contactInfo: components["schemas"]["Models.ContactInfo"];
            preferences?: string;
            notes?: string;
            tags?: string[];
            /** Format: date */
            birthDate?: string;
        };
        "Models.CreateReservationRequest": {
            salonId: components["schemas"]["Models.SalonId"];
            customerId: components["schemas"]["Models.CustomerId"];
            staffId: components["schemas"]["Models.StaffId"];
            serviceId: components["schemas"]["Models.ServiceId"];
            /** Format: date-time */
            startTime: string;
            notes?: string;
        };
        "Models.CreateReviewRequest": {
            salonId: components["schemas"]["Models.SalonId"];
            customerId: components["schemas"]["Models.CustomerId"];
            reservationId: components["schemas"]["Models.ReservationId"];
            staffId?: components["schemas"]["Models.StaffId"];
            /** Format: int32 */
            rating: number;
            comment?: string;
            /** Format: int32 */
            serviceRating?: number;
            /** Format: int32 */
            staffRating?: number;
            /** Format: int32 */
            atmosphereRating?: number;
            images?: string[];
        };
        /** @description Salon creation request with required and optional fields */
        "Models.CreateSalonRequest": {
            name: string;
            description: string;
            address: components["schemas"]["Models.Address"];
            contactInfo: components["schemas"]["Models.ContactInfo"];
            openingHours: components["schemas"]["Models.OpeningHours"][];
            imageUrls?: string[];
            features?: string[];
        };
        "Models.CreateServiceRequest": {
            salonId: components["schemas"]["Models.SalonId"];
            name: string;
            description: string;
            /** Format: int32 */
            duration: number;
            /** Format: int32 */
            price: number;
            category: components["schemas"]["Models.ServiceCategory"];
            categoryId?: components["schemas"]["Models.CategoryId"];
            imageUrl?: string;
            /** Format: int32 */
            requiredStaffLevel?: number;
        };
        /** @description 共有リンク作成リクエスト */
        "Models.CreateShareLinkRequest": {
            /**
             * Format: date-time
             * @description 有効期限（オプション）
             */
            expiresAt?: string;
            /**
             * Format: int32
             * @description 最大ダウンロード数（オプション）
             */
            maxDownloads?: number;
            /** @description パスワード（オプション） */
            password?: string;
            /** @description 許可されたメールアドレス（オプション） */
            allowedEmails?: string[];
        };
        "Models.CreateStaffRequest": {
            salonId: components["schemas"]["Models.SalonId"];
            name: string;
            contactInfo: components["schemas"]["Models.ContactInfo"];
            specialties: string[];
            imageUrl?: string;
            bio?: string;
            /** Format: int32 */
            yearsOfExperience?: number;
            certifications?: string[];
        };
        "Models.Customer": {
            id: components["schemas"]["Models.CustomerId"];
            name: string;
            contactInfo: components["schemas"]["Models.ContactInfo"];
            preferences?: string;
            notes?: string;
            tags?: string[];
            /** Format: int32 */
            loyaltyPoints?: number;
            membershipLevel?: string;
            /** Format: date */
            birthDate?: string;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        "Models.CustomerId": string;
        "Models.CustomerProfile": {
            /** Format: int32 */
            visitCount: number;
            /** Format: date-time */
            lastVisitDate?: string;
            favoriteStaffIds?: components["schemas"]["Models.StaffId"][];
            favoriteServiceIds?: components["schemas"]["Models.ServiceId"][];
            /** Format: int32 */
            totalSpent: number;
        } & components["schemas"]["Models.Customer"];
        /** @enum {string} */
        "Models.DayOfWeek": "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday";
        /** @description 署名付きダウンロードURL取得レスポンス */
        "Models.DownloadUrlResponse": {
            /** @description 署名付きダウンロードURL */
            downloadUrl: string;
            /**
             * Format: date-time
             * @description URL有効期限
             */
            expiresAt: string;
        };
        /** @description Email verification request */
        "Models.EmailVerificationRequest": {
            /** @description Email verification token */
            token: string;
        };
        "Models.Error": {
            code: string;
            message: string;
            details?: {
                [key: string]: unknown;
            };
        };
        /**
         * @description ファイルタイプ
         * @enum {string}
         */
        "Models.FileType": "image" | "document" | "other";
        /** @description Customer bookings filter parameters */
        "Models.GetCustomerBookingsRequest": {
            status?: components["schemas"]["Models.BookingStatus"];
        };
        /** @description Customer reservations filter parameters */
        "Models.GetCustomerReservationsRequest": {
            status?: components["schemas"]["Models.ReservationStatus"];
            /** Format: date-time */
            from?: string;
            /** Format: date-time */
            to?: string;
        };
        /** @description 署名付きアップロードURL取得リクエスト */
        "Models.GetUploadUrlRequest": {
            /** @description ファイル名 */
            filename: string;
            /** @description Content-Type */
            contentType: string;
            /**
             * Format: int32
             * @description ファイルサイズ（バイト）
             */
            size: number;
            /** @description サロンID（オプション） */
            salonId?: string;
        };
        /** @description Login request */
        "Models.LoginRequest": {
            /** @description User's email address */
            email: string;
            /** @description User's password */
            password: string;
            /**
             * @description Remember me flag for extended session
             * @default false
             */
            rememberMe: boolean;
            /** @description Two-factor authentication code (if 2FA is enabled) */
            twoFactorCode?: string;
        };
        /** @description Login response */
        "Models.LoginResponse": {
            /** @description Access token for API requests */
            accessToken: string;
            /** @description Refresh token for obtaining new access tokens */
            refreshToken: string;
            /**
             * @description Token type (always 'Bearer')
             * @default Bearer
             */
            tokenType: string;
            /**
             * Format: int32
             * @description Access token expiry in seconds
             */
            expiresIn: number;
            /** @description Logged in user information */
            user: components["schemas"]["Models.User"];
        };
        "Models.OpeningHours": {
            dayOfWeek: components["schemas"]["Models.DayOfWeek"];
            openTime: string;
            closeTime: string;
            isHoliday: boolean;
        };
        /** @description ページネーション付き添付ファイル一覧 */
        "Models.PaginatedAttachments": {
            /** @description 添付ファイル一覧 */
            items: components["schemas"]["Models.Attachment"][];
            /**
             * Format: int32
             * @description 合計件数
             */
            total: number;
            /**
             * Format: int32
             * @description 現在のページ
             */
            page: number;
            /**
             * Format: int32
             * @description ページあたりの件数
             */
            limit: number;
            /**
             * Format: int32
             * @description 総ページ数
             */
            totalPages: number;
        };
        /** @description Password change request */
        "Models.PasswordChangeRequest": {
            /** @description Current password for verification */
            currentPassword: string;
            /** @description New password */
            newPassword: string;
        };
        /** @description Password reset confirmation */
        "Models.PasswordResetConfirmRequest": {
            /** @description Password reset token from email */
            token: string;
            /** @description New password */
            newPassword: string;
        };
        /** @description Password reset request */
        "Models.PasswordResetRequest": {
            /** @description Email address of the account */
            email: string;
        };
        /** @description Registration request */
        "Models.RegisterRequest": {
            /** @description User's email address */
            email: string;
            /** @description User's password (must meet security requirements) */
            password: string;
            /** @description User's display name */
            name: string;
            /**
             * @description User's role (defaults to customer)
             * @default customer
             */
            role: components["schemas"]["Models.UserRole"];
        };
        "Models.Reservation": {
            id: components["schemas"]["Models.ReservationId"];
            salonId: components["schemas"]["Models.SalonId"];
            customerId: components["schemas"]["Models.CustomerId"];
            staffId: components["schemas"]["Models.StaffId"];
            serviceId: components["schemas"]["Models.ServiceId"];
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            status: components["schemas"]["Models.ReservationStatus"];
            notes?: string;
            /** Format: int32 */
            totalAmount: number;
            /** Format: int32 */
            depositAmount?: number;
            isPaid: boolean;
            cancellationReason?: string;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        "Models.ReservationDetail": {
            customerName: string;
            staffName: string;
            serviceName: string;
            serviceCategory: components["schemas"]["Models.ServiceCategory"];
            /** Format: int32 */
            serviceDuration: number;
        } & components["schemas"]["Models.Reservation"];
        "Models.ReservationId": string;
        /** @enum {string} */
        "Models.ReservationStatus": "pending" | "confirmed" | "cancelled" | "completed" | "no_show";
        "Models.Review": {
            id: components["schemas"]["Models.ReviewId"];
            salonId: components["schemas"]["Models.SalonId"];
            customerId: components["schemas"]["Models.CustomerId"];
            reservationId: components["schemas"]["Models.ReservationId"];
            staffId?: components["schemas"]["Models.StaffId"];
            /** Format: int32 */
            rating: number;
            comment?: string;
            /** Format: int32 */
            serviceRating?: number;
            /** Format: int32 */
            staffRating?: number;
            /** Format: int32 */
            atmosphereRating?: number;
            images?: string[];
            isVerified: boolean;
            /**
             * Format: int32
             * @default 0
             */
            helpfulCount: number;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        "Models.ReviewId": string;
        "Models.ReviewSummary": {
            /** Format: float */
            averageRating: number;
            /** Format: int32 */
            totalReviews: number;
            ratingDistribution: {
                [key: string]: number;
            };
        };
        "Models.Salon": {
            id: components["schemas"]["Models.SalonId"];
            name: string;
            description: string;
            address: components["schemas"]["Models.Address"];
            contactInfo: components["schemas"]["Models.ContactInfo"];
            openingHours: components["schemas"]["Models.OpeningHours"][];
            imageUrls?: string[];
            features?: string[];
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        "Models.SalonId": string;
        "Models.SalonSummary": {
            id: components["schemas"]["Models.SalonId"];
            name: string;
            address: components["schemas"]["Models.Address"];
            /** Format: float */
            rating?: number;
            /** Format: int32 */
            reviewCount?: number;
        };
        /** @description Customer search parameters - all fields are optional */
        "Models.SearchCustomerRequest": {
            search?: string;
            tags?: string[];
        };
        /** @description Salon search parameters - all fields are optional */
        "Models.SearchSalonRequest": {
            keyword?: string;
            city?: string;
            category?: components["schemas"]["Models.ServiceCategory"];
        };
        "Models.Service": {
            id: components["schemas"]["Models.ServiceId"];
            salonId: components["schemas"]["Models.SalonId"];
            name: string;
            description: string;
            /** Format: int32 */
            duration: number;
            /** Format: int32 */
            price: number;
            category: components["schemas"]["Models.ServiceCategory"];
            categoryId?: components["schemas"]["Models.CategoryId"];
            imageUrl?: string;
            /** Format: int32 */
            requiredStaffLevel?: number;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        /** @enum {string} */
        "Models.ServiceCategory": "cut" | "color" | "perm" | "treatment" | "spa" | "other";
        "Models.ServiceCategoryModel": {
            id: components["schemas"]["Models.CategoryId"];
            name: string;
            description: string;
            parentId?: components["schemas"]["Models.CategoryId"];
            /** Format: int32 */
            displayOrder: number;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        "Models.ServiceId": string;
        /** @description Session information */
        "Models.Session": {
            /** @description Unique session identifier */
            id: string;
            /** @description User ID associated with this session */
            userId: string;
            /** @description Refresh token for this session */
            refreshToken: string;
            /** @description IP address from which the session was created */
            ipAddress: string;
            /** @description User agent string */
            userAgent: string;
            /**
             * Format: date-time
             * @description Session expiry time
             */
            expiresAt: string;
            /**
             * @description Remember me flag
             * @default false
             */
            rememberMe: boolean;
            /**
             * Format: date-time
             * @description Session creation timestamp
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last activity timestamp
             */
            lastActivityAt: string;
        };
        /** @description Session list response */
        "Models.SessionListResponse": {
            /** @description Active sessions */
            sessions: components["schemas"]["Models.Session"][];
            /**
             * Format: int32
             * @description Total number of sessions
             */
            total: number;
        };
        /** @description 共有リンク */
        "Models.ShareLink": {
            /** @description 共有リンクID */
            id: string;
            /** @description 共有トークン */
            token: string;
            /** @description 添付ファイルID */
            attachmentId: string;
            /**
             * Format: date-time
             * @description 有効期限（オプション）
             */
            expiresAt?: string;
            /**
             * Format: int32
             * @description 最大ダウンロード数（オプション）
             */
            maxDownloads?: number;
            /**
             * Format: int32
             * @description 現在のダウンロード数
             */
            downloadCount: number;
            /** @description パスワード保護 */
            hasPassword: boolean;
            /** @description 許可されたメールアドレス（オプション） */
            allowedEmails?: string[];
            /** @description 作成者ID */
            createdBy: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
        };
        "Models.Staff": {
            id: components["schemas"]["Models.StaffId"];
            salonId: components["schemas"]["Models.SalonId"];
            name: string;
            contactInfo: components["schemas"]["Models.ContactInfo"];
            specialties: string[];
            imageUrl?: string;
            bio?: string;
            /** Format: int32 */
            yearsOfExperience?: number;
            certifications?: string[];
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            createdBy?: string;
            /** Format: date-time */
            updatedAt: string;
            updatedBy?: string;
        };
        "Models.StaffAvailability": {
            staffId: components["schemas"]["Models.StaffId"];
            dayOfWeek: components["schemas"]["Models.DayOfWeek"];
            startTime: string;
            endTime: string;
            breakStart?: string;
            breakEnd?: string;
        };
        "Models.StaffId": string;
        /** @description Token refresh request */
        "Models.TokenRefreshRequest": {
            /** @description Refresh token */
            refreshToken: string;
        };
        /** @description Two-factor authentication disable request */
        "Models.TwoFactorDisableRequest": {
            /** @description Current password for verification */
            password: string;
            /** @description Current TOTP code for verification */
            code: string;
        };
        /** @description Two-factor authentication enable request */
        "Models.TwoFactorEnableRequest": {
            /** @description Current password for verification */
            password: string;
        };
        /** @description Two-factor authentication setup response */
        "Models.TwoFactorSetupResponse": {
            /** @description QR code URL for authenticator app */
            qrCodeUrl: string;
            /** @description Manual entry secret */
            secret: string;
            /** @description Backup codes for recovery */
            backupCodes: string[];
        };
        /**
         * @description Two-factor authentication status
         * @enum {string}
         */
        "Models.TwoFactorStatus": "disabled" | "pending" | "enabled";
        /** @description Two-factor authentication verify request */
        "Models.TwoFactorVerifyRequest": {
            /** @description TOTP code from authenticator app */
            code: string;
        };
        /** @description Booking update request with optional fields for partial updates */
        "Models.UpdateBookingRequest": {
            status?: components["schemas"]["Models.BookingStatus"];
            paymentMethod?: string;
            paymentStatus?: string;
            notes?: string;
        };
        /** @description Booking update request with reset capability */
        "Models.UpdateBookingRequestWithReset": {
            status?: components["schemas"]["Models.BookingStatus"];
            paymentMethod?: string | null;
            paymentStatus?: string;
            notes?: string | null;
        };
        /** @description Customer update request with optional fields for partial updates */
        "Models.UpdateCustomerRequest": {
            name?: string;
            contactInfo?: components["schemas"]["Models.ContactInfo"];
            preferences?: string;
            notes?: string;
            tags?: string[];
            /** Format: date */
            birthDate?: string;
        };
        /** @description Customer update request with reset capability */
        "Models.UpdateCustomerRequestWithReset": {
            name?: string;
            contactInfo?: components["schemas"]["Models.ContactInfo"];
            preferences?: string | null;
            notes?: string | null;
            tags?: string[] | null;
            /** Format: date */
            birthDate?: string | null;
        };
        /** @description Reservation update request with optional fields for partial updates */
        "Models.UpdateReservationRequest": {
            status?: components["schemas"]["Models.ReservationStatus"];
            notes?: string;
            /** Format: date-time */
            startTime?: string;
            staffId?: components["schemas"]["Models.StaffId"];
        };
        /** @description Reservation update request with reset capability */
        "Models.UpdateReservationRequestWithReset": {
            status?: components["schemas"]["Models.ReservationStatus"];
            notes?: string | null;
            /** Format: date-time */
            startTime?: string;
            staffId?: components["schemas"]["Models.StaffId"];
        };
        /** @description Review update request with optional fields for partial updates */
        "Models.UpdateReviewRequest": {
            /** Format: int32 */
            rating?: number;
            comment?: string;
            /** Format: int32 */
            serviceRating?: number;
            /** Format: int32 */
            staffRating?: number;
            /** Format: int32 */
            atmosphereRating?: number;
            images?: string[];
        };
        /** @description Review update request with reset capability */
        "Models.UpdateReviewRequestWithReset": {
            /** Format: int32 */
            rating?: number;
            comment?: string | null;
            /** Format: int32 */
            serviceRating?: number | null;
            /** Format: int32 */
            staffRating?: number | null;
            /** Format: int32 */
            atmosphereRating?: number | null;
            images?: string[] | null;
        };
        /** @description Salon update request with optional fields for partial updates */
        "Models.UpdateSalonRequest": {
            name?: string;
            description?: string;
            address?: components["schemas"]["Models.Address"];
            contactInfo?: components["schemas"]["Models.ContactInfo"];
            openingHours?: components["schemas"]["Models.OpeningHours"][];
            imageUrls?: string[];
            features?: string[];
        };
        /** @description Salon update request with reset capability */
        "Models.UpdateSalonRequestWithReset": {
            name?: string;
            description?: string;
            address?: components["schemas"]["Models.Address"];
            contactInfo?: components["schemas"]["Models.ContactInfo"];
            openingHours?: components["schemas"]["Models.OpeningHours"][];
            imageUrls?: string[] | null;
            features?: string[] | null;
        };
        /** @description Service update request with optional fields for partial updates */
        "Models.UpdateServiceRequest": {
            name?: string;
            description?: string;
            /** Format: int32 */
            duration?: number;
            /** Format: int32 */
            price?: number;
            category?: components["schemas"]["Models.ServiceCategory"];
            categoryId?: components["schemas"]["Models.CategoryId"];
            imageUrl?: string;
            /** Format: int32 */
            requiredStaffLevel?: number;
            isActive?: boolean;
        };
        /** @description Service update request with reset capability */
        "Models.UpdateServiceRequestWithReset": {
            name?: string;
            description?: string;
            /** Format: int32 */
            duration?: number;
            /** Format: int32 */
            price?: number;
            category?: components["schemas"]["Models.ServiceCategory"];
            categoryId?: (string & components["schemas"]["Models.CategoryId"]) | null;
            imageUrl?: string | null;
            /** Format: int32 */
            requiredStaffLevel?: number | null;
            isActive?: boolean;
        };
        /** @description Staff update request with optional fields for partial updates */
        "Models.UpdateStaffRequest": {
            name?: string;
            contactInfo?: components["schemas"]["Models.ContactInfo"];
            specialties?: string[];
            imageUrl?: string;
            bio?: string;
            /** Format: int32 */
            yearsOfExperience?: number;
            certifications?: string[];
            isActive?: boolean;
        };
        /** @description Staff update request with reset capability */
        "Models.UpdateStaffRequestWithReset": {
            name?: string;
            contactInfo?: components["schemas"]["Models.ContactInfo"];
            specialties?: string[];
            imageUrl?: string | null;
            bio?: string | null;
            /** Format: int32 */
            yearsOfExperience?: number | null;
            certifications?: string[] | null;
            isActive?: boolean;
        };
        /** @description ファイルアップロードリクエスト（マルチパート） */
        "Models.UploadAttachmentRequest": {
            /**
             * Format: byte
             * @description ファイル本体
             */
            file: string;
            /** @description ファイル名 */
            filename: string;
            /** @description Content-Type */
            contentType: string;
            /** @description サロンID（オプション） */
            salonId?: string;
            /** @description タグ（オプション） */
            tags?: string;
        };
        /** @description 署名付きアップロードURLレスポンス */
        "Models.UploadUrlResponse": {
            /** @description 署名付きアップロードURL */
            uploadUrl: string;
            /** @description ストレージキー */
            key: string;
            /**
             * Format: date-time
             * @description URL有効期限
             */
            expiresAt: string;
        };
        /** @description User authentication information */
        "Models.User": {
            /** @description Unique identifier for the user */
            id: string;
            /** @description User's email address (unique) */
            email: string;
            /** @description User's display name */
            name: string;
            /** @description User's role in the system */
            role: components["schemas"]["Models.UserRole"];
            /** @description Account status */
            status: components["schemas"]["Models.UserAccountStatus"];
            /** @description Email verification status */
            emailVerified: boolean;
            /** @description Email verification token (internal use) */
            emailVerificationToken?: string;
            /**
             * Format: date-time
             * @description Email verification token expiry
             */
            emailVerificationTokenExpiry?: string;
            /** @description Two-factor authentication status */
            twoFactorStatus: components["schemas"]["Models.TwoFactorStatus"];
            /** @description Two-factor authentication secret (encrypted) */
            twoFactorSecret?: string;
            /** @description Backup codes for 2FA recovery */
            backupCodes?: string[];
            /**
             * Format: int32
             * @description Number of failed login attempts
             * @default 0
             */
            failedLoginAttempts: number;
            /**
             * Format: date-time
             * @description Time when the account was locked
             */
            lockedAt?: string;
            /** @description Password reset token (internal use) */
            passwordResetToken?: string;
            /**
             * Format: date-time
             * @description Password reset token expiry
             */
            passwordResetTokenExpiry?: string;
            /**
             * Format: date-time
             * @description Last password change timestamp
             */
            lastPasswordChangeAt?: string;
            /** @description Previous password hashes for history check */
            passwordHistory?: string[];
            /** @description Trusted IP addresses for this user */
            trustedIpAddresses?: string[];
            /** @description Reference to customer profile if user is a customer */
            customerId?: string;
            /** @description Reference to staff profile if user is staff */
            staffId?: string;
            /**
             * Format: date-time
             * @description Timestamp when the user was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the user was last updated
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description Last login timestamp
             */
            lastLoginAt?: string;
            /** @description Last login IP address */
            lastLoginIp?: string;
        };
        /**
         * @description User account status
         * @enum {string}
         */
        "Models.UserAccountStatus": "active" | "unverified" | "locked" | "suspended" | "deleted";
        /**
         * @description User roles in the system
         * @enum {string}
         */
        "Models.UserRole": "customer" | "staff" | "admin";
    };
    responses: never;
    parameters: {
        "Models.PaginationParams.limit": number;
        "Models.PaginationParams.offset": number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AdminAuthOperations_addTrustedIp: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ipAddress: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AdminAuthOperations_removeTrustedIp: {
        parameters: {
            query: {
                ipAddress: string;
            };
            header: {
                Authorization: string;
            };
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AdminAuthOperations_unlockAccount: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AttachmentOperations_list: {
        parameters: {
            query?: {
                salonId?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.PaginatedAttachments"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AttachmentOperations_deleteShareLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareLinkId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AttachmentOperations_uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UploadAttachmentRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Attachment"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AttachmentOperations_getUploadUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.GetUploadUrlRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.UploadUrlResponse"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AttachmentOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Attachment"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AttachmentOperations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AttachmentOperations_getDownloadUrl: {
        parameters: {
            query?: {
                inline?: boolean;
            };
            header?: never;
            path: {
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.DownloadUrlResponse"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AttachmentOperations_listShareLinks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.ShareLink"][] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AttachmentOperations_createShareLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateShareLinkRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.ShareLink"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_generateBackupCodes: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.TwoFactorVerifyRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        backupCodes: string[];
                    };
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_disableTwoFactor: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.TwoFactorDisableRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_enableTwoFactor: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.TwoFactorEnableRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.TwoFactorSetupResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_getTwoFactorQRCode: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.TwoFactorSetupResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_verifyTwoFactor: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.TwoFactorVerifyRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_changePassword: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.PasswordChangeRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_forgotPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.PasswordResetRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Client error */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.LoginRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.LoginResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Client error */
            423: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_logout: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_logoutAll: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_getCurrentUser: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.User"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.TokenRefreshRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.LoginResponse"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.RegisterRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.User"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_resetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.PasswordResetConfirmRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_verifyResetToken: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_getSessions: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.SessionListResponse"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_revokeSession: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_confirmEmailVerification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.EmailVerificationRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AuthOperations_sendEmailVerification: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AuthSuccessResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description Client error */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_list: {
        parameters: {
            query?: {
                salonId?: components["schemas"]["Models.SalonId"];
                customerId?: components["schemas"]["Models.CustomerId"];
                status?: components["schemas"]["Models.BookingStatus"];
                from?: string;
                to?: string;
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.BookingDetail"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    BookingOperations_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateBookingRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    location: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Booking"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.BookingDetail"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UpdateBookingRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Booking"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    reason?: string;
                    cancelReservations?: boolean;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Booking"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_confirm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Booking"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_processPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    paymentMethod: string;
                    /** Format: int32 */
                    amount: number;
                    transactionId?: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        booking: components["schemas"]["Models.Booking"];
                        paymentId: string;
                    };
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_addReservation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    reservationId: components["schemas"]["Models.ReservationId"];
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Booking"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    BookingOperations_removeReservation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.BookingId"];
                reservationId: components["schemas"]["Models.ReservationId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Booking"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    CustomerOperations_list: {
        parameters: {
            query?: {
                search?: string;
                tags?: string[];
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.Customer"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    CustomerOperations_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateCustomerRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    location: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Customer"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    CustomerOperations_merge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    primaryCustomerId: components["schemas"]["Models.CustomerId"];
                    secondaryCustomerId: components["schemas"]["Models.CustomerId"];
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Customer"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    CustomerOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.CustomerId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Customer"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    CustomerOperations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.CustomerId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UpdateCustomerRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Customer"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    CustomerOperations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.CustomerId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    CustomerOperations_getBookings: {
        parameters: {
            query?: {
                status?: components["schemas"]["Models.BookingStatus"];
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path: {
                id: components["schemas"]["Models.CustomerId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.BookingDetail"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    CustomerOperations_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.CustomerId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.CustomerProfile"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    CustomerOperations_getReservations: {
        parameters: {
            query?: {
                status?: components["schemas"]["Models.ReservationStatus"];
                from?: string;
                to?: string;
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path: {
                id: components["schemas"]["Models.CustomerId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.ReservationDetail"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    ReservationOperations_list: {
        parameters: {
            query?: {
                salonId?: components["schemas"]["Models.SalonId"];
                customerId?: components["schemas"]["Models.CustomerId"];
                staffId?: components["schemas"]["Models.StaffId"];
                status?: components["schemas"]["Models.ReservationStatus"];
                from?: string;
                to?: string;
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.ReservationDetail"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    ReservationOperations_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateReservationRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    location: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Reservation"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReservationOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReservationId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.ReservationDetail"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReservationOperations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReservationId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UpdateReservationRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Reservation"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReservationOperations_cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReservationId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    reason?: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Reservation"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReservationOperations_complete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReservationId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Reservation"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReservationOperations_reschedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReservationId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: date-time */
                    newStartTime: string;
                    staffId?: components["schemas"]["Models.StaffId"];
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Reservation"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReviewOperations_list: {
        parameters: {
            query?: {
                salonId?: components["schemas"]["Models.SalonId"];
                customerId?: components["schemas"]["Models.CustomerId"];
                staffId?: components["schemas"]["Models.StaffId"];
                minRating?: number;
                isVerified?: boolean;
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.Review"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    ReviewOperations_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateReviewRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    location: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Review"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReviewOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReviewId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Review"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReviewOperations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReviewId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access is forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReviewOperations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReviewId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UpdateReviewRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Review"];
                };
            };
            /** @description Access is forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReviewOperations_markHelpful: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReviewId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int32 */
                        helpfulCount: number;
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ReviewOperations_report: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.ReviewId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    reason: string;
                    details?: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        reportId: string;
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    SalonOperations_list: {
        parameters: {
            query?: {
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.SalonSummary"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    SalonOperations_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateSalonRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    location: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Salon"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    SalonOperations_search: {
        parameters: {
            query?: {
                keyword?: string;
                city?: string;
                category?: components["schemas"]["Models.ServiceCategory"];
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.SalonSummary"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    SalonOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Salon"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    SalonOperations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UpdateSalonRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Salon"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    SalonOperations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AvailabilityOperations_getAvailableSlots: {
        parameters: {
            query: {
                staffId?: components["schemas"]["Models.StaffId"];
                serviceId: components["schemas"]["Models.ServiceId"];
                date: string;
                duration?: number;
            };
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.AvailableSlot"][];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    AvailabilityOperations_checkAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    staffId: components["schemas"]["Models.StaffId"];
                    serviceId: components["schemas"]["Models.ServiceId"];
                    /** Format: date-time */
                    startTime: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        isAvailable: boolean;
                        conflicts?: components["schemas"]["Models.ReservationId"][];
                    };
                };
            };
        };
    };
    SalonReviewOperations_getSalonReviews: {
        parameters: {
            query?: {
                sortBy?: "recent" | "rating" | "helpful";
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.Review"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    SalonReviewOperations_getSummary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.ReviewSummary"];
                };
            };
        };
    };
    ServiceOperations_list: {
        parameters: {
            query?: {
                category?: components["schemas"]["Models.ServiceCategory"];
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.Service"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    ServiceOperations_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateServiceRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    location: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Service"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ServiceOperations_bulkUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    serviceIds?: components["schemas"]["Models.ServiceId"][];
                    updates?: components["schemas"]["Models.UpdateServiceRequest"];
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        updated: components["schemas"]["Models.ServiceId"][];
                        failed: {
                            serviceId: components["schemas"]["Models.ServiceId"];
                            error: string;
                        }[];
                    };
                };
            };
        };
    };
    ServiceOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.ServiceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Service"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ServiceOperations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.ServiceId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UpdateServiceRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Service"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ServiceOperations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.ServiceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    StaffOperations_list: {
        parameters: {
            query?: {
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.Staff"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    StaffOperations_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.CreateStaffRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    location: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Staff"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    StaffOperations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.StaffId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Staff"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    StaffOperations_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.StaffId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.UpdateStaffRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Staff"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    StaffOperations_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.StaffId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    StaffOperations_getAvailability: {
        parameters: {
            query: {
                date: string;
            };
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.StaffId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.StaffAvailability"][];
                };
            };
        };
    };
    StaffOperations_updateAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                salonId: components["schemas"]["Models.SalonId"];
                id: components["schemas"]["Models.StaffId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Models.StaffAvailability"][];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.StaffAvailability"][];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ServiceCategoryOperations_listCategories: {
        parameters: {
            query?: {
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.ServiceCategoryModel"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    ServiceCategoryOperations_createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description: string;
                    parentId?: components["schemas"]["Models.CategoryId"];
                    /** Format: int32 */
                    displayOrder: number;
                };
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.ServiceCategoryModel"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ServiceCategoryOperations_updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.CategoryId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    description?: string;
                    parentId?: components["schemas"]["Models.CategoryId"];
                    /** Format: int32 */
                    displayOrder?: number;
                    isActive?: boolean;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.ServiceCategoryModel"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ServiceCategoryOperations_deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["Models.CategoryId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ShareOperations_getSharedFile: {
        parameters: {
            query?: {
                password?: string;
            };
            header?: never;
            path: {
                shareToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.Attachment"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    ShareOperations_downloadSharedFile: {
        parameters: {
            query?: {
                password?: string;
            };
            header?: never;
            path: {
                shareToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.DownloadUrlResponse"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"] | components["schemas"]["Models.Error"];
                };
            };
        };
    };
    GlobalStaffOperations_searchStaff: {
        parameters: {
            query?: {
                specialty?: string;
                city?: string;
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.Staff"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    StaffReviewOperations_getStaffReviews: {
        parameters: {
            query?: {
                limit?: components["parameters"]["Models.PaginationParams.limit"];
                offset?: components["parameters"]["Models.PaginationParams.offset"];
            };
            header?: never;
            path: {
                staffId: components["schemas"]["Models.StaffId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Models.Review"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    };
                };
            };
        };
    };
    StaffReviewOperations_getStaffSummary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                staffId: components["schemas"]["Models.StaffId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Models.ReviewSummary"];
                };
            };
        };
    };
}


// Type extractors for API operations
export type Components = components extends { schemas: infer S } ? S : never;
export type Schemas = Components;
export type Paths = paths;
export type Operations = operations;


// Removed unused operation types per YAGNI principle
// These were never imported or used anywhere in the codebase
