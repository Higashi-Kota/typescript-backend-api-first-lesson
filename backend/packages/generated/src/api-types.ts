// Generated from TypeSpec/OpenAPI using openapi-typescript
// DO NOT EDIT MANUALLY
// Last generated: 2025-09-19T10:57:26.660Z

// Brand types are defined in domain package
// Import from @beauty-salon-backend/domain/shared/brand-types
// DO NOT define brand types here to avoid conflicts

// Base types from OpenAPI
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/access-control/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Check user access */
    post: operations['AccessControlOperations_checkAccess']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/check-permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Check multiple permissions */
    post: operations['AccessControlOperations_checkPermissions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/resource/{resource}/access': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get resource access list */
    get: operations['AccessControlOperations_getResourceAccess']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/user/{userId}/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get user effective permissions */
    get: operations['AccessControlOperations_getUserPermissions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Validate role permissions */
    post: operations['AccessControlOperations_validatePermissions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/admin/auth/trusted-ip/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add trusted IP address for a user */
    post: operations['AdminAuthOperations_addTrustedIp']
    /** @description Remove trusted IP address for a user */
    delete: operations['AdminAuthOperations_removeTrustedIp']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/admin/auth/unlock/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Unlock a locked user account */
    post: operations['AdminAuthOperations_unlockAccount']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 添付ファイルの一覧取得 */
    get: operations['AttachmentOperations_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/share-links/{shareLinkId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description 共有リンクの削除 */
    delete: operations['AttachmentOperations_deleteShareLink']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description ファイルの直接アップロード
     *     JSONでファイル情報をアップロード */
    post: operations['AttachmentOperations_uploadFile']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/upload-url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description 署名付きアップロードURLの取得
     *     クライアントが直接ストレージにアップロードするためのURL */
    post: operations['AttachmentOperations_getUploadUrl']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 添付ファイル情報の取得 */
    get: operations['AttachmentOperations_get']
    put?: never
    post?: never
    /** @description 添付ファイルの削除 */
    delete: operations['AttachmentOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}/download-url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 署名付きダウンロードURLの取得 */
    get: operations['AttachmentOperations_getDownloadUrl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}/share-links': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンクの一覧取得 */
    get: operations['AttachmentOperations_listShareLinks']
    put?: never
    /** @description 共有リンクの作成 */
    post: operations['AttachmentOperations_createShareLink']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/backup-codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Generate new backup codes for 2FA */
    post: operations['AuthOperations_generateBackupCodes']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/disable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Disable two-factor authentication */
    post: operations['AuthOperations_disableTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/enable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Enable two-factor authentication */
    post: operations['AuthOperations_enableTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/qr-code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get QR code for 2FA setup */
    get: operations['AuthOperations_getTwoFactorQRCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/verify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Verify two-factor authentication code */
    post: operations['AuthOperations_verifyTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/change-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Change password */
    post: operations['AuthOperations_changePassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/forgot-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Request password reset */
    post: operations['AuthOperations_forgotPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Login with email and password */
    post: operations['AuthOperations_login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Logout and invalidate session */
    post: operations['AuthOperations_logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout-all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Logout from all sessions */
    post: operations['AuthOperations_logoutAll']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get current user information */
    get: operations['AuthOperations_getCurrentUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Refresh access token */
    post: operations['AuthOperations_refreshToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Register a new user account */
    post: operations['AuthOperations_register']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Reset password with token */
    post: operations['AuthOperations_resetPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/reset-password/verify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Verify password reset token */
    get: operations['AuthOperations_verifyResetToken']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/sessions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get active sessions */
    get: operations['AuthOperations_getSessions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/sessions/{sessionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description Revoke a specific session */
    delete: operations['AuthOperations_revokeSession']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/verify-email/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Confirm email verification */
    post: operations['AuthOperations_confirmEmailVerification']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/verify-email/send': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Send email verification */
    post: operations['AuthOperations_sendEmailVerification']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List bookings */
    get: operations['BookingOperations_list']
    put?: never
    /** Create booking */
    post: operations['BookingOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get booking */
    get: operations['BookingOperations_get']
    put?: never
    post?: never
    /** Delete booking */
    delete: operations['BookingOperations_delete']
    options?: never
    head?: never
    /** Update booking */
    patch: operations['BookingOperations_update']
    trace?: never
  }
  '/api/v1/bookings/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cancel booking */
    post: operations['BookingOperations_cancel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Confirm booking */
    post: operations['BookingOperations_confirm']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/payment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Process payment */
    post: operations['BookingOperations_processPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Add reservation to booking */
    post: operations['BookingOperations_addReservation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/reservations/{reservationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Remove reservation from booking */
    delete: operations['BookingOperations_removeReservation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List customers */
    get: operations['CustomerOperations_list']
    put?: never
    /** Create customer */
    post: operations['CustomerOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/merge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Merge customer records */
    post: operations['CustomerOperations_merge']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get customer */
    get: operations['CustomerOperations_get']
    /** Update customer */
    put: operations['CustomerOperations_update']
    post?: never
    /** Delete customer */
    delete: operations['CustomerOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get customer bookings */
    get: operations['CustomerOperations_getBookings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get customer profile */
    get: operations['CustomerOperations_getProfile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get customer reservations */
    get: operations['CustomerOperations_getReservations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List reservations */
    get: operations['ReservationOperations_list']
    put?: never
    /** Create reservation */
    post: operations['ReservationOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get reservation */
    get: operations['ReservationOperations_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update reservation */
    patch: operations['ReservationOperations_update']
    trace?: never
  }
  '/api/v1/reservations/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cancel reservation */
    post: operations['ReservationOperations_cancel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}/complete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Complete reservation */
    post: operations['ReservationOperations_complete']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}/reschedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Reschedule reservation */
    post: operations['ReservationOperations_reschedule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List reviews */
    get: operations['ReviewOperations_list']
    put?: never
    /** Create review */
    post: operations['ReviewOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get review */
    get: operations['ReviewOperations_get']
    put?: never
    post?: never
    /** Delete review */
    delete: operations['ReviewOperations_delete']
    options?: never
    head?: never
    /** Update review */
    patch: operations['ReviewOperations_update']
    trace?: never
  }
  '/api/v1/reviews/{id}/helpful': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark review as helpful */
    post: operations['ReviewOperations_markHelpful']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews/{id}/report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Report review */
    post: operations['ReviewOperations_report']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List all salons */
    get: operations['SalonOperations_list']
    put?: never
    /** Create a new salon */
    post: operations['SalonOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search salons */
    get: operations['SalonOperations_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get salon by ID */
    get: operations['SalonOperations_get']
    /** Update salon */
    put: operations['SalonOperations_update']
    post?: never
    /** Delete salon */
    delete: operations['SalonOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/available-slots': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get available slots */
    get: operations['AvailabilityOperations_getAvailableSlots']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/available-slots/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Check availability */
    post: operations['AvailabilityOperations_checkAvailability']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get salon reviews */
    get: operations['SalonReviewOperations_getSalonReviews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/reviews/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get salon reviews summary */
    get: operations['SalonReviewOperations_getSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/services': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List salon services */
    get: operations['ServiceOperations_list']
    put?: never
    /** Create service */
    post: operations['ServiceOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/services/bulk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Bulk update services */
    patch: operations['ServiceOperations_bulkUpdate']
    trace?: never
  }
  '/api/v1/salons/{salonId}/services/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get service */
    get: operations['ServiceOperations_get']
    /** Update service */
    put: operations['ServiceOperations_update']
    post?: never
    /** Delete service */
    delete: operations['ServiceOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List staff members */
    get: operations['StaffOperations_list']
    put?: never
    /** Create staff member */
    post: operations['StaffOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff member */
    get: operations['StaffOperations_get']
    /** Update staff member */
    put: operations['StaffOperations_update']
    post?: never
    /** Delete staff member */
    delete: operations['StaffOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff/{id}/availability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff availability */
    get: operations['StaffOperations_getAvailability']
    /** Update staff availability */
    put: operations['StaffOperations_updateAvailability']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/service-categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List service categories */
    get: operations['ServiceCategoryOperations_listCategories']
    put?: never
    /** Create service category */
    post: operations['ServiceCategoryOperations_createCategory']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/service-categories/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update service category */
    put: operations['ServiceCategoryOperations_updateCategory']
    post?: never
    /** Delete service category */
    delete: operations['ServiceCategoryOperations_deleteCategory']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/share/{shareToken}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンクからファイル情報を取得 */
    get: operations['ShareOperations_getSharedFile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/share/{shareToken}/download': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンクからダウンロードURLを取得 */
    get: operations['ShareOperations_downloadSharedFile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search staff across all salons */
    get: operations['GlobalStaffOperations_searchStaff']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/{staffId}/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff reviews */
    get: operations['StaffReviewOperations_getStaffReviews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/{staffId}/reviews/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff reviews summary */
    get: operations['StaffReviewOperations_getStaffSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List inventory items with filters */
    get: operations['InventoryOperations_listInventoryItems']
    put?: never
    /** @description Create new inventory item */
    post: operations['InventoryOperations_createInventoryItem']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get active inventory alerts */
    get: operations['InventoryAlertOperations_getActiveAlerts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get alert summary */
    get: operations['InventoryAlertOperations_getAlertSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts/{inventoryId}/acknowledge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Acknowledge alert */
    post: operations['InventoryAlertOperations_acknowledgeAlert']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/expiring': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get expiring items */
    get: operations['InventoryOperations_getExpiringItems']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/low-stock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get low stock items */
    get: operations['InventoryOperations_getLowStockItems']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/movement': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Record stock movement */
    post: operations['InventoryOperations_recordStockMovement']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/stock-count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Perform stock count */
    post: operations['InventoryOperations_performStockCount']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/value-report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get inventory value report */
    get: operations['InventoryOperations_getInventoryValueReport']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get inventory item by ID */
    get: operations['InventoryOperations_getInventoryItem']
    put?: never
    post?: never
    /** @description Delete inventory item */
    delete: operations['InventoryOperations_deleteInventoryItem']
    options?: never
    head?: never
    /** @description Update inventory item */
    patch: operations['InventoryOperations_updateInventoryItem']
    trace?: never
  }
  '/inventory/{id}/movements': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get stock movement history */
    get: operations['InventoryOperations_getStockMovements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Search medical charts */
    get: operations['MedicalChartOperations_searchMedicalCharts']
    put?: never
    /** @description Create medical chart for customer */
    post: operations['MedicalChartOperations_createMedicalChart']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/customer/{customerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get medical chart by customer ID */
    get: operations['MedicalChartOperations_getCustomerMedicalChart']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/customer/{customerId}/allergies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get allergy warnings for customer */
    get: operations['MedicalChartOperations_getCustomerAllergies']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update medical chart */
    patch: operations['MedicalChartOperations_updateMedicalChart']
    trace?: never
  }
  '/payments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List payments with filters */
    get: operations['PaymentOperations_listPayments']
    put?: never
    /** @description Create new payment */
    post: operations['PaymentOperations_createPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/calculate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Calculate payment summary */
    post: operations['PaymentOperations_calculatePayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/customer/{customerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get customer payment history */
    get: operations['PaymentOperations_getCustomerPayments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get payment by ID */
    get: operations['PaymentOperations_getPayment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update payment status */
    patch: operations['PaymentOperations_updatePayment']
    trace?: never
  }
  '/payments/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Cancel payment */
    post: operations['PaymentOperations_cancelPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/process': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process payment */
    post: operations['PaymentOperations_processPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/receipt': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get payment receipt */
    get: operations['PaymentOperations_getReceipt']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/refund': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process refund */
    post: operations['PaymentOperations_processRefund']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List all permissions */
    get: operations['PermissionOperations_listPermissions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions/by-resource/{resource}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get permissions by resource */
    get: operations['PermissionOperations_getPermissionsByResource']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get permission groups */
    get: operations['PermissionOperations_getPermissionGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/adjust': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Adjust customer points */
    post: operations['PointOperations_adjustPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/balance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get customer point balance */
    get: operations['PointOperations_getPointBalance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/expiring': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get expiring points */
    get: operations['PointOperations_getExpiringPoints']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get point transaction history */
    get: operations['PointOperations_getPointTransactions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/earn': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add points to customer */
    post: operations['PointOperations_earnPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/expire': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process expired points */
    post: operations['PointOperations_processExpiredPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/use': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Use customer points */
    post: operations['PointOperations_usePoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List purchase orders */
    get: operations['PurchaseOrderOperations_listPurchaseOrders']
    put?: never
    /** @description Create purchase order */
    post: operations['PurchaseOrderOperations_createPurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/reorder-suggestions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Generate reorder suggestions */
    get: operations['PurchaseOrderOperations_getReorderSuggestions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get purchase order by ID */
    get: operations['PurchaseOrderOperations_getPurchaseOrder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update purchase order */
    patch: operations['PurchaseOrderOperations_updatePurchaseOrder']
    trace?: never
  }
  '/purchase-orders/{id}/approve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Approve purchase order */
    post: operations['PurchaseOrderOperations_approvePurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Cancel purchase order */
    post: operations['PurchaseOrderOperations_cancelPurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}/receive': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Receive purchase order */
    post: operations['PurchaseOrderOperations_receivePurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List all roles */
    get: operations['RoleOperations_listRoles']
    put?: never
    /** @description Create new role */
    post: operations['RoleOperations_createRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/system': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get system roles */
    get: operations['RoleOperations_getSystemRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get role by ID */
    get: operations['RoleOperations_getRole']
    put?: never
    post?: never
    /** @description Delete role */
    delete: operations['RoleOperations_deleteRole']
    options?: never
    head?: never
    /** @description Update role */
    patch: operations['RoleOperations_updateRole']
    trace?: never
  }
  '/roles/{id}/clone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Clone role */
    post: operations['RoleOperations_cloneRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales report for a period */
    get: operations['SalesReportOperations_getSalesReport']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/by-category': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales by service category */
    get: operations['SalesReportOperations_getSalesByCategory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/by-staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales by staff */
    get: operations['SalesReportOperations_getSalesByStaff']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/daily': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get daily sales summary */
    get: operations['SalesReportOperations_getDailySales']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Export sales report */
    post: operations['SalesReportOperations_exportSalesReport']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/trends': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales trends */
    get: operations['SalesReportOperations_getSalesTrends']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List treatment records with filters */
    get: operations['TreatmentOperations_listTreatments']
    put?: never
    /** @description Create new treatment record */
    post: operations['TreatmentOperations_createTreatment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/customer/{customerId}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment history for a customer */
    get: operations['TreatmentOperations_getCustomerTreatmentHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/staff/{staffId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatments by staff member */
    get: operations['TreatmentOperations_getStaffTreatments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment statistics */
    get: operations['TreatmentOperations_getTreatmentStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment record by ID */
    get: operations['TreatmentOperations_getTreatment']
    put?: never
    post?: never
    /** @description Delete treatment record */
    delete: operations['TreatmentOperations_deleteTreatment']
    options?: never
    head?: never
    /** @description Update treatment record */
    patch: operations['TreatmentOperations_updateTreatment']
    trace?: never
  }
  '/treatments/{id}/photos': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add photos to treatment record */
    post: operations['TreatmentOperations_addTreatmentPhotos']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Assign role to user */
    post: operations['UserRoleOperations_assignUserRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/bulk-assign': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Bulk assign roles */
    post: operations['UserRoleOperations_bulkAssignRoles']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/role/{roleId}/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get users by role */
    get: operations['UserRoleOperations_getUsersByRole']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/user/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get user roles */
    get: operations['UserRoleOperations_getUserRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/user/{userId}/role/{roleId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description Revoke user role */
    delete: operations['UserRoleOperations_revokeUserRole']
    options?: never
    head?: never
    /** @description Update user role */
    patch: operations['UserRoleOperations_updateUserRole']
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Access control check */
    'Models.AccessCheck': {
      userId: string
      resource: string
      action: string
      salonId?: components['schemas']['Models.SalonId']
      resourceId?: string
    }
    /** @description Access control result */
    'Models.AccessResult': {
      allowed: boolean
      reason?: string
      requiredPermissions?: string[]
      userPermissions?: string[]
    }
    /** @description 共有リンクアクセスリクエスト */
    'Models.AccessShareLinkRequest': {
      /** @description パスワード（パスワード保護されている場合） */
      password?: string
    }
    'Models.Address': {
      street: string
      city: string
      state: string
      postalCode: string
      /** @default Japan */
      country: string
    }
    'Models.AllergyInfo': {
      type: components['schemas']['Models.AllergyType']
      substances?: string[]
      fragrances?: string[]
      metals?: string[]
      plants?: string[]
      description?: string
      severity: components['schemas']['Models.AllergySeverity']
    }
    /** @enum {string} */
    'Models.AllergySeverity': 'mild' | 'moderate' | 'severe'
    /** @enum {string} */
    'Models.AllergyType':
      | 'chemical'
      | 'fragrance'
      | 'metal'
      | 'latex'
      | 'plant'
      | 'other'
    /** @description 添付ファイル情報 */
    'Models.Attachment': {
      /** @description 添付ファイルID (UUID) */
      id: string
      /** @description ストレージキー */
      key: string
      /** @description オリジナルファイル名 */
      filename: string
      /** @description Content-Type */
      contentType: string
      /**
       * Format: int32
       * @description ファイルサイズ（バイト）
       */
      size: number
      /** @description ファイルタイプ */
      fileType: components['schemas']['Models.FileType']
      /** @description アップロードしたユーザーID */
      uploadedBy: string
      /** @description 関連するサロンID（オプション） */
      salonId?: string
      /** @description メタデータ */
      metadata?: {
        [key: string]: unknown
      }
      /** @description タグ */
      tags?: {
        [key: string]: string
      }
      /**
       * Format: date-time
       * @description アップロード日時
       */
      uploadedAt: string
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Attachment ID
     */
    'Models.AttachmentId': string
    'Models.AuditInfo': {
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    /** @description Generic auth success response */
    'Models.AuthSuccessResponse': {
      /** @description Success message */
      message: string
    }
    /**
     * @description User roles in the system
     * @enum {string}
     */
    'Models.AuthUserRole': 'customer' | 'staff' | 'admin'
    'Models.AuthenticationState': {
      type: components['schemas']['Models.AuthenticationStateType']
      sessionId?: components['schemas']['Models.SessionId']
      /** Format: date-time */
      expiresAt?: string
      tempToken?: string
      /** Format: date-time */
      until?: string
      /** Format: int32 */
      attempts?: number
      reason?: string
    }
    /** @enum {string} */
    'Models.AuthenticationStateType':
      | 'unauthenticated'
      | 'authenticated'
      | 'pending_two_factor'
      | 'locked'
    'Models.AvailableSlot': {
      staffId: components['schemas']['Models.StaffId']
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
    }
    'Models.Booking': {
      id: components['schemas']['Models.BookingId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      reservationIds: components['schemas']['Models.ReservationId'][]
      status: components['schemas']['Models.BookingStatus']
      statusCode: components['schemas']['Models.BookingStatusCode']
      waitlistEntry?: components['schemas']['Models.WaitlistEntry']
      deposit?: components['schemas']['Models.BookingDeposit']
      totalAmount: components['schemas']['Models.Money']
      discountAmount?: components['schemas']['Models.Money']
      finalAmount: components['schemas']['Models.Money']
      balanceDue?: components['schemas']['Models.Money']
      paymentMethod?: components['schemas']['Models.PaymentMethod']
      paymentStatus?: components['schemas']['Models.PaymentStatusCode']
      notes?: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.BookingDeposit': {
      amount: components['schemas']['Models.Money']
      /** @enum {string} */
      status: 'pending' | 'paid' | 'refunded' | 'forfeited'
      /** Format: date-time */
      dueDate?: string
      /** Format: date-time */
      paidAt?: string
      /** Format: date-time */
      refundedAt?: string
      paymentId?: components['schemas']['Models.PaymentId']
      notes?: string
    }
    'Models.BookingDepositUpdate': {
      amount?: components['schemas']['Models.MoneyUpdate']
      /** @enum {string} */
      status?: 'pending' | 'paid' | 'refunded' | 'forfeited'
      /** Format: date-time */
      dueDate?: string
      /** Format: date-time */
      paidAt?: string
      /** Format: date-time */
      refundedAt?: string
      paymentId?: components['schemas']['Models.PaymentId']
      notes?: string
    }
    'Models.BookingDetail': {
      reservations: components['schemas']['Models.ReservationDetail'][]
      customerName: string
      salonName: string
      paymentHistory?: components['schemas']['Models.PaymentHistory'][]
      waitlistHistory?: components['schemas']['Models.WaitlistEntry'][]
    } & components['schemas']['Models.Booking']
    /**
     * Format: uuid
     * @description Branded UUID type for Booking ID
     */
    'Models.BookingId': string
    'Models.BookingLimit': {
      /** @enum {string} */
      period: 'day' | 'week' | 'month'
      /** Format: int32 */
      count: number
    }
    'Models.BookingRequirement': {
      type: components['schemas']['Models.BookingRequirementType']
      /** Format: int32 */
      amount?: number
      /** Format: int32 */
      percentage?: number
      required?: boolean
      /** Format: int32 */
      duration?: number
      /** Format: int32 */
      daysInAdvance?: number
      /** Format: int32 */
      minAge?: number
      /** Format: int32 */
      maxAge?: number
      allowedGenders?: string[]
      requiredTier?: string
      instructions?: string[]
    }
    /** @enum {string} */
    'Models.BookingRequirementType':
      | 'deposit'
      | 'consultation'
      | 'patch_test'
      | 'age_restriction'
      | 'gender_restriction'
      | 'membership'
      | 'preparation'
    'Models.BookingStatus':
      | components['schemas']['Models.DraftBookingStatus']
      | components['schemas']['Models.PendingBookingStatus']
      | components['schemas']['Models.ConfirmedBookingStatus']
      | components['schemas']['Models.InProgressBookingStatus']
      | components['schemas']['Models.CompletedBookingStatus']
      | components['schemas']['Models.CancelledBookingStatus']
      | components['schemas']['Models.NoShowBookingStatus']
    /** @enum {string} */
    'Models.BookingStatusCode':
      | 'draft'
      | 'pending'
      | 'confirmed'
      | 'in_progress'
      | 'completed'
      | 'cancelled'
      | 'no_show'
    'Models.BookingStatusUpdate':
      | components['schemas']['Models.DraftBookingStatusUpdate']
      | components['schemas']['Models.PendingBookingStatusUpdate']
      | components['schemas']['Models.ConfirmedBookingStatusUpdate']
      | components['schemas']['Models.InProgressBookingStatusUpdate']
      | components['schemas']['Models.CompletedBookingStatusUpdate']
      | components['schemas']['Models.CancelledBookingStatusUpdate']
      | components['schemas']['Models.NoShowBookingStatusUpdate']
    'Models.BusinessHours': {
      dayOfWeek: components['schemas']['Models.DayOfWeek']
      operatingSlots: components['schemas']['Models.TimeSlot'][]
      breakSlots?: components['schemas']['Models.TimeSlot'][]
      /** @default false */
      isClosed: boolean
      effectivePeriod?: components['schemas']['Models.DateRange']
      timezone?: string
    }
    'Models.CancellationFee': {
      /** Format: int32 */
      hours: number
      /** Format: int32 */
      percentage: number
      /** Format: int32 */
      fixedAmount?: number
    }
    'Models.CancelledBookingStatus': {
      /** @enum {string} */
      type: 'cancelled'
      /** Format: date-time */
      cancelledAt: string
      reason?: string
      /** @enum {string} */
      cancelledBy: 'customer' | 'salon' | 'system'
    }
    'Models.CancelledBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'cancelled'
      /** Format: date-time */
      cancelledAt?: string
      reason?: string
      /** @enum {string} */
      cancelledBy?: 'customer' | 'salon' | 'system'
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Category ID
     */
    'Models.CategoryId': string
    /** @enum {string} */
    'Models.ColorSubCategory':
      | 'full_color'
      | 'root_touch'
      | 'highlights'
      | 'lowlights'
      | 'balayage'
      | 'ombre'
      | 'bleach'
      | 'color_correction'
    'Models.CompletedBookingStatus': {
      /** @enum {string} */
      type: 'completed'
      /** Format: date-time */
      completedAt: string
      paymentId?: components['schemas']['Models.PaymentId']
      serviceSummary?: string
    }
    'Models.CompletedBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'completed'
      /** Format: date-time */
      completedAt?: string
      paymentId?: components['schemas']['Models.PaymentId']
      serviceSummary?: string
    }
    'Models.CompletedPaymentStatus': {
      /** @enum {string} */
      type: 'completed'
      /** Format: date-time */
      completedAt: string
      paidAmount: components['schemas']['Models.Money']
      receiptNumber?: string
    }
    'Models.ConfirmedBookingStatus': {
      /** @enum {string} */
      type: 'confirmed'
      /** Format: date-time */
      confirmedAt: string
      staffId: components['schemas']['Models.StaffId']
      /** Format: date-time */
      expectedStart: string
    }
    'Models.ConfirmedBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'confirmed'
      /** Format: date-time */
      confirmedAt?: string
      staffId?: components['schemas']['Models.StaffId']
      /** Format: date-time */
      expectedStart?: string
    }
    'Models.ContactInfo': {
      email: string
      phoneNumber: string
      alternativePhone?: string
    }
    'Models.CreateBookingRequest': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      reservationIds: components['schemas']['Models.ReservationId'][]
      waitlistEntry?: components['schemas']['Models.WaitlistEntry']
      deposit?: components['schemas']['Models.BookingDeposit']
      discountAmount?: components['schemas']['Models.Money']
      paymentMethod?: components['schemas']['Models.PaymentMethod']
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description Customer creation request with required and optional fields */
    'Models.CreateCustomerRequest': {
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      preferences?: string
      notes?: string
      tags?: string[]
      /** Format: date */
      birthDate?: string
    }
    'Models.CreateReservationRequest': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      serviceId: components['schemas']['Models.ServiceId']
      /** Format: date-time */
      startTime: string
      notes?: string
    }
    'Models.CreateReviewRequest': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId: components['schemas']['Models.BookingId']
      staffId?: components['schemas']['Models.StaffId']
      /** Format: int32 */
      overallRating: number
      comment?: string
      title?: string
      /** Format: int32 */
      serviceRating?: number
      /** Format: int32 */
      staffRating?: number
      /** Format: int32 */
      cleanlinessRating?: number
      /** Format: int32 */
      valueRating?: number
      imageUrls?: string[]
    }
    /** @description Salon creation request with required and optional fields */
    'Models.CreateSalonRequest': {
      name: string
      description: string
      address: components['schemas']['Models.Address']
      contactInfo: components['schemas']['Models.ContactInfo']
      openingHours: components['schemas']['Models.OpeningHours'][]
      businessHours?: components['schemas']['Models.BusinessHours'][]
      imageUrls?: string[]
      features?: string[]
    }
    'Models.CreateServiceRequest': {
      salonId: components['schemas']['Models.SalonId']
      name: string
      description: string
      /** Format: int32 */
      duration: number
      /** Format: int32 */
      price: number
      category: components['schemas']['Models.ServiceCategory']
      categoryId?: components['schemas']['Models.CategoryId']
      imageUrl?: string
      /** Format: int32 */
      requiredStaffLevel?: number
      /** Format: int32 */
      depositAmount?: number
      isActive?: boolean
      /** Format: int32 */
      maxAdvanceBookingDays?: number
      /** Format: int32 */
      minAdvanceBookingHours?: number
    }
    /** @description 共有リンク作成リクエスト */
    'Models.CreateShareLinkRequest': {
      /**
       * Format: date-time
       * @description 有効期限（オプション）
       */
      expiresAt?: string
      /**
       * Format: int32
       * @description 最大ダウンロード数（オプション）
       */
      maxDownloads?: number
      /** @description パスワード（オプション） */
      password?: string
      /** @description 許可されたメールアドレス（オプション） */
      allowedEmails?: string[]
    }
    'Models.CreateStaffRequest': {
      salonId: components['schemas']['Models.SalonId']
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      specialties: string[]
      imageUrl?: string
      bio?: string
      /** Format: int32 */
      yearsOfExperience?: number
      certifications?: string[]
      qualifications?: components['schemas']['Models.StaffQualification'][]
      schedules?: components['schemas']['Models.StaffSchedule'][]
      permissions?: components['schemas']['Models.StaffPermission'][]
    }
    /** @enum {string} */
    'Models.CurrencyCode':
      | 'JPY'
      | 'USD'
      | 'EUR'
      | 'GBP'
      | 'AUD'
      | 'CAD'
      | 'CNY'
      | 'KRW'
      | 'SGD'
      | 'TWD'
    'Models.Customer': {
      id: components['schemas']['Models.CustomerId']
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description Customer gender */
      gender?: components['schemas']['Models.CustomerGender']
      /**
       * Format: date
       * @description Birth date
       */
      birthDate?: string
      /** @description Address */
      address?: components['schemas']['Models.Address']
      /** @description Preferences and requirements */
      preferences?: string
      /** @description Internal notes */
      notes?: string
      /** @description Tags for categorization */
      tags?: string[]
      /**
       * Format: int32
       * @description Current loyalty points
       */
      loyaltyPoints?: number
      /** @description Membership information */
      membership?: components['schemas']['Models.MembershipInfo']
      /** @description Notification settings */
      notificationSettings?: components['schemas']['Models.NotificationSettings']
      /** @description Health information */
      health?: components['schemas']['Models.CustomerHealth']
      /** @description Customer preferences */
      customerPreferences?: components['schemas']['Models.CustomerPreferences']
      /** @description Visit history */
      history?: components['schemas']['Models.CustomerHistory']
      /** @description Customer associations */
      associations?: components['schemas']['Models.CustomerAssociations']
      /** @description Customer status */
      status?: components['schemas']['Models.CustomerStatusDetail']
      /** @description Customer metadata */
      metadata?: components['schemas']['Models.CustomerMetadata']
      /** @description Medical chart ID */
      medicalChartId?: components['schemas']['Models.MedicalChartId']
      /**
       * @description Is active customer
       * @default true
       */
      isActive: boolean
      /**
       * @description Registration source
       * @enum {string}
       */
      registrationSource?: 'walk_in' | 'online' | 'phone' | 'referral'
      /** @description Referrer customer ID */
      referredBy?: components['schemas']['Models.CustomerId']
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.CustomerAssociations': {
      primarySalonId?: components['schemas']['Models.SalonId']
      visitedSalonIds: components['schemas']['Models.SalonId'][]
      familyMemberIds?: components['schemas']['Models.CustomerId'][]
      referredBy?: components['schemas']['Models.CustomerId']
      referredCustomerIds?: components['schemas']['Models.CustomerId'][]
      groupId?: string
    }
    /** @enum {string} */
    'Models.CustomerGender': 'male' | 'female' | 'other' | 'prefer_not_to_say'
    'Models.CustomerHealth': {
      allergies: components['schemas']['Models.AllergyInfo'][]
      hairInfo?: components['schemas']['Models.HairInfo']
      scalpInfo?: components['schemas']['Models.ScalpInfo']
      medicalConditions?: string[]
      medications?: string[]
      pregnancyStatus?: boolean
      specialNeeds?: string
    }
    'Models.CustomerHistory': {
      visits: components['schemas']['Models.VisitHistory']
      lastServiceId?: components['schemas']['Models.ServiceId']
      lastStaffId?: components['schemas']['Models.StaffId']
      favoriteServiceIds: components['schemas']['Models.ServiceId'][]
      favoriteStaffIds: components['schemas']['Models.StaffId'][]
      pastTreatments?: string[]
      notes?: string[]
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Customer ID
     */
    'Models.CustomerId': string
    'Models.CustomerMetadata': {
      /** @enum {string} */
      source?:
        | 'walk_in'
        | 'online'
        | 'phone'
        | 'referral'
        | 'social_media'
        | 'advertisement'
      campaign?: string
      tags?: string[]
      customFields?: {
        [key: string]: unknown
      }
      internalNotes?: string[]
      /** Format: int32 */
      riskScore?: number
      /** Format: int32 */
      lifetimeValue?: number
      lastUpdatedBy?: string
    }
    'Models.CustomerPreferences': {
      stylePreferences?: components['schemas']['Models.StylePreference']
      servicePreferences?: components['schemas']['Models.ServicePreference']
      communicationPreferences?: components['schemas']['Models.NotificationSettings']
      preferredStaff?: components['schemas']['Models.StaffId'][]
      avoidStaff?: components['schemas']['Models.StaffId'][]
      preferredDayOfWeek?: components['schemas']['Models.DayOfWeek'][]
      preferredTimeSlots?: components['schemas']['Models.TimeSlot'][]
      specialRequests?: string
      language?: string
    }
    'Models.CustomerProfile': {
      /** Format: int32 */
      visitCount: number
      /** Format: date-time */
      lastVisitDate?: string
      favoriteStaffIds?: components['schemas']['Models.StaffId'][]
      favoriteServiceIds?: components['schemas']['Models.ServiceId'][]
      /** Format: int32 */
      totalSpent: number
    } & components['schemas']['Models.Customer']
    'Models.CustomerStatusDetail': {
      type: components['schemas']['Models.CustomerStatusType']
      reason?: string
      /** Format: date-time */
      since?: string
      /** Format: date-time */
      until?: string
      by?: string
      /** Format: date-time */
      deletedAt?: string
    }
    /** @enum {string} */
    'Models.CustomerStatusType':
      | 'active'
      | 'inactive'
      | 'suspended'
      | 'deleted'
      | 'blacklisted'
    /** @enum {string} */
    'Models.CutSubCategory':
      | 'mens_cut'
      | 'womens_cut'
      | 'kids_cut'
      | 'bang_trim'
      | 'beard_trim'
    'Models.DateRange': {
      /** Format: date-time */
      startDate: string
      /** Format: date-time */
      endDate: string
    }
    /** @enum {string} */
    'Models.DayOfWeek':
      | 'monday'
      | 'tuesday'
      | 'wednesday'
      | 'thursday'
      | 'friday'
      | 'saturday'
      | 'sunday'
    /** @description 署名付きダウンロードURL取得レスポンス */
    'Models.DownloadUrlResponse': {
      /** @description 署名付きダウンロードURL */
      downloadUrl: string
      /**
       * Format: date-time
       * @description URL有効期限
       */
      expiresAt: string
    }
    'Models.DraftBookingStatus': {
      /** @enum {string} */
      type: 'draft'
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      expiresAt?: string
    }
    'Models.DraftBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'draft'
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      expiresAt?: string
    }
    /** @description Email verification request */
    'Models.EmailVerificationRequest': {
      /** @description Email verification token */
      token: string
    }
    'Models.EmailVerificationState': {
      type: components['schemas']['Models.EmailVerificationStateType']
      /** Format: date-time */
      verifiedAt?: string
      token?: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      sentAt?: string
    }
    /** @enum {string} */
    'Models.EmailVerificationStateType': 'verified' | 'unverified' | 'pending'
    'Models.Error': {
      code: string
      message: string
      details?: {
        [key: string]: unknown
      }
    }
    'Models.FailedPaymentStatus': {
      /** @enum {string} */
      type: 'failed'
      /** Format: date-time */
      failedAt: string
      reason: string
      /** @default false */
      retryable: boolean
    }
    /**
     * @description ファイルタイプ
     * @enum {string}
     */
    'Models.FileType': 'image' | 'document' | 'other'
    /** @description Customer bookings filter parameters */
    'Models.GetCustomerBookingsRequest': {
      status?: components['schemas']['Models.BookingStatusCode']
    }
    /** @description Customer reservations filter parameters */
    'Models.GetCustomerReservationsRequest': {
      status?: components['schemas']['Models.ReservationStatus']
      /** Format: date-time */
      from?: string
      /** Format: date-time */
      to?: string
    }
    /** @description 署名付きアップロードURL取得リクエスト */
    'Models.GetUploadUrlRequest': {
      /** @description ファイル名 */
      filename: string
      /** @description Content-Type */
      contentType: string
      /**
       * Format: int32
       * @description ファイルサイズ（バイト）
       */
      size: number
      /** @description サロンID（オプション） */
      salonId?: string
    }
    'Models.HairInfo': {
      type: components['schemas']['Models.HairType']
      thickness: components['schemas']['Models.HairThickness']
      condition: string[]
      chemicalHistory: string[]
      notes?: string
    }
    /** @enum {string} */
    'Models.HairThickness': 'fine' | 'medium' | 'thick'
    /** @enum {string} */
    'Models.HairType': 'straight' | 'wavy' | 'curly' | 'coily'
    'Models.InProgressBookingStatus': {
      /** @enum {string} */
      type: 'in_progress'
      /** Format: date-time */
      startedAt: string
      stationName?: string
    }
    'Models.InProgressBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'in_progress'
      /** Format: date-time */
      startedAt?: string
      stationName?: string
    }
    /** @description Inventory alert */
    'Models.InventoryAlert': {
      itemId: components['schemas']['Models.InventoryId']
      /** Format: float */
      threshold: number
      /** Format: float */
      currentStock: number
      /** Format: date-time */
      triggeredAt: string
      inventoryId: components['schemas']['Models.InventoryId']
      /** @enum {string} */
      alertType: 'low_stock' | 'expiring' | 'expired' | 'overstock'
      message: string
      /** @enum {string} */
      severity: 'info' | 'warning' | 'critical'
      acknowledged?: boolean
      acknowledgedBy?: components['schemas']['Models.StaffId']
      /** Format: date-time */
      acknowledgedAt?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Inventory ID
     */
    'Models.InventoryId': string
    /** @description Inventory item */
    'Models.InventoryItem': {
      id: components['schemas']['Models.InventoryId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Product code/SKU */
      productCode: string
      /** @description Product name */
      productName: string
      /** @description Product description */
      description?: string
      /** @description Category */
      category: string
      /** @description Brand */
      brand?: string
      /** @description Supplier information */
      supplier?: string
      /**
       * Format: float
       * @description Current stock quantity
       */
      currentStock: number
      /**
       * Format: float
       * @description Minimum stock level
       */
      minimumStock: number
      /**
       * Format: float
       * @description Maximum stock level
       */
      maximumStock?: number
      /** @description Unit of measurement */
      unit: string
      /**
       * Format: float
       * @description Unit cost
       */
      unitCost: number
      /**
       * Format: float
       * @description Selling price (if sold to customers)
       */
      sellingPrice?: number
      /** @description Stock status */
      status: components['schemas']['Models.InventoryStatus']
      /** @description Location in salon */
      location?: string
      /**
       * Format: date-time
       * @description Expiration date
       */
      expirationDate?: string
      /**
       * Format: date-time
       * @description Last restocked date
       */
      lastRestocked?: string
      /** @description Notes */
      notes?: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.InventoryItemCreateInput': {
      salonId: components['schemas']['Models.SalonId']
      productCode: string
      productName: string
      description?: string
      category: string
      brand?: string
      supplier?: string
      /** Format: float */
      currentStock: number
      /** Format: float */
      minimumStock: number
      /** Format: float */
      maximumStock?: number
      unit: string
      /** Format: float */
      unitCost: number
      /** Format: float */
      sellingPrice?: number
      location?: string
      /** Format: date-time */
      expirationDate?: string
      notes?: string
    }
    'Models.InventoryItemUpdateInput': {
      productName?: string
      description?: string
      category?: string
      brand?: string
      supplier?: string
      /** Format: float */
      minimumStock?: number
      /** Format: float */
      maximumStock?: number
      /** Format: float */
      unitCost?: number
      /** Format: float */
      sellingPrice?: number
      location?: string
      /** Format: date-time */
      expirationDate?: string
      status?: components['schemas']['Models.InventoryStatus']
      notes?: string
    }
    /** @enum {string} */
    'Models.InventoryStatus':
      | 'in_stock'
      | 'low_stock'
      | 'out_of_stock'
      | 'ordered'
      | 'discontinued'
    'Models.InventoryTransaction': {
      id: string
      itemId: components['schemas']['Models.InventoryId']
      salonId: components['schemas']['Models.SalonId']
      /** @enum {string} */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /** Format: float */
      quantity: number
      reason: string
      performedBy: components['schemas']['Models.StaffId']
      /** Format: date-time */
      occurredAt: string
      referenceId?: string
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description Login request */
    'Models.LoginRequest': {
      /** @description User's email address */
      email: string
      /** @description User's password */
      password: string
      /**
       * @description Remember me flag for extended session
       * @default false
       */
      rememberMe: boolean
      /** @description Two-factor authentication code (if 2FA is enabled) */
      twoFactorCode?: string
    }
    /** @description Login response */
    'Models.LoginResponse': {
      /** @description Access token for API requests */
      accessToken: string
      /** @description Refresh token for obtaining new access tokens */
      refreshToken: string
      /**
       * @description Token type (always 'Bearer')
       * @default Bearer
       */
      tokenType: string
      /**
       * Format: int32
       * @description Access token expiry in seconds
       */
      expiresIn: number
      /** @description Logged in user information */
      user: components['schemas']['Models.User']
    }
    /** @enum {string} */
    'Models.MakeupSubCategory':
      | 'everyday_makeup'
      | 'event_makeup'
      | 'bridal_makeup'
      | 'photoshoot_makeup'
    /** @description Material usage record */
    'Models.MaterialUsage': {
      inventoryId: components['schemas']['Models.InventoryId']
      productName: string
      /** Format: float */
      quantity: number
      unit: string
      notes?: string
    }
    /** @description Medical chart for customer */
    'Models.MedicalChart': {
      id: components['schemas']['Models.MedicalChartId']
      customerId: components['schemas']['Models.CustomerId']
      /** @description Allergies and sensitivities */
      allergies?: string[]
      /** @description Scalp condition */
      scalpCondition?: string
      /** @description Hair condition */
      hairCondition?: string
      /** @description Previous chemical treatments */
      previousTreatments?: components['schemas']['Models.PreviousTreatment'][]
      /** @description Medical conditions to be aware of */
      medicalConditions?: string
      /** @description Preferred products */
      preferredProducts?: string[]
      /** @description Products to avoid */
      avoidProducts?: string[]
      /** @description General notes */
      notes?: string
      /**
       * Format: date-time
       * @description Last updated date
       */
      lastUpdated: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.MedicalChartCreateInput': {
      customerId: components['schemas']['Models.CustomerId']
      allergies?: string[]
      scalpCondition?: string
      hairCondition?: string
      previousTreatments?: components['schemas']['Models.PreviousTreatment'][]
      medicalConditions?: string
      preferredProducts?: string[]
      avoidProducts?: string[]
      notes?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Medical Chart ID
     */
    'Models.MedicalChartId': string
    'Models.MedicalChartUpdateInput': {
      allergies?: string[]
      scalpCondition?: string
      hairCondition?: string
      previousTreatments?: components['schemas']['Models.PreviousTreatment'][]
      medicalConditions?: string
      preferredProducts?: string[]
      avoidProducts?: string[]
      notes?: string
    }
    'Models.MembershipBenefit': {
      type: components['schemas']['Models.MembershipBenefitType']
      /** Format: int32 */
      percentage?: number
      multiplier?: components['schemas']['Models.decimal']
      serviceType?: string
      /** @enum {string} */
      frequency?: 'monthly' | 'quarterly' | 'yearly'
      /** Format: int32 */
      value?: number
      description?: string
    }
    /** @enum {string} */
    'Models.MembershipBenefitType':
      | 'discount_rate'
      | 'point_multiplier'
      | 'priority_booking'
      | 'free_service'
      | 'birthday_special'
      | 'exclusive_access'
    'Models.MembershipInfo': {
      tier: components['schemas']['Models.MembershipTierType']
      /** Format: date-time */
      since: string
      benefits: components['schemas']['Models.MembershipBenefit'][]
      dedicatedManager?: string
      /** Format: int32 */
      points: number
      /** Format: int32 */
      totalPointsEarned: number
      /** Format: int32 */
      totalPointsUsed: number
      /** Format: int32 */
      expiringPoints?: number
      /** Format: date-time */
      pointsExpireAt?: string
    }
    /** @enum {string} */
    'Models.MembershipLevel': 'bronze' | 'silver' | 'gold' | 'platinum' | 'vip'
    /**
     * Format: uuid
     * @description Branded UUID type for Membership Level ID
     */
    'Models.MembershipLevelId': string
    /** @enum {string} */
    'Models.MembershipTierType':
      | 'regular'
      | 'silver'
      | 'gold'
      | 'platinum'
      | 'vip'
    'Models.Money': {
      /** Format: int64 */
      value: number
      currency: components['schemas']['Models.CurrencyCode']
      taxRate?: components['schemas']['Models.decimal']
    }
    'Models.MoneyUpdate': {
      /** Format: int64 */
      value?: number
      currency?: components['schemas']['Models.CurrencyCode']
      taxRate?: components['schemas']['Models.decimal']
    }
    /** @enum {string} */
    'Models.NailSubCategory':
      | 'manicure'
      | 'pedicure'
      | 'gel_nail'
      | 'nail_art'
      | 'nail_removal'
    'Models.NoShowBookingStatus': {
      /** @enum {string} */
      type: 'no_show'
      /** Format: date-time */
      recordedAt: string
      /** @default false */
      penaltyApplied: boolean
    }
    'Models.NoShowBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'no_show'
      /** Format: date-time */
      recordedAt?: string
      /** @default false */
      penaltyApplied: boolean
    }
    'Models.NotificationSettings': {
      types: components['schemas']['Models.NotificationType'][]
      reminderTimings: components['schemas']['Models.ReminderTiming'][]
      enabled: boolean
    }
    /** @enum {string} */
    'Models.NotificationType': 'email' | 'sms' | 'push' | 'line'
    'Models.OpeningHours': {
      dayOfWeek: components['schemas']['Models.DayOfWeek']
      openTime: string
      closeTime: string
      isHoliday: boolean
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Order ID
     */
    'Models.OrderId': string
    /** @description Order item detail */
    'Models.OrderItem': {
      inventoryId: components['schemas']['Models.InventoryId']
      productCode: string
      productName: string
      /** Format: float */
      quantity: number
      unit: string
      /** Format: float */
      unitPrice: number
      /** Format: float */
      totalPrice: number
      notes?: string
    }
    /** @enum {string} */
    'Models.OrderStatus':
      | 'draft'
      | 'pending'
      | 'approved'
      | 'ordered'
      | 'shipped'
      | 'delivered'
      | 'cancelled'
    /** @description ページネーション付き添付ファイル一覧 */
    'Models.PaginatedAttachments': {
      /** @description 添付ファイル一覧 */
      items: components['schemas']['Models.Attachment'][]
      /**
       * Format: int32
       * @description 合計件数
       */
      total: number
      /**
       * Format: int32
       * @description 現在のページ
       */
      page: number
      /**
       * Format: int32
       * @description ページあたりの件数
       */
      limit: number
      /**
       * Format: int32
       * @description 総ページ数
       */
      totalPages: number
    }
    'Models.PartialRefundPaymentStatus': {
      /** @enum {string} */
      type: 'partial_refund'
      /** Format: date-time */
      refundedAt: string
      refundAmount: components['schemas']['Models.Money']
      remainingAmount: components['schemas']['Models.Money']
      refundId: components['schemas']['Models.RefundId']
    }
    /** @description Password change request */
    'Models.PasswordChangeRequest': {
      /** @description Current password for verification */
      currentPassword: string
      /** @description New password */
      newPassword: string
    }
    /** @description Password reset confirmation */
    'Models.PasswordResetConfirmRequest': {
      /** @description Password reset token from email */
      token: string
      /** @description New password */
      newPassword: string
    }
    /** @description Password reset request */
    'Models.PasswordResetRequest': {
      /** @description Email address of the account */
      email: string
    }
    'Models.PasswordResetState': {
      type: components['schemas']['Models.PasswordResetStateType']
      token?: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      completedAt?: string
    }
    /** @enum {string} */
    'Models.PasswordResetStateType': 'none' | 'requested' | 'completed'
    /** @description Payment record for services */
    'Models.Payment': {
      id: components['schemas']['Models.PaymentId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId?: components['schemas']['Models.BookingId']
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      method: components['schemas']['Models.PaymentMethod']
      status: components['schemas']['Models.PaymentStatus']
      amounts: components['schemas']['Models.PaymentAmounts']
      /** Format: int32 */
      pointsUsed?: number
      depositApplied?: components['schemas']['Models.Money']
      outstandingAmount?: components['schemas']['Models.Money']
      externalReference?: string
      receiptNumber?: string
      history: components['schemas']['Models.PaymentHistory'][]
      refunds?: components['schemas']['Models.Refund'][]
      metadata?: {
        [key: string]: unknown
      }
      notes?: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.PaymentAmounts': {
      billed: components['schemas']['Models.Money']
      tax?: components['schemas']['Models.Money']
      discount?: components['schemas']['Models.Money']
      tip?: components['schemas']['Models.Money']
      totalPayable: components['schemas']['Models.Money']
    }
    'Models.PaymentBreakdown': {
      subtotal: components['schemas']['Models.Money']
      tax: components['schemas']['Models.Money']
      discount: components['schemas']['Models.Money']
      pointsDiscount?: components['schemas']['Models.Money']
      total: components['schemas']['Models.Money']
    }
    'Models.PaymentCreateInput': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId?: components['schemas']['Models.BookingId']
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      method: components['schemas']['Models.PaymentMethod']
      amounts: components['schemas']['Models.PaymentAmounts']
      /** Format: int32 */
      pointsUsed?: number
      depositApplied?: components['schemas']['Models.Money']
      externalReference?: string
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    'Models.PaymentHistory': {
      eventId: string
      paymentId: components['schemas']['Models.PaymentId']
      status: components['schemas']['Models.PaymentStatus']
      /** Format: date-time */
      occurredAt: string
      /** @enum {string} */
      actorType?: 'system' | 'staff' | 'customer'
      actorId?: string
      note?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Payment ID
     */
    'Models.PaymentId': string
    /** @enum {string} */
    'Models.PaymentMethod':
      | 'cash'
      | 'credit_card'
      | 'debit_card'
      | 'e_money'
      | 'qr_payment'
      | 'bank_transfer'
      | 'point'
    'Models.PaymentPreview': {
      salonId: components['schemas']['Models.SalonId']
      customerId?: components['schemas']['Models.CustomerId']
      bookingId?: components['schemas']['Models.BookingId']
      breakdown: components['schemas']['Models.PaymentBreakdown']
      recommendedMethods: components['schemas']['Models.PaymentMethod'][]
      notes?: string
    }
    'Models.PaymentStatus':
      | components['schemas']['Models.PendingPaymentStatus']
      | components['schemas']['Models.ProcessingPaymentStatus']
      | components['schemas']['Models.CompletedPaymentStatus']
      | components['schemas']['Models.FailedPaymentStatus']
      | components['schemas']['Models.RefundedPaymentStatus']
      | components['schemas']['Models.PartialRefundPaymentStatus']
    /** @enum {string} */
    'Models.PaymentStatusCode':
      | 'pending'
      | 'processing'
      | 'completed'
      | 'failed'
      | 'refunded'
      | 'partial_refund'
    'Models.PaymentUpdateInput': {
      method?: components['schemas']['Models.PaymentMethod']
      status?: components['schemas']['Models.PaymentStatus']
      outstandingAmount?: components['schemas']['Models.Money']
      depositApplied?: components['schemas']['Models.Money'] | null
      externalReference?: string | null
      receiptNumber?: string | null
      notes?: string | null
      metadata?: {
        [key: string]: unknown
      } | null
    }
    'Models.PendingBookingStatus': {
      /** @enum {string} */
      type: 'pending'
      /** Format: date-time */
      requestedAt: string
      /** Format: date-time */
      holdExpiresAt?: string
      assignedStaffId?: components['schemas']['Models.StaffId']
    }
    'Models.PendingBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'pending'
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      holdExpiresAt?: string
      assignedStaffId?: components['schemas']['Models.StaffId']
    }
    'Models.PendingPaymentStatus': {
      /** @enum {string} */
      type: 'pending'
      /** Format: date-time */
      createdAt: string
    }
    /** @enum {string} */
    'Models.PermSubCategory':
      | 'regular_perm'
      | 'digital_perm'
      | 'spiral_perm'
      | 'body_wave'
      | 'straightening'
    /** @description Permission definition */
    'Models.Permission': {
      id: components['schemas']['Models.PermissionId']
      /** @description Permission key (e.g., 'booking.create') */
      key: string
      /** @description Permission name */
      name: string
      /** @description Permission description */
      description?: string
      /** @description Resource type */
      resource: string
      /** @description Action type */
      action: string
      /**
       * @description Scope (own, salon, all)
       * @enum {string}
       */
      scope?: 'own' | 'salon' | 'all'
    }
    'Models.PermissionCheckInput': {
      userId: string
      permissions: string[]
      salonId?: components['schemas']['Models.SalonId']
    }
    'Models.PermissionCheckResult': {
      userId: string
      permissions: components['schemas']['Models.PermissionStatus'][]
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Permission ID
     */
    'Models.PermissionId': string
    'Models.PermissionStatus': {
      permission: string
      granted: boolean
      source?: string
    }
    'Models.PointInfo': {
      /** Format: int32 */
      currentPoints: number
      /** Format: int32 */
      totalEarnedPoints: number
      /** Format: int32 */
      totalUsedPoints: number
      /** Format: int32 */
      expiringPoints?: number
      /** Format: date-time */
      expirationDate?: string
    }
    /** @description Point transaction record */
    'Models.PointTransaction': {
      id: components['schemas']['Models.PointTransactionId']
      customerId: components['schemas']['Models.CustomerId']
      /**
       * @description Transaction type: earn or use
       * @enum {string}
       */
      type: 'earn' | 'use' | 'expire' | 'adjust'
      /**
       * Format: int32
       * @description Points amount (positive for earn, negative for use)
       */
      points: number
      /**
       * Format: int32
       * @description Balance after transaction
       */
      balanceAfter: number
      /** @description Related payment or booking */
      paymentId?: components['schemas']['Models.PaymentId']
      bookingId?: components['schemas']['Models.BookingId']
      /** @description Transaction description */
      description: string
      /**
       * Format: date-time
       * @description Expiration date for earned points
       */
      expiresAt?: string
      /**
       * Format: date-time
       * @description Transaction timestamp
       */
      transactedAt: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.PointTransactionCreateInput': {
      customerId: components['schemas']['Models.CustomerId']
      /** @enum {string} */
      type: 'earn' | 'use' | 'expire' | 'adjust'
      /** Format: int32 */
      points: number
      paymentId?: components['schemas']['Models.PaymentId']
      bookingId?: components['schemas']['Models.BookingId']
      description: string
      /** Format: date-time */
      expiresAt?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Point Transaction ID
     */
    'Models.PointTransactionId': string
    /** @description Previous treatment history */
    'Models.PreviousTreatment': {
      treatmentType: components['schemas']['Models.TreatmentType']
      /** Format: date-time */
      date: string
      salonName?: string
      notes?: string
    }
    'Models.PriceRangeFilter': {
      /** Format: float */
      minPrice?: number
      /** Format: float */
      maxPrice?: number
    }
    'Models.PriceTier': {
      name: string
      description?: string
      /** Format: int32 */
      price: number
      /** Format: int32 */
      duration?: number
      conditions?: string[]
    }
    'Models.PricingFactor': {
      /** @enum {string} */
      type: 'day_of_week' | 'time_of_day' | 'staff_level' | 'demand' | 'season'
      multipliers?: {
        [key: string]: components['schemas']['Models.decimal']
      }
      peakHours?: string[]
      peakMultiplier?: components['schemas']['Models.decimal']
      /** Format: int32 */
      threshold?: number
      seasons?: components['schemas']['Models.Season'][]
    }
    'Models.PricingStrategy': {
      type: components['schemas']['Models.PricingStrategyType']
      /** Format: int32 */
      amount?: number
      tiers?: components['schemas']['Models.PriceTier'][]
      /** Format: int32 */
      basePrice?: number
      factors?: components['schemas']['Models.PricingFactor'][]
      services?: components['schemas']['Models.ServiceId'][]
      discountRate?: components['schemas']['Models.decimal']
      /** Format: int32 */
      memberPrice?: number
      /** Format: int32 */
      nonMemberPrice?: number
      description?: string
    }
    /** @enum {string} */
    'Models.PricingStrategyType':
      | 'fixed'
      | 'tiered'
      | 'dynamic'
      | 'package'
      | 'membership'
      | 'custom'
    'Models.ProcessingPaymentStatus': {
      /** @enum {string} */
      type: 'processing'
      /** Format: date-time */
      startedAt: string
      processorId?: components['schemas']['Models.StaffId']
    }
    /** @description Purchase order */
    'Models.PurchaseOrder': {
      id: components['schemas']['Models.OrderId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Order number */
      orderNumber: string
      /** @description Supplier name */
      supplier: string
      /** @description Order status */
      status: components['schemas']['Models.OrderStatus']
      /** @description Order items */
      items: components['schemas']['Models.OrderItem'][]
      /**
       * Format: float
       * @description Subtotal amount
       */
      subtotal: number
      /**
       * Format: float
       * @description Tax amount
       */
      taxAmount: number
      /**
       * Format: float
       * @description Shipping cost
       */
      shippingCost?: number
      /**
       * Format: float
       * @description Total amount
       */
      totalAmount: number
      /**
       * Format: date-time
       * @description Order date
       */
      orderDate: string
      /**
       * Format: date-time
       * @description Expected delivery date
       */
      expectedDelivery?: string
      /**
       * Format: date-time
       * @description Actual delivery date
       */
      actualDelivery?: string
      /** @description Delivery notes */
      deliveryNotes?: string
      /** @description Payment terms */
      paymentTerms?: string
      /** @description Order notes */
      notes?: string
      /** @description Approved by */
      approvedBy?: components['schemas']['Models.StaffId']
      /**
       * Format: date-time
       * @description Approved date
       */
      approvedAt?: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.PurchaseOrderCreateInput': {
      supplier: string
      items: components['schemas']['Models.OrderItem'][]
      /** Format: float */
      taxAmount: number
      /** Format: float */
      shippingCost?: number
      /** Format: date-time */
      expectedDelivery?: string
      paymentTerms?: string
      notes?: string
    }
    'Models.PurchaseOrderUpdateInput': {
      status?: components['schemas']['Models.OrderStatus']
      /** Format: date-time */
      expectedDelivery?: string
      /** Format: date-time */
      actualDelivery?: string
      deliveryNotes?: string
      notes?: string
    }
    'Models.Refund': {
      id: components['schemas']['Models.RefundId']
      paymentId: components['schemas']['Models.PaymentId']
      amount: components['schemas']['Models.Money']
      reason: string
      /** Format: date-time */
      refundedAt: string
      /** @enum {string} */
      status: 'requested' | 'processing' | 'completed' | 'failed'
      processedBy?: components['schemas']['Models.StaffId']
      method?: components['schemas']['Models.PaymentMethod']
      referenceCode?: string
      notes?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Refund ID
     */
    'Models.RefundId': string
    'Models.RefundInput': {
      paymentId: components['schemas']['Models.PaymentId']
      amount: components['schemas']['Models.Money']
      reason: string
      referenceCode?: string
      processedBy?: components['schemas']['Models.StaffId']
      notes?: string
    }
    'Models.RefundedPaymentStatus': {
      /** @enum {string} */
      type: 'refunded'
      /** Format: date-time */
      refundedAt: string
      refundAmount: components['schemas']['Models.Money']
      refundId?: components['schemas']['Models.RefundId']
    }
    /** @description Registration request */
    'Models.RegisterRequest': {
      /** @description User's email address */
      email: string
      /** @description User's password (must meet security requirements) */
      password: string
      /** @description User's display name */
      name: string
      /**
       * @description User's role (defaults to customer)
       * @default customer
       */
      role: components['schemas']['Models.AuthUserRole']
    }
    /** @enum {string} */
    'Models.ReminderTiming':
      | 'one_day_before'
      | 'three_hours_before'
      | 'one_hour_before'
      | 'thirty_minutes_before'
    'Models.Reservation': {
      id: components['schemas']['Models.ReservationId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      serviceId: components['schemas']['Models.ServiceId']
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
      status: components['schemas']['Models.ReservationStatus']
      notes?: string
      /** Format: int32 */
      totalAmount: number
      /** Format: int32 */
      depositAmount?: number
      isPaid: boolean
      cancellationReason?: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.ReservationDetail': {
      customerName: string
      staffName: string
      serviceName: string
      serviceCategory: components['schemas']['Models.ServiceCategory']
      /** Format: int32 */
      serviceDuration: number
    } & components['schemas']['Models.Reservation']
    /**
     * Format: uuid
     * @description Branded UUID type for Reservation ID
     */
    'Models.ReservationId': string
    /** @enum {string} */
    'Models.ReservationStatus':
      | 'pending'
      | 'confirmed'
      | 'cancelled'
      | 'completed'
      | 'no_show'
    'Models.Review': {
      id: components['schemas']['Models.ReviewId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId: components['schemas']['Models.BookingId']
      staffId?: components['schemas']['Models.StaffId']
      /** Format: int32 */
      overallRating: number
      comment?: string
      title?: string
      /** Format: int32 */
      serviceRating?: number
      /** Format: int32 */
      staffRating?: number
      /** Format: int32 */
      cleanlinessRating?: number
      /** Format: int32 */
      valueRating?: number
      imageUrls?: string[]
      isVerified: boolean
      /**
       * Format: int32
       * @default 0
       */
      helpfulCount: number
      /**
       * Format: int32
       * @default 0
       */
      reportCount: number
      ownerResponse?: string
      /** Format: date-time */
      ownerRespondedAt?: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Review ID
     */
    'Models.ReviewId': string
    'Models.ReviewSummary': {
      /** Format: float */
      averageRating: number
      /** Format: int32 */
      totalReviews: number
      ratingDistribution: {
        [key: string]: number
      }
    }
    /** @description Role definition for access control */
    'Models.Role': {
      id: components['schemas']['Models.RoleId']
      /** @description Role name */
      name: string
      /** @description Role display name */
      displayName: string
      /** @description Role description */
      description?: string
      /** @description Permissions assigned to this role */
      permissions: components['schemas']['Models.Permission'][]
      /** @description Is this a system role */
      isSystem: boolean
      /** @description Is role active */
      isActive: boolean
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.RoleCreateInput': {
      name: string
      displayName: string
      description?: string
      permissions: components['schemas']['Models.PermissionId'][]
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Role ID
     */
    'Models.RoleId': string
    'Models.RoleUpdateInput': {
      displayName?: string
      description?: string
      permissions?: components['schemas']['Models.PermissionId'][]
      isActive?: boolean
    }
    /** @description Sales breakdown by category */
    'Models.SalesByCategory': {
      category: components['schemas']['Models.ServiceCategory']
      amount: components['schemas']['Models.Money']
      /** Format: int32 */
      count: number
      /** Format: float */
      percentage: number
    }
    /** @description Sales breakdown by payment method */
    'Models.SalesByMethod': {
      method: components['schemas']['Models.PaymentMethod']
      amount: components['schemas']['Models.Money']
      /** Format: int32 */
      count: number
      /** Format: float */
      percentage: number
    }
    /** @description Sales report summary */
    'Models.SalesReport': {
      salonId: components['schemas']['Models.SalonId']
      /** Format: date-time */
      periodStart: string
      /** Format: date-time */
      periodEnd: string
      totalSales: components['schemas']['Models.Money']
      totalTax: components['schemas']['Models.Money']
      totalDiscounts: components['schemas']['Models.Money']
      totalRefunds: components['schemas']['Models.Money']
      netSales: components['schemas']['Models.Money']
      /** Format: int32 */
      transactionCount: number
      averageTransactionValue: components['schemas']['Models.Money']
      salesByMethod: components['schemas']['Models.SalesByMethod'][]
      salesByCategory: components['schemas']['Models.SalesByCategory'][]
      topStaff: components['schemas']['Models.StaffPerformance'][]
    }
    'Models.SalesReportQuery': {
      salonId: components['schemas']['Models.SalonId']
    }
    'Models.Salon': {
      id: components['schemas']['Models.SalonId']
      name: string
      description: string
      address: components['schemas']['Models.Address']
      contactInfo: components['schemas']['Models.ContactInfo']
      openingHours: components['schemas']['Models.OpeningHours'][]
      businessHours?: components['schemas']['Models.BusinessHours'][]
      imageUrls?: string[]
      features?: string[]
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Salon ID
     */
    'Models.SalonId': string
    'Models.SalonSummary': {
      id: components['schemas']['Models.SalonId']
      name: string
      address: components['schemas']['Models.Address']
      /** Format: float */
      rating?: number
      /** Format: int32 */
      reviewCount?: number
    }
    /** @enum {string} */
    'Models.ScalpCondition':
      | 'normal'
      | 'dry'
      | 'oily'
      | 'sensitive'
      | 'dandruff'
    'Models.ScalpInfo': {
      condition: components['schemas']['Models.ScalpCondition']
      sensitivities: string[]
      notes?: string
    }
    /** @description Customer search parameters - all fields are optional */
    'Models.SearchCustomerRequest': {
      search?: string
      tags?: string[]
    }
    /** @description Salon search parameters - all fields are optional */
    'Models.SearchSalonRequest': {
      keyword?: string
      city?: string
      category?: components['schemas']['Models.ServiceCategory']
    }
    'Models.Season': {
      name: string
      /** Format: int32 */
      startMonth: number
      /** Format: int32 */
      endMonth: number
      multiplier: components['schemas']['Models.decimal']
    }
    'Models.Service': {
      id: components['schemas']['Models.ServiceId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Service basic information */
      info: components['schemas']['Models.ServiceInfo']
      /** @description Service category and sub-category */
      category: components['schemas']['Models.ServiceCategory']
      categoryId?: components['schemas']['Models.CategoryId']
      /** @description Pricing information */
      pricing: components['schemas']['Models.ServicePricing']
      /** @description Duration settings */
      duration: components['schemas']['Models.ServiceDuration']
      /** @description Availability settings */
      availability?: components['schemas']['Models.ServiceAvailability']
      /** @description Booking requirements */
      requirements?: components['schemas']['Models.BookingRequirement'][]
      /** @description Service options and addons */
      options?: components['schemas']['Models.ServiceOption'][]
      /** @description Service restrictions */
      restrictions?: components['schemas']['Models.ServiceRestrictions']
      /** @description Performance metrics */
      performance?: components['schemas']['Models.ServicePerformance']
      /** @description Service associations */
      associations?: components['schemas']['Models.ServiceAssociations']
      /** @description Service metadata */
      metadata?: components['schemas']['Models.ServiceMetadata']
      /** @description Service status */
      status: components['schemas']['Models.ServiceStatusDetail']
      /** @description Legacy fields for compatibility */
      name: string
      description: string
      /** Format: int32 */
      price: number
      imageUrl?: string
      /** Format: int32 */
      requiredStaffLevel?: number
      isActive: boolean
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.ServiceAssociations': {
      categoryId: components['schemas']['Models.CategoryId']
      parentServiceId?: components['schemas']['Models.ServiceId']
      childServiceIds?: components['schemas']['Models.ServiceId'][]
      requiredServiceIds?: components['schemas']['Models.ServiceId'][]
      recommendedServiceIds?: components['schemas']['Models.ServiceId'][]
      qualifiedStaffIds?: components['schemas']['Models.StaffId'][]
      preferredStaffIds?: components['schemas']['Models.StaffId'][]
    }
    'Models.ServiceAvailability': {
      type: components['schemas']['Models.ServiceAvailabilityType']
      schedule?: components['schemas']['Models.ServiceSchedule'][]
      requiresApproval?: boolean
      seasons?: components['schemas']['Models.Season'][]
      /** Format: int32 */
      maxPerDay?: number
      /** Format: int32 */
      maxPerWeek?: number
    }
    /** @enum {string} */
    'Models.ServiceAvailabilityType':
      | 'always'
      | 'scheduled'
      | 'by_appointment'
      | 'seasonal'
      | 'limited'
    /** @enum {string} */
    'Models.ServiceCategory':
      | 'cut'
      | 'color'
      | 'perm'
      | 'treatment'
      | 'spa'
      | 'other'
    'Models.ServiceCategoryModel': {
      id: components['schemas']['Models.CategoryId']
      name: string
      description: string
      parentId?: components['schemas']['Models.CategoryId']
      /** Format: int32 */
      displayOrder: number
      isActive: boolean
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.ServiceDuration': {
      /** Format: int32 */
      standard: number
      /** Format: int32 */
      minimum?: number
      /** Format: int32 */
      maximum?: number
      /** Format: int32 */
      bufferBefore?: number
      /** Format: int32 */
      bufferAfter?: number
      includesConsultation: boolean
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Service ID
     */
    'Models.ServiceId': string
    'Models.ServiceInfo': {
      name: string
      nameKana?: string
      description: string
      shortDescription?: string
      benefits?: string[]
      targetCustomer?: string
      imageUrls?: string[]
      videoUrl?: string
    }
    'Models.ServiceMetadata': {
      tags?: string[]
      keywords?: string[]
      seoTitle?: string
      seoDescription?: string
      internalNotes?: string
      /** Format: int32 */
      sortOrder?: number
      featured?: boolean
      hideFromMenu?: boolean
    }
    'Models.ServiceOption': {
      type: components['schemas']['Models.ServiceOptionType']
      name?: string
      /** Format: int32 */
      price?: number
      /** Format: int32 */
      duration?: number
      description?: string
      fromLevel?: string
      toLevel?: string
      /** Format: int32 */
      additionalPrice?: number
      /** Format: int32 */
      extension?: number
      productId?: string
      required?: boolean
      withService?: components['schemas']['Models.ServiceId']
      /** Format: int32 */
      discountAmount?: number
    }
    /** @enum {string} */
    'Models.ServiceOptionType':
      | 'addon'
      | 'upgrade'
      | 'duration'
      | 'product'
      | 'combo'
    'Models.ServicePerformance': {
      /** Format: int32 */
      bookingCount: number
      completionRate: components['schemas']['Models.decimal']
      averageRating?: components['schemas']['Models.decimal']
      /** Format: int32 */
      reviewCount: number
      /** Format: int64 */
      revenue: number
      popularityScore?: components['schemas']['Models.decimal']
      repeatRate?: components['schemas']['Models.decimal']
    }
    'Models.ServicePreference': {
      favoriteServices?: components['schemas']['Models.ServiceId'][]
      avoidServices?: components['schemas']['Models.ServiceId'][]
      /** Format: int32 */
      preferredDuration?: number
      preferredPriceRange?: components['schemas']['Models.PriceRangeFilter']
    }
    'Models.ServicePricing': {
      strategy: components['schemas']['Models.PricingStrategy']
      taxIncluded: boolean
      currency: components['schemas']['Models.CurrencyCode']
      /** Format: int32 */
      minimumPrice?: number
      /** Format: int32 */
      maximumPrice?: number
      depositRequired: boolean
      /** Format: int32 */
      depositAmount?: number
      cancellationFee?: components['schemas']['Models.CancellationFee']
    }
    'Models.ServiceRestrictions': {
      requiredStaffLevel?: components['schemas']['Models.StaffLevel']
      requiredCertifications?: string[]
      /** Format: int32 */
      maxConcurrent?: number
      /** Format: int32 */
      minIntervalDays?: number
      maxBookingsPerCustomer?: components['schemas']['Models.BookingLimit']
      blackoutDates?: string[]
    }
    'Models.ServiceSchedule': {
      dayOfWeek: components['schemas']['Models.DayOfWeek']
      startTime: string
      endTime: string
      /** Format: int32 */
      maxBookings?: number
    }
    'Models.ServiceStatusDetail': {
      type: components['schemas']['Models.ServiceStatusType']
      reason?: string
      /** Format: date-time */
      since?: string
      availableMonths?: number[]
      /** Format: date-time */
      availableUntil?: string
      /** Format: int32 */
      remainingSlots?: number
      /** Format: date-time */
      discontinuedAt?: string
      replacementId?: components['schemas']['Models.ServiceId']
      /** Format: date-time */
      launchDate?: string
    }
    /** @enum {string} */
    'Models.ServiceStatusType':
      | 'active'
      | 'inactive'
      | 'seasonal'
      | 'limited'
      | 'discontinued'
      | 'coming_soon'
    /** @description Session information */
    'Models.Session': {
      /** @description Unique session identifier */
      id: string
      /** @description User ID associated with this session */
      userId: components['schemas']['Models.UserId']
      /** @description Refresh token for this session */
      refreshToken: string
      /** @description IP address from which the session was created */
      ipAddress: string
      /** @description User agent string */
      userAgent: string
      /**
       * Format: date-time
       * @description Session expiry time
       */
      expiresAt: string
      /**
       * @description Remember me flag
       * @default false
       */
      rememberMe: boolean
      /**
       * Format: date-time
       * @description Session creation timestamp
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Last activity timestamp
       */
      lastActivityAt: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Session ID
     */
    'Models.SessionId': string
    /** @description Session list response */
    'Models.SessionListResponse': {
      /** @description Active sessions */
      sessions: components['schemas']['Models.Session'][]
      /**
       * Format: int32
       * @description Total number of sessions
       */
      total: number
    }
    /** @description 共有リンク */
    'Models.ShareLink': {
      /** @description 共有リンクID */
      id: string
      /** @description 共有トークン */
      token: string
      /** @description 添付ファイルID */
      attachmentId: string
      /**
       * Format: date-time
       * @description 有効期限（オプション）
       */
      expiresAt?: string
      /**
       * Format: int32
       * @description 最大ダウンロード数（オプション）
       */
      maxDownloads?: number
      /**
       * Format: int32
       * @description 現在のダウンロード数
       */
      downloadCount: number
      /** @description パスワード保護 */
      hasPassword: boolean
      /** @description 許可されたメールアドレス（オプション） */
      allowedEmails?: string[]
      /** @description 作成者ID */
      createdBy: string
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string
    }
    /** @enum {string} */
    'Models.SpaSubCategory':
      | 'head_spa'
      | 'scalp_massage'
      | 'aromatherapy'
      | 'relaxation'
    'Models.Staff': {
      id: components['schemas']['Models.StaffId']
      salonId: components['schemas']['Models.SalonId']
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      specialties: string[]
      imageUrl?: string
      bio?: string
      /** Format: int32 */
      yearsOfExperience?: number
      certifications?: string[]
      qualifications?: components['schemas']['Models.StaffQualification'][]
      schedules?: components['schemas']['Models.StaffSchedule'][]
      isActive: boolean
      permissions?: components['schemas']['Models.StaffPermission'][]
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.StaffAvailability': {
      staffId: components['schemas']['Models.StaffId']
      dayOfWeek: components['schemas']['Models.DayOfWeek']
      startTime: string
      endTime: string
      breakStart?: string
      breakEnd?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Staff ID
     */
    'Models.StaffId': string
    /** @enum {string} */
    'Models.StaffLevel': 'junior' | 'stylist' | 'senior' | 'expert' | 'director'
    /** @description Staff performance metrics */
    'Models.StaffPerformance': {
      staffId: components['schemas']['Models.StaffId']
      staffName: string
      totalSales: components['schemas']['Models.Money']
      /** Format: int32 */
      serviceCount: number
      averageServiceValue: components['schemas']['Models.Money']
      /** Format: float */
      customerSatisfaction?: number
    }
    'Models.StaffPermission': {
      resource: string
      actions: string[]
      scope?: string
      /** Format: date-time */
      expiresAt?: string
    }
    'Models.StaffQualification': {
      name: string
      /** Format: date */
      certificationDate: string
      /** Format: date */
      expiryDate?: string
      issuer?: string
      credentialId?: string
    }
    'Models.StaffSchedule': {
      dayOfWeek: components['schemas']['Models.DayOfWeek']
      startTime: string
      endTime: string
      breakTime?: components['schemas']['Models.TimeSlot'][]
      effectivePeriod?: components['schemas']['Models.DateRange']
    }
    'Models.StockAlert': {
      itemId: components['schemas']['Models.InventoryId']
      /** Format: float */
      threshold: number
      /** Format: float */
      currentStock: number
      /** Format: date-time */
      triggeredAt: string
    }
    /** @description Stock movement record */
    'Models.StockMovement': {
      id: string
      itemId: components['schemas']['Models.InventoryId']
      salonId: components['schemas']['Models.SalonId']
      /** @enum {string} */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /** Format: float */
      quantity: number
      reason: string
      performedBy: components['schemas']['Models.StaffId']
      /** Format: date-time */
      occurredAt: string
      referenceId?: string
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
      inventoryId: components['schemas']['Models.InventoryId']
      /**
       * Format: float
       * @description Stock level after movement
       */
      stockAfter: number
      /** @description Reason for movement */
      orderId?: components['schemas']['Models.OrderId']
      /** @description Related treatment */
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      /**
       * Format: date-time
       * @description Movement timestamp
       */
      movedAt: string
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.StockMovementInput': {
      inventoryId: components['schemas']['Models.InventoryId']
      /** @enum {string} */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /** Format: float */
      quantity: number
      reason: string
      orderId?: components['schemas']['Models.OrderId']
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      notes?: string
    }
    'Models.StylePreference': {
      preferredLength?: string
      preferredColors?: string[]
      avoidStyles?: string[]
      inspirationImages?: string[]
    }
    /** @enum {string} */
    'Models.StylingSubCategory':
      | 'blowout'
      | 'updo'
      | 'braiding'
      | 'extensions'
      | 'event_styling'
    /** @enum {string} */
    'Models.SystemRole':
      | 'super_admin'
      | 'salon_owner'
      | 'salon_manager'
      | 'senior_staff'
      | 'staff'
      | 'receptionist'
      | 'customer'
      | 'guest'
    'Models.TimeSlot': {
      startTime: string
      endTime: string
    }
    /** @description Token refresh request */
    'Models.TokenRefreshRequest': {
      /** @description Refresh token */
      refreshToken: string
    }
    /** @description Treatment record for customer visit */
    'Models.TreatmentRecord': {
      id: components['schemas']['Models.TreatmentRecordId']
      bookingId: components['schemas']['Models.BookingId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Type of treatment performed */
      treatmentType: components['schemas']['Models.TreatmentType']
      /** @description Services performed during this treatment */
      serviceIds: components['schemas']['Models.ServiceId'][]
      /**
       * Format: date-time
       * @description Treatment start time
       */
      startTime: string
      /**
       * Format: date-time
       * @description Treatment end time
       */
      endTime: string
      /** @description Detailed notes about the treatment */
      notes?: string
      /** @description Materials and products used */
      usedMaterials?: components['schemas']['Models.MaterialUsage'][]
      /** @description Before/after photos */
      photos?: components['schemas']['Models.AttachmentId'][]
      /** @description Customer feedback and notes */
      customerFeedback?: string
      /** @description Recommendations for next visit */
      nextRecommendations?: string
      /**
       * Format: float
       * @description Total amount charged
       */
      totalAmount: number
      /**
       * Format: float
       * @description Discount applied
       */
      discountAmount?: number
      /**
       * Format: int32
       * @description Points earned
       */
      pointsEarned?: number
      /** Format: date-time */
      createdAt: string
      createdBy?: string
      /** Format: date-time */
      updatedAt: string
      updatedBy?: string
    }
    'Models.TreatmentRecordCreateInput': {
      bookingId: components['schemas']['Models.BookingId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      treatmentType: components['schemas']['Models.TreatmentType']
      serviceIds: components['schemas']['Models.ServiceId'][]
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
      notes?: string
      usedMaterials?: components['schemas']['Models.MaterialUsage'][]
      customerFeedback?: string
      nextRecommendations?: string
      /** Format: float */
      totalAmount: number
      /** Format: float */
      discountAmount?: number
      /** Format: int32 */
      pointsEarned?: number
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Treatment Record ID
     */
    'Models.TreatmentRecordId': string
    'Models.TreatmentRecordUpdateInput': {
      notes?: string
      usedMaterials?: components['schemas']['Models.MaterialUsage'][]
      customerFeedback?: string
      nextRecommendations?: string
      photos?: components['schemas']['Models.AttachmentId'][]
    }
    /** @enum {string} */
    'Models.TreatmentSubCategory':
      | 'deep_conditioning'
      | 'protein_treatment'
      | 'scalp_treatment'
      | 'keratin_treatment'
      | 'olaplex'
    /** @enum {string} */
    'Models.TreatmentType':
      | 'cut'
      | 'color'
      | 'perm'
      | 'treatment'
      | 'head_spa'
      | 'styling'
      | 'extension'
      | 'nail'
      | 'eyelash'
      | 'other'
    /** @description Two-factor authentication disable request */
    'Models.TwoFactorDisableRequest': {
      /** @description Current password for verification */
      password: string
      /** @description Current TOTP code for verification */
      code: string
    }
    /** @description Two-factor authentication enable request */
    'Models.TwoFactorEnableRequest': {
      /** @description Current password for verification */
      password: string
    }
    /** @description Two-factor authentication setup response */
    'Models.TwoFactorSetupResponse': {
      /** @description QR code URL for authenticator app */
      qrCodeUrl: string
      /** @description Manual entry secret */
      secret: string
      /** @description Backup codes for recovery */
      backupCodes: string[]
    }
    /**
     * @description Two-factor authentication status
     * @enum {string}
     */
    'Models.TwoFactorStatus': 'disabled' | 'pending' | 'enabled'
    /** @description Two-factor authentication verify request */
    'Models.TwoFactorVerifyRequest': {
      /** @description TOTP code from authenticator app */
      code: string
    }
    /** @description Booking update request with optional fields for partial updates */
    'Models.UpdateBookingRequest': {
      status?: components['schemas']['Models.BookingStatusUpdate']
      statusCode?: components['schemas']['Models.BookingStatusCode']
      waitlistEntry?: components['schemas']['Models.WaitlistEntryUpdate']
      deposit?: components['schemas']['Models.BookingDepositUpdate']
      paymentMethod?: components['schemas']['Models.PaymentMethod']
      paymentStatus?: components['schemas']['Models.PaymentStatusCode']
      discountAmount?: components['schemas']['Models.MoneyUpdate']
      finalAmount?: components['schemas']['Models.MoneyUpdate']
      balanceDue?: components['schemas']['Models.MoneyUpdate']
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description Booking update request with reset capability */
    'Models.UpdateBookingRequestWithReset': {
      status?: components['schemas']['Models.BookingStatus']
      statusCode?: components['schemas']['Models.BookingStatusCode']
      waitlistEntry?: components['schemas']['Models.WaitlistEntry'] | null
      deposit?: components['schemas']['Models.BookingDeposit'] | null
      paymentMethod?: components['schemas']['Models.PaymentMethod'] | null
      paymentStatus?: components['schemas']['Models.PaymentStatusCode'] | null
      discountAmount?: components['schemas']['Models.Money'] | null
      finalAmount?: components['schemas']['Models.Money'] | null
      balanceDue?: components['schemas']['Models.Money'] | null
      notes?: string | null
      metadata?: {
        [key: string]: unknown
      } | null
    }
    /** @description Customer update request with optional fields for partial updates */
    'Models.UpdateCustomerRequest': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      preferences?: string
      notes?: string
      tags?: string[]
      /** Format: date */
      birthDate?: string
    }
    /** @description Customer update request with reset capability */
    'Models.UpdateCustomerRequestWithReset': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      preferences?: string | null
      notes?: string | null
      tags?: string[] | null
      /** Format: date */
      birthDate?: string | null
    }
    /** @description Reservation update request with optional fields for partial updates */
    'Models.UpdateReservationRequest': {
      status?: components['schemas']['Models.ReservationStatus']
      notes?: string
      /** Format: date-time */
      startTime?: string
      staffId?: components['schemas']['Models.StaffId']
    }
    /** @description Reservation update request with reset capability */
    'Models.UpdateReservationRequestWithReset': {
      status?: components['schemas']['Models.ReservationStatus']
      notes?: string | null
      /** Format: date-time */
      startTime?: string
      staffId?: components['schemas']['Models.StaffId']
    }
    /** @description Review update request with optional fields for partial updates */
    'Models.UpdateReviewRequest': {
      /** Format: int32 */
      overallRating?: number
      comment?: string
      title?: string
      /** Format: int32 */
      serviceRating?: number
      /** Format: int32 */
      staffRating?: number
      /** Format: int32 */
      cleanlinessRating?: number
      /** Format: int32 */
      valueRating?: number
      imageUrls?: string[]
    }
    /** @description Review update request with reset capability */
    'Models.UpdateReviewRequestWithReset': {
      /** Format: int32 */
      overallRating?: number
      comment?: string | null
      title?: string | null
      /** Format: int32 */
      serviceRating?: number | null
      /** Format: int32 */
      staffRating?: number | null
      /** Format: int32 */
      cleanlinessRating?: number | null
      /** Format: int32 */
      valueRating?: number | null
      imageUrls?: string[] | null
    }
    /** @description Salon update request with optional fields for partial updates */
    'Models.UpdateSalonRequest': {
      name?: string
      description?: string
      address?: components['schemas']['Models.Address']
      contactInfo?: components['schemas']['Models.ContactInfo']
      openingHours?: components['schemas']['Models.OpeningHours'][]
      businessHours?: components['schemas']['Models.BusinessHours'][]
      imageUrls?: string[]
      features?: string[]
    }
    /** @description Salon update request with reset capability */
    'Models.UpdateSalonRequestWithReset': {
      name?: string
      description?: string
      address?: components['schemas']['Models.Address']
      contactInfo?: components['schemas']['Models.ContactInfo']
      openingHours?: components['schemas']['Models.OpeningHours'][]
      businessHours?: components['schemas']['Models.BusinessHours'][] | null
      imageUrls?: string[] | null
      features?: string[] | null
    }
    /** @description Service update request with optional fields for partial updates */
    'Models.UpdateServiceRequest': {
      name?: string
      description?: string
      /** Format: int32 */
      duration?: number
      /** Format: int32 */
      price?: number
      category?: components['schemas']['Models.ServiceCategory']
      categoryId?: components['schemas']['Models.CategoryId']
      imageUrl?: string
      /** Format: int32 */
      requiredStaffLevel?: number
      /** Format: int32 */
      depositAmount?: number
      isActive?: boolean
      /** Format: int32 */
      maxAdvanceBookingDays?: number
      /** Format: int32 */
      minAdvanceBookingHours?: number
    }
    /** @description Service update request with reset capability */
    'Models.UpdateServiceRequestWithReset': {
      name?: string
      description?: string
      /** Format: int32 */
      duration?: number
      /** Format: int32 */
      price?: number
      category?: components['schemas']['Models.ServiceCategory']
      categoryId?: (string & components['schemas']['Models.CategoryId']) | null
      imageUrl?: string | null
      /** Format: int32 */
      requiredStaffLevel?: number | null
      /** Format: int32 */
      depositAmount?: number | null
      isActive?: boolean
      /** Format: int32 */
      maxAdvanceBookingDays?: number | null
      /** Format: int32 */
      minAdvanceBookingHours?: number | null
    }
    /** @description Staff update request with optional fields for partial updates */
    'Models.UpdateStaffRequest': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      specialties?: string[]
      imageUrl?: string
      bio?: string
      /** Format: int32 */
      yearsOfExperience?: number
      certifications?: string[]
      qualifications?: components['schemas']['Models.StaffQualification'][]
      schedules?: components['schemas']['Models.StaffSchedule'][]
      permissions?: components['schemas']['Models.StaffPermission'][]
      isActive?: boolean
    }
    /** @description Staff update request with reset capability */
    'Models.UpdateStaffRequestWithReset': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      specialties?: string[]
      imageUrl?: string | null
      bio?: string | null
      /** Format: int32 */
      yearsOfExperience?: number | null
      certifications?: string[] | null
      qualifications?:
        | components['schemas']['Models.StaffQualification'][]
        | null
      schedules?: components['schemas']['Models.StaffSchedule'][] | null
      permissions?: components['schemas']['Models.StaffPermission'][] | null
      isActive?: boolean
    }
    /** @description ファイルアップロードリクエスト（マルチパート） */
    'Models.UploadAttachmentRequest': {
      /**
       * Format: byte
       * @description ファイル本体
       */
      file: string
      /** @description ファイル名 */
      filename: string
      /** @description Content-Type */
      contentType: string
      /** @description サロンID（オプション） */
      salonId?: string
      /** @description タグ（オプション） */
      tags?: string
    }
    /** @description 署名付きアップロードURLレスポンス */
    'Models.UploadUrlResponse': {
      /** @description 署名付きアップロードURL */
      uploadUrl: string
      /** @description ストレージキー */
      key: string
      /**
       * Format: date-time
       * @description URL有効期限
       */
      expiresAt: string
    }
    /** @description User authentication information */
    'Models.User': {
      /** @description Unique identifier for the user */
      id: string
      /** @description User's email address (unique) */
      email: string
      /** @description User's display name */
      name: string
      /** @description User's role in the system */
      role: components['schemas']['Models.AuthUserRole']
      /** @description Account status */
      status: components['schemas']['Models.UserAccountStatus']
      /** @description Email verification status */
      emailVerified: boolean
      /** @description Email verification token (internal use) */
      emailVerificationToken?: string
      /**
       * Format: date-time
       * @description Email verification token expiry
       */
      emailVerificationTokenExpiry?: string
      /** @description Two-factor authentication status */
      twoFactorStatus: components['schemas']['Models.TwoFactorStatus']
      /** @description Two-factor authentication secret (encrypted) */
      twoFactorSecret?: string
      /** @description Backup codes for 2FA recovery */
      backupCodes?: string[]
      /**
       * Format: int32
       * @description Number of failed login attempts
       * @default 0
       */
      failedLoginAttempts: number
      /**
       * Format: date-time
       * @description Time when the account was locked
       */
      lockedAt?: string
      /** @description Password reset token (internal use) */
      passwordResetToken?: string
      /**
       * Format: date-time
       * @description Password reset token expiry
       */
      passwordResetTokenExpiry?: string
      /**
       * Format: date-time
       * @description Last password change timestamp
       */
      lastPasswordChangeAt?: string
      /** @description Previous password hashes for history check */
      passwordHistory?: string[]
      /** @description Trusted IP addresses for this user */
      trustedIpAddresses?: string[]
      /** @description Reference to customer profile if user is a customer */
      customerId?: components['schemas']['Models.CustomerId']
      /** @description Reference to staff profile if user is staff */
      staffId?: components['schemas']['Models.StaffId']
      /** @description Extended role information */
      roleDetail?: components['schemas']['Models.UserRoleDetail']
      /** @description Authentication state */
      authState?: components['schemas']['Models.AuthenticationState']
      /** @description Email verification state */
      emailVerificationState?: components['schemas']['Models.EmailVerificationState']
      /** @description Password reset state */
      passwordResetState?: components['schemas']['Models.PasswordResetState']
      /**
       * Format: date-time
       * @description Timestamp when the user was created
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Timestamp when the user was last updated
       */
      updatedAt: string
      /**
       * Format: date-time
       * @description Last login timestamp
       */
      lastLoginAt?: string
      /** @description Last login IP address */
      lastLoginIp?: string
    }
    /**
     * @description User account status
     * @enum {string}
     */
    'Models.UserAccountStatus':
      | 'active'
      | 'unverified'
      | 'locked'
      | 'suspended'
      | 'deleted'
    /**
     * Format: uuid
     * @description Branded UUID type for User ID
     */
    'Models.UserId': string
    /** @description User role assignment */
    'Models.UserRole': {
      userId: string
      roleId: components['schemas']['Models.RoleId']
      salonId?: components['schemas']['Models.SalonId']
      /**
       * Format: date-time
       * @description Assignment date
       */
      assignedAt: string
      /** @description Assigned by */
      assignedBy: string
      /**
       * Format: date-time
       * @description Expiration date
       */
      expiresAt?: string
      /** @description Is active */
      isActive: boolean
    }
    'Models.UserRoleAssignInput': {
      userId: string
      roleId: components['schemas']['Models.RoleId']
      salonId?: components['schemas']['Models.SalonId']
      /** Format: date-time */
      expiresAt?: string
    }
    'Models.UserRoleDetail': {
      type: components['schemas']['Models.UserRoleType']
      salonId?: components['schemas']['Models.SalonId']
      level?: components['schemas']['Models.StaffLevel']
    }
    /** @enum {string} */
    'Models.UserRoleType': 'customer' | 'staff' | 'manager' | 'admin' | 'owner'
    'Models.VisitHistory': {
      /** Format: int32 */
      visitCount: number
      /** Format: date-time */
      firstVisitDate?: string
      /** Format: date-time */
      lastVisitDate?: string
      /** Format: int32 */
      averageSpendPerVisit?: number
      /** Format: int32 */
      totalSpent: number
      /** Format: int32 */
      cancelCount: number
      /** Format: int32 */
      noShowCount: number
      /** Format: int32 */
      completedServices: number
    }
    'Models.WaitlistEntry': {
      /** Format: int32 */
      position: number
      /** Format: date-time */
      estimatedTime?: string
      /** Format: date-time */
      joinedAt: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      notifiedAt?: string
      preferredStaffId?: components['schemas']['Models.StaffId']
      preferredServiceId?: components['schemas']['Models.ServiceId']
      notes?: string
    }
    'Models.WaitlistEntryUpdate': {
      /** Format: int32 */
      position?: number
      /** Format: date-time */
      estimatedTime?: string
      /** Format: date-time */
      joinedAt?: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      notifiedAt?: string
      preferredStaffId?: components['schemas']['Models.StaffId']
      preferredServiceId?: components['schemas']['Models.ServiceId']
      notes?: string
    }
    /** Format: double */
    'Models.decimal': number
  }
  responses: never
  parameters: {
    'Models.DateRangeFilter.endDate': string
    'Models.DateRangeFilter.startDate': string
    'Models.InventorySearchParams.category': string
    'Models.InventorySearchParams.expiringSoon': boolean
    'Models.InventorySearchParams.lowStock': boolean
    'Models.InventorySearchParams.salonId': components['schemas']['Models.SalonId']
    'Models.InventorySearchParams.status': components['schemas']['Models.InventoryStatus']
    'Models.PaginationParams.limit': number
    'Models.PaginationParams.offset': number
    'Models.SalesReportQuery.groupBy': 'day' | 'week' | 'month'
    'Models.SalesReportQuery.includeRefunds': boolean
    'Models.SearchParams.q': string
    'Models.SearchParams.sortBy': string
    'Models.SearchParams.sortOrder': 'asc' | 'desc'
  }
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AccessControlOperations_checkAccess: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AccessCheck']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.AccessResult']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_checkPermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PermissionCheckInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PermissionCheckResult']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_getResourceAccess: {
    parameters: {
      query?: {
        action?: string
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        resource: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  userId: string
                  userName?: string
                  hasAccess: boolean
                  grantedBy: string[]
                }[]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_getUserPermissions: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  userId: string
                  permissions: string[]
                  roles: {
                    roleId: components['schemas']['Models.RoleId']
                    roleName: string
                    permissions: string[]
                  }[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_validatePermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          roleId: components['schemas']['Models.RoleId']
          requiredPermissions: string[]
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  isValid: boolean
                  missingPermissions: string[]
                  extraPermissions: string[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AdminAuthOperations_addTrustedIp: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ipAddress: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AdminAuthOperations_removeTrustedIp: {
    parameters: {
      query: {
        ipAddress: string
      }
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AdminAuthOperations_unlockAccount: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_list: {
    parameters: {
      query?: {
        salonId?: string
        page?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.PaginatedAttachments']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_deleteShareLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        shareLinkId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AttachmentOperations_uploadFile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UploadAttachmentRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_getUploadUrl: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.GetUploadUrlRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.UploadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AttachmentOperations_getDownloadUrl: {
    parameters: {
      query?: {
        inline?: boolean
      }
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.DownloadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_listShareLinks: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.ShareLink'][]
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_createShareLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateShareLinkRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.ShareLink']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_generateBackupCodes: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorVerifyRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            backupCodes: string[]
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_disableTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorDisableRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_enableTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorEnableRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.TwoFactorSetupResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getTwoFactorQRCode: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.TwoFactorSetupResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_verifyTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorVerifyRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_changePassword: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PasswordChangeRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_forgotPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PasswordResetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.LoginRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.LoginResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_logout: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_logoutAll: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getCurrentUser: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.User']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_refreshToken: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TokenRefreshRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.LoginResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_register: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RegisterRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.User']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_resetPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PasswordResetConfirmRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_verifyResetToken: {
    parameters: {
      query: {
        token: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getSessions: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.SessionListResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_revokeSession: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        sessionId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_confirmEmailVerification: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.EmailVerificationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_sendEmailVerification: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        status?: components['schemas']['Models.BookingStatusCode']
        from?: string
        to?: string
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.BookingDetail'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  BookingOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateBookingRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.BookingDetail']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateBookingRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_cancel: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason?: string
          cancelReservations?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_confirm: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_processPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          paymentMethod: components['schemas']['Models.PaymentMethod']
          amount: components['schemas']['Models.Money']
          transactionId?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            booking: components['schemas']['Models.Booking']
            paymentId: components['schemas']['Models.PaymentId']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_addReservation: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reservationId: components['schemas']['Models.ReservationId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_removeReservation: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
        reservationId: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerOperations_list: {
    parameters: {
      query?: {
        search?: string
        tags?: string[]
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Customer'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  CustomerOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateCustomerRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Customer']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerOperations_merge: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          primaryCustomerId: components['schemas']['Models.CustomerId']
          secondaryCustomerId: components['schemas']['Models.CustomerId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Customer']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Customer']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateCustomerRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Customer']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerOperations_getBookings: {
    parameters: {
      query?: {
        status?: components['schemas']['Models.BookingStatusCode']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.BookingDetail'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  CustomerOperations_getProfile: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.CustomerProfile']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerOperations_getReservations: {
    parameters: {
      query?: {
        status?: components['schemas']['Models.ReservationStatus']
        from?: string
        to?: string
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.ReservationDetail'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ReservationOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        staffId?: components['schemas']['Models.StaffId']
        status?: components['schemas']['Models.ReservationStatus']
        from?: string
        to?: string
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.ReservationDetail'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ReservationOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateReservationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReservationDetail']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateReservationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_cancel: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_complete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_reschedule: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: date-time */
          newStartTime: string
          staffId?: components['schemas']['Models.StaffId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        bookingId?: components['schemas']['Models.BookingId']
        staffId?: components['schemas']['Models.StaffId']
        minRating?: number
        isVerified?: boolean
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Review'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ReviewOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateReviewRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateReviewRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_markHelpful: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** Format: int32 */
            helpfulCount: number
          }
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_report: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
          details?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            reportId: string
          }
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  SalonOperations_list: {
    parameters: {
      query?: {
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.SalonSummary'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  SalonOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateSalonRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Salon']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  SalonOperations_search: {
    parameters: {
      query?: {
        keyword?: string
        city?: string
        category?: components['schemas']['Models.ServiceCategory']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.SalonSummary'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  SalonOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Salon']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  SalonOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateSalonRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Salon']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  SalonOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AvailabilityOperations_getAvailableSlots: {
    parameters: {
      query: {
        staffId?: components['schemas']['Models.StaffId']
        serviceId: components['schemas']['Models.ServiceId']
        date: string
        duration?: number
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AvailableSlot'][]
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AvailabilityOperations_checkAvailability: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          staffId: components['schemas']['Models.StaffId']
          serviceId: components['schemas']['Models.ServiceId']
          /** Format: date-time */
          startTime: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            isAvailable: boolean
            conflicts?: components['schemas']['Models.ReservationId'][]
          }
        }
      }
    }
  }
  SalonReviewOperations_getSalonReviews: {
    parameters: {
      query?: {
        sortBy?: 'recent' | 'rating' | 'helpful'
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Review'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  SalonReviewOperations_getSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReviewSummary']
        }
      }
    }
  }
  ServiceOperations_list: {
    parameters: {
      query?: {
        category?: components['schemas']['Models.ServiceCategory']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Service'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ServiceOperations_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateServiceRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_bulkUpdate: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          serviceIds?: components['schemas']['Models.ServiceId'][]
          updates?: components['schemas']['Models.UpdateServiceRequest']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            updated: components['schemas']['Models.ServiceId'][]
            failed: {
              serviceId: components['schemas']['Models.ServiceId']
              error: string
            }[]
          }
        }
      }
    }
  }
  ServiceOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateServiceRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_list: {
    parameters: {
      query?: {
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Staff'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  StaffOperations_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateStaffRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateStaffRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_getAvailability: {
    parameters: {
      query: {
        date: string
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.StaffAvailability'][]
        }
      }
    }
  }
  StaffOperations_updateAvailability: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StaffAvailability'][]
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.StaffAvailability'][]
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceCategoryOperations_listCategories: {
    parameters: {
      query?: {
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.ServiceCategoryModel'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ServiceCategoryOperations_createCategory: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          description: string
          parentId?: components['schemas']['Models.CategoryId']
          /** Format: int32 */
          displayOrder: number
        }
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ServiceCategoryModel']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceCategoryOperations_updateCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CategoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name?: string
          description?: string
          parentId?: components['schemas']['Models.CategoryId']
          /** Format: int32 */
          displayOrder?: number
          isActive?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ServiceCategoryModel']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceCategoryOperations_deleteCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CategoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ShareOperations_getSharedFile: {
    parameters: {
      query?: {
        password?: string
      }
      header?: never
      path: {
        shareToken: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  ShareOperations_downloadSharedFile: {
    parameters: {
      query?: {
        password?: string
      }
      header?: never
      path: {
        shareToken: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.DownloadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  GlobalStaffOperations_searchStaff: {
    parameters: {
      query?: {
        specialty?: string
        city?: string
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Staff'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  StaffReviewOperations_getStaffReviews: {
    parameters: {
      query?: {
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Review'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  StaffReviewOperations_getStaffSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReviewSummary']
        }
      }
    }
  }
  InventoryOperations_listInventoryItems: {
    parameters: {
      query: {
        salonId: components['parameters']['Models.InventorySearchParams.salonId']
        category?: components['parameters']['Models.InventorySearchParams.category']
        status?: components['parameters']['Models.InventorySearchParams.status']
        lowStock?: components['parameters']['Models.InventorySearchParams.lowStock']
        expiringSoon?: components['parameters']['Models.InventorySearchParams.expiringSoon']
        q?: components['parameters']['Models.SearchParams.q']
        sortBy?: components['parameters']['Models.SearchParams.sortBy']
        sortOrder?: components['parameters']['Models.SearchParams.sortOrder']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.InventoryItem'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_createInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.InventoryItemCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_getActiveAlerts: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        type?: 'low_stock' | 'expiring' | 'expired' | 'overstock'
        severity?: 'info' | 'warning' | 'critical'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryAlert'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_getAlertSummary: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  totalAlerts: number
                  /** Format: int32 */
                  criticalAlerts: number
                  /** Format: int32 */
                  warningAlerts: number
                  /** Format: int32 */
                  infoAlerts: number
                  /** Format: int32 */
                  unacknowledged: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_acknowledgeAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        inventoryId: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          acknowledgedBy: components['schemas']['Models.StaffId']
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryAlert']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getExpiringItems: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        days?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getLowStockItems: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        threshold?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_recordStockMovement: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StockMovementInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.StockMovement']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_performStockCount: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          salonId: components['schemas']['Models.SalonId']
          items: {
            inventoryId: components['schemas']['Models.InventoryId']
            /** Format: float */
            countedQuantity: number
          }[]
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  adjustments: components['schemas']['Models.StockMovement'][]
                  discrepancies: {
                    inventoryId: components['schemas']['Models.InventoryId']
                    /** Format: float */
                    expected: number
                    /** Format: float */
                    counted: number
                    /** Format: float */
                    difference: number
                  }[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getInventoryValueReport: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        category?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: float */
                  totalValue: number
                  /** Format: int32 */
                  totalItems: number
                  categories: {
                    category: string
                    /** Format: float */
                    value: number
                    /** Format: int32 */
                    itemCount: number
                  }[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_deleteInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_updateInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.InventoryItemUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getStockMovements: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.StockMovement'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_searchMedicalCharts: {
    parameters: {
      query?: {
        search?: string
        hasAllergies?: boolean
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.MedicalChart'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_createMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.MedicalChartCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_getCustomerMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_getCustomerAllergies: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  customerId: components['schemas']['Models.CustomerId']
                  allergies: string[]
                  avoidProducts: string[]
                  /** Format: date-time */
                  lastUpdated: string
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_updateMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.MedicalChartId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.MedicalChartUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_listPayments: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        status?: components['schemas']['Models.PaymentStatusCode']
        method?: components['schemas']['Models.PaymentMethod']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.Payment'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_createPayment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PaymentCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_calculatePayment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          services: components['schemas']['Models.ServiceId'][]
          discountCode?: string
          /** Format: int32 */
          pointsToUse?: number
          customerId?: components['schemas']['Models.CustomerId']
          bookingId?: components['schemas']['Models.BookingId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PaymentPreview']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getCustomerPayments: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.Payment'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_updatePayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PaymentUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_cancelPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_processPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getReceipt: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  receiptNumber: string
                  payment: components['schemas']['Models.Payment']
                  items: {
                    [key: string]: unknown
                  }[]
                  /** Format: date-time */
                  issuedAt: string
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_processRefund: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RefundInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_listPermissions: {
    parameters: {
      query?: {
        resource?: string
        action?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Permission'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_getPermissionsByResource: {
    parameters: {
      query?: never
      header?: never
      path: {
        resource: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Permission'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_getPermissionGroups: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  resource: string
                  permissions: components['schemas']['Models.Permission'][]
                }[]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_adjustPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getPointBalance: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointInfo']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getExpiringPoints: {
    parameters: {
      query?: {
        days?: number
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  customerId: components['schemas']['Models.CustomerId']
                  /** Format: int32 */
                  expiringPoints: number
                  /** Format: date-time */
                  expirationDate: string
                  transactions: components['schemas']['Models.PointTransaction'][]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getPointTransactions: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.PointTransaction'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_earnPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_processExpiredPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          customerId?: components['schemas']['Models.CustomerId']
          /** Format: date-time */
          processBefore?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  processedCount: number
                  /** Format: int32 */
                  totalPoints: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_usePoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_listPurchaseOrders: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        status?: components['schemas']['Models.OrderStatus']
        supplier?: string
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.PurchaseOrder'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_createPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PurchaseOrderCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_getReorderSuggestions: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  inventoryId: components['schemas']['Models.InventoryId']
                  productName: string
                  /** Format: float */
                  currentStock: number
                  /** Format: float */
                  minimumStock: number
                  /** Format: float */
                  suggestedQuantity: number
                  supplier?: string
                  /** Format: date-time */
                  lastOrderDate?: string
                }[]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_getPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_updatePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PurchaseOrderUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_approvePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          approvedBy: components['schemas']['Models.StaffId']
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_cancelPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_receivePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          receivedItems: {
            inventoryId: components['schemas']['Models.InventoryId']
            /** Format: float */
            receivedQuantity: number
            notes?: string
          }[]
          deliveryNotes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_listRoles: {
    parameters: {
      query?: {
        isSystem?: boolean
        isActive?: boolean
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.Role'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_createRole: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RoleCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_getSystemRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_getRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_deleteRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_updateRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RoleUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_cloneRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          displayName: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesReport: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        groupBy?: components['parameters']['Models.SalesReportQuery.groupBy']
        includeRefunds?: components['parameters']['Models.SalesReportQuery.includeRefunds']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.SalesReportQuery']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.SalesReport']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesByCategory: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.SalesByCategory'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesByStaff: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.StaffPerformance'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getDailySales: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        date: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: date */
                  date: string
                  sales: components['schemas']['Models.Money']
                  /** Format: int32 */
                  transactions: number
                  refunds: components['schemas']['Models.Money']
                  net: components['schemas']['Models.Money']
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_exportSalesReport: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          salonId: components['schemas']['Models.SalonId']
          /** Format: date-time */
          startDate: string
          /** Format: date-time */
          endDate: string
          /** @enum {string} */
          format: 'csv' | 'excel' | 'pdf'
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  downloadUrl: string
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesTrends: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        period: 'daily' | 'weekly' | 'monthly'
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  labels: string[]
                  sales: components['schemas']['Models.Money'][]
                  transactions: number[]
                  average: components['schemas']['Models.Money'][]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_listTreatments: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        staffId?: components['schemas']['Models.StaffId']
        treatmentType?: components['schemas']['Models.TreatmentType']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_createTreatment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TreatmentRecordCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getCustomerTreatmentHistory: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getStaffTreatments: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getTreatmentStatistics: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  totalTreatments: number
                  treatmentsByType: {
                    [key: string]: number
                  }
                  /** Format: float */
                  averageDuration: number
                  topServices: components['schemas']['Models.ServiceId'][]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_deleteTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_updateTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TreatmentRecordUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_addTreatmentPhotos: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AttachmentId'][]
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleOperations_assignUserRole: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UserRoleAssignInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.UserRole']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleOperations_bulkAssignRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          userIds: string[]
          roleIds: components['schemas']['Models.RoleId'][]
          salonId?: components['schemas']['Models.SalonId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  assigned: number
                  /** Format: int32 */
                  failed: number
                  errors?: string[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleOperations_getUsersByRole: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: {
                    userId: string
                    userName?: string
                    /** Format: date-time */
                    assignedAt: string
                    /** Format: date-time */
                    expiresAt?: string
                  }[]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleOperations_getUserRoles: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.UserRole'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleOperations_revokeUserRole: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleOperations_updateUserRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        userId: string
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: date-time */
          expiresAt?: string
          isActive?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.UserRole']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
}

// Type extractors for API operations
export type Components = components extends { schemas: infer S } ? S : never
export type Schemas = Components
export type Paths = paths
export type Operations = operations

// Removed unused operation types per YAGNI principle
// These were never imported or used anywhere in the codebase
