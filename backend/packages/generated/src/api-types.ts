// Generated from TypeSpec/OpenAPI using openapi-typescript
// DO NOT EDIT MANUALLY
// Last generated: 2025-09-24T07:42:48.918Z

// Base types from OpenAPI
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/access-control/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Check user access */
    post: operations['AccessControlOperations_checkAccess']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/check-permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Check multiple permissions */
    post: operations['AccessControlOperations_checkPermissions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/resource/{resource}/access': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get resource access list */
    get: operations['AccessControlOperations_getResourceAccess']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/user/{userId}/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get user effective permissions */
    get: operations['AccessControlOperations_getUserPermissions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Validate role permissions */
    post: operations['AccessControlOperations_validatePermissions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/alive': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check API liveness
     * @description プロセスが生存しているかを判定するエンドポイントで、異常時は再起動判定に利用されます。
     */
    get: operations['SystemOperations_alive']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check API health
     * @description APIが正常稼働しているかを判定し、監視ツールやロードバランサーから参照します。
     */
    get: operations['SystemOperations_health']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/metrics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get API metrics
     * @description Prometheus形式のメトリクスを返却し、監視基盤での可視化やアラート設定に用います。
     */
    get: operations['SystemOperations_metrics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/ready': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check API readiness
     * @description Kubernetes等のオーケストレーターがトラフィック受信可否を判断するための準備完了チェックです。
     */
    get: operations['SystemOperations_ready']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get API version
     * @description APIのバージョンやビルド情報を返し、障害解析やデプロイ確認に活用します。
     */
    get: operations['SystemOperations_version']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/admin/auth/trusted-ip/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add trusted IP address for a user */
    post: operations['AdminAuthOperations_addTrustedIp']
    /** @description Remove trusted IP address for a user */
    delete: operations['AdminAuthOperations_removeTrustedIp']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/admin/auth/unlock/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Unlock a locked user account */
    post: operations['AdminAuthOperations_unlockAccount']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description サロンまたは顧客単位で登録済みの添付ファイルを一覧し、施術履歴の確認や資料整理に活用します。 */
    get: operations['AttachmentOperations_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/share-links/{shareLinkId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description 不要になった共有リンクを失効させ、アクセス制御を適切に保ちます。 */
    delete: operations['AttachmentOperations_deleteShareLink']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description スタッフが管理画面からファイル本体を直接アップロードし、予約記録や顧客カルテに紐づけるための操作です。 */
    post: operations['AttachmentOperations_uploadFile']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/upload-url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description 顧客やスタッフがブラウザから直接クラウドストレージへアップロードできるよう、短時間だけ有効な署名付きURLを発行します。 */
    post: operations['AttachmentOperations_getUploadUrl']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 指定した添付ファイルの詳細情報を取得し、プレビュー表示や関連予約の確認に用います。 */
    get: operations['AttachmentOperations_get']
    put?: never
    post?: never
    /** @description 不要になった添付ファイルを削除し、ストレージ容量の最適化と情報漏えいリスクの低減を図ります。 */
    delete: operations['AttachmentOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}/download-url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 閲覧権限を持つ利用者がファイルを安全に取得できるよう、短時間有効なダウンロードURLを発行します。 */
    get: operations['AttachmentOperations_getDownloadUrl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}/share-links': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 対象ファイルに対して発行済みの共有リンクを一覧し、公開状況や有効期限の管理を行います。 */
    get: operations['AttachmentOperations_listShareLinks']
    put?: never
    /** @description 施術前後の写真や資料を外部パートナーや顧客と共有するためのリンクを発行します。必要に応じてパスワード保護も適用します。 */
    post: operations['AttachmentOperations_createShareLink']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/backup-codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Generate new backup codes for 2FA */
    post: operations['AuthOperations_generateBackupCodes']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/disable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Disable two-factor authentication */
    post: operations['AuthOperations_disableTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/enable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Enable two-factor authentication */
    post: operations['AuthOperations_enableTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/qr-code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get QR code for 2FA setup */
    get: operations['AuthOperations_getTwoFactorQRCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/verify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Verify two-factor authentication code */
    post: operations['AuthOperations_verifyTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/change-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Change password */
    post: operations['AuthOperations_changePassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/forgot-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Request password reset */
    post: operations['AuthOperations_forgotPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Login with email and password */
    post: operations['AuthOperations_login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Logout and invalidate session */
    post: operations['AuthOperations_logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout-all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Logout from all sessions */
    post: operations['AuthOperations_logoutAll']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get current user information */
    get: operations['AuthOperations_getCurrentUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Refresh access token */
    post: operations['AuthOperations_refreshToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Register a new user account */
    post: operations['AuthOperations_register']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Reset password with token */
    post: operations['AuthOperations_resetPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/reset-password/verify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Verify password reset token */
    get: operations['AuthOperations_verifyResetToken']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/sessions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get active sessions */
    get: operations['AuthOperations_getSessions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/sessions/{sessionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description Revoke a specific session */
    delete: operations['AuthOperations_revokeSession']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/verify-email/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Confirm email verification */
    post: operations['AuthOperations_confirmEmailVerification']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/verify-email/send': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Send email verification */
    post: operations['AuthOperations_sendEmailVerification']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List bookings
     * @description サロン・顧客・ステータスなどの条件で予約パッケージを一覧表示し、受付状況を俯瞰します。
     */
    get: operations['BookingOperations_list']
    put?: never
    /**
     * Create booking
     * @description 新規の予約パッケージを作成し、施術メニューと顧客情報を紐づけて確定します。
     */
    post: operations['BookingOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get booking
     * @description 個別の予約パッケージ詳細を取得し、関連する予約枠や支払い状況を確認します。
     */
    get: operations['BookingOperations_get']
    put?: never
    post?: never
    /**
     * Delete booking
     * @description 予約パッケージを削除し、誤登録や無効となった複数予約を整理します。
     */
    delete: operations['BookingOperations_delete']
    options?: never
    head?: never
    /**
     * Update booking
     * @description 既存の予約パッケージ内容を部分的に更新し、顧客要望の変更に対応します。
     */
    patch: operations['BookingOperations_update']
    trace?: never
  }
  '/api/v1/bookings/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Cancel booking
     * @description 確定済みの予約パッケージをキャンセルし、理由と連動予約の取り扱いを記録します。
     */
    post: operations['BookingOperations_cancel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Confirm booking
     * @description 仮状態の予約パッケージを確定ステータスへ変更し、顧客への案内やリソース確保を開始します。
     */
    post: operations['BookingOperations_confirm']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/payment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Process payment
     * @description 予約パッケージに対する決済を処理し、支払い手段・金額・トランザクションIDを保存します。
     */
    post: operations['BookingOperations_processPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add reservation to booking
     * @description 既存の予約パッケージに個別の予約枠を追加し、まとめて管理します。
     */
    post: operations['BookingOperations_addReservation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/reservations/{reservationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Remove reservation from booking
     * @description 予約パッケージから紐づく予約枠を外し、構成内容を調整します。
     */
    delete: operations['BookingOperations_removeReservation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List {Name} resources
     * @description ページネーションやフィルター条件を指定して対象リソースを一覧取得します。業務画面のリスト表示に利用します。
     */
    get: operations['CustomerCrud_list']
    put?: never
    /**
     * Create new {Name}
     * @description 新規リソースを作成し、作成時のバリデーションや重複チェック結果を返却します。
     */
    post: operations['CustomerCrud_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/batch/get': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Batch get {Name} resources
     * @description 複数IDをまとめて取得し、一覧画面の遅延読み込みや外部連携に利用します。
     */
    post: operations['CustomerCrud_batchGet']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/bulk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update {Name} resources
     * @description 複数リソースの更新をまとめて受け付け、バージョン整合性を保ちながら処理します。
     */
    put: operations['CustomerCrud_bulkUpdate']
    /**
     * Bulk create {Name} resources
     * @description 複数リソースを一括作成し、結果を成功・失敗に分けて返却します。
     */
    post: operations['CustomerCrud_bulkCreate']
    /**
     * Bulk delete {Name} resources
     * @description 複数リソースを一括削除し、成功可否ごとの結果を返却します。
     */
    delete: operations['CustomerCrud_bulkDelete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Export {Name} search results
     * @description 検索結果を指定形式でエクスポートし、帳票出力や外部共有に活用します。
     */
    post: operations['CustomerCrud_export']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/merge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Merge customer records
     * @description 重複登録された顧客レコードを統合し、履歴やポイントを一本化します。
     */
    post: operations['CustomerOperations_merge']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search {Name} resources
     * @description ファセットや複合条件を利用してリソースを検索し、結果と統計情報を返却します。
     */
    get: operations['CustomerCrud_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} by ID
     * @description IDを指定して単一リソースを取得し、詳細表示や編集フォームの初期値に使用します。
     */
    get: operations['CustomerCrud_get']
    /**
     * Update {Name}
     * @description 既存リソースを全項目更新し、最新状態とバージョン情報を返却します。
     */
    put: operations['CustomerCrud_update']
    post?: never
    /**
     * Delete {Name}
     * @description リソースを削除し、必要に応じて論理削除か物理削除かを選択します。
     */
    delete: operations['CustomerCrud_delete']
    options?: never
    head?: never
    /**
     * Partially update {Name}
     * @description 必要なフィールドのみを部分更新し、変更差分を効率的に反映します。
     */
    patch: operations['CustomerCrud_patch']
    trace?: never
  }
  '/api/v1/customers/{id}/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer bookings
     * @description 顧客単位の予約パッケージ情報を取得し、複数施術を跨いだ利用状況を把握します。
     */
    get: operations['CustomerOperations_getBookings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/deletion-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Request customer data deletion
     * @description 顧客からの削除要請を受け付け、規制に沿った消去フローを開始します。
     */
    post: operations['CustomerOperations_requestDeletion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Export customer data
     * @description 顧客が自身のデータを取得できるようエクスポートし、GDPR等の個人情報規制に対応します。
     */
    get: operations['CustomerOperations_exportData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} audit history
     * @description 対象リソースの監査履歴を取得し、変更者や変更内容を追跡します。
     */
    get: operations['CustomerCrud_getHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/loyalty-points': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add loyalty points
     * @description 来店やキャンペーンに応じてロイヤルティポイントを加算し、顧客維持を促進します。
     */
    post: operations['CustomerOperations_addLoyaltyPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/preferences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update customer preferences
     * @description 顧客の施術好みや連絡手段などの希望設定を更新し、パーソナライズされた提案に反映します。
     */
    put: operations['CustomerOperations_updatePreferences']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer profile
     * @description 顧客の基本情報に加え、嗜好や連絡先など拡張情報を取得し、パーソナライズ対応に活かします。
     */
    get: operations['CustomerOperations_getProfile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer reservations
     * @description 顧客が保持する予約履歴を取得し、来店予定や過去施術の確認に利用します。
     */
    get: operations['CustomerOperations_getReservations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/restore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Restore deleted {Name}
     * @description 削除済みリソースを復元し、誤削除への迅速なリカバリを可能にします。
     */
    post: operations['CustomerCrud_restore']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer statistics
     * @description 来店頻度や売上貢献度など顧客指標を集計し、セグメント施策やVIP判定に利用します。
     */
    get: operations['CustomerOperations_getStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/versions/{version}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} version
     * @description 指定したバージョンのリソース状態を取得し、過去状態の確認や比較に利用します。
     */
    get: operations['CustomerCrud_getVersion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List reservations
     * @description サロン、顧客、スタッフなどの条件で予約一覧を取得し、当日の稼働状況を把握します。
     */
    get: operations['ReservationOperations_list']
    put?: never
    /**
     * Create reservation
     * @description 新しい施術予約を登録し、枠の確保と関連リソースの仮押さえを行います。
     */
    post: operations['ReservationOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get reservation
     * @description 個別予約の詳細情報を取得し、施術内容や担当者、タイムラインを確認します。
     */
    get: operations['ReservationOperations_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update reservation
     * @description 予約内容を部分的に更新し、サービス内容や担当スタッフの変更に対応します。
     */
    patch: operations['ReservationOperations_update']
    trace?: never
  }
  '/api/v1/reservations/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Cancel reservation
     * @description 確定済みの予約をキャンセルし、理由の記録と枠の開放を行います。
     */
    post: operations['ReservationOperations_cancel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}/complete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete reservation
     * @description 施術完了を登録し、実績データや売上計上に利用するステータスへ更新します。
     */
    post: operations['ReservationOperations_complete']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}/reschedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reschedule reservation
     * @description 予約日時や担当者の調整が必要な際に、新しいスケジュールへ付け替えます。
     */
    post: operations['ReservationOperations_reschedule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List reviews
     * @description 顧客やスタッフ、評価点でレビューを絞り込み、店舗運営の改善材料を抽出します。
     */
    get: operations['ReviewOperations_list']
    put?: never
    /**
     * Create review
     * @description 施術完了後に顧客がレビューを投稿し、サービス品質の可視化と信頼獲得につなげます。
     */
    post: operations['ReviewOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get review
     * @description 単一レビューの詳細を表示し、コメント内容や評価指標を確認します。
     */
    get: operations['ReviewOperations_get']
    put?: never
    post?: never
    /**
     * Delete review
     * @description レビューの削除要請に応じて投稿を非表示または除去し、コンプライアンスを維持します。
     */
    delete: operations['ReviewOperations_delete']
    options?: never
    head?: never
    /**
     * Update review
     * @description 顧客が投稿後のレビューを修正し、誤記修正や追記を反映します。
     */
    patch: operations['ReviewOperations_update']
    trace?: never
  }
  '/api/v1/reviews/{id}/helpful': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Mark review as helpful
     * @description 他の利用者に役立つレビューをマーキングし、信頼性の高い声を強調します。
     */
    post: operations['ReviewOperations_markHelpful']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews/{id}/report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Report review
     * @description 不適切な内容や虚偽が疑われるレビューを通報し、運営による対応フローへ送ります。
     */
    post: operations['ReviewOperations_report']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List {Name} resources
     * @description ページネーションやフィルター条件を指定して対象リソースを一覧取得します。業務画面のリスト表示に利用します。
     */
    get: operations['SalonCrud_list']
    put?: never
    /**
     * Create new {Name}
     * @description 新規リソースを作成し、作成時のバリデーションや重複チェック結果を返却します。
     */
    post: operations['SalonCrud_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/batch/get': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Batch get {Name} resources
     * @description 複数IDをまとめて取得し、一覧画面の遅延読み込みや外部連携に利用します。
     */
    post: operations['SalonCrud_batchGet']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/bulk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update {Name} resources
     * @description 複数リソースの更新をまとめて受け付け、バージョン整合性を保ちながら処理します。
     */
    put: operations['SalonCrud_bulkUpdate']
    /**
     * Bulk create {Name} resources
     * @description 複数リソースを一括作成し、結果を成功・失敗に分けて返却します。
     */
    post: operations['SalonCrud_bulkCreate']
    /**
     * Bulk delete {Name} resources
     * @description 複数リソースを一括削除し、成功可否ごとの結果を返却します。
     */
    delete: operations['SalonCrud_bulkDelete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Export {Name} search results
     * @description 検索結果を指定形式でエクスポートし、帳票出力や外部共有に活用します。
     */
    post: operations['SalonCrud_export']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/nearby': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get nearby salons
     * @description 位置情報と希望条件から近隣サロンを検索し、顧客に最適な選択肢を提示します。
     */
    get: operations['SalonOperations_getNearby']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/recommendations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get personalized salon recommendations
     * @description 顧客の嗜好や履歴にもとづきおすすめサロンを提示し、再来店促進や新規獲得を支援します。
     */
    get: operations['SalonOperations_getRecommendations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search {Name} resources
     * @description ファセットや複合条件を利用してリソースを検索し、結果と統計情報を返却します。
     */
    get: operations['SalonCrud_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} by ID
     * @description IDを指定して単一リソースを取得し、詳細表示や編集フォームの初期値に使用します。
     */
    get: operations['SalonCrud_get']
    /**
     * Update {Name}
     * @description 既存リソースを全項目更新し、最新状態とバージョン情報を返却します。
     */
    put: operations['SalonCrud_update']
    post?: never
    /**
     * Delete {Name}
     * @description リソースを削除し、必要に応じて論理削除か物理削除かを選択します。
     */
    delete: operations['SalonCrud_delete']
    options?: never
    head?: never
    /**
     * Partially update {Name}
     * @description 必要なフィールドのみを部分更新し、変更差分を効率的に反映します。
     */
    patch: operations['SalonCrud_patch']
    trace?: never
  }
  '/api/v1/salons/{id}/availability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Check salon availability
     * @description 希望日時にサロン全体で対応可能な枠があるかを判定し、予約導線での可用性表示に利用します。
     */
    post: operations['SalonOperations_checkAvailability']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} audit history
     * @description 対象リソースの監査履歴を取得し、変更者や変更内容を追跡します。
     */
    get: operations['SalonCrud_getHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/images/{imageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete salon image
     * @description 掲載中のサロン画像を削除し、ブランドトーンの統一や情報更新を行います。
     */
    delete: operations['SalonOperations_deleteImage']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/restore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Restore deleted {Name}
     * @description 削除済みリソースを復元し、誤削除への迅速なリカバリを可能にします。
     */
    post: operations['SalonCrud_restore']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/staff/{staffId}/schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update staff schedule
     * @description サロン所属スタッフのシフトを更新し、予約枠や勤怠管理との整合を取ります。
     */
    put: operations['SalonOperations_updateStaffSchedule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get salon statistics
     * @description サロンの売上や予約件数など主要指標を取得し、経営判断や施策検討に活用します。
     */
    get: operations['SalonOperations_getStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/subscribe': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Subscribe to salon updates
     * @description サロンのニュースやキャンペーン更新を購読登録し、ロイヤル顧客との接点を強化します。
     */
    post: operations['SalonOperations_subscribe']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/versions/{version}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} version
     * @description 指定したバージョンのリソース状態を取得し、過去状態の確認や比較に利用します。
     */
    get: operations['SalonCrud_getVersion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/available-slots': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get available slots
     * @description 指定日の予約可能枠を取得し、空き枠一覧や予約フォームに反映します。
     */
    get: operations['AvailabilityOperations_getAvailableSlots']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/available-slots/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Check availability
     * @description 希望する日時・スタッフの組み合わせが予約可能か即時判定し、ダブルブッキングを防ぎます。
     */
    post: operations['AvailabilityOperations_checkAvailability']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get salon reviews
     * @description サロンに紐づくレビュー一覧を取得し、並び替え条件に応じて顧客の声を提示します。
     */
    get: operations['SalonReviewOperations_getSalonReviews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/reviews/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get salon reviews summary
     * @description サロン全体の平均評価や件数などの概要指標を取得し、ダッシュボード表示に利用します。
     */
    get: operations['SalonReviewOperations_getSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/services': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List salon services
     * @description サロン内の提供メニューをカテゴリ別に一覧し、予約画面や在庫管理との連携に活用します。
     */
    get: operations['ServiceOperations_list']
    put?: never
    /**
     * Create service
     * @description 新しい施術メニューを登録し、価格・施術時間・提供条件を設定します。
     */
    post: operations['ServiceOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/services/bulk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Bulk update services
     * @description 複数メニューの共通項目を一括更新し、季節キャンペーンや価格調整を効率化します。
     */
    patch: operations['ServiceOperations_bulkUpdate']
    trace?: never
  }
  '/api/v1/salons/{salonId}/services/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get service
     * @description 特定メニューの詳細情報を取得し、予約システムやスタッフ教育に必要な内容を確認します。
     */
    get: operations['ServiceOperations_get']
    /**
     * Update service
     * @description 既存メニューの内容を更新し、料金改定や提供条件の変更に対応します。
     */
    put: operations['ServiceOperations_update']
    post?: never
    /**
     * Delete service
     * @description 提供終了となったメニューを削除し、予約導線から除外します。
     */
    delete: operations['ServiceOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List staff members
     * @description サロンに所属するスタッフ一覧を取得し、配置状況や担当可能メニューを確認します。
     */
    get: operations['StaffOperations_list']
    put?: never
    /**
     * Create staff member
     * @description 新しいスタッフを登録し、プロフィール情報や担当メニューの設定を開始します。
     */
    post: operations['StaffOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get staff member
     * @description 特定スタッフの詳細情報を取得し、顧客向け表示や社内確認に利用します。
     */
    get: operations['StaffOperations_get']
    /**
     * Update staff member
     * @description スタッフのプロフィールや担当メニュー、表示可否を更新します。
     */
    put: operations['StaffOperations_update']
    post?: never
    /**
     * Delete staff member
     * @description 退職や契約終了に伴いスタッフを削除し、予約導線から除外します。
     */
    delete: operations['StaffOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff/{id}/availability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get staff availability
     * @description 指定日のスタッフ空き状況を取得し、予約枠の提案や調整に活用します。
     */
    get: operations['StaffOperations_getAvailability']
    /**
     * Update staff availability
     * @description スタッフの稼働予定を更新し、シフト変更や臨時休みを反映します。
     */
    put: operations['StaffOperations_updateAvailability']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/service-categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List service categories
     * @description 登録済みのカテゴリ一覧を取得し、メニュー分類や表示順を管理します。
     */
    get: operations['CategoryOperations_listCategories']
    put?: never
    /**
     * Create service category
     * @description 新しい施術カテゴリを作成し、階層構造や表示順を定義します。
     */
    post: operations['CategoryOperations_createCategory']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/service-categories/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update service category
     * @description 既存カテゴリを更新し、名称や表示順、親子関係を調整します。
     */
    put: operations['CategoryOperations_updateCategory']
    post?: never
    /**
     * Delete service category
     * @description 利用されなくなったカテゴリを削除し、メニュー構成を整理します。
     */
    delete: operations['CategoryOperations_deleteCategory']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/share/{shareToken}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンクとパスワードを確認し、公開対象ファイルのメタ情報を閲覧者に提示します。 */
    get: operations['ShareOperations_getSharedFile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/share/{shareToken}/download': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンク利用者が安全にファイル本体を取得できるよう、署名付きダウンロードURLを返却します。 */
    get: operations['ShareOperations_downloadSharedFile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search staff across all salons
     * @description 専門分野や地域条件でスタッフを横断検索し、顧客の指名ニーズに応えます。
     */
    get: operations['GlobalStaffOperations_searchStaff']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/{staffId}/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get staff reviews
     * @description 特定スタッフに紐づくレビュー一覧を取得し、個別フィードバックとして活用します。
     */
    get: operations['StaffReviewOperations_getStaffReviews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/{staffId}/reviews/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get staff reviews summary
     * @description スタッフ別の平均評価やレビュー数を集計し、人事評価や表彰に用います。
     */
    get: operations['StaffReviewOperations_getStaffSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List inventory items with filters */
    get: operations['InventoryOperations_listInventoryItems']
    put?: never
    /** @description Create new inventory item */
    post: operations['InventoryOperations_createInventoryItem']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get active inventory alerts */
    get: operations['InventoryAlertOperations_getActiveAlerts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get alert summary */
    get: operations['InventoryAlertOperations_getAlertSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts/{inventoryId}/acknowledge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Acknowledge alert */
    post: operations['InventoryAlertOperations_acknowledgeAlert']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/expiring': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get expiring items */
    get: operations['InventoryOperations_getExpiringItems']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/low-stock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get low stock items */
    get: operations['InventoryOperations_getLowStockItems']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/movement': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Record stock movement */
    post: operations['InventoryOperations_recordStockMovement']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/stock-count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Perform stock count */
    post: operations['InventoryOperations_performStockCount']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/value-report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get inventory value report */
    get: operations['InventoryOperations_getInventoryValueReport']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get inventory item by ID */
    get: operations['InventoryOperations_getInventoryItem']
    put?: never
    post?: never
    /** @description Delete inventory item */
    delete: operations['InventoryOperations_deleteInventoryItem']
    options?: never
    head?: never
    /** @description Update inventory item */
    patch: operations['InventoryOperations_updateInventoryItem']
    trace?: never
  }
  '/inventory/{id}/movements': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get stock movement history */
    get: operations['InventoryOperations_getStockMovements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Search medical charts */
    get: operations['MedicalChartOperations_searchMedicalCharts']
    put?: never
    /** @description Create medical chart for customer */
    post: operations['MedicalChartOperations_createMedicalChart']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/customer/{customerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get medical chart by customer ID */
    get: operations['MedicalChartOperations_getCustomerMedicalChart']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/customer/{customerId}/allergies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get allergy warnings for customer */
    get: operations['MedicalChartOperations_getCustomerAllergies']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update medical chart */
    patch: operations['MedicalChartOperations_updateMedicalChart']
    trace?: never
  }
  '/payments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List payments with filters */
    get: operations['PaymentOperations_listPayments']
    put?: never
    /** @description Create new payment */
    post: operations['PaymentOperations_createPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/calculate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Calculate payment summary */
    post: operations['PaymentOperations_calculatePayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/customer/{customerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get customer payment history */
    get: operations['PaymentOperations_getCustomerPayments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get payment by ID */
    get: operations['PaymentOperations_getPayment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update payment status */
    patch: operations['PaymentOperations_updatePayment']
    trace?: never
  }
  '/payments/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Cancel payment */
    post: operations['PaymentOperations_cancelPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/process': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process payment */
    post: operations['PaymentOperations_processPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/receipt': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get payment receipt */
    get: operations['PaymentOperations_getReceipt']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/refund': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process refund */
    post: operations['PaymentOperations_processRefund']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List all permissions */
    get: operations['PermissionOperations_listPermissions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions/by-resource/{resource}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get permissions by resource */
    get: operations['PermissionOperations_getPermissionsByResource']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get permission groups */
    get: operations['PermissionOperations_getPermissionGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/adjust': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Adjust customer points */
    post: operations['PointOperations_adjustPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/balance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get customer point balance */
    get: operations['PointOperations_getPointBalance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/expiring': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get expiring points */
    get: operations['PointOperations_getExpiringPoints']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get point transaction history */
    get: operations['PointOperations_getPointTransactions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/earn': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add points to customer */
    post: operations['PointOperations_earnPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/expire': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process expired points */
    post: operations['PointOperations_processExpiredPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/use': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Use customer points */
    post: operations['PointOperations_usePoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List purchase orders */
    get: operations['PurchaseOrderOperations_listPurchaseOrders']
    put?: never
    /** @description Create purchase order */
    post: operations['PurchaseOrderOperations_createPurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/reorder-suggestions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Generate reorder suggestions */
    get: operations['PurchaseOrderOperations_getReorderSuggestions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get purchase order by ID */
    get: operations['PurchaseOrderOperations_getPurchaseOrder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update purchase order */
    patch: operations['PurchaseOrderOperations_updatePurchaseOrder']
    trace?: never
  }
  '/purchase-orders/{id}/approve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Approve purchase order */
    post: operations['PurchaseOrderOperations_approvePurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Cancel purchase order */
    post: operations['PurchaseOrderOperations_cancelPurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}/receive': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Receive purchase order */
    post: operations['PurchaseOrderOperations_receivePurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List all roles */
    get: operations['RoleOperations_listRoles']
    put?: never
    /** @description Create new role */
    post: operations['RoleOperations_createRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/system': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get system roles */
    get: operations['RoleOperations_getSystemRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get role by ID */
    get: operations['RoleOperations_getRole']
    put?: never
    post?: never
    /** @description Delete role */
    delete: operations['RoleOperations_deleteRole']
    options?: never
    head?: never
    /** @description Update role */
    patch: operations['RoleOperations_updateRole']
    trace?: never
  }
  '/roles/{id}/clone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Clone role */
    post: operations['RoleOperations_cloneRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales report for a period */
    get: operations['SalesReportOperations_getSalesReport']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/by-category': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales by service category */
    get: operations['SalesReportOperations_getSalesByCategory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/by-staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales by staff */
    get: operations['SalesReportOperations_getSalesByStaff']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/daily': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get daily sales summary */
    get: operations['SalesReportOperations_getDailySales']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Export sales report */
    post: operations['SalesReportOperations_exportSalesReport']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/trends': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales trends */
    get: operations['SalesReportOperations_getSalesTrends']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List treatment records with filters */
    get: operations['TreatmentOperations_listTreatments']
    put?: never
    /** @description Create new treatment record */
    post: operations['TreatmentOperations_createTreatment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/customer/{customerId}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment history for a customer */
    get: operations['TreatmentOperations_getCustomerTreatmentHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/staff/{staffId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatments by staff member */
    get: operations['TreatmentOperations_getStaffTreatments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment statistics */
    get: operations['TreatmentOperations_getTreatmentStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment record by ID */
    get: operations['TreatmentOperations_getTreatment']
    put?: never
    post?: never
    /** @description Delete treatment record */
    delete: operations['TreatmentOperations_deleteTreatment']
    options?: never
    head?: never
    /** @description Update treatment record */
    patch: operations['TreatmentOperations_updateTreatment']
    trace?: never
  }
  '/treatments/{id}/photos': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add photos to treatment record */
    post: operations['TreatmentOperations_addTreatmentPhotos']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Assign role to user */
    post: operations['UserRoleTypeOperations_assignUserRoleType']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/bulk-assign': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Bulk assign roles */
    post: operations['UserRoleTypeOperations_bulkAssignRoles']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/role/{roleId}/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get users by role */
    get: operations['UserRoleTypeOperations_getUsersByRole']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/user/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get user roles */
    get: operations['UserRoleTypeOperations_getUserRoleTypes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/user/{userId}/role/{roleId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description Revoke user role */
    delete: operations['UserRoleTypeOperations_revokeUserRoleType']
    options?: never
    head?: never
    /** @description Update user role */
    patch: operations['UserRoleTypeOperations_updateUserRoleType']
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description アクセス権限の確認リクエスト */
    'Models.AccessCheck': {
      /** @description 権限を判定するユーザー ID */
      userId: string
      /** @description 対象リソースの識別子 */
      resource: string
      /** @description 実行したい操作区分 */
      action: string
      /** @description サロン単位での権限チェック時のサロン ID - システム全体権限のチェック時はnull */
      salonId: (string & components['schemas']['Models.SalonId']) | null
      /** @description リソース固有の ID - リソース種別全体への権限チェック時はnull */
      resourceId: string | null
    }
    /** @description アクセス権限チェックの結果 */
    'Models.AccessResult': {
      /** @description 操作が許可されたかどうか */
      allowed: boolean
      /** @description 拒否または許可の理由 - 理由説明不要な明白なケースの場合はnull */
      reason: string | null
      /** @description 必要な権限キー一覧 - 権限不要なパブリック操作の場合はnull */
      requiredPermissions: string[] | null
      /** @description ユーザーが保有する権限キー一覧 - 未ログインや権限なしユーザーの場合はnull */
      userPermissions: string[] | null
    }
    /** @description サロンや顧客の住所情報を表す共通モデル。 */
    'Models.Address': {
      /** @description 番地や建物名を含む詳細住所。 */
      street: string
      /** @description 市区町村名。 */
      city: string
      /** @description 都道府県名。 */
      prefecture: string
      /** @description 郵便番号。未登録の場合はnull */
      postalCode: string | null
      /**
       * @description 国名。既定値はJapan。
       * @default Japan
       */
      country: string
    }
    /** @description サロンや顧客の住所情報を表す共通モデル。 */
    'Models.AddressUpdate': {
      /** @description 番地や建物名を含む詳細住所。 */
      street?: string
      /** @description 市区町村名。 */
      city?: string
      /** @description 都道府県名。 */
      prefecture?: string
      /** @description 郵便番号。未登録の場合はnull */
      postalCode?: string | null
      /**
       * @description 国名。既定値はJapan。
       * @default Japan
       */
      country: string
    }
    'Models.AllergyInfo': {
      /** @description アレルギーのタイプ分類。物質の種類を示す */
      type: components['schemas']['Models.AllergyType']
      /** @description アレルギー物質一覧。該当なしの場合はnull */
      substances: string[] | null
      /** @description アレルギー香料一覧。該当なしの場合はnull */
      fragrances: string[] | null
      /** @description アレルギー金属一覧。該当なしの場合はnull */
      metals: string[] | null
      /** @description アレルギー植物一覧。該当なしの場合はnull */
      plants: string[] | null
      /** @description アレルギー詳細説明。追加情報がない場合はnull */
      description: string | null
      /** @description アレルギーの重篤度。反応の強さと対応レベル */
      severity: components['schemas']['Models.AllergySeverityType']
    }
    /**

         * @description

         * アレルギー重篤度区分 - アレルギー反応の重篤度を表し、対応レベルを決定

         *

         *

         * mild: 軽度 - 軽いかゆみや赤み程度、通常の施術で注意すれば対応可能

         *

         * moderate: 中等度 - 明確な皮膚反応、特別な配慮や代替品の使用が必要

         *

         * severe: 重度 - 激しい反応、特定の施術を避けるべきレベル

         * @enum {string}

         */

    'Models.AllergySeverityType': 'mild' | 'moderate' | 'severe'
    /**

         * @description

         * アレルギータイプ区分 - 顧客が持つアレルギーの種類を分類、施術時の注意事項として使用

         *

         *

         * chemical: 化学物質 - カラー剤、パーマ剤等の化学薬品に対するアレルギー

         *

         * fragrance: 香料 - 香水、シャンプー等の香料成分に対するアレルギー

         *

         * metal: 金属 - ヘアピン、ハサミ等の金属製品に対するアレルギー

         *

         * latex: ラテックス - 手袋等のゴム製品に対するアレルギー

         *

         * plant: 植物 - ヘナ、ハーブ等の植物由来成分に対するアレルギー

         *

         * other: その他 - 上記に分類されないアレルギー

         * @enum {string}

         */

    'Models.AllergyType':
      | 'chemical'
      | 'fragrance'
      | 'metal'
      | 'latex'
      | 'plant'
      | 'other'
    /** @description サロンシステムで管理するアップロード済みファイルのメタ情報を表すモデル。 */
    'Models.Attachment': {
      /** @description 添付ファイルを一意に識別するID。UUID形式。 */
      id: string
      /** @description オブジェクトストレージでファイルを参照するための内部キー。 */
      key: string
      /** @description 利用者がアップロードした元のファイル名。 */
      filename: string
      /** @description ファイルのMIMEタイプ（Content-Type）。 */
      content: string
      /**
       * Format: int32
       * @description ファイルサイズ（バイト単位）。
       */
      size: number
      /**
       * A file in an HTTP request, response, or multipart payload.
       * @description ファイルの実体情報。ダウンロードや共有レスポンスで利用。
       */
      file: {
        /**
         * The allowed media (MIME) types of the file contents.
         * @description The allowed media (MIME) types of the file contents.
         *
         *     In file bodies, this value comes from the `Content-Type` header of the request or response. In JSON bodies,
         *     this value is serialized as a field in the response.
         *
         *     NOTE: this is not _necessarily_ the same as the `Content-Type` header of the request or response, but
         *     it will be for file bodies. It may be different if the file is serialized as a JSON object. It always refers to the
         *     _contents_ of the file, and not necessarily the way the file itself is transmitted or serialized.
         */
        contentType?: string
        /**
         * The name of the file, if any.
         * @description The name of the file, if any.
         *
         *     In file bodies, this value comes from the `filename` parameter of the `Content-Disposition` header of the response
         *     or multipart payload. In JSON bodies, this value is serialized as a field in the response.
         *
         *     NOTE: By default, `filename` cannot be sent in request payloads and can only be sent in responses and multipart
         *     payloads, as the `Content-Disposition` header is not valid in requests. If you want to send the `filename` in a request,
         *     you must extend the `File` model and override the `filename` property with a different location defined by HTTP metadata
         *     decorators.
         */
        filename?: string
        /**
         * The contents of the file.
         * Format: byte
         * @description The contents of the file.
         *
         *     In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
         *     this value is serialized as a field in the response.
         */
        contents: string
      }
      /** @description ファイルをアップロードしたユーザーID。 */
      uploadedBy: string
      /** @description ファイルが紐づくサロンID。全社共通ファイルやシステムファイルの場合はnull。 */
      salonId: string | null
      /** @description 必要に応じて付加情報を保持する任意メタデータ。追加情報が不要な場合はnull。 */
      metadata: {
        [key: string]: unknown
      } | null
      /** @description ラベリングや検索に利用するタグ情報のセット。タグ付けをしていない場合はnull。 */
      tags: {
        [key: string]: string
      } | null
      /**
       * Format: date-time
       * @description ファイルがアップロードされた日時。
       */
      uploadedAt: string
      /**
       * Format: date-time
       * @description ファイル情報が最後に更新された日時。
       */
      updatedAt: string
    }
    /** @description マルチパートアップロードで添付ファイルを登録するためのリクエスト。 */
    'Models.AttachmentCreateRequest': {
      /**
       * Format: byte
       * @description HTTPリクエストで送信されるファイル本体。
       */
      file: string
      /** @description アップロード時に指定されたファイル名。 */
      filename: string
      /** @description ファイルのContent-Type。 */
      content: string
      /** @description ファイルを関連付けるサロンID。全社共通ファイルの場合はnull。 */
      salonId: string | null
      /** @description タグ情報を表すJSON文字列。タグを設定しない場合はnull。 */
      tags: string | null
    }
    /** @description 添付ファイルをダウンロードするための署名付きURLを返すレスポンス。 */
    'Models.AttachmentDownloadUrlResponse': {
      /** @description 一時的に有効なダウンロード用URL。 */
      downloadUrl: string
      /**
       * Format: date-time
       * @description 署名付きURLの有効期限。
       */
      expiresAt: string
    }
    /**
     * Format: uuid
     * @description 添付ファイル・画像データを識別するブランド付きUUID。
     */
    'Models.AttachmentId': string
    /** @description 外部ストレージへ直接アップロードするための署名付きURLを要求するリクエスト。 */
    'Models.AttachmentUploadUrlGetRequest': {
      /** @description アップロード予定のファイル名。 */
      filename: string
      /** @description アップロード予定ファイルのContent-Type。 */
      content: string
      /**
       * Format: int32
       * @description アップロード予定ファイルのサイズ（バイト単位）。
       */
      size: number
      /** @description ファイルをひも付けるサロンID。全社共通ファイルの場合はnull。 */
      salonId: string | null
    }
    /** @description 署名付きアップロードURLと関連情報を返すレスポンス。 */
    'Models.AttachmentUploadUrlResponse': {
      /** @description 一時的に有効なアップロード用URL。 */
      uploadUrl: string
      /** @description 生成されたストレージキー。アップロード完了後の識別に使用。 */
      key: string
      /**
       * Format: date-time
       * @description 署名付きURLの有効期限。
       */
      expiresAt: string
    }
    /** @description 作成・更新ユーザーとタイムスタンプを保持する共通監査情報。 */
    'Models.AuditInfo': {
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 監査情報モデル。
     *     レコードの作成・更新履歴を保持し、内部統制や変更追跡を実現する。 */
    'Models.AuditTrail': {
      /**
       * Format: date-time
       * @description レコード作成日時 (UTC)。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID またはサービス名。 */
      createdBy: string
      /**
       * Format: date-time
       * @description 最終更新日時 (UTC)。
       */
      updatedAt: string
      /** @description 最後に更新したユーザーID またはサービス名。 */
      updatedBy: string
      /**
       * Format: int32
       * @description 楽観的ロックに使用するバージョン番号。
       */
      version: number
      /**
       * @description 論理削除フラグ。true の場合は通常の検索結果から除外する。
       * @default false
       */
      isDeleted: boolean
      /**
       * Format: date-time
       * @description 削除操作が実行された日時 (UTC)。削除されていない場合はnull
       */
      deletedAt: string | null
      /** @description 削除操作を実施したユーザーID またはサービス名。削除されていない場合はnull */
      deletedBy: string | null
      /** @description 削除理由や補足メモ。カスタマーサポート対応に利用する。理由が不要または削除されていない場合はnull */
      deletionReason: string | null
    }
    /** @description メールアドレス確認を完了させるリクエスト。 */
    'Models.AuthEmailVerificationRequest': {
      /** @description メールに記載された確認トークン。 */
      token: string
    }
    /** @description ユーザーがログインする際の認証リクエスト。 */
    'Models.AuthLoginRequest': {
      /** @description ログインに使用するメールアドレス。 */
      email: string
      /** @description ログイン用パスワード。 */
      password: string
      /**
       * @description 永続セッションを希望するかどうかのフラグ。
       * @default false
       */
      rememberMe: boolean
      /** @description 2要素認証が有効な場合に入力するワンタイムコード。 */
      twoFactorCode?: string
    }
    /** @description ログイン成功時に返却するトークン情報。 */
    'Models.AuthLoginResponse': {
      /** @description API呼び出しに利用するアクセストークン。 */
      accessToken: string
      /** @description アクセストークン再発行に使用するリフレッシュトークン。 */
      refreshToken: string
      /**
       * @description トークン種別。常にBearer。
       * @default Bearer
       */
      token: string
      /**
       * Format: int32
       * @description アクセストークンの有効期限（秒）。
       */
      expiresIn: number
      /** @description ログインしたユーザーの情報。 */
      user: components['schemas']['Models.User']
    }
    /** @description ログイン中ユーザーがパスワードを変更するためのリクエスト。 */
    'Models.AuthPasswordChangeRequest': {
      /** @description 本人確認のための現在パスワード。 */
      currentPassword: string
      /** @description 変更後の新しいパスワード。 */
      newPassword: string
    }
    /** @description パスワード再設定を確定するためのリクエスト。 */
    'Models.AuthPasswordResetConfirmRequest': {
      /** @description メールで受け取った再設定トークン。 */
      token: string
      /** @description 新しいパスワード。 */
      newPassword: string
    }
    /** @description パスワード再設定メール送信を要求するリクエスト。 */
    'Models.AuthPasswordResetRequest': {
      /** @description 対象アカウントのメールアドレス。 */
      email: string
    }
    /** @description 新規ユーザー登録時のリクエスト。 */
    'Models.AuthRegisterRequest': {
      /** @description 登録に使用するメールアドレス。 */
      email: string
      /** @description セキュリティ基準を満たすパスワード。 */
      password: string
      /** @description ユーザーの表示名。 */
      name: string
      /**
       * @description 付与するロール。既定はcustomer。
       * @default customer
       */
      role: components['schemas']['Models.AuthUserRoleType']
    }
    /** @description アクティブなセッション一覧を返すレスポンス。 */
    'Models.AuthSessionListResponse': {
      /** @description 稼働中のセッション配列。 */
      sessions: components['schemas']['Models.Session'][]
      /**
       * Format: int32
       * @description 該当セッションの総数。
       */
      total: number
    }
    /** @description 認証系APIで使用する汎用成功レスポンス。 */
    'Models.AuthSuccessResponse': {
      /** @description 完了メッセージ。 */
      message: string
    }
    /** @description アクセストークンを更新するためのリクエスト。 */
    'Models.AuthTokenRefreshRequest': {
      /** @description 認証済みセッションに紐づくリフレッシュトークン。 */
      refreshToken: string
    }
    /** @description 2要素認証を無効化する際の確認リクエスト。 */
    'Models.AuthTwoFactorDisableRequest': {
      /** @description 本人確認のための現在パスワード。 */
      password: string
      /** @description 無効化確認のための現在TOTPコード。 */
      code: string
    }
    /** @description 2要素認証を有効化する際の認証リクエスト。 */
    'Models.AuthTwoFactorEnableRequest': {
      /** @description 本人確認のための現在パスワード。 */
      password: string
    }
    /** @description 2要素認証の設定情報を返すレスポンス。 */
    'Models.AuthTwoFactorSetupResponse': {
      /** @description 認証アプリで読み取るQRコードURL。 */
      qrCodeUrl: string
      /** @description 手動登録用のシークレットキー。 */
      secret: string
      /** @description 復旧用バックアップコード一覧。 */
      backupCodes: string[]
    }
    /** @description 2要素認証コードを検証するリクエスト。 */
    'Models.AuthTwoFactorVerifyRequest': {
      /** @description 認証アプリが生成したTOTPコード。 */
      code: string
    }
    /**

         * @description

         * 認証ユーザーロール区分 - 認証システムにおけるユーザーの役割

         *

         *

         * customer: 顧客ロール - サービスの予約が可能

         *

         * staff: スタッフロール - 自身のスケジュールと予約を管理可能

         *

         * admin: 管理者ロール - システムのフルアクセス権限

         * @enum {string}

         */

    'Models.AuthUserRoleType': 'customer' | 'staff' | 'admin'
    /** @description 認証状態ごとの詳細情報を格納するモデル。 */
    'Models.AuthenticationStateDetail': {
      /** @description 現在の認証状態区分。 */
      type: components['schemas']['Models.AuthenticationStateType']
      /** @description 状態に紐づくセッションID。セッションが未確立の場合はnull。 */
      sessionId: (string & components['schemas']['Models.SessionId']) | null
      /**
       * Format: date-time
       * @description 該当状態が失効する日時。無期限の場合はnull。
       */
      expiresAt: string | null
      /** @description 2要素認証や一時アクセスに利用する暫定トークン。不要な状態の場合はnull。 */
      tempToken: string | null
      /**
       * Format: date-time
       * @description ロックや制限状態が解除される予定日時。通常状態の場合はnull。
       */
      until: string | null
      /**
       * Format: int32
       * @description 認証失敗などの試行回数。試行がない場合はnull。
       */
      attempts: number | null
      /** @description 状態が発生した具体的な理由メッセージ。理由が特にない場合はnull。 */
      reason: string | null
    }
    /**

         * @description

         * 認証状態区分 - ユーザーの認証状態を表す区分

         *

         *

         * unauthenticated: 未認証 - ログインしていない状態

         *

         * authenticated: 認証済み - 正常にログインしている状態

         *

         * pending_two_factor: 2要素認証待ち - 2要素認証の入力を待っている状態

         *

         * locked: ロック中 - アカウントがロックされている状態

         * @enum {string}

         */

    'Models.AuthenticationStateType':
      | 'unauthenticated'
      | 'authenticated'
      | 'pending_two_factor'
      | 'locked'
    /** @description 空き枠情報モデル - スタッフごとの提供可能時間帯を表し、予約可能枠の算出に使用する */
    'Models.AvailableSlot': {
      /** @description 対象スタッフのID */
      staffId: components['schemas']['Models.StaffId']
      /**
       * Format: date-time
       * @description 空き枠の開始日時 (UTC)
       */
      startTime: string
      /**
       * Format: date-time
       * @description 空き枠の終了日時 (UTC)
       */
      endTime: string
    }
    /** @description 予約可能な時間帯の詳細情報モデル */
    'Models.AvailableTimeSlot': {
      /**
       * Format: date-time
       * @description 開始日時
       */
      startTime: string
      /**
       * Format: date-time
       * @description 終了日時
       */
      endTime: string
      /** @description 対応可能なスタッフの一覧 */
      availableStaff: components['schemas']['Models.StaffSummary'][]
      /**
       * Format: int32
       * @description 対応可能枠の充足率（%）
       */
      availability: number
    }
    /** @description 複数リソースをまとめて取得するリクエストモデル。
     *     顧客IDや予約IDを複数指定して最小回数のAPI呼び出しで情報を取得する用途に利用。  */
    'Models.BatchGetRequest': {
      /** @description 取得対象となるリソースIDの配列。1件以上100件以下。 */
      ids: string[]
      /** @description レスポンスに含めたいフィールドのカンマ区切りリスト。パフォーマンス最適化に活用する。全フィールド取得の場合はnull */
      fields: string | null
    }
    /** @description サロンで確定管理する予約の集約モデル。 */
    'Models.Booking': {
      /** @description 予約を一意に識別するID。 */
      id: components['schemas']['Models.BookingId']
      /** @description 予約が紐づくサロンID。 */
      salonId: components['schemas']['Models.SalonId']
      /** @description 予約を行った顧客ID。 */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 関連する予約リクエストID一覧。 */
      reservationIds: components['schemas']['Models.ReservationId'][]
      /** @description 進行状況ごとの詳細情報。 */
      status: components['schemas']['Models.BookingStatus']
      /** @description 現在のステータスコード。 */
      statusCode: components['schemas']['Models.BookingStatusCodeType']
      /** @description ウェイティングリスト情報。ウェイティングリストに登録されていない場合はnull。 */
      waitlistEntry: components['schemas']['Models.WaitlistEntry'] | null
      /** @description 預かり金に関する情報。デポジットが不要な場合はnull。 */
      deposit: components['schemas']['Models.BookingDeposit'] | null
      /** @description 割引適用前の合計金額。 */
      totalAmount: components['schemas']['Models.Money']
      /** @description 適用された割引額 */
      discountAmount: components['schemas']['Models.Money']
      /** @description 最終的に請求する金額。 */
      finalAmount: components['schemas']['Models.Money']
      /** @description 未収金額。支払いが完了している場合はnull。 */
      balanceDue: components['schemas']['Models.Money'] | null
      /** @description 予定している支払い方法。当日決定または未選択の場合はnull */
      paymentMethod: components['schemas']['Models.PaymentMethodType'] | null
      /** @description 支払いの進捗ステータス。支払いが未開始の場合はnull。 */
      paymentStatus:
        | components['schemas']['Models.PaymentStatusCodeType']
        | null
      /** @description スタッフ・顧客間で共有するメモ。メモがない場合はnull。 */
      notes: string | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 予約確定前に預かるデポジット情報。 */
    'Models.BookingDeposit': {
      /** @description 預かり金額。 */
      amount: components['schemas']['Models.Money']
      /**
       * @description デポジットの状態区分（pending: 入金待ち／paid: 入金済み／refunded: 返金済み／forfeited: 没収）。
       * @enum {string}
       */
      status: 'pending' | 'paid' | 'refunded' | 'forfeited'
      /**
       * Format: date-time
       * @description 支払い期日。即時支払いまたは期日が未設定の場合はnull。
       */
      dueDate: string | null
      /**
       * Format: date-time
       * @description 入金が確認された日時。未入金の場合はnull。
       */
      paidAt: string | null
      /**
       * Format: date-time
       * @description 返金した日時。返金していない場合はnull。
       */
      refundedAt: string | null
      /** @description 紐づく決済ID。決済がない場合はnull。 */
      paymentId: (string & components['schemas']['Models.PaymentId']) | null
      /** @description デポジットに関する備考。備考がない場合はnull。 */
      notes: string | null
    }
    /** @description 予約確定前に預かるデポジット情報。 */
    'Models.BookingDepositUpdate': {
      /** @description 預かり金額。 */
      amount?: components['schemas']['Models.MoneyUpdate']
      /**
       * @description デポジットの状態区分（pending: 入金待ち／paid: 入金済み／refunded: 返金済み／forfeited: 没収）。
       * @enum {string}
       */
      status?: 'pending' | 'paid' | 'refunded' | 'forfeited'
      /**
       * Format: date-time
       * @description 支払い期日。即時支払いまたは期日が未設定の場合はnull。
       */
      dueDate?: string | null
      /**
       * Format: date-time
       * @description 入金が確認された日時。未入金の場合はnull。
       */
      paidAt?: string | null
      /**
       * Format: date-time
       * @description 返金した日時。返金していない場合はnull。
       */
      refundedAt?: string | null
      /** @description 紐づく決済ID。決済がない場合はnull。 */
      paymentId?: (string & components['schemas']['Models.PaymentId']) | null
      /** @description デポジットに関する備考。備考がない場合はnull。 */
      notes?: string | null
    }
    /** @description 予約と関連情報をまとめた詳細ビュー。 */
    'Models.BookingDetail': {
      /** @description 紐づく予約リクエストの詳細一覧。 */
      reservations: components['schemas']['Models.ReservationDetail'][]
      /** @description 顧客の表示名。 */
      customerName: string
      /** @description サロンの表示名。 */
      salonName: string
      /** @description 決済履歴の一覧。決済履歴がない場合はnull。 */
      paymentHistory: components['schemas']['Models.PaymentHistory'][] | null
      /** @description ウェイティングリストの履歴。ウェイティングリストに登録したことがない場合はnull。 */
      waitlistHistory: components['schemas']['Models.WaitlistEntry'][] | null
    } & components['schemas']['Models.Booking']
    /**
     * Format: uuid
     * @description 確定済みの予約（スケジュール確保）を識別するブランド付きUUID。
     */
    'Models.BookingId': string
    /** @description 顧客単位の予約回数制限 */
    'Models.BookingLimit': {
      /**
       * @description 制限期間の単位
       * @enum {string}
       */
      period: 'day' | 'week' | 'month'
      /**
       * Format: int32
       * @description 期間内の最大予約可能数
       */
      count: number
    }
    /** @description サービス予約時に必要な要件詳細 */
    'Models.BookingRequirementDetail': {
      /** @description 要件の種類 */
      type: components['schemas']['Models.BookingRequirementType']
      /**
       * Format: int32
       * @description 金額要件（例: デポジット額）。金額指定が不要な要件の場合はnull
       */
      amount: number | null
      /**
       * Format: int32
       * @description 割合で設定する要件（%）。固定額または割合設定が不要な要件の場合はnull
       */
      percentage: number | null
      /** @description 必須かどうか。デフォルトで任意の要件の場合はnull（falseと同義） */
      required: boolean | null
      /**
       * Format: int32
       * @description 所要時間や準備時間（分）。時間指定が不要な要件の場合はnull
       */
      duration: number | null
      /**
       * Format: int32
       * @description 何日前までに対応が必要か。事前対応が不要な要件の場合はnull
       */
      daysInAdvance: number | null
      /**
       * Format: int32
       * @description 利用可能な最低年齢。年齢制限がない要件の場合はnull
       */
      minAge: number | null
      /**
       * Format: int32
       * @description 利用可能な最高年齢。年齢上限がない要件の場合はnull
       */
      maxAge: number | null
      /** @description 利用可能な性別の制限。性別制限がない要件の場合はnull */
      allowedGenders: string[] | null
      /** @description 必要な会員ランク。会員限定でない、またはランク指定がない要件の場合はnull */
      requiredTier: string | null
      /** @description 顧客への具体的な指示。特別な準備や指示が不要な要件の場合はnull */
      instructions: string[] | null
    }
    /**

         * @description

         * 予約要件タイプ区分 - サービス予約時に必要な条件や制約

         *

         *

         * deposit: デポジット - 予約時に支払う予約金

         *

         * consultation: 事前カウンセリング - 施術前の相談・カウンセリング

         *

         * patch_test: パッチテスト - アレルギー確認のための事前テスト

         *

         * age_restriction: 年齢制限 - 年齢による利用制限

         *

         * gender_restriction: 性別制限 - 性別による利用制限

         *

         * membership: 会員限定 - 特定の会員ランク以上の制限

         *

         * preparation: 事前準備 - 顧客が事前に行うべき準備

         * @enum {string}

         */

    'Models.BookingRequirementType':
      | 'deposit'
      | 'consultation'
      | 'patch_test'
      | 'age_restriction'
      | 'gender_restriction'
      | 'membership'
      | 'preparation'
    /** @description 予約の進行状況ごとに保持する詳細情報ユニオン。 */
    'Models.BookingStatus':
      | components['schemas']['Models.DraftBookingStatus']
      | components['schemas']['Models.PendingBookingStatus']
      | components['schemas']['Models.ConfirmedBookingStatus']
      | components['schemas']['Models.InProgressBookingStatus']
      | components['schemas']['Models.CompletedBookingStatus']
      | components['schemas']['Models.CancelledBookingStatus']
      | components['schemas']['Models.NoShowBookingStatus']
    /**

         * @description

         * 予約ステータスコード区分 - 予約の詳細な進行状態を表す区分

         *

         *

         * draft: 下書き - 予約内容を作成中、まだ確定していない状態

         *

         * pending: 保留中 - 予約リクエストを受付、確認待ちの状態

         *

         * confirmed: 確定 - 予約が確定し、スタッフが割り当てられた状態

         *

         * in_progress: 施術中 - 現在サービスを実施中の状態

         *

         * completed: 完了 - サービス提供が終了した状態

         *

         * cancelled: キャンセル - 予約がキャンセルされた状態

         *

         * no_show: 無断キャンセル - 顧客が連絡なしに来店しなかった状態

         * @enum {string}

         */

    'Models.BookingStatusCodeType':
      | 'draft'
      | 'pending'
      | 'confirmed'
      | 'in_progress'
      | 'completed'
      | 'cancelled'
      | 'no_show'
    /** @description 予約の進行状況ごとに保持する詳細情報ユニオン。 */
    'Models.BookingStatusUpdate':
      | components['schemas']['Models.DraftBookingStatusUpdate']
      | components['schemas']['Models.PendingBookingStatusUpdate']
      | components['schemas']['Models.ConfirmedBookingStatusUpdate']
      | components['schemas']['Models.InProgressBookingStatusUpdate']
      | components['schemas']['Models.CompletedBookingStatusUpdate']
      | components['schemas']['Models.CancelledBookingStatusUpdate']
      | components['schemas']['Models.NoShowBookingStatusUpdate']
    /** @description 予約情報を部分更新するためのリクエスト。null指定で値をリセット可能。 */
    'Models.BookingUpdateRequest': {
      /** @description ステータス詳細の更新。 */
      status?: components['schemas']['Models.BookingStatusUpdate']
      /** @description ステータスコードの更新。 */
      statusCode?: components['schemas']['Models.BookingStatusCodeType']
      /** @description ウェイティングリスト情報の更新またはリセット。 */
      waitlistEntry?: components['schemas']['Models.WaitlistEntryUpdate'] | null
      /** @description デポジット情報の更新またはリセット。 */
      deposit?: components['schemas']['Models.BookingDepositUpdate'] | null
      /** @description 支払い方法の更新またはリセット。 */
      paymentMethod?: components['schemas']['Models.PaymentMethodType'] | null
      /** @description 支払いステータスの更新またはリセット。 */
      paymentStatus?:
        | components['schemas']['Models.PaymentStatusCodeType']
        | null
      /** @description 割引額の更新 */
      discountAmount?: components['schemas']['Models.MoneyUpdate']
      /** @description 最終請求額の更新。 */
      finalAmount?: components['schemas']['Models.MoneyUpdate']
      /** @description 未収金額の更新またはリセット。 */
      balanceDue?: components['schemas']['Models.MoneyUpdate'] | null
      /** @description 備考の更新またはリセット。 */
      notes?: string | null
      /** @description 任意メタデータの更新。 */
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description 一括処理全体の集計情報モデル。
     *     成功件数・失敗件数を俯瞰し、運用レポートに反映する。 */
    'Models.BulkSummary': {
      /**
       * Format: int32
       * @description リクエストに含まれていたアイテム総数。
       */
      total: number
      /**
       * Format: int32
       * @description 成功したアイテム件数。
       */
      succeeded: number
      /**
       * Format: int32
       * @description 失敗したアイテム件数。
       */
      failed: number
      /**
       * Format: int32
       * @description 処理に要した時間 (ミリ秒)。バッチ最適化の指標。
       */
      duration: number
    }
    /** @description 曜日単位で管理する営業スケジュール設定。 */
    'Models.BusinessHours': {
      /** @description 設定の対象となる曜日。 */
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      /** @description 営業時間帯の一覧。複数設定で分割営業に対応。 */
      operatingSlots: components['schemas']['Models.TimeSlot'][]
      /** @description 休憩時間や中断時間帯の一覧。休憩がない場合はnull */
      breakSlots: components['schemas']['Models.TimeSlot'][] | null
      /**
       * @description 当該曜日を休業扱いとする場合のフラグ。既定値はfalse。
       * @default false
       */
      isClosed: boolean
      /** @description 季節営業などの適用期間。通年有効の場合はnull */
      effectivePeriod: components['schemas']['Models.DateRange'] | null
      /** @description 営業基準となるタイムゾーンID。サロン既定値を使用する場合はnull */
      timezone: string | null
    }
    /** @description キャンセル料金のルール */
    'Models.CancellationFee': {
      /**
       * Format: int32
       * @description キャンセル料金を適用する期限（時間）
       */
      hours: number
      /**
       * Format: int32
       * @description キャンセル料金率（%）
       */
      percentage: number
      /**
       * Format: int32
       * @description 固定額で設定するキャンセル料金。パーセンテージベースの料金設定の場合はnull
       */
      fixedAmount: number | null
    }
    /** @description 予約がキャンセルされた場合の状態情報。 */
    'Models.CancelledBookingStatus': {
      /**
       * @description 固定値cancelled。キャンセル状態であることを示す。
       * @enum {string}
       */
      type: 'cancelled'
      /**
       * Format: date-time
       * @description キャンセルが登録された日時。
       */
      cancelledAt: string
      /** @description キャンセル理由のメモ。理由が記録されていない場合はnull。 */
      reason: string | null
      /**
       * @description キャンセルを実行した主体（customer: 顧客／salon: サロン側／system: システム判断）。
       * @enum {string}
       */
      cancelledBy: 'customer' | 'salon' | 'system'
    }
    /** @description 予約がキャンセルされた場合の状態情報。 */
    'Models.CancelledBookingStatusUpdate': {
      /**
       * @description 固定値cancelled。キャンセル状態であることを示す。
       * @enum {string}
       */
      type?: 'cancelled'
      /**
       * Format: date-time
       * @description キャンセルが登録された日時。
       */
      cancelledAt?: string
      /** @description キャンセル理由のメモ。理由が記録されていない場合はnull。 */
      reason?: string | null
      /**
       * @description キャンセルを実行した主体（customer: 顧客／salon: サロン側／system: システム判断）。
       * @enum {string}
       */
      cancelledBy?: 'customer' | 'salon' | 'system'
    }
    /**
     * Format: uuid
     * @description サービスカテゴリやメニュー分類を識別するブランド付きUUID。
     */
    'Models.CategoryId': string
    /** @description サービスカテゴリの管理モデル */
    'Models.CategoryModel': {
      /** @description カテゴリ ID */
      id: components['schemas']['Models.CategoryId']
      /** @description カテゴリ名 */
      name: string
      /** @description カテゴリ説明 */
      description: string
      /** @description 親カテゴリ ID。最上位カテゴリの場合はnull */
      parentId: (string & components['schemas']['Models.CategoryId']) | null
      /**
       * Format: int32
       * @description 表示順序
       */
      displayOrder: number
      /** @description 有効フラグ */
      isActive: boolean
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /**

         * @description

         * カラーサブカテゴリー区分 - ヘアカラーリングサービスの詳細分類

         *

         *

         * full_color: フルカラー - 髪全体を染めるサービス

         *

         * root_touch: リタッチ - 根元の伸びた部分のみを染めるサービス

         *

         * highlights: ハイライト - 部分的に明るい色を入れるサービス

         *

         * lowlights: ローライト - 部分的に暗い色を入れるサービス

         *

         * balayage: バレイヤージュ - グラデーション染め技法

         *

         * ombre: オンブレ - 根元から毛先にかけてグラデーション染め

         *

         * bleach: ブリーチ - 髪の色を抜く脱色サービス

         *

         * color_correction: カラーコレクション - 色ムラや失敗したカラーの修正

         * @enum {string}

         */

    'Models.ColorSubCategoryType':
      | 'full_color'
      | 'root_touch'
      | 'highlights'
      | 'lowlights'
      | 'balayage'
      | 'ombre'
      | 'bleach'
      | 'color_correction'
    /** @description 施術が完了した場合の状態情報。 */
    'Models.CompletedBookingStatus': {
      /**
       * @description 固定値completed。完了状態であることを示す。
       * @enum {string}
       */
      type: 'completed'
      /**
       * Format: date-time
       * @description 施術が完了した日時。
       */
      completedAt: string
      /** @description 関連する決済ID。支払いが未完了または不要の場合はnull。 */
      paymentId: (string & components['schemas']['Models.PaymentId']) | null
      /** @description 施術内容のサマリーメモ。メモを記録していない場合はnull。 */
      serviceSummary: string | null
    }
    /** @description 施術が完了した場合の状態情報。 */
    'Models.CompletedBookingStatusUpdate': {
      /**
       * @description 固定値completed。完了状態であることを示す。
       * @enum {string}
       */
      type?: 'completed'
      /**
       * Format: date-time
       * @description 施術が完了した日時。
       */
      completedAt?: string
      /** @description 関連する決済ID。支払いが未完了または不要の場合はnull。 */
      paymentId?: (string & components['schemas']['Models.PaymentId']) | null
      /** @description 施術内容のサマリーメモ。メモを記録していない場合はnull。 */
      serviceSummary?: string | null
    }
    /** @description 支払い完了状態の詳細 */
    'Models.CompletedPaymentStatus': {
      /**
       * @description 状態種別（completed 固定値）
       * @enum {string}
       */
      type: 'completed'
      /**
       * Format: date-time
       * @description 支払い完了日時
       */
      completedAt: string
      /** @description 実際に決済された金額 */
      paidAmount: components['schemas']['Models.Money']
      /** @description 発行されたレシート番号 */
      receiptNumber: string | null
    }
    /** @description 支払い完了状態の詳細 */
    'Models.CompletedPaymentStatusUpdate': {
      /**
       * @description 状態種別（completed 固定値）
       * @enum {string}
       */
      type?: 'completed'
      /**
       * Format: date-time
       * @description 支払い完了日時
       */
      completedAt?: string
      /** @description 実際に決済された金額 */
      paidAmount?: components['schemas']['Models.MoneyUpdate']
      /** @description 発行されたレシート番号 */
      receiptNumber?: string | null
    }
    /** @description 予約が確定済みの場合の状態情報。 */
    'Models.ConfirmedBookingStatus': {
      /**
       * @description 固定値confirmed。確定状態であることを示す。
       * @enum {string}
       */
      type: 'confirmed'
      /**
       * Format: date-time
       * @description 予約を確定した日時。
       */
      confirmedAt: string
      /** @description 担当するスタッフID。 */
      staffId: components['schemas']['Models.StaffId']
      /**
       * Format: date-time
       * @description 施術開始予定日時。
       */
      expectedStart: string
    }
    /** @description 予約が確定済みの場合の状態情報。 */
    'Models.ConfirmedBookingStatusUpdate': {
      /**
       * @description 固定値confirmed。確定状態であることを示す。
       * @enum {string}
       */
      type?: 'confirmed'
      /**
       * Format: date-time
       * @description 予約を確定した日時。
       */
      confirmedAt?: string
      /** @description 担当するスタッフID。 */
      staffId?: components['schemas']['Models.StaffId']
      /**
       * Format: date-time
       * @description 施術開始予定日時。
       */
      expectedStart?: string
    }
    /** @description 顧客やサロンの連絡先情報を表す共通モデル。 */
    'Models.ContactInfo': {
      /** @description 主要連絡先として利用するメールアドレス。 */
      email: string
      /** @description 主要連絡先として利用する電話番号。 */
      phoneNumber: string
      /** @description 緊急連絡用などの予備電話番号。未登録の場合はnull */
      alternativePhone: string | null
      /** @description 公式サイトや予約ページのURL。ウェブサイトがない場合はnull */
      websiteUrl: string | null
    }
    /** @description 顧客やサロンの連絡先情報を表す共通モデル。 */
    'Models.ContactInfoUpdate': {
      /** @description 主要連絡先として利用するメールアドレス。 */
      email?: string
      /** @description 主要連絡先として利用する電話番号。 */
      phoneNumber?: string
      /** @description 緊急連絡用などの予備電話番号。未登録の場合はnull */
      alternativePhone?: string | null
      /** @description 公式サイトや予約ページのURL。ウェブサイトがない場合はnull */
      websiteUrl?: string | null
    }
    /**

         * @description

         * 連絡方法区分 - 顧客との連絡・コミュニケーション手段の優先設定

         *

         *

         * email: Eメール - 電子メールによる連絡方法

         *

         * sms: SMS - ショートメッセージサービスによる連絡方法

         *

         * phone: 電話 - 音声通話による連絡方法

         *

         * push: プッシュ通知 - アプリ内プッシュ通知による連絡方法

         * @enum {string}

         */

    'Models.ContactMethodType': 'email' | 'sms' | 'phone' | 'push'
    /** @description 予約を新規作成する際のリクエスト。 */
    'Models.CreateBookingRequest': {
      /** @description 予約対象のサロンID。 */
      salonId: components['schemas']['Models.SalonId']
      /** @description 予約を申し込む顧客ID。 */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 紐付ける予約リクエストID一覧。 */
      reservationIds: components['schemas']['Models.ReservationId'][]
      /** @description ウェイティングリスト情報。ウェイティングリストに登録していない場合はnull。 */
      waitlistEntry: components['schemas']['Models.WaitlistEntry'] | null
      /** @description 預かり金設定。デポジットが不要な場合はnull。 */
      deposit: components['schemas']['Models.BookingDeposit'] | null
      /** @description 適用する割引額 */
      discountAmount: components['schemas']['Models.Money']
      /** @description 予定している支払い方法。当日決定または未選択の場合はnull */
      paymentMethod: components['schemas']['Models.PaymentMethodType'] | null
      /** @description スタッフ向けの備考。備考がない場合はnull。 */
      notes: string | null
      /** @description 外部連携や業務用に保持する任意メタデータ。追加情報が不要の場合はnull。 */
      metadata: {
        [key: string]: unknown
      } | null
    }
    /** @description 予約作成リクエスト - 新規予約登録時に必要なサロン・顧客・メニュー・希望日時の情報を受け取る */
    'Models.CreateReservationRequest': {
      /** @description 予約対象のサロンID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 予約を申し込む顧客ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 担当予定のスタッフID */
      staffId: components['schemas']['Models.StaffId']
      /** @description 希望する施術メニューID */
      serviceId: components['schemas']['Models.ServiceId']
      /**
       * Format: date-time
       * @description 希望する施術開始日時 (UTC)
       */
      startTime: string
      /** @description 顧客要望や注意事項のメモ - 特記事項がない標準予約の場合はnull */
      notes: string | null
    }
    /** @description サロン新規登録リクエスト - 全項目のキーが必須で、値は業務要件に応じてnull許可 */
    'Models.CreateSalonRequest': {
      /** @description 新規登録時に必須となるサロン名 */
      name: string
      /** @description サロン紹介文。未設定の場合はnull */
      description: string | null
      /** @description 店舗の正規住所・連絡先配送先 */
      address: components['schemas']['Models.Address']
      /** @description 顧客問い合わせ用の電話やメール情報 */
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description 通常営業日の営業時間設定一覧 */
      openingHours: components['schemas']['Models.OpeningHours'][]
      /** @description 特別営業スケジュールやシフト連動の営業時間。通常営業時間のみの場合はnull */
      businessHours: components['schemas']['Models.BusinessHours'][] | null
      /** @description 店舗写真やメニュー画像のURL一覧 */
      imageUrls: string[]
      /** @description バリアフリー対応や個室有無などの特徴タグ一覧 */
      features: string[]
    }
    /** @description サービスを新規登録するリクエスト */
    'Models.CreateServiceRequest': {
      /** @description サービスを登録するサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description サービス名 */
      name: string
      /** @description サービスの説明文 */
      description: string
      /**
       * Format: int32
       * @description 施術時間（分）
       */
      duration: number
      /**
       * Format: int32
       * @description 料金（税抜）
       */
      price: number
      /** @description サービスカテゴリ区分 */
      category: components['schemas']['Models.ServiceCategoryType']
      /** @description カテゴリ ID。サービスカテゴリ区分のみで分類する場合はnull */
      categoryId: (string & components['schemas']['Models.CategoryId']) | null
      /** @description サービス画像 URL。画像がない場合はnull */
      imageUrl: string | null
      /**
       * Format: int32
       * @description 必要スタッフレベル。全スタッフが対応可能な場合はnull
       */
      requiredStaffLevel: number | null
      /**
       * Format: int32
       * @description 必要なデポジット額。デポジットが不要な場合はnull
       */
      depositAmount: number | null
      /** @description 有効フラグ。未指定時はデフォルトでtrueとして扱う場合null */
      isActive: boolean | null
      /**
       * Format: int32
       * @description 最大全日予約可能日数。予約可能期間に制限がない場合はnull
       */
      maxAdvanceBookingDays: number | null
      /**
       * Format: int32
       * @description 最短予約受付時間（時間）。即時予約可能な場合はnull
       */
      minAdvanceBookingHours: number | null
    }
    /** @description スタッフ作成リクエスト - 新規スタッフ登録時に必要なプロフィール・連絡先・スケジュール情報を受け取る */
    'Models.CreateStaffRequest': {
      /** @description 所属サロンのID */
      salonId: components['schemas']['Models.SalonId']
      /** @description スタッフの氏名 */
      name: string
      /** @description 連絡先情報 */
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description 得意分野や専門メニューの一覧 */
      specialties: string[]
      /** @description プロフィール画像のURL - プロフィール画像未設定の場合はnull */
      imageUrl: string | null
      /** @description 自己紹介や経歴の概要 - プロフィール未記入の新人スタッフの場合はnull */
      bio: string | null
      /**
       * Format: int32
       * @description 実務経験年数 - 経験年数未記載またはアシスタントスタッフの場合はnull
       */
      yearsOfExperience: number | null
      /** @description 保有資格名の一覧 - 資格なしの新人やアシスタントの場合はnull */
      certifications: string[] | null
      /** @description 詳細な資格情報の一覧 - 詳細資格情報未登録の場合はnull */
      qualifications:
        | components['schemas']['Models.StaffQualification'][]
        | null
      /** @description 通常勤務スケジュールの一覧 - スケジュール未設定やフリーランススタッフの場合はnull */
      schedules: components['schemas']['Models.StaffSchedule'][] | null
      /** @description 付与する権限の一覧 - 特別権限がない一般スタッフの場合はnull */
      permissions: components['schemas']['Models.StaffPermission'][] | null
    }
    /**

         * @description

         * 通貨コード区分 - ISO 4217準拠の通貨コード定義

         *

         *

         * JPY: 日本円 - Japanese Yen

         *

         * USD: 米ドル - United States Dollar

         *

         * EUR: ユーロ - Euro

         *

         * GBP: 英ポンド - British Pound Sterling

         *

         * AUD: 豪ドル - Australian Dollar

         *

         * CAD: カナダドル - Canadian Dollar

         *

         * CNY: 中国人民元 - Chinese Yuan

         *

         * KRW: 韓国ウォン - South Korean Won

         *

         * SGD: シンガポールドル - Singapore Dollar

         *

         * TWD: 台湾ドル - Taiwan Dollar

         * @enum {string}

         */

    'Models.CurrencyCodeType':
      | 'JPY'
      | 'USD'
      | 'EUR'
      | 'GBP'
      | 'AUD'
      | 'CAD'
      | 'CNY'
      | 'KRW'
      | 'SGD'
      | 'TWD'
    'Models.Customer': {
      /** @description 顧客を一意に識別するID。システム内で重複しない識別子 */
      id: components['schemas']['Models.CustomerId']
      /** @description 顧客氏名。フルネームまたは通称名 */
      name: string
      /** @description 連絡先情報。メール、電話番号等の連絡手段 */
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description 顧客の性別。未登録または非公開の場合はnull */
      gender: components['schemas']['Models.CustomerGenderType'] | null
      /**
       * Format: date
       * @description 生年月日。未登録または非公開の場合はnull
       */
      birthDate: string | null
      /** @description 住所情報。未登録の場合はnull */
      address: components['schemas']['Models.Address'] | null
      /** @description 顧客の好みや要望 */
      preferences: {
        [key: string]: unknown
      }
      /** @description 内部メモ。メモがない場合はnull */
      notes: string | null
      /** @description 分類用タグ */
      tags: string[]
      /**
       * Format: int32
       * @description 現在のロイヤルティポイント
       */
      loyaltyPoints: number
      /** @description 会員情報。非会員の場合はnull */
      membership: components['schemas']['Models.MembershipInfo'] | null
      /** @description 通知設定。設定がない場合はnull */
      notificationSettings:
        | components['schemas']['Models.NotificationSettings']
        | null
      /** @description 健康情報。情報提供がない場合はnull */
      health: components['schemas']['Models.CustomerHealth'] | null
      /** @description 顧客の好み設定。設定がない場合はnull */
      customerPreferences:
        | components['schemas']['Models.CustomerPreferences']
        | null
      /** @description 来店履歴。履歴がない場合はnull */
      history: components['schemas']['Models.CustomerHistory'] | null
      /** @description 顧客関連情報。関連がない場合はnull */
      associations: components['schemas']['Models.CustomerAssociations'] | null
      /** @description 顧客ステータス詳細。特別なステータスがない場合はnull */
      status: components['schemas']['Models.CustomerStatusDetail'] | null
      /** @description 顧客メタデータ。追加情報がない場合はnull */
      metadata: components['schemas']['Models.CustomerMetadata'] | null
      /** @description カルテID。カルテがない場合はnull */
      medicalChartId:
        | (string & components['schemas']['Models.MedicalChartId'])
        | null
      /**
       * @description アクティブな顧客かどうか
       * @default true
       */
      isActive: boolean
      /**
       * @description 登録経路。不明の場合はnull
       * @enum {string|null}
       */
      registrationSource: 'walk_in' | 'online' | 'phone' | 'referral' | null
      /** @description 紹介元顧客ID。紹介ではない場合はnull */
      referredBy: (string & components['schemas']['Models.CustomerId']) | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    'Models.CustomerAssociations': {
      /** @description 主要利用サロンID。特定のサロンがない場合はnull */
      primarySalonId: (string & components['schemas']['Models.SalonId']) | null
      /** @description 訪問済サロンID一覧。これまでに利用した全サロン */
      visitedSalonIds: components['schemas']['Models.SalonId'][]
      /** @description 家族会員の顧客ID一覧。家族登録がない場合はnull */
      familyMemberIds: components['schemas']['Models.CustomerId'][] | null
      /** @description 紹介元顧客ID。紹介ではない場合はnull */
      referredBy: (string & components['schemas']['Models.CustomerId']) | null
      /** @description 紹介した顧客ID一覧。紹介実績がない場合はnull */
      referredCustomerIds: components['schemas']['Models.CustomerId'][] | null
      /** @description グループID。グループに属さない場合はnull */
      groupId: string | null
    }
    /** @description 顧客予約フィルタパラメータ */
    'Models.CustomerBookingsGetRequest': {
      status?: components['schemas']['Models.BookingStatusCodeType']
    }
    /** @description 顧客作成リクエスト。必須フィールドとオプションフィールドを含む */
    'Models.CustomerCreateRequest': {
      /** @description 顧客氏名。フルネームまたは通称名 */
      name: string
      /** @description 連絡先情報。メール、電話番号等の連絡手段 */
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description 顧客の好みや要望。カスタム設定情報 */
      preferences: {
        [key: string]: unknown
      }
      /** @description 内部メモ。スタッフ用の顧客に関する備考。メモがない場合はnull */
      notes: string | null
      /** @description 分類用タグ。顧客をグループ化するためのラベル */
      tags: string[]
      /**
       * Format: date
       * @description 生年月日。年齢計算や誕生日特典に使用。未登録の場合はnull
       */
      birthDate: string | null
    }
    /**

         * @description

         * 性別区分 - 顧客の性別を表す区分（多様性に配慮した選択肢を含む）

         *

         *

         * male: 男性

         *

         * female: 女性

         *

         * other: その他 - 男性・女性以外の性自認を持つ方

         *

         * prefer_not_to_say: 回答しない - 性別の回答を希望しない方

         * @enum {string}

         */

    'Models.CustomerGenderType':
      | 'male'
      | 'female'
      | 'other'
      | 'prefer_not_to_say'
    'Models.CustomerHealth': {
      /** @description アレルギー情報リスト。全てのアレルギー詳細 */
      allergies: components['schemas']['Models.AllergyInfo'][]
      /** @description 髪質情報。情報提供がない場合はnull */
      hairInfo: components['schemas']['Models.HairInfo'] | null
      /** @description 頭皮情報。情報提供がない場合はnull */
      scalpInfo: components['schemas']['Models.ScalpInfo'] | null
      /** @description 既往症一覧。既往症がない場合はnull */
      medicalConditions: string[] | null
      /** @description 服用中の薬一覧。服用薬がない場合はnull */
      medications: string[] | null
      /** @description 妊娠状態。未確認または非該当の場合はnull */
      pregnancyStatus: boolean | null
      /** @description 特別な配慮事項。特にない場合はnull */
      specialNeeds: string | null
    }
    'Models.CustomerHistory': {
      /** @description 来店履歴詳細。全ての来店関連情報 */
      visits: components['schemas']['Models.VisitHistory']
      /** @description 最後に利用したサービスID。利用実績がない場合はnull */
      lastServiceId: (string & components['schemas']['Models.ServiceId']) | null
      /** @description 最後に担当したスタッフID。利用実績がない場合はnull */
      lastStaffId: (string & components['schemas']['Models.StaffId']) | null
      /** @description お気に入りサービスID一覧。頻繁に利用するサービス */
      favoriteServiceIds: components['schemas']['Models.ServiceId'][]
      /** @description お気に入りスタッフID一覧。指名の多いスタッフ */
      favoriteStaffIds: components['schemas']['Models.StaffId'][]
      /** @description 過去の施術履歴。履歴がない場合はnull */
      pastTreatments: string[] | null
      /** @description 履歴に関するメモ。メモがない場合はnull */
      notes: string[] | null
    }
    /**
     * Format: uuid
     * @description 顧客（来店者）を識別するためのブランド付きUUID。
     */
    'Models.CustomerId': string
    'Models.CustomerMetadata': {
      /**
       * @description 顧客獲得チャネル。不明の場合はnull
       * @enum {string|null}
       */
      source:
        | 'walk_in'
        | 'online'
        | 'phone'
        | 'referral'
        | 'social_media'
        | 'advertisement'
        | null
      /** @description キャンペーン名。キャンペーン経由でない場合はnull */
      campaign: string | null
      /** @description 分類タグ一覧。タグがない場合はnull */
      tags: string[] | null
      /** @description カスタムフィールド。追加情報がない場合はnull */
      customFields: {
        [key: string]: unknown
      } | null
      /** @description 内部メモ一覧。メモがない場合はnull */
      internalNotes: string[] | null
      /**
       * Format: int32
       * @description リスクスコア。評価未実施の場合はnull
       */
      riskScore: number | null
      /**
       * Format: int32
       * @description 生涯価値。計算未実施の場合はnull
       */
      lifetimeValue: number | null
      /** @description 最終更新者。システム自動更新の場合はnull */
      lastUpdatedBy: string | null
    }
    'Models.CustomerPreferences': {
      /** @description スタイルの好み設定。設定がない場合はnull */
      stylePreferences: components['schemas']['Models.StylePreference'] | null
      /** @description サービスの好み設定。設定がない場合はnull */
      servicePreferences:
        | components['schemas']['Models.ServicePreference']
        | null
      /** @description 連絡方法の好み設定。設定がない場合はnull */
      communicationPreferences:
        | components['schemas']['Models.NotificationSettings']
        | null
      /** @description 希望スタッフ一覧。指名がない場合はnull */
      preferredStaff: components['schemas']['Models.StaffId'][] | null
      /** @description 避けたいスタッフ一覧。特にない場合はnull */
      avoidStaff: components['schemas']['Models.StaffId'][] | null
      /** @description 希望曜日一覧。特に希望がない場合はnull */
      preferredDayOfWeek: components['schemas']['Models.DayOfWeekType'][] | null
      /** @description 希望時間帯一覧。特に希望がない場合はnull */
      preferredTimeSlots: components['schemas']['Models.TimeSlot'][] | null
      /** @description 特別なリクエスト。特にない場合はnull */
      specialRequests: string | null
      /** @description 希望言語。日本語で問題ない場合はnull */
      language: string | null
    }
    /** @description 顧客の好み設定更新リクエスト。通知設定や連絡方法の変更 */
    'Models.CustomerPreferencesUpdateRequest': {
      /** @description 希望連絡方法 */
      contactMethod: components['schemas']['Models.ContactMethodType']
      /** @description 通知設定 */
      notifications: components['schemas']['Models.NotificationPreferences']
      /** @description マーケティング配信許可状態 */
      marketingOptIn: boolean
      /** @description 希望言語 */
      preferredLanguage?: string
      /** @description アクセシビリティ要件 */
      accessibilityRequirements?: string[]
      /** @description アレルギーや過敏症 */
      allergies?: string[]
      /** @description 希望予約時間 */
      preferredTimes?: components['schemas']['Models.TimePreference'][]
    }
    'Models.CustomerProfile': {
      /**
       * Format: int32
       * @description 総来店回数。これまでの来店実績の合計
       */
      visitCount: number
      /**
       * Format: date-time
       * @description 最終来店日。新規顧客でまだ来店がない場合はnull
       */
      lastVisitDate: string | null
      /** @description お気に入りスタッフID一覧。指名がない場合はnull */
      favoriteStaffIds: components['schemas']['Models.StaffId'][] | null
      /** @description お気に入りサービスID一覧。お気に入りがない場合はnull */
      favoriteServiceIds: components['schemas']['Models.ServiceId'][] | null
      /**
       * Format: int32
       * @description 累計利用金額。これまでの総支払額
       */
      totalSpent: number
    } & components['schemas']['Models.Customer']
    /** @description 顧客予約フィルタパラメータ */
    'Models.CustomerReservationsGetRequest': {
      status?: components['schemas']['Models.ReservationStatusType']
      /** Format: date-time */
      from?: string
      /** Format: date-time */
      to?: string
    }
    /** @description Customer statistics response */
    'Models.CustomerStatistics': {
      /**
       * Format: int32
       * @description 総予約数
       */
      totalBookings: number
      /** @description 総支払額 */
      totalSpent: components['schemas']['Models.Money']
      /** @description 平均予約単価 */
      averageBookingValue: components['schemas']['Models.Money']
      /**
       * Format: date-time
       * @description 最終来店日
       */
      lastVisit: string | null
      /** @description お気に入りサービス */
      favoriteServices: components['schemas']['Models.ServiceSummary'][]
      /** @description お気に入りスタッフ */
      favoriteStaff: components['schemas']['Models.StaffSummary'][]
      /**
       * Format: int32
       * @description ロイヤルティポイント
       */
      loyaltyPoints: number
      /**
       * Format: date-time
       * @description 顧客登録日
       */
      customerSince: string
      /**
       * Format: float
       * @description キャンセル率
       */
      cancellationRate: number
      /**
       * Format: float
       * @description 無断キャンセル率
       */
      noShowRate: number
    }
    'Models.CustomerStatusDetail': {
      /** @description 顧客ステータスタイプ。現在の顧客アカウント状態 */
      type: components['schemas']['Models.CustomerStatusType']
      /** @description ステータス変更理由。理由が不要な場合はnull */
      reason: string | null
      /**
       * Format: date-time
       * @description ステータス変更日時。未設定の場合はnull
       */
      since: string | null
      /**
       * Format: date-time
       * @description ステータス有効期限。無期限の場合はnull
       */
      until: string | null
      /** @description ステータス変更者。システム自動変更の場合はnull */
      by: string | null
      /**
       * Format: date-time
       * @description 削除日時。削除されていない場合はnull
       */
      deletedAt: string | null
    }
    /**

         * @description

         * 顧客ステータス区分 - 顧客アカウントの活動状態や利用可否を表す区分

         *

         *

         * active: アクティブ - 通常利用可能な状態

         *

         * inactive: 休眠中 - 長期間利用がないがアカウントは維持されている状態

         *

         * suspended: 停止中 - 一時的に利用が停止されている状態

         *

         * deleted: 削除済み - アカウントが論理削除された状態

         *

         * blacklisted: ブラックリスト - 利用を禁止された状態

         * @enum {string}

         */

    'Models.CustomerStatusType':
      | 'active'
      | 'inactive'
      | 'suspended'
      | 'deleted'
      | 'blacklisted'
    /** @description 顧客更新リクエスト。部分更新のためのオプションフィールドを含む。null指定で値をリセット可能 */
    'Models.CustomerUpdateRequest': {
      /** @description 顧客氏名。フルネームまたは通称名 */
      name?: string
      /** @description 連絡先情報。メール、電話番号等の連絡手段 */
      contactInfo?: components['schemas']['Models.ContactInfo']
      /** @description 顧客の好みや要望。カスタム設定情報 */
      preferences?: {
        [key: string]: unknown
      }
      /** @description 内部メモ。スタッフ用の顧客に関する備考。null指定でリセット可能 */
      notes?: string | null
      /** @description 分類用タグ。顧客をグループ化するためのラベル */
      tags?: string[]
      /**
       * Format: date
       * @description 生年月日。年齢計算や誕生日特典に使用。null指定でリセット可能
       */
      birthDate?: string | null
    }
    /** @description 顧客更新リクエスト。部分更新のためのオプションフィールドを含む。null指定で値をリセット可能 */
    'Models.CustomerUpdateRequestUpdate': {
      /** @description 顧客氏名。フルネームまたは通称名 */
      name?: string
      /** @description 連絡先情報。メール、電話番号等の連絡手段 */
      contactInfo?: components['schemas']['Models.ContactInfoUpdate']
      /** @description 顧客の好みや要望。カスタム設定情報 */
      preferences?: {
        [key: string]: unknown
      }
      /** @description 内部メモ。スタッフ用の顧客に関する備考。null指定でリセット可能 */
      notes?: string | null
      /** @description 分類用タグ。顧客をグループ化するためのラベル */
      tags?: string[]
      /**
       * Format: date
       * @description 生年月日。年齢計算や誕生日特典に使用。null指定でリセット可能
       */
      birthDate?: string | null
    }
    /**

         * @description

         * カットサブカテゴリー区分 - カットサービスの詳細分類

         *

         *

         * mens_cut: メンズカット - 男性向けヘアカットサービス

         *

         * womens_cut: レディースカット - 女性向けヘアカットサービス

         *

         * kids_cut: キッズカット - 子供向けヘアカットサービス

         *

         * bang_trim: 前髪カット - 前髪のみのカットサービス

         *

         * beard_trim: 髭トリミング - 髭の整えサービス

         * @enum {string}

         */

    'Models.CutSubCategoryType':
      | 'mens_cut'
      | 'womens_cut'
      | 'kids_cut'
      | 'bang_trim'
      | 'beard_trim'
    /** @description 期間指定や有効期間に利用する共通レンジ型。 */
    'Models.DateRange': {
      /**
       * Format: date-time
       * @description 期間の開始日時。
       */
      startDate: string
      /**
       * Format: date-time
       * @description 期間の終了日時。
       */
      endDate: string
    }
    /**

         * @description

         * 曜日区分 - 営業日やスケジュール管理で使用される曜日の定義

         *

         *

         * monday: 月曜日

         *

         * tuesday: 火曜日

         *

         * wednesday: 水曜日

         *

         * thursday: 木曜日

         *

         * friday: 金曜日

         *

         * saturday: 土曜日

         *

         * sunday: 日曜日

         * @enum {string}

         */

    'Models.DayOfWeekType':
      | 'monday'
      | 'tuesday'
      | 'wednesday'
      | 'thursday'
      | 'friday'
      | 'saturday'
      | 'sunday'
    /** @description ドメインエラーの詳細情報モデル。
     *     予約・顧客・サロンなどビジネスロジック層で発生したエラーを分類し、運用チームが原因分析しやすい形で保持する。 */
    'Models.DomainErrorDetails': {
      /** @description エラー分類タイプ。上位のビジネスルールカテゴリを特定する。 */
      type: components['schemas']['Models.DomainErrorType']
      /** @description 業務担当者が理解しやすい説明文。ユーザー通知にも使用可能。 */
      message: string
      /** @description 機械判読可能なエラーコード。外部連携やログ分析に利用する。 */
      code: string
      /** @description 追加のエラー文脈。入力値や関連設定など柔軟に格納する。追加情報がない場合はnull */
      details: {
        [key: string]: unknown
      } | null
      /** @description 関連するエンティティ名。例: `Reservation` や `Customer`。特定のエンティティに関連しない場合はnull */
      entity: string | null
      /** @description 問題が発生したフィールド名。入力フォームとの紐付けに利用。フィールド特定が不要な場合はnull */
      field: string | null
      /** @description 問題があった値。マスキングが不要なケースのみ保持する。値を出力しない場合はnull */
      value: string | null
      /** @description 外部サービスエラー時の対象サービス名。連携先の切り分けに役立つ。外部サービスに関係ない場合はnull */
      service: string | null
    }
    /** @description ドメインエラー生成の標準設定モデル。
     *     各カテゴリごとの既定コードと HTTP ステータスを定義し、再利用可能なエラーファクトリーを構築する。 */
    'Models.DomainErrorFactory': {
      /** @description 検証エラーを生成するための設定。 */
      validation: {
        /** @enum {string} */
        type: 'VALIDATION_ERROR'
        /** @enum {string} */
        defaultCode: 'VALIDATION_FAILED'
        /** @enum {number} */
        httpStatus: 400
      }
      /** @description リソース未検出エラーを生成するための設定。 */
      notFound: {
        /** @enum {string} */
        type: 'NOT_FOUND'
        /** @enum {string} */
        defaultCode: 'RESOURCE_NOT_FOUND'
        /** @enum {number} */
        httpStatus: 404
      }
      /** @description 重複登録エラーを生成するための設定。 */
      alreadyExists: {
        /** @enum {string} */
        type: 'ALREADY_EXISTS'
        /** @enum {string} */
        defaultCode: 'RESOURCE_ALREADY_EXISTS'
        /** @enum {number} */
        httpStatus: 409
      }
      /** @description ビジネスルール違反エラーを生成するための設定。 */
      businessRule: {
        /** @enum {string} */
        type: 'BUSINESS_RULE_VIOLATION'
        /** @enum {string} */
        defaultCode: 'BUSINESS_RULE_VIOLATION'
        /** @enum {number} */
        httpStatus: 422
      }
      /** @description 未認証エラーを生成するための設定。 */
      unauthorized: {
        /** @enum {string} */
        type: 'UNAUTHORIZED'
        /** @enum {string} */
        defaultCode: 'AUTHENTICATION_REQUIRED'
        /** @enum {number} */
        httpStatus: 401
      }
      /** @description 権限不足エラーを生成するための設定。 */
      forbidden: {
        /** @enum {string} */
        type: 'FORBIDDEN'
        /** @enum {string} */
        defaultCode: 'INSUFFICIENT_PERMISSIONS'
        /** @enum {number} */
        httpStatus: 403
      }
      /** @description 内部サーバーエラーを生成するための設定。 */
      internal: {
        /** @enum {string} */
        type: 'INTERNAL_ERROR'
        /** @enum {string} */
        defaultCode: 'INTERNAL_SERVER_ERROR'
        /** @enum {number} */
        httpStatus: 500
      }
      /** @description データベースエラーを生成するための設定。 */
      database: {
        /** @enum {string} */
        type: 'DATABASE_ERROR'
        /** @enum {string} */
        defaultCode: 'DATABASE_ERROR'
        /** @enum {number} */
        httpStatus: 500
      }
      /** @description 外部サービス連携エラーを生成するための設定。 */
      externalService: {
        /** @enum {string} */
        type: 'EXTERNAL_SERVICE_ERROR'
        /** @enum {string} */
        defaultCode: 'EXTERNAL_SERVICE_ERROR'
        /** @enum {number} */
        httpStatus: 502
      }
    }
    /** @description ドメインエラータイプとシステム標準エラーコードの対応表モデル。
     *     内部ロジックとHTTPレスポンスの整合性を保つために利用する。 */
    'Models.DomainErrorMapping': {
      /** @description ドメインエラータイプ。ビジネス層で識別されるカテゴリ。 */
      domainType: components['schemas']['Models.DomainErrorType']
      /** @description 対応する標準エラーコード。`ErrorCodeType` を参照する。 */
      errorCode: components['schemas']['Models.ErrorCodeType']
      /**
       * Format: int32
       * @description レスポンスに適用する HTTP ステータスコード。
       */
      httpStatus: number
    }
    /**

         * @description

         * ドメインエラータイプ区分 - ビジネスロジック層で発生するエラーの分類

         *

         *

         * VALIDATION_ERROR: 検証エラー - 入力値の検証で失敗

         *

         * NOT_FOUND: 未検出 - 指定されたリソースが存在しない

         *

         * ALREADY_EXISTS: 既存 - リソースが既に存在し、重複が許可されない

         *

         * BUSINESS_RULE_VIOLATION: ビジネスルール違反 - ビジネスロジックの制約に違反

         *

         * UNAUTHORIZED: 未認証 - 認証が必要であるが認証されていない

         *

         * FORBIDDEN: 禁止 - 認証されているが権限が不足

         *

         * INTERNAL_ERROR: 内部エラー - システム内部で予期しないエラーが発生

         *

         * DATABASE_ERROR: データベースエラー - データベース操作中のエラー

         *

         * EXTERNAL_SERVICE_ERROR: 外部サービスエラー - 外部APIやサービスでのエラー

         * @enum {string}

         */

    'Models.DomainErrorType':
      | 'VALIDATION_ERROR'
      | 'NOT_FOUND'
      | 'ALREADY_EXISTS'
      | 'BUSINESS_RULE_VIOLATION'
      | 'UNAUTHORIZED'
      | 'FORBIDDEN'
      | 'INTERNAL_ERROR'
      | 'DATABASE_ERROR'
      | 'EXTERNAL_SERVICE_ERROR'
    /** @description ドメイン操作で発生したエラーのコンテキストモデル。
     *     ビジネス層の例外情報と HTTP レイヤーの問題詳細を紐づけ、ログ出力やモニタリングを容易にする。 */
    'Models.DomainOperationError': {
      /** @description ドメインエラーの詳細情報。ビジネスロジック層で発生した要因を保持する。 */
      domainError: components['schemas']['Models.DomainErrorDetails']
      /** @description HTTP レスポンスとして返却可能な ProblemDetails。クライアントへの通知に使用。 */
      problemDetails: components['schemas']['Models.ProblemDetails']
      /**
       * Format: date-time
       * @description エラーが発生した日時 (UTC)。再発防止のタイムライン分析に活用。
       */
      occurredAt: string
      /** @description エラーが発生した操作名やユースケース。例: `CreateReservation`。操作名が特定できない場合はnull */
      operation: string | null
      /** @description デバッグ用のスタックトレース。開発・検証環境のみで出力する。本番環境ではnull */
      stackTrace: string | null
    }
    /** @description 予約が下書き段階にある場合の状態情報。 */
    'Models.DraftBookingStatus': {
      /**
       * @description 固定値draft。下書き状態であることを示す。
       * @enum {string}
       */
      type: 'draft'
      /**
       * Format: date-time
       * @description 下書きが作成された日時。
       */
      createdAt: string
      /**
       * Format: date-time
       * @description 下書きの有効期限。無期限の場合はnull。
       */
      expiresAt: string | null
    }
    /** @description 予約が下書き段階にある場合の状態情報。 */
    'Models.DraftBookingStatusUpdate': {
      /**
       * @description 固定値draft。下書き状態であることを示す。
       * @enum {string}
       */
      type?: 'draft'
      /**
       * Format: date-time
       * @description 下書きが作成された日時。
       */
      createdAt?: string
      /**
       * Format: date-time
       * @description 下書きの有効期限。無期限の場合はnull。
       */
      expiresAt?: string | null
    }
    /** @description メールアドレス確認フローの進行状況を保持するモデル。 */
    'Models.EmailVerificationStateDetail': {
      /** @description 現在の確認状態区分。 */
      type: components['schemas']['Models.EmailVerificationStateType']
      /**
       * Format: date-time
       * @description 確認完了日時。メールアドレスが未確認の場合はnull。
       */
      verifiedAt: string | null
      /** @description 確認メールに含めるトークン。確認メールが未送信の場合はnull。 */
      token: string | null
      /**
       * Format: date-time
       * @description トークンの有効期限。トークンが発行されていない場合はnull。
       */
      expiresAt: string | null
      /**
       * Format: date-time
       * @description 確認メールを送信した日時。メール未送信の場合はnull。
       */
      sentAt: string | null
    }
    /**

         * @description

         * メール確認状態区分 - メールアドレスの確認状態を表す区分

         *

         *

         * verified: 確認済み - メールアドレスが確認された状態

         *

         * unverified: 未確認 - メールアドレスが未確認の状態

         *

         * pending: 確認中 - 確認メールを送信し、確認待ちの状態

         * @enum {string}

         */

    'Models.EmailVerificationStateType': 'verified' | 'unverified' | 'pending'
    /** @description API全体で共通利用する業務エラーの基本モデル。 */
    'Models.Error': {
      /** @description エラーの種類を特定するアプリケーション固有コード。 */
      code: string
      /** @description ユーザーまたはオペレーターに提示するエラーメッセージ。 */
      message: string
      /** @description デバッグやサポート対応に役立つ追加情報。追加情報がない場合はnull */
      details: {
        [key: string]: unknown
      } | null
    }
    /**

         * @description

         * エラーコードタイプ区分 - 一貫したエラー処理のための標準化されたエラーコード

         * // 認証・認可 (1xxx)

         *

         *

         * 1001: 認証必須 - アクセスには認証が必要

         *

         * 1002: 無効な資格情報 - ユーザー名またはパスワードが不正

         *

         * 1003: トークン期限切れ - 認証トークンが期限切れ

         *

         * 1004: トークン無効 - 認証トークンが無効または破損

         *

         * 1005: 権限不足 - 操作を実行する権限が不足

         *

         * 1006: アカウントロック - アカウントがロックされている

         *

         * 1007: 2要素認証必須 - 2要素認証の入力が必要

         * // バリデーション (2xxx)

         *

         * 2001: 検証失敗 - 入力データの検証に失敗

         *

         * 2002: 不正な形式 - データ形式が不正

         *

         * 2003: 必須フィールド欠落 - 必須フィールドが入力されていない

         *

         * 2004: 範囲外の値 - 値が許可された範囲を超えている

         *

         * 2005: 重複値 - 一意であるべき値が重複している

         * // ビジネスロジック (3xxx)

         *

         * 3001: リソース未検出 - 指定されたリソースが存在しない

         *

         * 3002: リソース既存 - リソースが既に存在する

         *

         * 3003: 操作不可 - 現在の状態では操作が許可されない

         *

         * 3004: ビジネスルール違反 - ビジネスルールに違反している

         *

         * 3005: 残高不足 - ポイントや残高が不足

         *

         * 3006: 予約競合 - 予約時間が重複している

         *

         * 3007: 容量超過 - 利用可能な容量を超えている

         * // システム (4xxx)

         *

         * 4001: 内部サーバーエラー - サーバー内部でエラーが発生

         *

         * 4002: サービス利用不可 - サービスが一時的に利用できない

         *

         * 4003: データベースエラー - データベース処理中にエラーが発生

         *

         * 4004: 外部サービスエラー - 外部サービスでエラーが発生

         *

         * 4005: レート制限超過 - APIレート制限を超えた

         * @enum {string}

         */

    'Models.ErrorCodeType':
      | '1001'
      | '1002'
      | '1003'
      | '1004'
      | '1005'
      | '1006'
      | '1007'
      | '2001'
      | '2002'
      | '2003'
      | '2004'
      | '2005'
      | '3001'
      | '3002'
      | '3003'
      | '3004'
      | '3005'
      | '3006'
      | '3007'
      | '4001'
      | '4002'
      | '4003'
      | '4004'
      | '4005'
    /** @description ファセット集計の単一要素を表すモデル。
     *     カテゴリや価格帯などの値と、その件数を組みで保持する。 */
    'Models.Facet': {
      /** @description ファセットの値。例: `メンズ向け` や `個室あり`。 */
      value: string
      /**
       * Format: int32
       * @description 該当値に一致する件数。
       */
      count: number
    }
    /** @description 支払い失敗状態の詳細 */
    'Models.FailedPaymentStatus': {
      /**
       * @description 状態種別（failed 固定値）
       * @enum {string}
       */
      type: 'failed'
      /**
       * Format: date-time
       * @description 支払いが失敗した日時
       */
      failedAt: string
      /** @description 失敗理由の説明 */
      reason: string
      /**
       * @description 再試行が可能かどうか
       * @default false
       */
      retryable: boolean | null
    }
    /** @description 支払い失敗状態の詳細 */
    'Models.FailedPaymentStatusUpdate': {
      /**
       * @description 状態種別（failed 固定値）
       * @enum {string}
       */
      type?: 'failed'
      /**
       * Format: date-time
       * @description 支払いが失敗した日時
       */
      failedAt?: string
      /** @description 失敗理由の説明 */
      reason?: string
      /**
       * @description 再試行が可能かどうか
       * @default false
       */
      retryable: boolean | null
    }
    /**

         * @description

         * ファイルタイプ区分 - アップロードされるファイルの種類を分類

         *

         *

         * image: 画像 - 写真やイラスト等の画像ファイル（jpg, png, gif等）

         *

         * document: ドキュメント - PDF、Word、Excel等の文書ファイル

         *

         * other: その他 - 上記に分類されないファイル

         * @enum {string}

         */

    'Models.FileType': 'image' | 'document' | 'other'
    'Models.HairInfo': {
      /** @description 髪質タイプ。髪のクセや形状の分類 */
      type: components['schemas']['Models.HairType']
      /** @description 髪の太さ。一本あたりの毛髪の太さ */
      thickness: components['schemas']['Models.HairThicknessType']
      /** @description 髪の状態リスト。ダメージや健康状態の詳細 */
      condition: string[]
      /** @description 化学処理履歴。カラーやパーマ等の施術履歴 */
      chemicalHistory: string[]
      /** @description 髪質に関する備考。特記事項がない場合はnull */
      notes: string | null
    }
    /**

         * @description

         * 髪の太さ区分 - 髪の毛一本の太さを分類、カットやスタイリングの参考に使用

         *

         *

         * fine: 細毛 - 柔らかく細い髪、ボリュームが出にくい

         *

         * medium: 普通毛 - 平均的な太さの髪、扱いやすい

         *

         * thick: 太毛 - しっかりとした太い髪、ボリュームが出やすい

         * @enum {string}

         */

    'Models.HairThicknessType': 'fine' | 'medium' | 'thick'
    /**

         * @description

         * 髪質タイプ区分 - 顧客の髪のクセや形状を分類、適切な施術提案に使用

         *

         *

         * straight: ストレート - 直毛、クセがほとんどない髪質

         *

         * wavy: ウェービー - 緩やかな波状、S字カーブの髪質

         *

         * curly: カーリー - 明確なカール、螺旋状の髪質

         *

         * coily: コイリー - 非常に細かいカール、ジグザグ状の髪質

         * @enum {string}

         */

    'Models.HairType': 'straight' | 'wavy' | 'curly' | 'coily'
    /** @description 個別サービスのヘルスチェック結果モデル。
     *     外部サービス連携や内部マイクロサービスごとの状態を把握する。 */
    'Models.HealthCheck': {
      /** @description 対象サービス名またはコンポーネント識別子。 */
      name: string
      /**
       * @description 対象サービスの稼働状態。`up` は正常、`down` は停止、`degraded` は部分的な性能低下を示す。
       * @enum {string}
       */
      status: 'up' | 'down' | 'degraded'
      /**
       * Format: int32
       * @description ヘルスチェックに要した時間 (ミリ秒)。応答遅延の指標。測定不可の場合はnull
       */
      responseTime: number | null
      /** @description 停止時のエラーメッセージや原因メモ。正常時はnull */
      error: string | null
      /** @description 監視対象固有の追加詳細。再試行回数や依存サービス名などを含める。追加情報がない場合はnull */
      details: {
        [key: string]: unknown
      } | null
    }
    /** @description API ヘルスチェック結果モデル。
     *     監視基盤や運用ダッシュボードにシステム状態を提供し、早期異常検知を実現する。 */
    'Models.HealthStatus': {
      /**
       * @description システム全体の稼働状態。`healthy` は正常、`degraded` は性能低下、`unhealthy` は停止を表す。
       * @enum {string}
       */
      status: 'healthy' | 'degraded' | 'unhealthy'
      /** @description 稼働中の API バージョン。運用チームのバージョン管理に利用。 */
      version: string
      /**
       * Format: date-time
       * @description 判定実行時点のサーバー時刻 (UTC)。
       */
      timestamp: string
      /** @description 各内部サービスや依存コンポーネントのヘルスチェック結果一覧。 */
      checks: components['schemas']['Models.HealthCheck'][]
      /** @description 監視環境固有の追加メタ情報。必要に応じてキーを拡張する。追加情報がない場合はnull */
      metadata: {
        [key: string]: unknown
      } | null
    }
    /** @description 施術が進行中の場合の状態情報。 */
    'Models.InProgressBookingStatus': {
      /**
       * @description 固定値in_progress。施術中であることを示す。
       * @enum {string}
       */
      type: 'in_progress'
      /**
       * Format: date-time
       * @description 施術を開始した日時。
       */
      startedAt: string
      /** @description 施術を行っているブースや席の名称。席が指定されていない場合はnull。 */
      stationName: string | null
    }
    /** @description 施術が進行中の場合の状態情報。 */
    'Models.InProgressBookingStatusUpdate': {
      /**
       * @description 固定値in_progress。施術中であることを示す。
       * @enum {string}
       */
      type?: 'in_progress'
      /**
       * Format: date-time
       * @description 施術を開始した日時。
       */
      startedAt?: string
      /** @description 施術を行っているブースや席の名称。席が指定されていない場合はnull。 */
      stationName?: string | null
    }
    /** @description 在庫に関するアラート情報 */
    'Models.InventoryAlert': {
      /** @description 対象在庫 ID */
      itemId: components['schemas']['Models.InventoryId']
      /**
       * Format: float
       * @description 設定した閾値
       */
      threshold: number
      /**
       * Format: float
       * @description 警告発生時の在庫数
       */
      currentStock: number
      /**
       * Format: date-time
       * @description 警告が発生した日時
       */
      triggeredAt: string
      /** @description 関連する在庫 ID */
      inventoryId: components['schemas']['Models.InventoryId']
      /**
       * @description アラート種別
       * @enum {string}
       */
      alert: 'low_stock' | 'expiring' | 'expired' | 'overstock'
      /** @description 通知メッセージ */
      message: string
      /**
       * @description 重要度レベル
       * @enum {string}
       */
      severity: 'info' | 'warning' | 'critical'
      /** @description 確認済みかどうか */
      acknowledged: boolean | null
      /** @description 確認したスタッフ ID */
      acknowledgedBy: (string & components['schemas']['Models.StaffId']) | null
      /**
       * Format: date-time
       * @description 確認日時
       */
      acknowledgedAt: string | null
    }
    /**
     * Format: uuid
     * @description 在庫アイテムや消耗品を識別するブランド付きUUID。
     */
    'Models.InventoryId': string
    /** @description サロンで管理する在庫アイテムの基本情報 */
    'Models.InventoryItem': {
      /** @description 在庫 ID */
      id: components['schemas']['Models.InventoryId']
      /** @description 在庫を管理するサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 商品コード・SKU */
      productCode: string
      /** @description 商品名 */
      productName: string
      /** @description 商品説明文 */
      description: string | null
      /** @description 分類カテゴリ */
      category: string
      /** @description ブランド名 */
      brand: string | null
      /** @description 仕入先情報 */
      supplier: string | null
      /**
       * Format: float
       * @description 現在の在庫数量
       */
      currentStock: number
      /**
       * Format: float
       * @description 最低在庫数（警告閾値）
       */
      minimumStock: number
      /**
       * Format: float
       * @description 最大在庫数（上限管理用）
       */
      maximumStock: number | null
      /** @description 数量の単位 */
      unit: string
      /**
       * Format: float
       * @description 仕入単価
       */
      unitCost: number
      /**
       * Format: float
       * @description 顧客販売価格
       */
      sellingPrice: number | null
      /** @description 在庫状態区分 */
      status: components['schemas']['Models.InventoryStatusType']
      /** @description サロン内の保管場所 */
      location: string | null
      /**
       * Format: date-time
       * @description 賞味・使用期限
       */
      expirationDate: string | null
      /**
       * Format: date-time
       * @description 直近の入庫日時
       */
      lastRestocked: string | null
      /** @description 備考メモ */
      notes: string | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 在庫アイテムを新規登録する入力モデル */
    'Models.InventoryItemCreateRequest': {
      /** @description 在庫を追加するサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 商品コード・SKU */
      productCode: string
      /** @description 商品名 */
      productName: string
      /** @description 商品説明文 */
      description: string | null
      /** @description 分類カテゴリ */
      category: string
      /** @description ブランド名 */
      brand: string | null
      /** @description 仕入先情報 */
      supplier: string | null
      /**
       * Format: float
       * @description 登録時点の在庫数量
       */
      currentStock: number
      /**
       * Format: float
       * @description 最低在庫数
       */
      minimumStock: number
      /**
       * Format: float
       * @description 最大在庫数
       */
      maximumStock: number | null
      /** @description 数量単位 */
      unit: string
      /**
       * Format: float
       * @description 仕入単価
       */
      unitCost: number
      /**
       * Format: float
       * @description 顧客販売価格
       */
      sellingPrice: number | null
      /** @description 保管場所 */
      location: string | null
      /**
       * Format: date-time
       * @description 賞味・使用期限
       */
      expirationDate: string | null
      /** @description 備考メモ */
      notes: string | null
    }
    /** @description 在庫アイテムの情報更新入力モデル */
    'Models.InventoryItemUpdateRequest': {
      /** @description 更新後の商品名 */
      productName?: string
      /** @description 更新後の商品説明 */
      description?: string | null
      /** @description 更新後のカテゴリ */
      category?: string
      /** @description 更新後のブランド名 */
      brand?: string | null
      /** @description 更新後の仕入先情報 */
      supplier?: string | null
      /**
       * Format: float
       * @description 更新後の最低在庫数
       */
      minimumStock?: number
      /**
       * Format: float
       * @description 更新後の最大在庫数
       */
      maximumStock?: number | null
      /**
       * Format: float
       * @description 更新後の仕入単価
       */
      unitCost?: number
      /**
       * Format: float
       * @description 更新後の販売価格
       */
      sellingPrice?: number | null
      /** @description 更新後の保管場所 */
      location?: string | null
      /**
       * Format: date-time
       * @description 更新後の賞味・使用期限
       */
      expirationDate?: string | null
      /** @description 在庫状態の更新 */
      status?: components['schemas']['Models.InventoryStatusType']
      /** @description 更新後の備考 */
      notes?: string | null
    }
    /**

         * @description

         * 在庫ステータス区分 - 商品・材料の在庫状態を表す区分

         *

         *

         * in_stock: 在庫あり - 十分な在庫量がある状態

         *

         * low_stock: 在庫僅少 - 在庫量が設定された最小量に近づいている状態

         *

         * out_of_stock: 在庫切れ - 在庫がゼロになった状態

         *

         * ordered: 発注済み - 補充のための発注が行われた状態

         *

         * discontinued: 廃番 - 商品の取り扱いを終了した状態

         * @enum {string}

         */

    'Models.InventoryStatusType':
      | 'in_stock'
      | 'low_stock'
      | 'out_of_stock'
      | 'ordered'
      | 'discontinued'
    /** @description 在庫の入出庫トランザクション */
    'Models.InventoryTransaction': {
      /** @description トランザクション ID */
      id: string
      /** @description 対象在庫アイテム ID */
      itemId: components['schemas']['Models.InventoryId']
      /** @description 処理を行うサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /**
       * @description 在庫操作区分（入庫/出庫/調整/移動）
       * @enum {string}
       */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /**
       * Format: float
       * @description 操作した数量
       */
      quantity: number
      /** @description 操作理由 */
      reason: string
      /** @description 操作を担当したスタッフ ID */
      performedBy: components['schemas']['Models.StaffId']
      /**
       * Format: date-time
       * @description 操作日時
       */
      occurredAt: string
      /** @description 関連する外部参照 ID */
      referenceId: string | null
      /** @description 備考メモ */
      notes: string | null
      /** @description 追加のメタデータ */
      metadata: {
        [key: string]: unknown
      } | null
    }
    /**
     * Format: uuid
     * @description ロイヤルティプログラムの会員ランクを識別するブランド付きUUID。
     */
    'Models.LoyaltyTierId': string
    /**

         * @description

         * ロイヤルティティア区分 - 顧客ロイヤルティプログラムの会員ランク

         *

         *

         * bronze: ブロンズ - 基本会員ランク、初期段階の特典を提供

         *

         * silver: シルバー - 中級会員ランク、標準的な特典を提供

         *

         * gold: ゴールド - 上級会員ランク、優待特典を提供

         *

         * platinum: プラチナ - 最上級会員ランク、最高レベルの特典を提供

         * @enum {string}

         */

    'Models.LoyaltyTierType': 'bronze' | 'silver' | 'gold' | 'platinum'
    /**

         * @description

         * メイクアップサブカテゴリー区分 - メイクアップサービスの詳細分類

         *

         *

         * everyday_makeup: デイリーメイク - 普段使いのナチュラルメイク

         *

         * event_makeup: イベントメイク - パーティーやイベント用の華やかなメイク

         *

         * bridal_makeup: ブライダルメイク - 花嫁向けの特別なメイクアップ

         *

         * photoshoot_makeup: 撮影用メイク - 写真撮影用のプロフェッショナルメイク

         * @enum {string}

         */

    'Models.MakeupSubCategoryType':
      | 'everyday_makeup'
      | 'event_makeup'
      | 'bridal_makeup'
      | 'photoshoot_makeup'
    /** @description 施術で使用した資材の記録 */
    'Models.MaterialUsage': {
      /** @description 使用した在庫 ID */
      inventoryId: components['schemas']['Models.InventoryId']
      /** @description 資材名 */
      productName: string
      /**
       * Format: float
       * @description 使用量
       */
      quantity: number
      /** @description 数量単位 */
      unit: string
      /** @description 備考メモ - 特記事項がない標準的な使用量の場合はnull */
      notes: string | null
    }
    /** @description 顧客ごとのカルテ情報 */
    'Models.MedicalChart': {
      /** @description カルテ ID */
      id: components['schemas']['Models.MedicalChartId']
      /** @description 対象顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description アレルギー・敏感情報 - アレルギーがない顧客の場合はnull */
      allergies: string[] | null
      /** @description 頭皮状態のメモ - 頭皮に問題がない健康な状態の場合はnull */
      scalpCondition: string | null
      /** @description 毛髪状態のメモ - 毛髪に特筆すべき問題がない場合はnull */
      hairCondition: string | null
      /** @description 過去に実施したケミカル施術履歴 - 初回来店やケミカル施術経験がない顧客の場合はnull */
      previousTreatments:
        | components['schemas']['Models.PreviousTreatment'][]
        | null
      /** @description 注意が必要な持病・体調情報 - 健康上の問題がない顧客の場合はnull */
      medicalConditions: string | null
      /** @description 好みの商材・ブランド - 特定の好みがない顧客の場合はnull */
      preferredProducts: string[] | null
      /** @description 避けるべき商材 - 特に避けるべき商材がない顧客の場合はnull */
      avoidProducts: string[] | null
      /** @description 自由記述メモ - 追加情報がない標準的なカルテの場合はnull */
      notes: string | null
      /**
       * Format: date-time
       * @description 最終更新日時
       */
      lastUpdated: string
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description カルテを新規作成する入力モデル */
    'Models.MedicalChartCreateRequest': {
      /** @description 対象顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description アレルギー情報 - アレルギーがない顧客の場合はnull */
      allergies: string[] | null
      /** @description 頭皮状態 - 頭皮に問題がない健康な状態の場合はnull */
      scalpCondition: string | null
      /** @description 毛髪状態 - 毛髪に特筆すべき問題がない場合はnull */
      hairCondition: string | null
      /** @description 過去施術の履歴 - 初回来店やケミカル施術経験がない顧客の場合はnull */
      previousTreatments:
        | components['schemas']['Models.PreviousTreatment'][]
        | null
      /** @description 注意すべき体調・持病 - 健康上の問題がない顧客の場合はnull */
      medicalConditions: string | null
      /** @description 好みの商材 - 特定の好みがない顧客の場合はnull */
      preferredProducts: string[] | null
      /** @description 避けるべき商材 - 特に避けるべき商材がない顧客の場合はnull */
      avoidProducts: string[] | null
      /** @description その他メモ - 追加情報がない標準的なカルテの場合はnull */
      notes: string | null
    }
    /**
     * Format: uuid
     * @description カルテ（メディカルチャート）を識別するブランド付きUUID。
     */
    'Models.MedicalChartId': string
    /** @description カルテ情報を更新する入力モデル */
    'Models.MedicalChartUpdateRequest': {
      /** @description アレルギー情報 - アレルギーがない顧客の場合はnull、null指定で値をリセット可能 */
      allergies?: string[] | null
      /** @description 頭皮状態 - 頭皮に問題がない健康な状態の場合はnull、null指定で値をリセット可能 */
      scalpCondition?: string | null
      /** @description 毛髪状態 - 毛髪に特筆すべき問題がない場合はnull、null指定で値をリセット可能 */
      hairCondition?: string | null
      /** @description 過去施術の履歴 - 初回来店やケミカル施術経験がない顧客の場合はnull、null指定で値をリセット可能 */
      previousTreatments?:
        | components['schemas']['Models.PreviousTreatment'][]
        | null
      /** @description 注意すべき体調・持病 - 健康上の問題がない顧客の場合はnull、null指定で値をリセット可能 */
      medicalConditions?: string | null
      /** @description 好みの商材 - 特定の好みがない顧客の場合はnull、null指定で値をリセット可能 */
      preferredProducts?: string[] | null
      /** @description 避けるべき商材 - 特に避けるべき商材がない顧客の場合はnull、null指定で値をリセット可能 */
      avoidProducts?: string[] | null
      /** @description その他メモ - 追加情報がない標準的なカルテの場合はnull、null指定で値をリセット可能 */
      notes?: string | null
    }
    'Models.MembershipBenefitDetail': {
      /** @description 会員特典のタイプ。特典の種類を識別する */
      type: components['schemas']['Models.MembershipBenefitType']
      /**
       * Format: int32
       * @description 特典の割引率。割引特典以外の場合はnull
       */
      percentage: number | null
      /** @description ポイント倍率。ポイント特典以外の場合はnull */
      multiplier: (number & components['schemas']['Models.decimal']) | null
      /** @description 特典対象サービス名。サービス指定がない場合はnull */
      service: string | null
      /**
       * @description 特典提供频度。频度指定がない場合はnull
       * @enum {string|null}
       */
      frequency: 'monthly' | 'quarterly' | 'yearly' | null
      /**
       * Format: int32
       * @description 特典の価値。数値化できない場合はnull
       */
      value: number | null
      /** @description 特典の説明文。詳細説明が不要な場合はnull */
      description: string | null
    }
    /**

         * @description

         * 会員特典タイプ区分 - 会員ランクに応じて提供される特典の種類

         *

         *

         * discount_rate: 割引率 - サービス料金に対するパーセンテージ割引

         *

         * point_multiplier: ポイント倍率 - 通常のポイント付与率に対する乗数

         *

         * priority_booking: 優先予約 - 一般公開前の優先的な予約権利

         *

         * free_service: 無料サービス - 特定サービスの無料提供

         *

         * birthday_special: 誕生日特典 - 誕生月に提供される特別サービス

         *

         * exclusive_access: 特別アクセス権 - VIP専用メニューや特別イベントへの参加権

         * @enum {string}

         */

    'Models.MembershipBenefitType':
      | 'discount_rate'
      | 'point_multiplier'
      | 'priority_booking'
      | 'free_service'
      | 'birthday_special'
      | 'exclusive_access'
    'Models.MembershipInfo': {
      /** @description 会員ランク。顧客の現在のメンバーシップレベル */
      tier: components['schemas']['Models.MembershipTierType']
      /**
       * Format: date-time
       * @description 会員登録日時。該当ランクになった日時
       */
      since: string
      /** @description 現在享受可能な特典リスト。ランクに応じた特典の詳細 */
      benefits: components['schemas']['Models.MembershipBenefitDetail'][]
      /** @description 専任担当者名。専任担当がいない場合はnull */
      dedicatedManager: string | null
      /**
       * Format: int32
       * @description 現在保有ポイント数。利用可能なポイント残高
       */
      points: number
      /**
       * Format: int32
       * @description 累積獲得ポイント数。これまでに獲得した全ポイント
       */
      totalPointsEarned: number
      /**
       * Format: int32
       * @description 累積使用ポイント数。これまでに使用した全ポイント
       */
      totalPointsUsed: number
      /**
       * Format: int32
       * @description 失効予定のポイント数。失効予定がない場合はnull
       */
      expiringPoints: number | null
      /**
       * Format: date-time
       * @description ポイント失効日時。失効予定がない場合はnull
       */
      pointsExpireAt: string | null
    }
    /**

         * @description

         * 会員ランク区分 - 顧客の会員ランクを表し、特典・優待内容を決定する区分

         *

         *

         * regular: 一般会員 - 基本ランク、標準的なサービスを提供

         *

         * silver: シルバー会員 - 中級ランク、5%の基本割引等の特典付与

         *

         * gold: ゴールド会員 - 上級ランク、10%の割引や優先予約等の特典付与

         *

         * platinum: プラチナ会員 - 最上級ランク、15%の割引や特別サービス提供

         *

         * vip: VIP会員 - 特別会員、完全カスタマイズされた特別待遇を提供

         * @enum {string}

         */

    'Models.MembershipTierType':
      | 'regular'
      | 'silver'
      | 'gold'
      | 'platinum'
      | 'vip'
    /** @description 税抜・税込計算に利用する金額モデル。 */
    'Models.Money': {
      /**
       * Format: int64
       * @description 通貨の最小単位で表現した金額値。
       */
      value: number
      /** @description 使用する通貨コード。 */
      currency: components['schemas']['Models.CurrencyCodeType']
      /** @description 適用税率。税率が適用されない場合はnull */
      taxRate: (number & components['schemas']['Models.decimal']) | null
    }
    /** @description 税抜・税込計算に利用する金額モデル。 */
    'Models.MoneyUpdate': {
      /**
       * Format: int64
       * @description 通貨の最小単位で表現した金額値。
       */
      value?: number
      /** @description 使用する通貨コード。 */
      currency?: components['schemas']['Models.CurrencyCodeType']
      /** @description 適用税率。税率が適用されない場合はnull */
      taxRate?: (number & components['schemas']['Models.decimal']) | null
    }
    /**

         * @description

         * ネイルサブカテゴリー区分 - ネイルケアサービスの詳細分類

         *

         *

         * manicure: マニキュア - 手の爪のケアと装飾

         *

         * pedicure: ペディキュア - 足の爪のケアと装飾

         *

         * gel_nail: ジェルネイル - UV/LEDライトで硬化させるジェルネイル

         *

         * nail_art: ネイルアート - デザインや装飾を施したアートネイル

         *

         * nail_removal: ネイルリムーバル - ジェルやマニキュアの除去サービス

         * @enum {string}

         */

    'Models.NailSubCategoryType':
      | 'manicure'
      | 'pedicure'
      | 'gel_nail'
      | 'nail_art'
      | 'nail_removal'
    /** @description 来店が確認できなかった場合の状態情報。 */
    'Models.NoShowBookingStatus': {
      /**
       * @description 固定値no_show。無断キャンセル状態であることを示す。
       * @enum {string}
       */
      type: 'no_show'
      /**
       * Format: date-time
       * @description 無断キャンセルとして記録した日時。
       */
      recordedAt: string
      /**
       * @description ペナルティを適用したかどうか。既定値はfalse。
       * @default false
       */
      penaltyApplied: boolean
    }
    /** @description 来店が確認できなかった場合の状態情報。 */
    'Models.NoShowBookingStatusUpdate': {
      /**
       * @description 固定値no_show。無断キャンセル状態であることを示す。
       * @enum {string}
       */
      type?: 'no_show'
      /**
       * Format: date-time
       * @description 無断キャンセルとして記録した日時。
       */
      recordedAt?: string
      /**
       * @description ペナルティを適用したかどうか。既定値はfalse。
       * @default false
       */
      penaltyApplied: boolean
    }
    /** @description Notification preferences model */
    'Models.NotificationPreferences': {
      /** @description メール通知有効 */
      email: boolean
      /** @description SMS通知有効 */
      sms: boolean
      /** @description プッシュ通知有効 */
      push: boolean
      /**
       * Format: int32
       * @description リマインダータイミング（予約の何時間前）
       */
      reminderHours: number
    }
    /** @description 顧客への通知チャネルとリマインダー設定をまとめたモデル。 */
    'Models.NotificationSettings': {
      /** @description 利用を許可する通知チャネルの一覧。 */
      types: components['schemas']['Models.NotificationType'][]
      /** @description リマインダー送信タイミングの一覧。 */
      reminderTimings: components['schemas']['Models.ReminderTimingType'][]
      /** @description 通知機能全体の有効・無効フラグ。 */
      enabled: boolean
    }
    /**

         * @description

         * 通知タイプ区分 - 顧客への通知・連絡手段の種類

         *

         *

         * email: Eメール - 電子メールによる通知

         *

         * sms: SMS - ショートメッセージサービスによる通知

         *

         * push: プッシュ通知 - モバイルアプリのプッシュ通知

         *

         * line: LINE - LINEメッセージングサービスによる通知

         * @enum {string}

         */

    'Models.NotificationType': 'email' | 'sms' | 'push' | 'line'
    /** @description オフセット方式のページネーション指定モデル。
     *     既存基盤や BI 連携でカーソル方式に移行できないケース向けの互換パラメータを提供する。 */
    'Models.OffsetPaginationParams': {
      /**
       * Format: int32
       * @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。
       * @default 20
       */
      limit: number
      /**
       * Format: int32
       * @description スキップする件数。リスト冒頭からのオフセット値を指定する。
       * @default 0
       */
      offset: number
      /** @description ソート対象フィールド。予約一覧や顧客一覧の表示順を決定する。 */
      sortBy?: string
      /**
       * @description ソート順序。`asc` は昇順、`desc` は降順を表す。
       * @default asc
       * @enum {string}
       */
      sortOrder: 'asc' | 'desc'
    }
    /** @description 曜日別の営業時間を管理するモデル。 */
    'Models.OpeningHours': {
      /** @description 対象となる曜日 */
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      /**
       * Format: date
       * @description 日付
       */
      date: string
      /** @description 開店時刻（HH:mm形式）。休業日の場合はnull */
      openTime: string | null
      /** @description 閉店時刻（HH:mm形式）。休業日の場合はnull */
      closeTime: string | null
      /** @description 休業日かどうかを示すフラグ。 */
      isHoliday: boolean
      /** @description 祝日名称や社内呼称などの休業理由。通常営業日または理由不要の場合はnull */
      holidayName: string | null
      /** @description 備考や注意事項。特記事項がない場合はnull */
      notes: string | null
    }
    /**
     * Format: uuid
     * @description サプライヤー発注・仕入れオーダーを識別するブランド付きUUID。
     */
    'Models.OrderId': string
    /** @description 発注明細の詳細情報 */
    'Models.OrderItem': {
      /** @description 紐づく在庫 ID */
      inventoryId: components['schemas']['Models.InventoryId']
      /** @description 商品コード */
      productCode: string
      /** @description 商品名 */
      productName: string
      /**
       * Format: float
       * @description 発注数量
       */
      quantity: number
      /** @description 数量単位 */
      unit: string
      /**
       * Format: float
       * @description 単価
       */
      unitPrice: number
      /**
       * Format: float
       * @description 明細ごとの金額
       */
      totalPrice: number
      /** @description 備考メモ */
      notes?: string
    }
    /**

         * @description

         * 発注ステータス区分 - 商品発注の進行状態を表す区分

         *

         *

         * draft: 下書き - 発注内容を作成中の状態

         *

         * pending: 承認待ち - 発注内容が確定し、承認を待っている状態

         *

         * approved: 承認済み - 責任者により発注が承認された状態

         *

         * ordered: 発注済み - サプライヤーへ正式に発注が行われた状態

         *

         * shipped: 発送済み - サプライヤーから商品が発送された状態

         *

         * delivered: 配送完了 - 商品が到着し、受領が完了した状態

         *

         * cancelled: キャンセル - 発注が取り消された状態

         * @enum {string}

         */

    'Models.OrderStatusType':
      | 'draft'
      | 'pending'
      | 'approved'
      | 'ordered'
      | 'shipped'
      | 'delivered'
      | 'cancelled'
    /** @description 添付ファイル一覧をページネーション付きで返すレスポンスモデル。 */
    'Models.PaginatedAttachments': {
      /** @description 該当ページの添付ファイル配列。 */
      items: components['schemas']['Models.Attachment'][]
      /**
       * Format: int32
       * @description 全体の添付ファイル件数。
       */
      total: number
      /**
       * Format: int32
       * @description 現在のページ番号。
       */
      page: number
      /**
       * Format: int32
       * @description 1ページあたりの取得件数。
       */
      limit: number
      /**
       * Format: int32
       * @description 計算された総ページ数。
       */
      totalPages: number
    }
    /** @description ページ遷移に利用するリンク情報モデル。
     *     API クライアントや外部連携がRESTフローで次・前のリソースを辿る際に利用する。 */
    'Models.PaginationLinks': {
      /** @description 現在ページを指すリンク。 */
      self: string
      /** @description 最初のページへのリンク。総件数が確定しない場合はnull */
      first: string | null
      /** @description 最後のページへのリンク。カーソル算出ができない場合はnull */
      last: string | null
      /** @description 次ページへのリンク。最終ページの場合はnull */
      next: string | null
      /** @description 前ページへのリンク。初回ページまたは戻り操作が不要な場合はnull */
      prev: string | null
    }
    /** @description ページネーションに関する統計情報モデル。
     *     総件数やカーソル位置を保持し、フロントエンドの続き取得や無限スクロールの制御に利用する。 */
    'Models.PaginationMeta': {
      /**
       * Format: int32
       * @description 取得対象全体の総件数。件数計測ができない場合はnull
       */
      total: number | null
      /**
       * Format: int32
       * @description 1ページあたりの取得件数。クエリパラメータ `limit` と一致する。
       */
      limit: number
      /** @description 次ページが存在するかを示すフラグ。無限スクロールの継続判定に使用。 */
      hasMore: boolean
      /** @description 現在ページのカーソル値。次リクエストで `cursor` に指定することで同位置から再開できる。初回ページの場合はnull */
      cursor: string | null
      /** @description 次ページを取得するためのカーソル値。最終ページの場合はnull */
      nextCursor: string | null
      /** @description 前ページへ戻るためのカーソル値。初回ページまたは戻り操作が不要な場合はnull */
      prevCursor: string | null
    }
    /** @description 部分返金済み状態の詳細 */
    'Models.PartialRefundPaymentStatus': {
      /**
       * @description 状態種別（partial_refund 固定値）
       * @enum {string}
       */
      type: 'partial_refund'
      /**
       * Format: date-time
       * @description 返金が行われた日時
       */
      refundedAt: string
      /** @description 返金された金額 */
      refundAmount: components['schemas']['Models.Money']
      /** @description 返金後に残る請求金額 */
      remainingAmount: components['schemas']['Models.Money']
      /** @description 関連する返金 ID */
      refundId: components['schemas']['Models.RefundId']
    }
    /** @description 部分返金済み状態の詳細 */
    'Models.PartialRefundPaymentStatusUpdate': {
      /**
       * @description 状態種別（partial_refund 固定値）
       * @enum {string}
       */
      type?: 'partial_refund'
      /**
       * Format: date-time
       * @description 返金が行われた日時
       */
      refundedAt?: string
      /** @description 返金された金額 */
      refundAmount?: components['schemas']['Models.MoneyUpdate']
      /** @description 返金後に残る請求金額 */
      remainingAmount?: components['schemas']['Models.MoneyUpdate']
      /** @description 関連する返金 ID */
      refundId?: components['schemas']['Models.RefundId']
    }
    /** @description パスワード再設定リクエストの状態管理モデル。 */
    'Models.PasswordResetStateDetail': {
      /** @description 現在のリセット状態区分。 */
      type: components['schemas']['Models.PasswordResetStateType']
      /** @description リセット手続きに使用するトークン。リセットが要求されていない場合はnull。 */
      token: string | null
      /**
       * Format: date-time
       * @description トークンの有効期限。リセットが要求されていない場合はnull。
       */
      expiresAt: string | null
      /**
       * Format: date-time
       * @description リセットを要求した日時。リセットが要求されていない場合はnull。
       */
      requestedAt: string | null
      /**
       * Format: date-time
       * @description リセット完了日時。パスワードリセットが未完了の場合はnull。
       */
      completedAt: string | null
    }
    /**

         * @description

         * パスワードリセット状態区分 - パスワードリセットの進行状態を表す区分

         *

         *

         * none: なし - パスワードリセットが要求されていない状態

         *

         * requested: リクエスト中 - パスワードリセットが要求された状態

         *

         * completed: 完了 - パスワードリセットが完了した状態

         * @enum {string}

         */

    'Models.PasswordResetStateType': 'none' | 'requested' | 'completed'
    /** @description サロンで発生する支払いを管理する決済記録 */
    'Models.Payment': {
      /** @description 決済レコード ID */
      id: components['schemas']['Models.PaymentId']
      /** @description 決済が紐づくサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 支払いを行う顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 関連する予約 ID */
      bookingId: (string & components['schemas']['Models.BookingId']) | null
      /** @description 関連する施術記録 ID */
      treatmentRecordId:
        | (string & components['schemas']['Models.TreatmentRecordId'])
        | null
      /** @description 使用した支払い方法 */
      method: components['schemas']['Models.PaymentMethodType']
      /** @description 現在の支払い状態の詳細 */
      status: components['schemas']['Models.PaymentStatus']
      /** @description 請求金額の内訳情報 */
      amounts: components['schemas']['Models.PaymentAmounts']
      /**
       * Format: int32
       * @description 使用したポイント数
       */
      pointsUsed: number | null
      /** @description 予約時に適用した預り金額 */
      depositApplied: components['schemas']['Models.Money'] | null
      /** @description 未収残高がある場合の金額 */
      outstandingAmount: components['schemas']['Models.Money'] | null
      /** @description 外部決済サービスの参照番号 */
      externalReference: string | null
      /** @description 発行したレシート番号 */
      receiptNumber: string | null
      /** @description 状態変遷の履歴一覧 */
      history: components['schemas']['Models.PaymentHistory'][]
      /** @description 関連する返金記録の一覧 */
      refunds: components['schemas']['Models.Refund'][] | null
      /** @description 外部サービス連携向けのメタデータ */
      metadata: {
        [key: string]: unknown
      } | null
      /** @description スタッフ用の備考メモ */
      notes: string | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 請求金額の内訳 */
    'Models.PaymentAmounts': {
      /** @description サービス代金の税抜合計 */
      billed: components['schemas']['Models.Money']
      /** @description 課税対象額に対する税額 */
      tax: components['schemas']['Models.Money'] | null
      /** @description 割引金額の合計 */
      discount: components['schemas']['Models.Money'] | null
      /** @description チップとして受領する金額 */
      tip: components['schemas']['Models.Money'] | null
      /** @description 最終的な支払金額 */
      totalPayable: components['schemas']['Models.Money']
    }
    /** @description 支払金額の内訳プレビュー */
    'Models.PaymentBreakdown': {
      /** @description 商品の税抜小計 */
      subtotal: components['schemas']['Models.Money']
      /** @description 適用される税額 */
      tax: components['schemas']['Models.Money']
      /** @description 割引金額 */
      discount: components['schemas']['Models.Money']
      /** @description ポイント適用による割引額 */
      pointsDiscount: components['schemas']['Models.Money'] | null
      /** @description 支払総額 */
      total: components['schemas']['Models.Money']
    }
    /** @description 決済登録時に利用する入力モデル */
    'Models.PaymentCreateRequest': {
      /** @description 決済を登録するサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 支払う顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 紐づく予約 ID */
      bookingId?: components['schemas']['Models.BookingId']
      /** @description 紐づく施術記録 ID */
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      /** @description 利用する支払い方法 */
      method: components['schemas']['Models.PaymentMethodType']
      /** @description 請求金額の内訳 */
      amounts: components['schemas']['Models.PaymentAmounts']
      /**
       * Format: int32
       * @description 使用するポイント数
       */
      pointsUsed?: number
      /** @description 適用する預り金額 */
      depositApplied?: components['schemas']['Models.Money']
      /** @description 外部決済参照番号 */
      externalReference?: string
      /** @description 備考メモ */
      notes?: string
      /** @description 外部システム連携向けメタデータ */
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description 決済状態の変更履歴 */
    'Models.PaymentHistory': {
      /** @description 履歴イベント ID */
      eventId: string
      /** @description 対象となる決済 ID */
      paymentId: components['schemas']['Models.PaymentId']
      /** @description 変更後の支払い状態 */
      status: components['schemas']['Models.PaymentStatus']
      /**
       * Format: date-time
       * @description 変更が発生した日時
       */
      occurredAt: string
      /**
       * @description 操作主体の区分
       * @enum {string|null}
       */
      actor: 'system' | 'staff' | 'customer' | null
      /** @description 操作主体の ID */
      actorId: string | null
      /** @description 変更内容の補足メモ */
      note: string | null
      /** @description 履歴に紐づく追加メタデータ */
      metadata: {
        [key: string]: unknown
      } | null
    }
    /**
     * Format: uuid
     * @description 決済取引や請求のレコードを識別するブランド付きUUID。
     */
    'Models.PaymentId': string
    /**

         * @description

         * 支払い方法区分 - サロンで利用可能な決済手段の種類

         *

         *

         * cash: 現金 - 現金による支払い

         *

         * credit_card: クレジットカード - クレジットカードによる支払い

         *

         * debit_card: デビットカード - 銀行口座から直接引き落としのカード支払い

         *

         * e_money: 電子マネー - Suica、PASMO等の電子マネーによる支払い

         *

         * qr_payment: QRコード決済 - PayPay、LINE Pay等のQRコード決済

         *

         * bank_transfer: 銀行振込 - 銀行口座への振込による支払い

         *

         * point: ポイント - サロンのポイントを使用した支払い

         * @enum {string}

         */

    'Models.PaymentMethodType':
      | 'cash'
      | 'credit_card'
      | 'debit_card'
      | 'e_money'
      | 'qr_payment'
      | 'bank_transfer'
      | 'point'
    /** @description 決済前の支払見積情報 */
    'Models.PaymentPreview': {
      /** @description 見積対象のサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 見積対象の顧客 ID */
      customerId: (string & components['schemas']['Models.CustomerId']) | null
      /** @description 関連する予約 ID */
      bookingId: (string & components['schemas']['Models.BookingId']) | null
      /** @description 金額内訳のプレビュー */
      breakdown: components['schemas']['Models.PaymentBreakdown']
      /** @description 推奨する支払い方法の一覧 */
      recommendedMethods: components['schemas']['Models.PaymentMethodType'][]
      /** @description 顧客・スタッフ向けの備考 */
      notes: string | null
    }
    /** @description 支払い状態の詳細情報を表すユニオン */
    'Models.PaymentStatus':
      | components['schemas']['Models.PendingPaymentStatus']
      | components['schemas']['Models.ProcessingPaymentStatus']
      | components['schemas']['Models.CompletedPaymentStatus']
      | components['schemas']['Models.FailedPaymentStatus']
      | components['schemas']['Models.RefundedPaymentStatus']
      | components['schemas']['Models.PartialRefundPaymentStatus']
    /**

         * @description

         * 支払いステータス区分 - 決済処理の進行状態を表す区分

         *

         *

         * pending: 支払い待ち - 支払いが開始されたがまだ完了していない状態

         *

         * processing: 処理中 - 決済処理が進行中の状態

         *

         * completed: 完了 - 支払いが正常に完了した状態

         *

         * failed: 失敗 - 支払い処理が失敗した状態

         *

         * refunded: 返金済み - 全額返金が完了した状態

         *

         * partial_refund: 部分返金 - 一部金額の返金が完了した状態

         * @enum {string}

         */

    'Models.PaymentStatusCodeType':
      | 'pending'
      | 'processing'
      | 'completed'
      | 'failed'
      | 'refunded'
      | 'partial_refund'
    /** @description 支払い状態の詳細情報を表すユニオン */
    'Models.PaymentStatusUpdate':
      | components['schemas']['Models.PendingPaymentStatusUpdate']
      | components['schemas']['Models.ProcessingPaymentStatusUpdate']
      | components['schemas']['Models.CompletedPaymentStatusUpdate']
      | components['schemas']['Models.FailedPaymentStatusUpdate']
      | components['schemas']['Models.RefundedPaymentStatusUpdate']
      | components['schemas']['Models.PartialRefundPaymentStatusUpdate']
    /** @description 決済情報の更新入力モデル */
    'Models.PaymentUpdateRequest': {
      /** @description 変更後の支払い方法 */
      method?: components['schemas']['Models.PaymentMethodType']
      /** @description 変更後の支払い状態 */
      status?: components['schemas']['Models.PaymentStatusUpdate']
      /** @description 再計算した未収残高 */
      outstandingAmount?: components['schemas']['Models.MoneyUpdate']
      /** @description 更新後の預り金額（null 指定で解除） */
      depositApplied?: components['schemas']['Models.MoneyUpdate'] | null
      /** @description 更新後の外部参照番号（null 指定で解除） */
      externalReference?: string | null
      /** @description 更新後のレシート番号（null 指定で解除） */
      receiptNumber?: string | null
      /** @description 更新後の備考（null 指定で解除） */
      notes?: string | null
      /** @description 更新後のメタデータ（null 指定で解除） */
      metadata?: {
        [key: string]: unknown
      } | null
    }
    /** @description 予約が確認待ち段階にある場合の状態情報。 */
    'Models.PendingBookingStatus': {
      /**
       * @description 固定値pending。保留状態であることを示す。
       * @enum {string}
       */
      type: 'pending'
      /**
       * Format: date-time
       * @description 顧客から予約リクエストを受け付けた日時。
       */
      requestedAt: string
      /**
       * Format: date-time
       * @description 保留状態の有効期限。無期限の場合はnull。
       */
      holdExpiresAt: string | null
      /** @description 仮割り当てされたスタッフID。スタッフが未確定の場合はnull。 */
      assignedStaffId: (string & components['schemas']['Models.StaffId']) | null
    }
    /** @description 予約が確認待ち段階にある場合の状態情報。 */
    'Models.PendingBookingStatusUpdate': {
      /**
       * @description 固定値pending。保留状態であることを示す。
       * @enum {string}
       */
      type?: 'pending'
      /**
       * Format: date-time
       * @description 顧客から予約リクエストを受け付けた日時。
       */
      requestedAt?: string
      /**
       * Format: date-time
       * @description 保留状態の有効期限。無期限の場合はnull。
       */
      holdExpiresAt?: string | null
      /** @description 仮割り当てされたスタッフID。スタッフが未確定の場合はnull。 */
      assignedStaffId?:
        | (string & components['schemas']['Models.StaffId'])
        | null
    }
    /** @description 支払い待ち状態の詳細 */
    'Models.PendingPaymentStatus': {
      /**
       * @description 状態種別（pending 固定値）
       * @enum {string}
       */
      type: 'pending'
      /**
       * Format: date-time
       * @description 支払いが登録された日時
       */
      createdAt: string
    }
    /** @description 支払い待ち状態の詳細 */
    'Models.PendingPaymentStatusUpdate': {
      /**
       * @description 状態種別（pending 固定値）
       * @enum {string}
       */
      type?: 'pending'
      /**
       * Format: date-time
       * @description 支払いが登録された日時
       */
      createdAt?: string
    }
    /**

         * @description

         * パーマサブカテゴリー区分 - パーマネントサービスの詳細分類

         *

         *

         * regular_perm: 通常パーマ - コールドパーマ等の標準的なパーマ

         *

         * digital_perm: デジタルパーマ - 熱を使った形状記憶パーマ

         *

         * spiral_perm: スパイラルパーマ - 螺旋状の強いカールを作るパーマ

         *

         * body_wave: ボディウェーブ - 大きなウェーブを作るパーマ

         *

         * straightening: ストレートパーマ - 縮毛矯正や髪をストレートにする施術

         * @enum {string}

         */

    'Models.PermSubCategoryType':
      | 'regular_perm'
      | 'digital_perm'
      | 'spiral_perm'
      | 'body_wave'
      | 'straightening'
    /** @description 操作権限の定義 */
    'Models.Permission': {
      /** @description 権限 ID */
      id: components['schemas']['Models.PermissionId']
      /** @description 権限キー（例: booking.create） */
      key: string
      /** @description 権限の名称 */
      name: string
      /** @description 権限の説明 - 自明な権限や説明不要な基本権限の場合はnull */
      description: string | null
      /** @description 対象リソース種別 */
      resource: string
      /** @description 許可する操作区分 */
      action: string
      /**
       * @description 権限の適用範囲（own/salon/all） - 範囲指定が不要なグローバル権限の場合はnull
       * @enum {string|null}
       */
      scope: 'own' | 'salon' | 'all' | null
    }
    /** @description 複数権限の保有状況を確認する入力モデル */
    'Models.PermissionCheckRequest': {
      /** @description 確認対象のユーザー ID */
      userId: string
      /** @description 確認したい権限キー一覧 */
      permissions: string[]
      /** @description サロン単位の権限チェック時のサロン ID */
      salonId?: components['schemas']['Models.SalonId']
    }
    /** @description 権限チェックの結果モデル */
    'Models.PermissionCheckResult': {
      /** @description 確認対象のユーザー ID */
      userId: string
      /** @description 各権限の判定結果一覧 */
      permissions: components['schemas']['Models.PermissionStatus'][]
    }
    /**
     * Format: uuid
     * @description アクセス許可や操作権限を識別するブランド付きUUID。
     */
    'Models.PermissionId': string
    /** @description 個別権限の判定結果 */
    'Models.PermissionStatus': {
      /** @description 権限キー */
      permission: string
      /** @description 権限が付与されているかどうか */
      granted: boolean
      /** @description 権限を付与したロール情報 - 権限が付与されていない場合はnull */
      source: string | null
    }
    /** @description 顧客ロイヤルティポイントの累積状況を表すモデル。 */
    'Models.PointInfo': {
      /**
       * Format: int32
       * @description 現在保持している有効ポイント数。
       */
      currentPoints: number
      /**
       * Format: int32
       * @description 累計で獲得したポイント総数。
       */
      totalEarnedPoints: number
      /**
       * Format: int32
       * @description 累計で利用（消費）したポイント総数。
       */
      totalUsedPoints: number
      /**
       * Format: int32
       * @description 失効予定のポイント数。失効予定がない場合はnull
       */
      expiringPoints: number | null
      /**
       * Format: date-time
       * @description 最も早く失効するポイントの失効日。失効予定がない場合はnull
       */
      expirationDate: string | null
    }
    /** @description 顧客ポイントの付与・利用履歴 */
    'Models.PointTransaction': {
      /** @description ポイント取引 ID */
      id: components['schemas']['Models.PointTransactionId']
      /** @description 対象顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /**
       * @description 取引種別（獲得・利用など）
       * @enum {string}
       */
      type: 'earn' | 'use' | 'expire' | 'adjust'
      /**
       * Format: int32
       * @description ポイント変動量（獲得は正、利用は負）
       */
      points: number
      /**
       * Format: int32
       * @description 取引後のポイント残高
       */
      balanceAfter: number
      /** @description 関連する決済 ID */
      paymentId: (string & components['schemas']['Models.PaymentId']) | null
      /** @description 関連する予約 ID */
      bookingId: (string & components['schemas']['Models.BookingId']) | null
      /** @description 取引内容の説明 */
      description: string
      /**
       * Format: date-time
       * @description 獲得ポイントの有効期限
       */
      expiresAt: string | null
      /**
       * Format: date-time
       * @description 取引発生日時
       */
      transactedAt: string
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description ポイント取引を登録する入力モデル */
    'Models.PointTransactionCreateRequest': {
      /** @description 対象顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /**
       * @description ポイント取引種別
       * @enum {string}
       */
      type: 'earn' | 'use' | 'expire' | 'adjust'
      /**
       * Format: int32
       * @description ポイント変動量
       */
      points: number
      /** @description 関連する決済 ID */
      paymentId?: components['schemas']['Models.PaymentId']
      /** @description 関連する予約 ID */
      bookingId?: components['schemas']['Models.BookingId']
      /** @description 取引内容の説明 */
      description: string
      /**
       * Format: date-time
       * @description ポイントの有効期限
       */
      expiresAt?: string
    }
    /**
     * Format: uuid
     * @description 顧客ポイントの加算・減算履歴を識別するブランド付きUUID。
     */
    'Models.PointTransactionId': string
    /** @description 過去施術の履歴 */
    'Models.PreviousTreatment': {
      /** @description 施術タイプ */
      treatment: components['schemas']['Models.TreatmentType']
      /**
       * Format: date-time
       * @description 施術日
       */
      date: string
      /** @description 施術を受けたサロン名 - 自店での施術や不明な場合はnull */
      salonName: string | null
      /** @description 施術に関するメモ - 特記事項がない通常の過去施術の場合はnull */
      notes: string | null
    }
    /** @description 金額レンジで絞り込むための共通クエリモデル。 */
    'Models.PriceRangeFilter': {
      /**
       * Format: float
       * @description 下限価格。未指定の場合は制限なし。
       */
      minPrice?: number
      /**
       * Format: float
       * @description 上限価格。未指定の場合は制限なし。
       */
      maxPrice?: number
    }
    /** @description 段階制価格の設定情報 */
    'Models.PriceTier': {
      /** @description 価格段階の名称 */
      name: string
      /** @description 段階の説明。詳細な説明が不要なシンプルな価格設定の場合はnull */
      description: string | null
      /**
       * Format: int32
       * @description 適用価格（税抜）
       */
      price: number
      /**
       * Format: int32
       * @description この段階での施術時間（分）。価格段階による時間変更がない場合はnull
       */
      duration: number | null
      /** @description 適用条件の説明リスト。特別な条件がない場合はnull */
      conditions: string[] | null
    }
    /** @description 料金調整に使用する変動要因 */
    'Models.PricingFactor': {
      /**
       * @description 変動要因の種類
       * @enum {string}
       */
      type: 'day_of_week' | 'time_of_day' | 'staff_level' | 'demand' | 'season'
      /** @description 条件に応じた倍率設定。固定倍率または他の計算方法を使用する場合はnull */
      multipliers: {
        [key: string]: components['schemas']['Models.decimal']
      } | null
      /** @description ピーク時間帯の指定（HH:mm形式）。時間帯による料金変動がない場合はnull */
      peakHours: string[] | null
      /** @description ピーク時間帯に適用する倍率。ピーク時間設定がない場合はnull */
      peakMultiplier: (number & components['schemas']['Models.decimal']) | null
      /**
       * Format: int32
       * @description 需要に応じた閾値設定。需要ベースの料金調整を行わない場合はnull
       */
      threshold: number | null
      /** @description 季節要因の詳細設定。季節による価格変動がない場合はnull */
      seasons: components['schemas']['Models.Season'][] | null
    }
    /** @description 採用している価格戦略の詳細 */
    'Models.PricingStrategyDetail': {
      /** @description 価格戦略タイプ */
      type: components['schemas']['Models.PricingStrategyType']
      /**
       * Format: int32
       * @description 固定価格型の場合の金額。固定価格戦略以外の場合はnull
       */
      amount: number | null
      /** @description 段階価格の設定一覧。段階価格戦略以外の場合はnull */
      tiers: components['schemas']['Models.PriceTier'][] | null
      /**
       * Format: int32
       * @description 基準価格。動的価格やカスタム価格など基準価格を持たない戦略の場合はnull
       */
      basePrice: number | null
      /** @description 価格変動要因の設定。動的価格戦略以外の場合はnull */
      factors: components['schemas']['Models.PricingFactor'][] | null
      /** @description セット対象となるサービス ID。パッケージ価格戦略以外の場合はnull */
      services: components['schemas']['Models.ServiceId'][] | null
      /** @description 割引率（%）。割引設定がない、または固定額割引の場合はnull */
      discountRate: (number & components['schemas']['Models.decimal']) | null
      /**
       * Format: int32
       * @description 会員向け特別価格。会員価格戦略以外の場合はnull
       */
      memberPrice: number | null
      /**
       * Format: int32
       * @description 非会員向け価格。会員価格戦略以外の場合はnull
       */
      nonMemberPrice: number | null
      /** @description 戦略の説明。説明が不要な標準的な価格戦略の場合はnull */
      description: string | null
    }
    /**

         * @description

         * 価格戦略タイプ区分 - サービスの価格設定方法を定義

         *

         *

         * fixed: 固定価格 - 常に同じ価格で提供

         *

         * tiered: 段階価格 - 条件によって価格が変わる段階制

         *

         * dynamic: 動的価格 - 需要や時間帯によって変動する価格

         *

         * package: パッケージ価格 - 複数サービスをセットで提供

         *

         * membership: 会員価格 - 会員ランクに応じた特別価格

         *

         * custom: カスタム価格 - 個別に設定される特別価格

         * @enum {string}

         */

    'Models.PricingStrategyType':
      | 'fixed'
      | 'tiered'
      | 'dynamic'
      | 'package'
      | 'membership'
      | 'custom'
    /** @description RFC 7807 に準拠した標準エラーレスポンスモデル。
     *     美容サロン予約システム全体で一貫したエラー情報を提供し、顧客・スタッフ双方の操作ログと連携する。 */
    'Models.ProblemDetails': {
      /** @description エラー種別を特定するための URI。参照することで関連ドキュメントに誘導できる。 */
      type: string
      /** @description ユーザーに短く要点を伝えるエラー概要メッセージ。 */
      title: string
      /**
       * Format: int32
       * @description レスポンスに付与される HTTP ステータスコード。
       */
      status: number
      /** @description 今回の発生状況に固有の詳細説明。サポート対応時の一次情報となる。詳細が不要な場合はnull */
      detail: string | null
      /** @description この事象を一意に識別するための URI。監査ログやダッシュボードと連携する。URIが不要な場合はnull */
      instance: string | null
      /** @description システム全体で共有する機械判読可能なエラーコード。画面表示や分岐処理に使用する。 */
      code: components['schemas']['Models.ErrorCodeType']
      /** @description フィールド単位の検証エラーなど、追加のエラー詳細情報一覧。検証エラーがない場合はnull */
      errors: components['schemas']['Models.ValidationError'][] | null
      /** @description 障害調査や問い合わせで利用する相関 ID。リクエスト単位で一意。相関IDが不要な場合はnull */
      correlationId: string | null
      /**
       * Format: date-time
       * @description エラー発生日時 (UTC)。サーバーログの検索キーとして使用する。
       */
      timestamp: string
    }
    /** @description 決済処理中の状態の詳細 */
    'Models.ProcessingPaymentStatus': {
      /**
       * @description 状態種別（processing 固定値）
       * @enum {string}
       */
      type: 'processing'
      /**
       * Format: date-time
       * @description 処理開始日時
       */
      startedAt: string
      /** @description 処理を担当しているスタッフ ID */
      processorId: (string & components['schemas']['Models.StaffId']) | null
    }
    /** @description 決済処理中の状態の詳細 */
    'Models.ProcessingPaymentStatusUpdate': {
      /**
       * @description 状態種別（processing 固定値）
       * @enum {string}
       */
      type?: 'processing'
      /**
       * Format: date-time
       * @description 処理開始日時
       */
      startedAt?: string
      /** @description 処理を担当しているスタッフ ID */
      processorId?: (string & components['schemas']['Models.StaffId']) | null
    }
    /** @description 仕入れ発注の基本情報 */
    'Models.PurchaseOrder': {
      /** @description 発注 ID */
      id: components['schemas']['Models.OrderId']
      /** @description 発注を行うサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 発注番号 */
      orderNumber: string
      /** @description 仕入先名 */
      supplier: string
      /** @description 発注ステータス区分 */
      status: components['schemas']['Models.OrderStatusType']
      /** @description 発注明細の一覧 */
      items: components['schemas']['Models.OrderItem'][]
      /**
       * Format: float
       * @description 税抜小計金額
       */
      subtotal: number
      /**
       * Format: float
       * @description 税額
       */
      taxAmount: number
      /**
       * Format: float
       * @description 送料
       */
      shippingCost: number | null
      /**
       * Format: float
       * @description 発注合計金額
       */
      totalAmount: number
      /**
       * Format: date-time
       * @description 発注日
       */
      orderDate: string
      /**
       * Format: date-time
       * @description 予定納期
       */
      expectedDelivery: string | null
      /**
       * Format: date-time
       * @description 実際の納品日
       */
      actualDelivery: string | null
      /** @description 納品に関するメモ */
      deliveryNotes: string | null
      /** @description 支払条件 */
      paymentTerms: string | null
      /** @description その他備考 */
      notes?: string
      /** @description 発注承認を行ったスタッフ ID */
      approvedBy: (string & components['schemas']['Models.StaffId']) | null
      /**
       * Format: date-time
       * @description 承認日時
       */
      approvedAt: string | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 仕入れ発注を作成する入力モデル */
    'Models.PurchaseOrderCreateRequest': {
      /** @description 仕入先名 */
      supplier: string
      /** @description 発注明細一覧 */
      items: components['schemas']['Models.OrderItem'][]
      /**
       * Format: float
       * @description 税額
       */
      taxAmount: number
      /**
       * Format: float
       * @description 送料
       */
      shippingCost: number | null
      /**
       * Format: date-time
       * @description 予定納期
       */
      expectedDelivery: string | null
      /** @description 支払条件 */
      paymentTerms: string | null
      /** @description 備考メモ */
      notes: string | null
    }
    /** @description 仕入れ発注の更新入力モデル */
    'Models.PurchaseOrderUpdateRequest': {
      /** @description 更新後の発注ステータス */
      status?: components['schemas']['Models.OrderStatusType']
      /**
       * Format: date-time
       * @description 更新後の予定納期
       */
      expectedDelivery?: string | null
      /**
       * Format: date-time
       * @description 実際の納品日
       */
      actualDelivery?: string | null
      /** @description 納品関連の備考 */
      deliveryNotes?: string | null
      /** @description その他の備考 */
      notes?: string
    }
    /** @description レート制限に関する HTTP ヘッダ情報モデル。
     *     API 呼び出し頻度をクライアントに通知し、適切なリトライ制御を促す。 */
    'Models.RateLimitInfo': Record<string, never>
    /** @description 返金処理の記録 */
    'Models.Refund': {
      /** @description 返金 ID */
      id: components['schemas']['Models.RefundId']
      /** @description 元となる決済 ID */
      paymentId: components['schemas']['Models.PaymentId']
      /** @description 返金金額 */
      amount: components['schemas']['Models.Money']
      /** @description 返金理由 */
      reason: string
      /**
       * Format: date-time
       * @description 返金処理日時
       */
      refundedAt: string
      /**
       * @description 返金処理の進捗状態
       * @enum {string}
       */
      status: 'requested' | 'processing' | 'completed' | 'failed'
      /** @description 返金処理を担当したスタッフ ID */
      processedBy: (string & components['schemas']['Models.StaffId']) | null
      /** @description 返金に使用した支払い方法 */
      method: components['schemas']['Models.PaymentMethodType'] | null
      /** @description 外部返金参照コード */
      referenceCode: string | null
      /** @description 返金処理に関する備考 */
      notes: string | null
    }
    /** @description 返金処理を開始するための入力モデル */
    'Models.RefundCreateRequest': {
      /** @description 対象となる決済 ID */
      paymentId: components['schemas']['Models.PaymentId']
      /** @description 返金する金額 */
      amount: components['schemas']['Models.Money']
      /** @description 返金理由の説明 */
      reason: string
      /** @description 外部返金参照コード */
      referenceCode?: string
      /** @description 返金を担当するスタッフ ID */
      processedBy?: components['schemas']['Models.StaffId']
      /** @description 返金に関する備考 */
      notes?: string
    }
    /**
     * Format: uuid
     * @description 返金処理のトランザクションを識別するブランド付きUUID。
     */
    'Models.RefundId': string
    /** @description 全額返金済み状態の詳細 */
    'Models.RefundedPaymentStatus': {
      /**
       * @description 状態種別（refunded 固定値）
       * @enum {string}
       */
      type: 'refunded'
      /**
       * Format: date-time
       * @description 返金が完了した日時
       */
      refundedAt: string
      /** @description 返金金額 */
      refundAmount: components['schemas']['Models.Money']
      /** @description 関連する返金 ID */
      refundId: (string & components['schemas']['Models.RefundId']) | null
    }
    /** @description 全額返金済み状態の詳細 */
    'Models.RefundedPaymentStatusUpdate': {
      /**
       * @description 状態種別（refunded 固定値）
       * @enum {string}
       */
      type?: 'refunded'
      /**
       * Format: date-time
       * @description 返金が完了した日時
       */
      refundedAt?: string
      /** @description 返金金額 */
      refundAmount?: components['schemas']['Models.MoneyUpdate']
      /** @description 関連する返金 ID */
      refundId?: (string & components['schemas']['Models.RefundId']) | null
    }
    /**

         * @description

         * リマインダータイミング区分 - 予約リマインダーを送信するタイミングの設定

         *

         *

         * one_day_before: 1日前 - 予約日の24時間前に通知

         *

         * three_hours_before: 3時間前 - 予約時刻の3時間前に通知

         *

         * one_hour_before: 1時間前 - 予約時刻の1時間前に通知

         *

         * thirty_minutes_before: 30分前 - 予約時刻の30分前に通知

         * @enum {string}

         */

    'Models.ReminderTimingType':
      | 'one_day_before'
      | 'three_hours_before'
      | 'one_hour_before'
      | 'thirty_minutes_before'
    /** @description 予約モデル - 顧客がサロンに依頼した施術予約の全情報を保持し、日時・担当者・料金・支払い状態を一元管理する中核レコード */
    'Models.Reservation': {
      /** @description 予約を一意に識別するID */
      id: components['schemas']['Models.ReservationId']
      /** @description 予約が紐づくサロンのID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 予約を行った顧客のID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 施術を担当するスタッフのID */
      staffId: components['schemas']['Models.StaffId']
      /** @description 予約された施術メニューのID */
      serviceId: components['schemas']['Models.ServiceId']
      /**
       * Format: date-time
       * @description 施術開始予定日時 (UTC)
       */
      startTime: string
      /**
       * Format: date-time
       * @description 施術終了予定日時 (UTC)
       */
      endTime: string
      /** @description 予約の現在ステータスを表す区分値 */
      status: components['schemas']['Models.ReservationStatusType']
      /** @description 顧客からの特記事項やサロン側メモ - 特記事項がない標準予約の場合はnull */
      notes: string | null
      /**
       * Format: int32
       * @description 施術料金の合計金額 (税・割引適用後)
       */
      totalAmount: number
      /**
       * Format: int32
       * @description 事前に受領した内金・デポジット金額 - 内金不要な予約や当日払いの場合はnull
       */
      depositAmount: number | null
      /** @description 予約に対する決済が完了しているかを示すフラグ */
      isPaid: boolean
      /** @description キャンセルが発生した場合の理由 - キャンセルされていない予約や理由未記録の場合はnull */
      cancellationReason: string | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 予約詳細モデル - 基本予約情報に顧客・スタッフ・メニュー名称やカテゴリなどの表示用情報を付加した拡張ビュー */
    'Models.ReservationDetail': {
      /** @description 顧客の表示名 */
      customerName: string
      /** @description 担当スタッフの表示名 */
      staffName: string
      /** @description 施術メニューの名称 */
      serviceName: string
      /** @description 施術メニューが属するカテゴリ区分 */
      serviceCategory: components['schemas']['Models.ServiceCategoryType']
      /**
       * Format: int32
       * @description 施術メニューの所要時間 (分)
       */
      serviceDuration: number
    } & components['schemas']['Models.Reservation']
    /**
     * Format: uuid
     * @description 予約申込レコードを識別するためのブランド付きUUID。
     */
    'Models.ReservationId': string
    /**

         * @description

         * 予約ステータス区分 - 予約の進行状態を表す状態定義

         *

         *

         * pending: 保留中 - 予約申込を受け付けたが、まだ確定していない状態

         *

         * confirmed: 確定済み - サロン側で予約が承認・確定された状態

         *

         * cancelled: キャンセル済み - 顧客またはサロン側により予約が取り消された状態

         *

         * completed: 完了 - 予約された施術が実施され、サービス提供が完了した状態

         *

         * no_show: 無断キャンセル - 顧客が事前連絡なしに来店しなかった状態

         * @enum {string}

         */

    'Models.ReservationStatusType':
      | 'pending'
      | 'confirmed'
      | 'cancelled'
      | 'completed'
      | 'no_show'
    /** @description レスポンス共通メタデータモデル。
     *     問い合わせ対応やロギングで必要となる識別情報を保持する。 */
    'Models.ResponseMeta': {
      /** @description リクエストを一意に紐づける相関 ID。ログ横断調査に使用する。 */
      correlationId: string
      /**
       * Format: date-time
       * @description レスポンス生成日時 (UTC)。障害時のタイムライン整理に利用。
       */
      timestamp: string
      /** @description レスポンスを返却した API バージョン。 */
      version: string
    } & {
      [key: string]: unknown
    }
    /** @description レビューモデル - 施術後の顧客体験を定量・定性的に記録し、サロン品質の改善と信頼性向上に活用する */
    'Models.Review': {
      /** @description レビューを一意に識別するID */
      id: components['schemas']['Models.ReviewId']
      /** @description レビュー対象のサロンID */
      salonId: components['schemas']['Models.SalonId']
      /** @description レビューを投稿した顧客ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 紐づく来店予約を示すID (DBカラム booking_id と整合) */
      bookingId: components['schemas']['Models.BookingId']
      /** @description 評価対象のスタッフID - セルフサービスやスタッフ特定不要の施術の場合はnull */
      staffId: (string & components['schemas']['Models.StaffId']) | null
      /**
       * Format: int32
       * @description 全体満足度の評価値 (例: 1〜5)
       */
      overallRating: number
      /** @description 自由記述のレビューコメント - 評価のみでコメントなしのシンプルレビューの場合はnull */
      comment: string | null
      /** @description レビュータイトルや要約 - タイトル未設定の簡易レビューの場合はnull */
      title: string | null
      /**
       * Format: int32
       * @description 施術サービスそのものに対する評価値 - 個別評価をしない総合評価のみのレビューの場合はnull
       */
      serviceRating: number | null
      /**
       * Format: int32
       * @description スタッフの接客・技術に対する評価値 - スタッフ評価省略またはセルフサービスの場合はnull
       */
      staffRating: number | null
      /**
       * Format: int32
       * @description 店内の清潔さ・衛生面に対する評価値 - 清潔さ評価を省略したレビューの場合はnull
       */
      cleanlinessRating: number | null
      /**
       * Format: int32
       * @description 価格に対する価値・コストパフォーマンス評価値 - 価格評価を省略したレビューの場合はnull
       */
      valueRating: number | null
      /** @description レビューに添付された画像URLの一覧 - 画像添付なしのテキストのみレビューの場合はnull */
      imageUrls: string[] | null
      /** @description 実来店が確認済みかを表す検証フラグ */
      isVerified: boolean
      /**
       * Format: int32
       * @description レビューが「参考になった」と評価された累積回数
       * @default 0
       */
      helpfulCount: number
      /**
       * Format: int32
       * @description 不適切報告が入った累積回数
       * @default 0
       */
      reportCount: number
      /** @description サロン運営からの公式返信本文 - オーナー未返信のレビューの場合はnull */
      ownerResponse: string | null
      /**
       * Format: date-time
       * @description 運営が返信した日時 (UTC) - オーナー未返信のレビューの場合はnull
       */
      ownerRespondedAt: string | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description レビュー作成リクエスト - 顧客が新規レビュー投稿時に入力する評価情報と任意コメント・画像を受け取る */
    'Models.ReviewCreateRequest': {
      /** @description レビュー対象のサロンID */
      salonId: components['schemas']['Models.SalonId']
      /** @description レビュー投稿者の顧客ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 紐づく来店予約ID (booking_id) */
      bookingId: components['schemas']['Models.BookingId']
      /** @description 評価対象スタッフのID - セルフサービスやスタッフ特定不要の施術の場合はnull */
      staffId: (string & components['schemas']['Models.StaffId']) | null
      /**
       * Format: int32
       * @description 全体満足度の評価値
       */
      overallRating: number
      /** @description 自由記述のコメント - 評価のみでコメントなしのシンプルレビューの場合はnull */
      comment: string | null
      /** @description レビュータイトル - タイトル未設定の簡易レビューの場合はnull */
      title: string | null
      /**
       * Format: int32
       * @description サービス品質に対する評価値 - 個別評価をしない総合評価のみのレビューの場合はnull
       */
      serviceRating: number | null
      /**
       * Format: int32
       * @description スタッフ対応に対する評価値 - スタッフ評価省略またはセルフサービスの場合はnull
       */
      staffRating: number | null
      /**
       * Format: int32
       * @description 清潔さ・衛生状態に対する評価値 - 清潔さ評価を省略したレビューの場合はnull
       */
      cleanlinessRating: number | null
      /**
       * Format: int32
       * @description 価格に見合う価値の評価値 - 価格評価を省略したレビューの場合はnull
       */
      valueRating: number | null
      /** @description 添付画像のURL一覧 - 画像添付なしのテキストのみレビューの場合はnull */
      imageUrls: string[] | null
    }
    /**
     * Format: uuid
     * @description 顧客レビューや口コミを識別するブランド付きUUID。
     */
    'Models.ReviewId': string
    /** @description レビュー集計モデル - 平均評価や件数分布を保持し、ダッシュボードやランキング表示に活用する */
    'Models.ReviewSummary': {
      /**
       * Format: float
       * @description 全体平均評価 (小数)
       */
      averageRating: number
      /**
       * Format: int32
       * @description レビュー総件数
       */
      totalReviews: number
      /** @description 評価値ごとのレビュー件数分布 */
      ratingDistribution: {
        [key: string]: number
      }
    }
    /** @description レビュー更新リクエスト - 任意項目を部分更新し、既存レビューの評価やコメントを調整する。null指定で値をリセット可能 */
    'Models.ReviewUpdateRequest': {
      /**
       * Format: int32
       * @description 更新後の全体満足度評価
       */
      overallRating?: number
      /** @description 更新後のコメント本文（null指定で初期化可能） */
      comment?: string | null
      /** @description 更新後のレビュータイトル（null指定で初期化可能） */
      title?: string | null
      /**
       * Format: int32
       * @description 更新後のサービス品質評価（null指定で初期化可能）
       */
      serviceRating?: number | null
      /**
       * Format: int32
       * @description 更新後のスタッフ評価（null指定で初期化可能）
       */
      staffRating?: number | null
      /**
       * Format: int32
       * @description 更新後の清潔さ評価（null指定で初期化可能）
       */
      cleanlinessRating?: number | null
      /**
       * Format: int32
       * @description 更新後の価格価値評価（null指定で初期化可能）
       */
      valueRating?: number | null
      /** @description 画像URL一覧の更新内容（null指定で初期化可能） */
      imageUrls?: string[] | null
    }
    /** @description 権限管理におけるロール定義 */
    'Models.Role': {
      /** @description ロール ID */
      id: components['schemas']['Models.RoleId']
      /** @description ロールのシステム内部名 */
      name: string
      /** @description 管理画面などで表示する名称 */
      displayName: string
      /** @description ロールの詳細説明 - システム標準ロールや説明不要なシンプルなロールの場合はnull */
      description: string | null
      /** @description 付与されている権限一覧 */
      permissions: components['schemas']['Models.Permission'][]
      /** @description システム標準ロールかどうか */
      isSystem: boolean
      /** @description ロールが有効状態かどうか */
      isActive: boolean
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description ロール新規作成時の入力モデル */
    'Models.RoleCreateRequest': {
      /** @description ロールの内部名 */
      name: string
      /** @description 表示用のロール名 */
      displayName: string
      /** @description ロール説明文 */
      description?: string
      /** @description 付与する権限 ID リスト */
      permissions: components['schemas']['Models.PermissionId'][]
    }
    /**
     * Format: uuid
     * @description ロールベース権限管理で利用する役割IDを識別するブランド付きUUID。
     */
    'Models.RoleId': string
    /** @description ロール情報の更新入力モデル */
    'Models.RoleUpdateRequest': {
      /** @description 更新後の表示名 */
      displayName?: string
      /** @description 更新後の説明文 */
      description?: string
      /** @description 更新後の権限 ID リスト */
      permissions?: components['schemas']['Models.PermissionId'][]
      /** @description 有効/無効の切り替え */
      isActive?: boolean
    }
    /** @description サービスカテゴリ別の売上集計行 */
    'Models.SalesByCategory': {
      /** @description サービスカテゴリ区分 */
      category: components['schemas']['Models.ServiceCategoryType']
      /** @description 売上金額 */
      amount: components['schemas']['Models.Money']
      /**
       * Format: int32
       * @description 提供件数
       */
      count: number
      /**
       * Format: float
       * @description 総売上に対する構成比率（%）
       */
      percentage: number
    }
    /** @description 支払い方法別の売上集計行 */
    'Models.SalesByMethod': {
      /** @description 支払い方法区分 */
      method: components['schemas']['Models.PaymentMethodType']
      /** @description 売上金額 */
      amount: components['schemas']['Models.Money']
      /**
       * Format: int32
       * @description 取引件数
       */
      count: number
      /**
       * Format: float
       * @description 総売上に対する構成比率（%）
       */
      percentage: number
    }
    /** @description 期間内の売上実績を集計したレポート */
    'Models.SalesReport': {
      /** @description 対象サロン ID */
      salonId: components['schemas']['Models.SalonId']
      /**
       * Format: date-time
       * @description 集計期間の開始日時
       */
      periodStart: string
      /**
       * Format: date-time
       * @description 集計期間の終了日時
       */
      periodEnd: string
      /** @description 総売上額 */
      totalSales: components['schemas']['Models.Money']
      /** @description 累計税額 */
      totalTax: components['schemas']['Models.Money']
      /** @description 累計割引額 */
      totalDiscounts: components['schemas']['Models.Money']
      /** @description 累計返金額 */
      totalRefunds: components['schemas']['Models.Money']
      /** @description 返金考慮後の純売上額 */
      netSales: components['schemas']['Models.Money']
      /**
       * Format: int32
       * @description 取引件数
       */
      transactionCount: number
      /** @description 平均取引単価 */
      averageTransactionValue: components['schemas']['Models.Money']
      /** @description 支払い方法別の売上内訳 */
      salesByMethod: components['schemas']['Models.SalesByMethod'][]
      /** @description サービスカテゴリ別の売上内訳 */
      salesByCategory: components['schemas']['Models.SalesByCategory'][]
      /** @description 売上貢献度の高いスタッフ情報 */
      topStaff: components['schemas']['Models.StaffPerformance'][]
    }
    /** @description サロン基本情報モデル - 美容室の店舗情報、顧客向け公開情報、運営に必要な基礎データを一元管理する */
    'Models.Salon': {
      /** @description サロンを一意に識別するID */
      id: components['schemas']['Models.SalonId']
      /** @description 公式名称またはブランド名称 */
      name: string
      /** @description サロンの特徴やコンセプトを伝える説明文。未設定の場合はnull */
      description: string | null
      /** @description 所在地・アクセス・郵便番号等を含む住所情報 */
      address: components['schemas']['Models.Address']
      /** @description 電話・メール・SNS等の問い合わせ窓口情報 */
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description 曜日別の基本営業時間帯一覧 */
      openingHours: components['schemas']['Models.OpeningHours'][]
      /** @description 季節やキャンペーン等に合わせた営業スケジュール。通常営業時間のみの場合はnull */
      businessHours: components['schemas']['Models.BusinessHours'][] | null
      /** @description 店舗写真や内装画像のURL一覧 */
      imageUrls: string[]
      /** @description 設備・サービス・こだわりポイント等の特徴タグ一覧 */
      features: string[]
      /**
       * Format: float
       * @description 顧客レビューから算出した平均評価。レビュー未登録の場合はnull
       */
      rating: number | null
      /**
       * Format: int32
       * @description 蓄積されたレビュー件数。レビュー未登録の場合はnull
       */
      reviewCount: number | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 指定した条件でサロンの予約枠の空き状況を確認するためのリクエスト */
    'Models.SalonAvailabilityRequest': {
      /** @description 空き状況を確認したいサービスのID */
      serviceId: components['schemas']['Models.ServiceId']
      /**
       * Format: date
       * @description 希望する施術日
       */
      date: string
      /** @description 希望する時間帯。未指定の場合は全時間帯を対象 */
      timeSlot?: components['schemas']['Models.TimeSlot']
      /** @description 指名したいスタッフのID。指名なしの場合はnull */
      staffId?: components['schemas']['Models.StaffId']
      /**
       * Format: int32
       * @description 必要な枠数。デフォルトは1枠
       * @default 1
       */
      slots: number
    }
    /** @description サロンの空き状況照会結果を返すレスポンス */
    'Models.SalonAvailabilityResponse': {
      /** @description 予約可能な時間帯候補一覧 */
      availableSlots: components['schemas']['Models.AvailableTimeSlot'][]
      /**
       * Format: date
       * @description 希望日が満席の場合に提示する次の空き日。空きがない場合はnull
       */
      nextAvailableDate: string | null
      /** @description ウェイトリスト登録の可否 */
      waitlistAvailable: boolean
    }
    /**
     * Format: uuid
     * @description サロン店舗・拠点を識別するためのブランド付きUUID。
     */
    'Models.SalonId': string
    /** @description パーソナライズされたおすすめ度スコアを含むサロン推薦モデル */
    'Models.SalonRecommendation': {
      /**
       * Format: int32
       * @description サロン推薦スコア（0-100）
       */
      score: number
      /** @description 推薦理由のリスト */
      reasons: string[]
      /** @description 要望に合致したサービス一覧 */
      matchingServices: components['schemas']['Models.ServiceSummary'][]
    } & components['schemas']['Models.SalonSummary']
    /** @description サロン運営指標を集計したダッシュボード向けレスポンスモデル */
    'Models.SalonStatistics': {
      /**
       * Format: int32
       * @description 登録されている提供メニューの総数
       */
      totalServices: number
      /**
       * Format: int32
       * @description 在籍スタッフの総数
       */
      totalStaff: number
      /**
       * Format: float
       * @description レビューから算出した平均評価。レビュー未登録の場合はnull
       */
      averageRating: number | null
      /**
       * Format: int32
       * @description 累計レビュー件数
       */
      totalReviews: number
      /**
       * Format: int32
       * @description 当月の予約件数合計
       */
      monthlyBookings: number
      /** @description 当月の売上総額。売上未集計の場合はnull */
      monthlyRevenue: components['schemas']['Models.Money'] | null
      /** @description 人気の高いサービス一覧 */
      popularServices: components['schemas']['Models.ServiceSummary'][]
      /** @description 予約が集中する時間帯の一覧 */
      busyHours: components['schemas']['Models.TimeSlot'][]
    }
    /** @description サロンからの最新情報通知を希望する顧客の購読リクエスト */
    'Models.SalonSubscriptionRequest': {
      /** @description 通知を受け取る顧客ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 希望する通知カテゴリの種類一覧 */
      notificationTypes: components['schemas']['Models.NotificationType'][]
      /** @description 関心の高いサービスカテゴリ。未指定の場合は全カテゴリ対象 */
      categories: components['schemas']['Models.ServiceCategoryType'][]
    }
    /** @description サロン通知購読の作成結果を返すレスポンスモデル */
    'Models.SalonSubscriptionResponse': {
      /** @description 購読設定を一意に識別するID */
      subscriptionId: string
      /**
       * @description 購読状態（常にactiveを返却）
       * @enum {string}
       */
      status: 'active'
      /**
       * Format: date-time
       * @description 購読の有効期限。無期限の場合はnull
       */
      expiresAt: string | null
    }
    /** @description サロン概要モデル - リスト表示や検索結果に必要な要約情報を提供 */
    'Models.SalonSummary': {
      /** @description 対象サロンの一意なID */
      id: components['schemas']['Models.SalonId']
      /** @description 表示用のサロン名称 */
      name: string
      /** @description ユーザーに提示する所在地情報 */
      address: components['schemas']['Models.Address']
      /**
       * Format: float
       * @description レビュー平均値。レビュー未登録の場合はnull
       */
      rating: number | null
      /**
       * Format: int32
       * @description レビュー件数。レビュー未登録の場合はnull
       */
      reviewCount: number | null
    }
    /** @description 検索基準地点からの距離情報を付与したサロンモデル */
    'Models.SalonWithDistance': {
      /**
       * Format: float
       * @description 基準地点からの距離（km）
       */
      distance: number
      /**
       * Format: int32
       * @description 想定移動時間（分）。計算不可の場合はnull
       */
      travelTime: number | null
    } & components['schemas']['Models.Salon']
    /**

         * @description

         * 頭皮状態区分 - 頭皮の状態を分類、適切なケア方法の選択に使用

         *

         *

         * normal: 正常 - 健康的な頭皮状態、特別なケア不要

         *

         * dry: 乾燥 - 乾燥しやすい頭皮、保湿ケアが必要

         *

         * oily: 脂性 - 皮脂分泌が多い頭皮、洗浄力のあるケアが必要

         *

         * sensitive: 敏感 - 刺激に弱い頭皮、低刺激の製品使用が必要

         * @enum {string}

         */

    'Models.ScalpConditionType':
      | 'normal'
      | 'dry'
      | 'oily'
      | 'sensitive'
      | 'dandruff'
    'Models.ScalpInfo': {
      /** @description 頭皮の状態。健康状態やケア必要性の分類 */
      condition: components['schemas']['Models.ScalpConditionType']
      /** @description 頭皮の敏感性リスト。特定の刺激への反応 */
      sensitivities: string[]
      /** @description 頭皮に関する備考。特記事項がない場合はnull */
      notes: string | null
    }
    /** @description スタッフに発生する例外スケジュール（休暇・研修等）を表すモデル */
    'Models.ScheduleException': {
      /**
       * Format: date
       * @description 例外が適用される日付
       */
      date: string
      /**
       * @description 例外の種別（休暇・病欠など）
       * @enum {string}
       */
      type: 'holiday' | 'sick_leave' | 'vacation' | 'training' | 'other'
      /** @description 補足説明や注意事項。特記事項がない場合はnull */
      description: string | null
      /** @description 代替対応するスタッフのID。代替スタッフ未手配の場合はnull */
      alternativeStaffId:
        | (string & components['schemas']['Models.StaffId'])
        | null
    }
    /** @description 検索結果の関連度スコア範囲を表すモデル。
     *     スコアの分布を把握し、しきい値設定を検討する際に利用する。 */
    'Models.ScoreRange': {
      /**
       * Format: float
       * @description 関連度スコアの最小値。
       */
      min: number
      /**
       * Format: float
       * @description 関連度スコアの最大値。
       */
      max: number
    }
    /** @description 検索処理に関するメタ情報モデル。
     *     件数や所要時間を記録し、UX 改善やパフォーマンス監視に利用する。 */
    'Models.SearchMeta': {
      /**
       * Format: int32
       * @description 検索条件に一致した総件数。
       */
      total: number
      /** @description 利用された検索キーワード。ログ分析やABテストで活用する。 */
      query?: string
      /** @description 適用されたフィルター一覧。ユーザー選択内容を表示する際に使用。 */
      filters?: string[]
      /**
       * Format: int32
       * @description 検索処理に要した時間 (ミリ秒)。パフォーマンスKPIの指標。
       */
      duration: number
      /** @description 関連度スコアの範囲。ランキング調整やチューニングに活用する。 */
      scoreRange?: components['schemas']['Models.ScoreRange']
    }
    /** @description 季節要因の定義 */
    'Models.Season': {
      /** @description 季節名 */
      name: string
      /**
       * Format: int32
       * @description 開始月
       */
      startMonth: number
      /**
       * Format: int32
       * @description 終了月
       */
      endMonth: number
      /** @description 適用倍率 */
      multiplier: components['schemas']['Models.decimal']
    }
    /** @description サロンで提供するサービスの統合モデル */
    'Models.Service': {
      /** @description サービス ID */
      id: components['schemas']['Models.ServiceId']
      /** @description サービスを提供するサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description サービスの紹介情報 */
      info: components['schemas']['Models.ServiceInfo']
      /** @description サービスカテゴリ区分 */
      category: components['schemas']['Models.ServiceCategoryType']
      /** @description カテゴリ ID（分類ツリー連携用）。サービスカテゴリ区分のみで分類される場合はnull */
      categoryId: (string & components['schemas']['Models.CategoryId']) | null
      /** @description 料金設定情報 */
      pricing: components['schemas']['Models.ServicePricing']
      /** @description 提供時間の設定 */
      duration: components['schemas']['Models.ServiceDuration']
      /** @description 提供可能条件の設定。常時提供で特別な制約がない場合はnull */
      availability:
        | components['schemas']['Models.ServiceAvailabilityDetail']
        | null
      /** @description 予約時に必要な要件一覧。特別な要件がない標準サービスの場合はnull */
      requirements:
        | components['schemas']['Models.BookingRequirementDetail'][]
        | null
      /** @description 追加オプション設定。オプションがないシンプルなサービスの場合はnull */
      options: components['schemas']['Models.ServiceOptionDetail'][] | null
      /** @description 提供上の制約条件。制約がないサービスの場合はnull */
      restrictions: components['schemas']['Models.ServiceRestrictions'] | null
      /** @description サービス実績の指標。新サービスで実績データがない場合はnull */
      performance: components['schemas']['Models.ServicePerformance'] | null
      /** @description 関連サービス・担当者情報。関連設定がない独立したサービスの場合はnull */
      associations: components['schemas']['Models.ServiceAssociations'] | null
      /** @description メタデータ・表示設定。特別な表示設定が不要な場合はnull */
      metadata: components['schemas']['Models.ServiceMetadata'] | null
      /** @description 現在の提供ステータス */
      status: components['schemas']['Models.ServiceStatusDetail']
      /** @description サービス名 */
      name: string
      /** @description 説明文 */
      description: string
      /**
       * Format: int32
       * @description 料金
       */
      price: number
      /** @description 画像 URL。画像が登録されていない場合はnull */
      imageUrl: string | null
      /**
       * Format: int32
       * @description スタッフレベル。全スタッフが対応可能な場合はnull
       */
      requiredStaffLevel: number | null
      /** @description 有効フラグ */
      isActive: boolean
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description サービス間・スタッフとの関連情報 */
    'Models.ServiceAssociations': {
      /** @description 紐づくカテゴリ ID */
      categoryId: components['schemas']['Models.CategoryId']
      /** @description 親サービス ID。独立したサービスで親を持たない場合はnull */
      parentServiceId:
        | (string & components['schemas']['Models.ServiceId'])
        | null
      /** @description 子サービス ID 一覧。子サービスを持たない場合はnull */
      childServiceIds: components['schemas']['Models.ServiceId'][] | null
      /** @description 予約時に必須のサービス ID。前提サービスがない独立したサービスの場合はnull */
      requiredServiceIds: components['schemas']['Models.ServiceId'][] | null
      /** @description 併用を推奨するサービス ID。推奨する組み合わせがない場合はnull */
      recommendedServiceIds: components['schemas']['Models.ServiceId'][] | null
      /** @description 施術資格を持つスタッフ ID。全スタッフが対応可能な場合はnull */
      qualifiedStaffIds: components['schemas']['Models.StaffId'][] | null
      /** @description 優先的に担当させたいスタッフ ID。特定の優先スタッフがいない場合はnull */
      preferredStaffIds: components['schemas']['Models.StaffId'][] | null
    }
    /** @description サービスの提供可否設定 */
    'Models.ServiceAvailabilityDetail': {
      /** @description 提供可否タイプ */
      type: components['schemas']['Models.ServiceAvailabilityType']
      /** @description 曜日・時間帯のスケジュール。常時提供または予約制の場合はnull */
      schedule: components['schemas']['Models.ServiceSchedule'][] | null
      /** @description 事前承認が必要かどうか。即時予約可能な場合はnull（falseと同義） */
      requiresApproval: boolean | null
      /** @description 季節限定時の季節設定。季節限定以外の提供タイプの場合はnull */
      seasons: components['schemas']['Models.Season'][] | null
      /**
       * Format: int32
       * @description 1 日あたりの提供上限。日次制限がない場合はnull
       */
      maxPerDay: number | null
      /**
       * Format: int32
       * @description 1 週間あたりの提供上限。週次制限がない場合はnull
       */
      maxPerWeek: number | null
    }
    /**

         * @description

         * サービス提供可能性タイプ区分 - サービスが提供される時期や条件

         *

         *

         * always: 常時提供 - いつでも利用可能なサービス

         *

         * scheduled: スケジュール制 - 特定の時間帯のみ提供

         *

         * by_appointment: 予約制 - 事前予約が必要なサービス

         *

         * seasonal: 季節限定 - 特定の季節のみ提供

         *

         * limited: 数量限定 - 提供数に制限があるサービス

         * @enum {string}

         */

    'Models.ServiceAvailabilityType':
      | 'always'
      | 'scheduled'
      | 'by_appointment'
      | 'seasonal'
      | 'limited'
    /**

         * @description

         * サービスカテゴリー区分 - サロンで提供される主要なサービスカテゴリーの定義

         *

         *

         * cut: カット - ヘアカット、トリミング等の切断系サービス

         *

         * color: カラー - ヘアカラー、ハイライト等の染色系サービス

         *

         * perm: パーマ - パーマネント、デジタルパーマ等のウェーブ形成サービス

         *

         * treatment: トリートメント - ヘアトリートメント、ヘアケア等の補修・改善サービス

         *

         * spa: スパ - ヘッドスパ、リラクゼーション等の癒し系サービス

         *

         * other: その他 - 上記カテゴリーに分類されないサービス

         * @enum {string}

         */

    'Models.ServiceCategoryType':
      | 'cut'
      | 'color'
      | 'perm'
      | 'treatment'
      | 'spa'
      | 'other'
    /** @description サービス提供時間の設定 */
    'Models.ServiceDuration': {
      /**
       * Format: int32
       * @description 標準施術時間（分）
       */
      standard: number
      /**
       * Format: int32
       * @description 最短施術時間（分）。固定時間制で短縮不可の場合はnull
       */
      minimum: number | null
      /**
       * Format: int32
       * @description 最長施術時間（分）。固定時間制で延長不可の場合はnull
       */
      maximum: number | null
      /**
       * Format: int32
       * @description 施術前のバッファ時間（分）。準備時間が不要な場合はnull
       */
      bufferBefore: number | null
      /**
       * Format: int32
       * @description 施術後のバッファ時間（分）。片付け時間が不要な場合はnull
       */
      bufferAfter: number | null
      /** @description カウンセリング時間を含むか */
      includesConsultation: boolean
    }
    /**
     * Format: uuid
     * @description 提供メニュー・施術サービスを識別するためのブランド付きUUID。
     */
    'Models.ServiceId': string
    /** @description サービスの基本的な紹介情報 */
    'Models.ServiceInfo': {
      /** @description サービス名称 */
      name: string
      /** @description サービス名の読み仮名。外国語サービス名など読み仮名が不要な場合はnull */
      nameKana: string | null
      /** @description サービス詳細説明文 */
      description: string
      /** @description 短めの紹介文。詳細説明で十分な場合はnull */
      shortDescription: string | null
      /** @description 提供価値・メリットの一覧。特別なメリット説明が不要な基本サービスの場合はnull */
      benefits: string[] | null
      /** @description 主な対象顧客層。全顧客対象で特定層を限定しない場合はnull */
      targetCustomer: string | null
      /** @description サービス画像の URL 一覧。画像登録がない場合はnull */
      imageUrls: string[] | null
      /** @description 紹介動画の URL。動画コンテンツがない場合はnull */
      videoUrl: string | null
    }
    /** @description サービスのメタデータ情報 */
    'Models.ServiceMetadata': {
      /** @description タグ一覧。タグ付けが不要な場合はnull */
      tags: string[] | null
      /** @description 検索キーワード。追加の検索キーワードが不要な場合はnull */
      keywords: string[] | null
      /** @description SEO 用タイトル。デフォルトのサービス名を使用する場合はnull */
      seoTitle: string | null
      /** @description SEO 用ディスクリプション。デフォルトの説明文を使用する場合はnull */
      seoDescription: string | null
      /** @description 内部向けメモ。特記事項がない場合はnull */
      internalNotes: string | null
      /**
       * Format: int32
       * @description 表示順序。自動ソートまたはデフォルト順序の場合はnull
       */
      sortOrder: number | null
      /** @description 注目サービスとして表示するか。通常表示の場合はnull（falseと同義） */
      featured: boolean | null
      /** @description メニュー非表示フラグ。通常表示の場合はnull（falseと同義） */
      hideFromMenu: boolean | null
    }
    /** @description サービスに付随するオプション設定 */
    'Models.ServiceOptionDetail': {
      /** @description オプションの種類 */
      type: components['schemas']['Models.ServiceOptionType']
      /** @description オプション名。タイプから自明な名称の場合はnull */
      name: string | null
      /**
       * Format: int32
       * @description オプション料金。無料オプションまたは他の料金設定方法の場合はnull
       */
      price: number | null
      /**
       * Format: int32
       * @description 追加される施術時間（分）。時間追加がないオプションの場合はnull
       */
      duration: number | null
      /** @description オプションの説明。説明が不要な自明なオプションの場合はnull */
      description: string | null
      /** @description アップグレード元のレベル。アップグレード型以外のオプションの場合はnull */
      fromLevel: string | null
      /** @description アップグレード先のレベル。アップグレード型以外のオプションの場合はnull */
      toLevel: string | null
      /**
       * Format: int32
       * @description 追加料金。基本料金に含まれる、または他の料金設定の場合はnull
       */
      additionalPrice: number | null
      /**
       * Format: int32
       * @description 時間延長（分）。時間延長型以外のオプションの場合はnull
       */
      extension: number | null
      /** @description 関連商品 ID。商品追加型以外のオプションの場合はnull */
      productId: string | null
      /** @description 必須オプションかどうか。任意選択の標準的なオプションの場合はnull（falseと同義） */
      required: boolean | null
      /** @description 同時予約が必要なサービス ID。コンボ型以外のオプションの場合はnull */
      withService: (string & components['schemas']['Models.ServiceId']) | null
      /**
       * Format: int32
       * @description 割引金額。割引がない、またはパーセンテージ割引の場合はnull
       */
      discountAmount: number | null
    }
    /**

         * @description

         * サービスオプションタイプ区分 - サービスに追加できるオプションの種類

         *

         *

         * addon: アドオン - 基本サービスに追加できるオプション

         *

         * upgrade: アップグレード - サービスのグレードを上げるオプション

         *

         * duration: 時間延長 - サービス時間を延長するオプション

         *

         * product: 商品追加 - サービスに商品を含めるオプション

         *

         * combo: コンボ - 複数サービスの組み合わせオプション

         * @enum {string}

         */

    'Models.ServiceOptionType':
      | 'addon'
      | 'upgrade'
      | 'duration'
      | 'product'
      | 'combo'
    /** @description サービスの実績指標 */
    'Models.ServicePerformance': {
      /**
       * Format: int32
       * @description 予約件数
       */
      bookingCount: number
      /** @description 施術完了率 */
      completionRate: components['schemas']['Models.decimal']
      /** @description 平均評価スコア。まだ評価がない新サービスの場合はnull */
      averageRating: (number & components['schemas']['Models.decimal']) | null
      /**
       * Format: int32
       * @description レビュー件数
       */
      reviewCount: number
      /**
       * Format: int64
       * @description 売上実績（円）
       */
      revenue: number
      /** @description 人気度スコア。算出に必要なデータが不足している場合はnull */
      popularityScore: (number & components['schemas']['Models.decimal']) | null
      /** @description リピート率（%）。リピート実績がない新サービスの場合はnull */
      repeatRate: (number & components['schemas']['Models.decimal']) | null
    }
    'Models.ServicePreference': {
      /** @description お気に入りサービス一覧。特にない場合はnull */
      favoriteServices: components['schemas']['Models.ServiceId'][] | null
      /** @description 避けたいサービス一覧。特にない場合はnull */
      avoidServices: components['schemas']['Models.ServiceId'][] | null
      /**
       * Format: int32
       * @description 希望施術時間（分）。特に希望がない場合はnull
       */
      preferredDuration: number | null
      /** @description 希望価格帯。特に希望がない場合はnull */
      preferredPriceRange:
        | components['schemas']['Models.PriceRangeFilter']
        | null
    }
    /** @description サービスの料金設定情報 */
    'Models.ServicePricing': {
      /** @description 採用している価格戦略 */
      strategy: components['schemas']['Models.PricingStrategyDetail']
      /** @description 税込価格かどうか */
      taxIncluded: boolean
      /** @description 通貨コード */
      currency: components['schemas']['Models.CurrencyCodeType']
      /**
       * Format: int32
       * @description 設定されている最低料金。最低料金制限がない場合はnull
       */
      minimumPrice: number | null
      /**
       * Format: int32
       * @description 設定されている最高料金。最高料金制限がない場合はnull
       */
      maximumPrice: number | null
      /** @description 予約時にデポジットが必要か */
      depositRequired: boolean
      /**
       * Format: int32
       * @description 必要なデポジット金額。デポジットが不要な場合はnull
       */
      depositAmount: number | null
      /** @description キャンセル料金の設定。キャンセル料が発生しない場合はnull */
      cancellationFee: components['schemas']['Models.CancellationFee'] | null
    }
    /** @description サービス提供時の制約条件 */
    'Models.ServiceRestrictions': {
      /** @description 必要なスタッフレベル。全スタッフが対応可能な場合はnull */
      requiredStaffLevel: components['schemas']['Models.StaffLevelType'] | null
      /** @description 必要資格の一覧。特別な資格が不要な場合はnull */
      requiredCertifications: string[] | null
      /**
       * Format: int32
       * @description 同時提供可能な最大件数。同時提供制限がない場合はnull
       */
      maxConcurrent: number | null
      /**
       * Format: int32
       * @description 再予約までの最短間隔（日）。連続予約可能な場合はnull
       */
      minIntervalDays: number | null
      /** @description 顧客ごとの予約上限設定。予約回数制限がない場合はnull */
      maxBookingsPerCustomer:
        | components['schemas']['Models.BookingLimit']
        | null
      /** @description 提供不可日（ブラックアウト）一覧。特定の除外日がない場合はnull */
      blackoutDates: string[] | null
    }
    /** @description サービス提供スケジュール */
    'Models.ServiceSchedule': {
      /** @description 曜日 */
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      /** @description 提供開始時刻（HH:mm） */
      startTime: string
      /** @description 提供終了時刻（HH:mm） */
      endTime: string
      /**
       * Format: int32
       * @description 予約受け入れ上限数。予約数制限がない場合はnull
       */
      maxBookings: number | null
    }
    /** @description サービスの提供状態の詳細 */
    'Models.ServiceStatusDetail': {
      /** @description ステータス区分 */
      type: components['schemas']['Models.ServiceStatusType']
      /** @description ステータス変更理由。理由の記録が不要な通常変更の場合はnull */
      reason: string | null
      /**
       * Format: date-time
       * @description この状態が開始した日時。開始日時の記録が不要な場合はnull
       */
      since: string | null
      /** @description 提供可能な月の一覧（1-12）。季節限定以外のステータスの場合はnull */
      availableMonths: number[] | null
      /**
       * Format: date-time
       * @description 提供終了予定日。終了予定が未定または無期限の場合はnull
       */
      availableUntil: string | null
      /**
       * Format: int32
       * @description 残り提供可能枠数。数量限定以外のステータスの場合はnull
       */
      remainingSlots: number | null
      /**
       * Format: date-time
       * @description 廃止日時。廃止ステータス以外の場合はnull
       */
      discontinuedAt: string | null
      /** @description 代替サービス ID。廃止時に代替サービスがない場合はnull */
      replacementId: (string & components['schemas']['Models.ServiceId']) | null
      /**
       * Format: date-time
       * @description 公開予定日。近日公開以外のステータス、または予定日未定の場合はnull
       */
      launchDate: string | null
    }
    /**

         * @description

         * サービスステータス区分 - サービスの提供状態を表す区分

         *

         *

         * active: 有効 - 現在提供中のサービス

         *

         * inactive: 一時停止 - 一時的に提供を停止しているサービス

         *

         * seasonal: 季節限定 - 特定の季節のみ提供されるサービス

         *

         * limited: 数量限定 - 残りわずかなサービス

         *

         * discontinued: 廃止 - 提供を終了したサービス

         *

         * coming_soon: 近日公開 - 近々提供予定のサービス

         * @enum {string}

         */

    'Models.ServiceStatusType':
      | 'active'
      | 'inactive'
      | 'seasonal'
      | 'limited'
      | 'discontinued'
      | 'coming_soon'
    /** @description サービスメニューを一覧表示や候補選択で参照する際の要約情報。 */
    'Models.ServiceSummary': {
      /** @description サービスメニューを識別するID。 */
      id: components['schemas']['Models.ServiceId']
      /** @description 顧客向けに表示するサービス名称。 */
      name: string
      /**
       * Format: int32
       * @description 対象サービスの予約件数。統計未計算の場合はnull
       */
      bookingCount: number | null
    }
    /** @description ログインセッションの状態と追跡情報。 */
    'Models.Session': {
      /** @description セッションを一意に識別するID。 */
      id: string
      /** @description セッション所有者のユーザーID。 */
      userId: components['schemas']['Models.UserId']
      /** @description アクセストークン再発行に使用するリフレッシュトークン。 */
      refreshToken: string
      /** @description セッション発行元のIPアドレス。 */
      ipAddress: string
      /** @description ブラウザやアプリを示すユーザーエージェント文字列。 */
      userAgent: string
      /**
       * Format: date-time
       * @description セッションの有効期限。
       */
      expiresAt: string
      /**
       * @description 永続化セッション（Remember me）を希望するかのフラグ。
       * @default false
       */
      rememberMe: boolean
      /**
       * Format: date-time
       * @description セッション作成日時。
       */
      createdAt: string
      /**
       * Format: date-time
       * @description 直近のアクティビティ日時。
       */
      lastActivityAt: string
    }
    /**
     * Format: uuid
     * @description ログインセッションを追跡するためのブランド付きUUID。
     */
    'Models.SessionId': string
    /** @description 外部共有用に発行された添付ファイルの共有リンク情報。 */
    'Models.ShareLink': {
      /** @description 共有リンクを一意に識別するID。 */
      id: string
      /** @description 共有アクセス時に利用するトークン。 */
      token: string
      /** @description 共有対象の添付ファイルID。 */
      attachmentId: string
      /**
       * Format: date-time
       * @description 共有リンクの有効期限。無期限の場合はnull。
       */
      expiresAt: string | null
      /**
       * Format: int32
       * @description 許可する最大ダウンロード回数。無制限の場合はnull。
       */
      maxDownloads: number | null
      /**
       * Format: int32
       * @description これまでのダウンロード累計数。
       */
      downloadCount: number
      /** @description 共有リンクがパスワード保護されているか。 */
      hasPassword: boolean
      /** @description アクセスを許可するメールアドレス一覧。制限なしの場合はnull。 */
      allowedEmails: string[] | null
      /** @description 共有リンクを作成したユーザーID。 */
      createdBy: string
      /**
       * Format: date-time
       * @description 共有リンクを作成した日時。
       */
      createdAt: string
    }
    /** @description パスワード保護された共有リンクへアクセスする際のリクエスト。 */
    'Models.ShareLinkAccessRequest': {
      /** @description 共有リンクのパスワード。パスワード保護されていない場合はnull。 */
      password: string | null
    }
    /** @description 添付ファイルの共有リンクを新規発行する際のリクエスト。 */
    'Models.ShareLinkCreateRequest': {
      /**
       * Format: date-time
       * @description 共有リンクの有効期限。無期限の場合はnull。
       */
      expiresAt: string | null
      /**
       * Format: int32
       * @description 許可する最大ダウンロード回数。無制限の場合はnull。
       */
      maxDownloads: number | null
      /** @description 共有リンク保護用のパスワード。パスワード保護なしの場合はnull。 */
      password: string | null
      /** @description アクセスを許可するメールアドレス一覧。制限なしの場合はnull。 */
      allowedEmails: string[] | null
    }
    /** @description ソフトデリート情報モデル。
     *     論理削除されたレコードの状態や削除理由を記録し、監査ログや復旧オペレーションに活用する。 */
    'Models.SoftDelete': {
      /**
       * @description 論理削除フラグ。true の場合は通常の検索結果から除外する。
       * @default false
       */
      isDeleted: boolean
      /**
       * Format: date-time
       * @description 削除操作が実行された日時 (UTC)。削除されていない場合はnull
       */
      deletedAt: string | null
      /** @description 削除操作を実施したユーザーID またはサービス名。削除されていない場合はnull */
      deletedBy: string | null
      /** @description 削除理由や補足メモ。カスタマーサポート対応に利用する。理由が不要または削除されていない場合はnull */
      deletionReason: string | null
    }
    /**

         * @description

         * スパサブカテゴリー区分 - スパ・リラクゼーションサービスの詳細分類

         *

         *

         * head_spa: ヘッドスパ - 頭部のマッサージと頭皮ケアを組み合わせたスパ

         *

         * scalp_massage: スカルプマッサージ - 頭皮の血行促進マッサージ

         *

         * aromatherapy: アロマテラピー - アロマオイルを使用したリラクゼーション

         *

         * relaxation: リラクゼーション - ストレス解消を目的とした総合的なケア

         * @enum {string}

         */

    'Models.SpaSubCategoryType':
      | 'head_spa'
      | 'scalp_massage'
      | 'aromatherapy'
      | 'relaxation'
    /** @description スタッフモデル - サロンに所属するスタッフのプロフィール・資格・スケジュール・権限を統合管理する */
    'Models.Staff': {
      /** @description スタッフを一意に識別するID */
      id: components['schemas']['Models.StaffId']
      /** @description 所属サロンのID */
      salonId: components['schemas']['Models.SalonId']
      /** @description スタッフの氏名 */
      name: string
      /** @description 連絡先情報 (電話・メール等) */
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description 得意分野や専門メニューの一覧 */
      specialties: string[]
      /** @description プロフィール画像のURL - プロフィール画像未設定の場合はnull */
      imageUrl: string | null
      /** @description 自己紹介や経歴の概要 - プロフィール未記入の新人スタッフの場合はnull */
      bio: string | null
      /**
       * Format: int32
       * @description 実務経験年数 - 経験年数未記載またはアシスタントスタッフの場合はnull
       */
      yearsOfExperience: number | null
      /** @description 保有資格名の一覧 (テキスト管理) - 資格なしの新人やアシスタントの場合はnull */
      certifications: string[] | null
      /** @description 詳細な資格情報の一覧 - 詳細資格情報未登録の場合はnull */
      qualifications:
        | components['schemas']['Models.StaffQualification'][]
        | null
      /** @description 通常勤務スケジュールの一覧 - スケジュール未設定やフリーランススタッフの場合はnull */
      schedules: components['schemas']['Models.StaffSchedule'][] | null
      /** @description 現在スタッフがアクティブに勤務可能かを示すフラグ */
      isActive: boolean
      /** @description システム上で付与されている追加権限一覧 - 特別権限がない一般スタッフの場合はnull */
      permissions: components['schemas']['Models.StaffPermission'][] | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description スタッフ空き状況モデル - 個別時間帯の空き枠を表し、スポット予約や検索レスポンスに利用する */
    'Models.StaffAvailability': {
      /** @description 対象スタッフのID */
      staffId: components['schemas']['Models.StaffId']
      /** @description 対象曜日 */
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      /** @description 空き枠の開始時刻 (HH:mm) */
      startTime: string
      /** @description 空き枠の終了時刻 (HH:mm) */
      endTime: string
      /** @description 休憩などの開始時刻 - 休憩なしの連続勤務の場合はnull */
      breakStart: string | null
      /** @description 休憩などの終了時刻 - 休憩なしの連続勤務の場合はnull */
      breakEnd: string | null
    }
    /**
     * Format: uuid
     * @description 施術スタッフや従業員を識別するためのブランド付きUUID。
     */
    'Models.StaffId': string
    /**

         * @description

         * スタッフレベル区分 - スタッフの技術レベルや経験を表す階層

         *

         *

         * junior: ジュニア - 新人・見習いレベル、基本的な施術が可能

         *

         * stylist: スタイリスト - 標準レベル、一般的な施術が可能

         *

         * senior: シニア - 上級レベル、高度な技術と経験を保有

         *

         * expert: エキスパート - 専門家レベル、特殊技術や指導が可能

         *

         * director: ディレクター - 管理職レベル、サロンの技術的な指導を担当

         * @enum {string}

         */

    'Models.StaffLevelType':
      | 'junior'
      | 'stylist'
      | 'senior'
      | 'expert'
      | 'director'
    /** @description スタッフ別の売上パフォーマンス指標 */
    'Models.StaffPerformance': {
      /** @description スタッフ ID */
      staffId: components['schemas']['Models.StaffId']
      /** @description スタッフ名 */
      staffName: string
      /** @description 担当した売上金額 */
      totalSales: components['schemas']['Models.Money']
      /**
       * Format: int32
       * @description 提供したサービス件数
       */
      serviceCount: number
      /** @description 平均サービス単価 */
      averageServiceValue: components['schemas']['Models.Money']
      /**
       * Format: float
       * @description 顧客満足度評価（任意）
       */
      customerSatisfaction: number | null
    }
    /** @description スタッフ権限モデル - スタッフアカウントに付与された操作対象と権限範囲を定義する */
    'Models.StaffPermission': {
      /** @description 操作対象リソースの識別子 */
      resource: string
      /** @description 許可されたアクションの一覧 */
      actions: string[]
      /** @description 権限が適用される範囲や条件 - 全体権限の場合や特定範囲がない場合はnull */
      scope: string | null
      /**
       * Format: date-time
       * @description 権限の有効期限 (UTC) - 無期限権限の場合はnull
       */
      expiresAt: string | null
    }
    /** @description スタッフ資格モデル - 保有資格や認定情報を管理し、サービス提供に必要なスキル証明を保持する */
    'Models.StaffQualification': {
      /** @description 資格・認定の名称 */
      name: string
      /**
       * Format: date
       * @description 資格を取得した日付
       */
      certificationDate: string
      /**
       * Format: date
       * @description 資格の有効期限 - 無期限資格や更新不要の資格の場合はnull
       */
      expiryDate: string | null
      /** @description 資格を発行した機関名 - 発行機関が不明または未記録の場合はnull */
      issuer: string | null
      /** @description 資格証明番号などの識別子 - 証明番号がない内部認定やサロン独自資格の場合はnull */
      credentialId: string | null
    }
    /** @description スタッフシフトモデル - 通常勤務スケジュールと休憩時間、適用期間を定義し、予約可能時間の算出に利用する */
    'Models.StaffSchedule': {
      /** @description 対象となる曜日 */
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      /** @description 勤務開始時刻 (フォーマット例: HH:mm) */
      startTime: string
      /** @description 勤務終了時刻 (フォーマット例: HH:mm) */
      endTime: string
      /** @description 当日の休憩時間帯リスト - 休憩なしのフル勤務の場合はnull */
      breakTime: components['schemas']['Models.TimeSlot'][] | null
      /** @description シフトが有効となる期間 - 無期限スケジュールの場合はnull */
      effectivePeriod: components['schemas']['Models.DateRange'] | null
    }
    /** @description スタッフの勤務スケジュールと例外設定を管理するモデル */
    'Models.StaffScheduleManagement': {
      /** @description 対象スタッフのID */
      staffId: components['schemas']['Models.StaffId']
      /** @description 所属サロンのID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 通常勤務時間帯の一覧 */
      regularHours: components['schemas']['Models.BusinessHours'][]
      /** @description 休暇や研修などの例外設定一覧 */
      exceptions: components['schemas']['Models.ScheduleException'][]
      /**
       * Format: date-time
       * @description スケジュールが有効になる開始日時
       */
      effectiveFrom: string
      /**
       * Format: date-time
       * @description スケジュールの終了日時。無期限の場合はnull
       */
      effectiveTo: string | null
      /**
       * Format: date-time
       * @description レコード作成日時 (UTC)。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID またはサービス名。 */
      createdBy: string
      /**
       * Format: date-time
       * @description 最終更新日時 (UTC)。
       */
      updatedAt: string
      /** @description 最後に更新したユーザーID またはサービス名。 */
      updatedBy: string
      /**
       * Format: int32
       * @description 楽観的ロックに使用するバージョン番号。
       */
      version: number
      /**
       * @description 論理削除フラグ。true の場合は通常の検索結果から除外する。
       * @default false
       */
      isDeleted: boolean
      /**
       * Format: date-time
       * @description 削除操作が実行された日時 (UTC)。削除されていない場合はnull
       */
      deletedAt: string | null
      /** @description 削除操作を実施したユーザーID またはサービス名。削除されていない場合はnull */
      deletedBy: string | null
      /** @description 削除理由や補足メモ。カスタマーサポート対応に利用する。理由が不要または削除されていない場合はnull */
      deletionReason: string | null
    }
    /** @description スタッフの勤務スケジュールを更新するためのリクエスト */
    'Models.StaffScheduleUpdateRequest': {
      /** @description 更新後の通常勤務時間帯一覧 */
      regularHours: components['schemas']['Models.BusinessHours'][]
      /** @description 休暇や特例などの例外設定一覧。例外がない場合はnull */
      exceptions: components['schemas']['Models.ScheduleException'][] | null
      /**
       * Format: date-time
       * @description 更新内容の適用開始日時
       */
      effectiveFrom: string
      /**
       * Format: date-time
       * @description 適用終了日時。無期限の場合はnull
       */
      effectiveTo: string | null
    }
    /** @description スタッフ一覧や選択候補で利用する要約情報。 */
    'Models.StaffSummary': {
      /** @description スタッフを識別するID。 */
      id: components['schemas']['Models.StaffId']
      /** @description スタッフの表示名。 */
      name: string
      /**
       * Format: float
       * @description 平均評価スコア。未評価または評価データがない場合はnull
       */
      rating: number | null
      /**
       * Format: int32
       * @description 担当した予約件数。統計未計算の場合はnull
       */
      bookingCount: number | null
    }
    /** @description 在庫残量の閾値警告 */
    'Models.StockAlert': {
      /** @description 対象在庫 ID */
      itemId: components['schemas']['Models.InventoryId']
      /**
       * Format: float
       * @description 設定した閾値
       */
      threshold: number
      /**
       * Format: float
       * @description 警告発生時の在庫数
       */
      currentStock: number
      /**
       * Format: date-time
       * @description 警告が発生した日時
       */
      triggeredAt: string
    }
    /** @description 在庫の移動履歴 */
    'Models.StockMovement': {
      /** @description トランザクション ID */
      id: string
      /** @description 対象在庫アイテム ID */
      itemId: components['schemas']['Models.InventoryId']
      /** @description 処理を行うサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /**
       * @description 在庫操作区分（入庫/出庫/調整/移動）
       * @enum {string}
       */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /**
       * Format: float
       * @description 操作した数量
       */
      quantity: number
      /** @description 操作理由 */
      reason: string
      /** @description 操作を担当したスタッフ ID */
      performedBy: components['schemas']['Models.StaffId']
      /**
       * Format: date-time
       * @description 操作日時
       */
      occurredAt: string
      /** @description 関連する外部参照 ID */
      referenceId: string | null
      /** @description 備考メモ */
      notes: string | null
      /** @description 追加のメタデータ */
      metadata: {
        [key: string]: unknown
      } | null
      /** @description 対象在庫アイテム ID */
      inventoryId: components['schemas']['Models.InventoryId']
      /**
       * Format: float
       * @description 移動後の在庫数量
       */
      stockAfter: number
      /** @description 紐づく発注 ID */
      orderId: (string & components['schemas']['Models.OrderId']) | null
      /** @description 紐づく施術記録 ID */
      treatmentRecordId:
        | (string & components['schemas']['Models.TreatmentRecordId'])
        | null
      /**
       * Format: date-time
       * @description 移動が確定した日時
       */
      movedAt: string
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 在庫移動処理を登録する入力モデル */
    'Models.StockMovementCreateRequest': {
      /** @description 対象在庫 ID */
      inventoryId: components['schemas']['Models.InventoryId']
      /**
       * @description 在庫操作区分
       * @enum {string}
       */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /**
       * Format: float
       * @description 操作数量
       */
      quantity: number
      /** @description 操作理由 */
      reason: string
      /** @description 関連する発注 ID */
      orderId: (string & components['schemas']['Models.OrderId']) | null
      /** @description 関連する施術記録 ID */
      treatmentRecordId:
        | (string & components['schemas']['Models.TreatmentRecordId'])
        | null
      /** @description 備考メモ */
      notes: string | null
    }
    'Models.StylePreference': {
      /** @description 希望の髪の長さ。特に希望がない場合はnull */
      preferredLength: string | null
      /** @description 希望のカラー一覧。特に希望がない場合はnull */
      preferredColors: string[] | null
      /** @description 避けたいスタイル一覧。特にない場合はnull */
      avoidStyles: string[] | null
      /** @description 参考画像URL一覧。画像がない場合はnull */
      inspirationImages: string[] | null
    }
    /**

         * @description

         * スタイリングサブカテゴリー区分 - ヘアスタイリングサービスの詳細分類

         *

         *

         * blowout: ブローアウト - ブロードライでボリュームを出すスタイリング

         *

         * updo: アップスタイル - まとめ髪、シニヨン等のヘアアレンジ

         *

         * braiding: 編み込み - 三つ編み、編み込みアレンジ等

         *

         * extensions: エクステンション - ヘアエクステの装着サービス

         *

         * event_styling: イベントスタイリング - 結婚式、パーティー等の特別なスタイリング

         * @enum {string}

         */

    'Models.StylingSubCategoryType':
      | 'blowout'
      | 'updo'
      | 'braiding'
      | 'extensions'
      | 'event_styling'
    /**

         * @description

         * システムロールタイプ区分 - システムで事前定義されたロールの種類

         *

         *

         * super_admin: スーパー管理者 - システム全体へのフルアクセス権限

         *

         * salon_owner: サロンオーナー - サロン全体へのフルアクセス権限

         *

         * salon_manager: サロンマネージャー - サロンの管理業務権限

         *

         * senior_staff: シニアスタッフ - 上級スタイリスト・セラピストの権限

         *

         * staff: スタッフ - 一般スタッフの権限

         *

         * receptionist: 受付 - フロントデスク業務の権限

         *

         * customer: 顧客 - 顧客セルフサービスの権限

         *

         * guest: ゲスト - 限定的なゲストアクセス権限

         * @enum {string}

         */

    'Models.SystemRoleType':
      | 'super_admin'
      | 'salon_owner'
      | 'salon_manager'
      | 'senior_staff'
      | 'staff'
      | 'receptionist'
      | 'customer'
      | 'guest'
    /** @description Time preference model */
    'Models.TimePreference': {
      /** @description 曜日 */
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      /** @description 希望時間帯 */
      timeSlots: components['schemas']['Models.TimeSlot'][]
    }
    /** @description 営業時間や休憩時間を表現する単一の時間帯スロット。 */
    'Models.TimeSlot': {
      /** @description 開始時刻（HH:mm形式、24時間表記）。 */
      startTime: string
      /** @description 終了時刻（HH:mm形式、24時間表記）。 */
      endTime: string
    }
    /** @description 顧客来店時の施術記録 */
    'Models.TreatmentRecord': {
      /** @description 施術記録 ID */
      id: components['schemas']['Models.TreatmentRecordId']
      /** @description 紐づく予約 ID */
      bookingId: components['schemas']['Models.BookingId']
      /** @description 施術を受けた顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 施術担当スタッフ ID */
      staffId: components['schemas']['Models.StaffId']
      /** @description 施術を実施したサロン ID */
      salonId: components['schemas']['Models.SalonId']
      /** @description 実施した施術タイプ */
      treatment: components['schemas']['Models.TreatmentType']
      /** @description 施術で提供したサービス ID 一覧 */
      serviceIds: components['schemas']['Models.ServiceId'][]
      /**
       * Format: date-time
       * @description 施術開始日時
       */
      startTime: string
      /**
       * Format: date-time
       * @description 施術終了日時
       */
      endTime: string
      /** @description 施術の詳細メモ - 特記事項がない通常施術の場合はnull */
      notes: string | null
      /** @description 使用した資材・商材の記録 - カットのみなど商材を使用しない施術の場合はnull */
      usedMaterials: components['schemas']['Models.MaterialUsage'][] | null
      /** @description 施術前後の写真 ID - 写真撮影を希望しない顧客や撮影が不要な施術の場合はnull */
      photos: components['schemas']['Models.AttachmentId'][] | null
      /** @description 顧客のフィードバック - 施術直後でフィードバック未収集の場合はnull */
      customerFeedback: string | null
      /** @description 次回来店への提案内容 - 特に提案事項がない場合や定期メンテナンスのみの場合はnull */
      nextRecommendations: string | null
      /**
       * Format: float
       * @description 請求総額
       */
      totalAmount: number
      /**
       * Format: float
       * @description 適用した割引額 - 割引を適用しない定価施術の場合はnull
       */
      discountAmount: number | null
      /**
       * Format: int32
       * @description 付与したポイント数 - ポイント対象外の施術やポイント制度未導入サロンの場合はnull
       */
      pointsEarned: number | null
      /**
       * Format: date-time
       * @description レコード作成日時。
       */
      createdAt: string
      /** @description レコードを作成したユーザーID。システム自動作成または匿名作成の場合はnull */
      createdBy: string | null
      /**
       * Format: date-time
       * @description レコード最終更新日時。
       */
      updatedAt: string
      /** @description レコードを最後に更新したユーザーID。システム自動更新または匿名更新の場合はnull */
      updatedBy: string | null
    }
    /** @description 施術記録を新規登録する入力モデル */
    'Models.TreatmentRecordCreateRequest': {
      /** @description 紐づく予約 ID */
      bookingId: components['schemas']['Models.BookingId']
      /** @description 施術を受けた顧客 ID */
      customerId: components['schemas']['Models.CustomerId']
      /** @description 施術担当スタッフ ID */
      staffId: components['schemas']['Models.StaffId']
      /** @description 施術タイプ */
      treatment: components['schemas']['Models.TreatmentType']
      /** @description 提供したサービス ID 一覧 */
      serviceIds: components['schemas']['Models.ServiceId'][]
      /**
       * Format: date-time
       * @description 施術開始日時
       */
      startTime: string
      /**
       * Format: date-time
       * @description 施術終了日時
       */
      endTime: string
      /** @description 施術メモ - 特記事項がない通常施術の場合はnull */
      notes: string | null
      /** @description 使用した資材一覧 - カットのみなど商材を使用しない施術の場合はnull */
      usedMaterials: components['schemas']['Models.MaterialUsage'][] | null
      /** @description 顧客フィードバック - 施術直後でフィードバック未収集の場合はnull */
      customerFeedback: string | null
      /** @description 次回来店への提案内容 - 特に提案事項がない場合や定期メンテナンスのみの場合はnull */
      nextRecommendations: string | null
      /**
       * Format: float
       * @description 請求総額
       */
      totalAmount: number
      /**
       * Format: float
       * @description 割引額 - 割引を適用しない定価施術の場合はnull
       */
      discountAmount: number | null
      /**
       * Format: int32
       * @description 付与ポイント数 - ポイント対象外の施術やポイント制度未導入サロンの場合はnull
       */
      pointsEarned: number | null
    }
    /**
     * Format: uuid
     * @description 施術記録やカウンセリングメモを識別するブランド付きUUID。
     */
    'Models.TreatmentRecordId': string
    /** @description 施術記録を更新する入力モデル */
    'Models.TreatmentRecordUpdateRequest': {
      /** @description 施術メモ - 特記事項がない通常施術の場合はnull、null指定で値をリセット可能 */
      notes?: string | null
      /** @description 使用した資材一覧 - カットのみなど商材を使用しない施術の場合はnull、null指定で値をリセット可能 */
      usedMaterials?: components['schemas']['Models.MaterialUsage'][] | null
      /** @description 顧客フィードバック - 施術直後でフィードバック未収集の場合はnull、null指定で値をリセット可能 */
      customerFeedback?: string | null
      /** @description 次回来店への提案内容 - 特に提案事項がない場合や定期メンテナンスのみの場合はnull、null指定で値をリセット可能 */
      nextRecommendations?: string | null
      /** @description 施術前後写真 ID - 写真撮影を希望しない顧客や撮影が不要な施術の場合はnull、null指定で値をリセット可能 */
      photos?: components['schemas']['Models.AttachmentId'][] | null
    }
    /**

         * @description

         * トリートメントサブカテゴリー区分 - ヘアトリートメントサービスの詳細分類

         *

         *

         * deep_conditioning: ディープコンディショニング - 髪の内部まで栄養を浸透させるトリートメント

         *

         * protein_treatment: プロテイントリートメント - タンパク質を補給し髪を強化するトリートメント

         *

         * scalp_treatment: スカルプトリートメント - 頭皮ケアに特化したトリートメント

         *

         * keratin_treatment: ケラチントリートメント - ケラチンを補充し髪をストレートにするトリートメント

         *

         * olaplex: オラプレックス - ダメージした髪の内部結合を修復するトリートメント

         * @enum {string}

         */

    'Models.TreatmentSubCategoryType':
      | 'deep_conditioning'
      | 'protein_treatment'
      | 'scalp_treatment'
      | 'keratin_treatment'
      | 'olaplex'
    /**

         * @description

         * 施術タイプ区分 - サロンで提供される具体的な施術の種類

         *

         *

         * cut: カット - ヘアカット、レイヤーカット等の切断技術

         *

         * color: カラー - ヘアカラー、白髪染め、ハイライト等の染色技術

         *

         * perm: パーマ - コールドパーマ、デジタルパーマ等のウェーブ技術

         *

         * treatment: トリートメント - ダメージケア、栄養補給等の毛髪改善技術

         *

         * head_spa: ヘッドスパ - 頭皮マッサージ、スカルプケア等の頭皮ケア技術

         *

         * styling: スタイリング - セット、アレンジ等のスタイリング技術

         *

         * extension: エクステンション - ヘアエクステ、増毛等の毛髪追加技術

         *

         * nail: ネイル - マニキュア、ジェルネイル等の爪装飾技術

         *

         * eyelash: まつげ - まつげエクステ、まつげパーマ等のまつげ装飾技術

         *

         * other: その他 - 上記に分類されない施術

         * @enum {string}

         */

    'Models.TreatmentType':
      | 'cut'
      | 'color'
      | 'perm'
      | 'treatment'
      | 'head_spa'
      | 'styling'
      | 'extension'
      | 'nail'
      | 'eyelash'
      | 'other'
    /**

         * @description

         * 2要素認証ステータス区分 - 2要素認証の設定状態

         *

         *

         * disabled: 無効 - 2要素認証が設定されていない状態

         *

         * pending: 設定中 - 2要素認証の設定が進行中の状態

         *

         * enabled: 有効 - 2要素認証が有効化されている状態

         * @enum {string}

         */

    'Models.TwoFactorStatusType': 'disabled' | 'pending' | 'enabled'
    /** @description 認証されていないアクセスを表す標準エラーモデル。 */
    'Models.UnauthorizedError': {
      /**
       * @description 固定値UNAUTHORIZED。クライアントでのハンドリングを容易にする識別子。
       * @enum {string}
       */
      code: 'UNAUTHORIZED'
      /** @description エラー内容を伝えるメッセージ。 */
      message: string
    }
    /** @description 予約更新リクエスト - 部分更新に対応した任意項目の変更指示を受け取り、既存予約を調整する。null指定で値をリセット可能 */
    'Models.UpdateReservationRequest': {
      /** @description 更新後の予約ステータス */
      status?: components['schemas']['Models.ReservationStatusType']
      /** @description 最新の顧客メモや社内備考（null指定で初期化可能） */
      notes?: string | null
      /**
       * Format: date-time
       * @description 調整後の施術開始日時 (UTC)
       */
      startTime?: string
      /** @description 再割当先のスタッフID */
      staffId?: components['schemas']['Models.StaffId']
    }
    /** @description サロン情報を部分更新するためのリクエスト。null指定で値をリセット可能 */
    'Models.UpdateSalonRequest': {
      /** @description 名称変更を行う場合に指定 */
      name?: string
      /** @description 紹介文を更新する場合に指定（null指定で初期化可能） */
      description?: string | null
      /** @description 住所情報の差し替えが必要な場合に指定 */
      address?: components['schemas']['Models.Address']
      /** @description 電話番号やメールアドレス等の連絡先を更新する場合に指定 */
      contactInfo?: components['schemas']['Models.ContactInfo']
      /** @description 通常営業時間の更新が必要な場合に指定 */
      openingHours?: components['schemas']['Models.OpeningHours'][]
      /** @description 特別営業時間やシフト設定の更新に利用（null指定で初期化可能） */
      businessHours?: components['schemas']['Models.BusinessHours'][] | null
      /** @description 画像URLリストを更新する場合に指定 */
      imageUrls?: string[]
      /** @description 特徴タグの追加・削除を行う場合に指定 */
      features?: string[]
    }
    /** @description サロン情報を部分更新するためのリクエスト。null指定で値をリセット可能 */
    'Models.UpdateSalonRequestUpdate': {
      /** @description 名称変更を行う場合に指定 */
      name?: string
      /** @description 紹介文を更新する場合に指定（null指定で初期化可能） */
      description?: string | null
      /** @description 住所情報の差し替えが必要な場合に指定 */
      address?: components['schemas']['Models.AddressUpdate']
      /** @description 電話番号やメールアドレス等の連絡先を更新する場合に指定 */
      contactInfo?: components['schemas']['Models.ContactInfoUpdate']
      /** @description 通常営業時間の更新が必要な場合に指定 */
      openingHours?: components['schemas']['Models.OpeningHours'][]
      /** @description 特別営業時間やシフト設定の更新に利用（null指定で初期化可能） */
      businessHours?: components['schemas']['Models.BusinessHours'][] | null
      /** @description 画像URLリストを更新する場合に指定 */
      imageUrls?: string[]
      /** @description 特徴タグの追加・削除を行う場合に指定 */
      features?: string[]
    }
    /** @description サービス情報を部分更新するリクエスト。null指定で値をリセット可能 */
    'Models.UpdateServiceRequest': {
      /** @description 更新後のサービス名 */
      name?: string
      /** @description 更新後の説明文。null指定で説明文をクリア（空文字列にリセット） */
      description: string | null
      /**
       * Format: int32
       * @description 更新後の施術時間。null指定で時間設定をクリア（デフォルト値にリセット）
       */
      duration: number | null
      /**
       * Format: int32
       * @description 更新後の料金
       */
      price?: number
      /** @description 更新後のサービスカテゴリ */
      category?: components['schemas']['Models.ServiceCategoryType']
      /** @description 更新後のカテゴリ ID（null 指定で解除） */
      categoryId?: (string & components['schemas']['Models.CategoryId']) | null
      /** @description 更新後の画像 URL（null 指定で解除） */
      imageUrl?: string | null
      /**
       * Format: int32
       * @description 更新後の必要スタッフレベル（null 指定で解除）
       */
      requiredStaffLevel?: number | null
      /**
       * Format: int32
       * @description 更新後のデポジット額（null 指定で解除）
       */
      depositAmount?: number | null
      /** @description 更新後の有効フラグ */
      isActive?: boolean
      /**
       * Format: int32
       * @description 更新後の最大予約日数（null 指定で解除）
       */
      maxAdvanceBookingDays?: number | null
      /**
       * Format: int32
       * @description 更新後の最短予約受付時間（null 指定で解除）
       */
      minAdvanceBookingHours?: number | null
    }
    /** @description サービス情報を部分更新するリクエスト。null指定で値をリセット可能 */
    'Models.UpdateServiceRequestUpdate': {
      /** @description 更新後のサービス名 */
      name?: string
      /** @description 更新後の説明文。null指定で説明文をクリア（空文字列にリセット） */
      description?: string | null
      /**
       * Format: int32
       * @description 更新後の施術時間。null指定で時間設定をクリア（デフォルト値にリセット）
       */
      duration?: number | null
      /**
       * Format: int32
       * @description 更新後の料金
       */
      price?: number
      /** @description 更新後のサービスカテゴリ */
      category?: components['schemas']['Models.ServiceCategoryType']
      /** @description 更新後のカテゴリ ID（null 指定で解除） */
      categoryId?: (string & components['schemas']['Models.CategoryId']) | null
      /** @description 更新後の画像 URL（null 指定で解除） */
      imageUrl?: string | null
      /**
       * Format: int32
       * @description 更新後の必要スタッフレベル（null 指定で解除）
       */
      requiredStaffLevel?: number | null
      /**
       * Format: int32
       * @description 更新後のデポジット額（null 指定で解除）
       */
      depositAmount?: number | null
      /** @description 更新後の有効フラグ */
      isActive?: boolean
      /**
       * Format: int32
       * @description 更新後の最大予約日数（null 指定で解除）
       */
      maxAdvanceBookingDays?: number | null
      /**
       * Format: int32
       * @description 更新後の最短予約受付時間（null 指定で解除）
       */
      minAdvanceBookingHours?: number | null
    }
    /** @description スタッフ更新リクエスト - 任意項目を部分更新し、プロフィールや勤務状況を柔軟に調整する。null指定で値をリセット可能 */
    'Models.UpdateStaffRequest': {
      /** @description スタッフ名の更新 */
      name?: string
      /** @description 連絡先情報の更新 */
      contactInfo?: components['schemas']['Models.ContactInfo']
      /** @description 得意分野一覧の更新 */
      specialties?: string[]
      /** @description プロフィール画像URLの更新（null指定で初期化可能） */
      imageUrl?: string | null
      /** @description 自己紹介文の更新（null指定で初期化可能） */
      bio?: string | null
      /**
       * Format: int32
       * @description 経験年数の更新（null指定で初期化可能）
       */
      yearsOfExperience?: number | null
      /** @description 資格名一覧の更新（null指定で初期化可能） */
      certifications?: string[] | null
      /** @description 資格詳細一覧の更新（null指定で初期化可能） */
      qualifications?:
        | components['schemas']['Models.StaffQualification'][]
        | null
      /** @description 勤務スケジュール一覧の更新（null指定で初期化可能） */
      schedules?: components['schemas']['Models.StaffSchedule'][] | null
      /** @description 付与権限一覧の更新（null指定で初期化可能） */
      permissions?: components['schemas']['Models.StaffPermission'][] | null
      /** @description アクティブ状態の更新 */
      isActive?: boolean
    }
    /** @description 認証基盤で管理するユーザーアカウント情報。 */
    'Models.User': {
      /** @description ユーザーを一意に識別するID。 */
      id: string
      /** @description ログインに利用するメールアドレス（ユニーク）。 */
      email: string
      /** @description 顧客・スタッフの表示名。 */
      name: string
      /** @description 認証システム上での役割区分。 */
      role: components['schemas']['Models.AuthUserRoleType']
      /** @description アカウントの稼働状態。 */
      status: components['schemas']['Models.UserAccountStatusType']
      /** @description メールアドレスが確認済みかどうか。 */
      emailVerified: boolean
      /** @description メール確認に利用するトークン。メール確認済みまたは未送信の場合はnull。 */
      emailVerificationToken: string | null
      /**
       * Format: date-time
       * @description メール確認トークンの有効期限。トークンが発行されていない場合はnull。
       */
      emailVerificationTokenExpiry: string | null
      /** @description 2要素認証の設定状態。 */
      twoFactorStatus: components['schemas']['Models.TwoFactorStatusType']
      /** @description 暗号化された2要素認証シークレット。2要素認証が無効の場合はnull。 */
      twoFactorSecret: string | null
      /** @description 2要素認証の復旧用バックアップコード一覧。2要素認証が無効の場合はnull。 */
      backupCodes: string[] | null
      /**
       * Format: int32
       * @description 連続したログイン失敗回数。
       * @default 0
       */
      failedLoginAttempts: number
      /**
       * Format: date-time
       * @description アカウントをロックした日時。アカウントがロックされていない場合はnull。
       */
      lockedAt: string | null
      /** @description パスワードリセットに利用するトークン。リセットが要求されていない場合はnull。 */
      passwordResetToken: string | null
      /**
       * Format: date-time
       * @description パスワードリセットトークンの有効期限。トークンが発行されていない場合はnull。
       */
      passwordResetTokenExpiry: string | null
      /**
       * Format: date-time
       * @description 最後にパスワードを変更した日時。パスワード変更履歴がない場合はnull。
       */
      lastPasswordChangeAt: string | null
      /** @description 再利用防止のため保持する過去パスワードハッシュ。履歴管理をしていない場合はnull。 */
      passwordHistory: string[] | null
      /** @description 信頼済みIPアドレスのリスト。IP制限を設定していない場合はnull。 */
      trustedIpAddresses: string[] | null
      /** @description ユーザーが顧客の場合の顧客プロファイルID。顧客以外の役割の場合はnull。 */
      customerId: (string & components['schemas']['Models.CustomerId']) | null
      /** @description ユーザーがスタッフの場合のスタッフプロファイルID。スタッフ以外の役割の場合はnull。 */
      staffId: (string & components['schemas']['Models.StaffId']) | null
      /** @description 担当サロンやレベル等を含む拡張ロール情報。詳細情報が設定されていない場合はnull。 */
      roleDetail: components['schemas']['Models.UserRoleDetail'] | null
      /** @description 現在の認証状態区分。状態が未設定の場合はnull。 */
      authState: components['schemas']['Models.AuthenticationStateType'] | null
      /** @description メール確認状態区分。状態が未設定の場合はnull。 */
      emailVerificationState:
        | components['schemas']['Models.EmailVerificationStateType']
        | null
      /** @description パスワードリセット状態区分。リセットが要求されていない場合はnull。 */
      passwordResetState:
        | components['schemas']['Models.PasswordResetStateType']
        | null
      /**
       * Format: date-time
       * @description ユーザーアカウント作成日時。
       */
      createdAt: string
      /**
       * Format: date-time
       * @description ユーザー情報の最終更新日時。
       */
      updatedAt: string
      /**
       * Format: date-time
       * @description 直近のログイン日時。一度もログインしていない場合はnull。
       */
      lastLoginAt: string | null
      /** @description 直近ログイン時のIPアドレス。ログイン履歴がない場合はnull。 */
      lastLoginIp: string | null
    }
    /**

         * @description

         * ユーザーアカウントステータス区分 - アカウントの利用可否状態

         *

         *

         * active: アクティブ - 正常に利用可能なアカウント

         *

         * unverified: メール未確認 - メールアドレスが確認されていないアカウント

         *

         * locked: ロック - ログイン失敗回数超過によりロックされたアカウント

         *

         * suspended: 停止 - 管理者によって停止されたアカウント

         *

         * deleted: 削除済み - 削除されたアカウント

         * @enum {string}

         */

    'Models.UserAccountStatusType':
      | 'active'
      | 'unverified'
      | 'locked'
      | 'suspended'
      | 'deleted'
    /**
     * Format: uuid
     * @description システム利用者（顧客・スタッフ・管理者）を一意に識別するブランド付きUUID。
     */
    'Models.UserId': string
    /** @description ユーザーへロールを割り当てる入力モデル */
    'Models.UserRoleAssignRequest': {
      /** @description 対象ユーザー ID */
      userId: string
      /** @description 割当対象のロール ID */
      roleId: components['schemas']['Models.RoleId']
      /** @description サロン単位の場合のサロン ID */
      salonId?: components['schemas']['Models.SalonId']
      /**
       * Format: date-time
       * @description 割当の有効期限
       */
      expiresAt?: string
    }
    /** @description ユーザーへのロール割当情報 */
    'Models.UserRoleAssignment': {
      /** @description 対象ユーザー ID（スタッフ/顧客いずれも可） */
      userId: string
      /** @description 割り当てるロール ID */
      roleId: components['schemas']['Models.RoleId']
      /** @description サロン単位のロールの場合の対象サロン ID - システム全体ロールの場合はnull */
      salonId: (string & components['schemas']['Models.SalonId']) | null
      /**
       * Format: date-time
       * @description 割当日時
       */
      assignedAt: string
      /** @description 割当を実施したユーザー ID */
      assignedBy: string
      /**
       * Format: date-time
       * @description ロール割当の有効期限 - 無期限割当の場合はnull
       */
      expiresAt: string | null
      /** @description 割当が現在有効かどうか */
      isActive: boolean
    }
    /** @description ユーザーの詳細な役割情報と所属を表すモデル。 */
    'Models.UserRoleDetail': {
      /** @description システム内での基礎的な役割区分。 */
      type: components['schemas']['Models.UserRoleType']
      /** @description 役割が適用されるサロンID。全社管理者やシステム管理者の場合はnull。 */
      salonId: (string & components['schemas']['Models.SalonId']) | null
      /** @description スタッフに対して設定される技術レベル。スタッフ以外の役割の場合はnull。 */
      level: components['schemas']['Models.StaffLevelType'] | null
    }
    /**

         * @description

         * ユーザーロール区分 - システム内でのユーザーの役割と権限レベル

         *

         *

         * customer: 顧客 - サービスの予約・利用が可能なユーザー

         *

         * staff: スタッフ - 施術を提供するサロン従業員

         *

         * manager: マネージャー - サロンの管理業務を担当する管理者

         *

         * admin: 管理者 - システム全体の管理権限を持つユーザー

         *

         * owner: オーナー - サロンの所有者、最高権限を保持

         * @enum {string}

         */

    'Models.UserRoleType': 'customer' | 'staff' | 'manager' | 'admin' | 'owner'
    /** @description 入力検証での失敗内容を表すモデル。
     *     画面入力フォームやAPI連携時のフィールド単位のエラー詳細を格納し、顧客やスタッフへのフィードバックに利用する。 */
    'Models.ValidationError': {
      /** @description 検証に失敗したフィールドパス。ネストしたキーをドット記法で表現する。 */
      field: string
      /** @description 違反した検証ルール名またはコード。 */
      rule: string
      /** @description ユーザーに提示する具体的なエラーメッセージ。 */
      message: string
      /** @description 検証対象となった実際の値。セキュリティ観点で出力が許容される場合のみ利用する。出力不可の場合はnull */
      value: unknown
      /** @description 期待される値や制約条件。入力補助やUI表示のガイダンスに使用する。制約が明示不要な場合はnull */
      constraint: unknown
    }
    /** @description 楽観的ロックを実現するためのバージョン管理モデル。
     *     エンティティの更新競合を検知し、整合性を担保する。 */
    'Models.Versioned': {
      /**
       * Format: int32
       * @description 内部的に管理するバージョン番号。更新ごとにインクリメントする。
       */
      version: number
      /**
       * Format: date-time
       * @description 最終更新日時 (UTC)。キャッシュ制御や監査に利用。
       */
      lastModified: string
    }
    'Models.VisitHistory': {
      /**
       * Format: int32
       * @description 総来店回数。これまでの来店実績の合計
       */
      visitCount: number
      /**
       * Format: date-time
       * @description 初回来店日。未来店の場合はnull
       */
      firstVisitDate: string | null
      /**
       * Format: date-time
       * @description 最終来店日。新規顧客でまだ来店がない場合はnull
       */
      lastVisitDate: string | null
      /**
       * Format: int32
       * @description 平均利用金額。利用実績がない場合はnull
       */
      averageSpendPerVisit: number | null
      /**
       * Format: int32
       * @description 累計利用金額。これまでの総支払額
       */
      totalSpent: number
      /**
       * Format: int32
       * @description キャンセル回数。予約をキャンセルした回数
       */
      cancelCount: number
      /**
       * Format: int32
       * @description 無断キャンセル回数。連絡なしで来店しなかった回数
       */
      noShowCount: number
      /**
       * Format: int32
       * @description 完了サービス数。正常に完了した施術の総数
       */
      completedServices: number
    }
    /** @description ウェイティングリストに登録された顧客情報。 */
    'Models.WaitlistEntry': {
      /**
       * Format: int32
       * @description 現在の待機順序。
       */
      position: number
      /**
       * Format: date-time
       * @description 呼び出し予想時刻。時刻が未確定の場合はnull。
       */
      estimatedTime: string | null
      /**
       * Format: date-time
       * @description ウェイティングリストに参加した日時。
       */
      joinedAt: string
      /**
       * Format: date-time
       * @description 待機権が失効する日時。無期限の場合はnull。
       */
      expiresAt: string | null
      /**
       * Format: date-time
       * @description 呼び出し通知を送信した日時。未通知の場合はnull。
       */
      notifiedAt: string | null
      /** @description 希望スタッフID。指名なしの場合はnull。 */
      preferredStaffId:
        | (string & components['schemas']['Models.StaffId'])
        | null
      /** @description 希望サービスID。サービスを指定していない場合はnull。 */
      preferredServiceId:
        | (string & components['schemas']['Models.ServiceId'])
        | null
      /** @description 追加メモ。メモがない場合はnull。 */
      notes: string | null
    }
    /** @description ウェイティングリストに登録された顧客情報。 */
    'Models.WaitlistEntryUpdate': {
      /**
       * Format: int32
       * @description 現在の待機順序。
       */
      position?: number
      /**
       * Format: date-time
       * @description 呼び出し予想時刻。時刻が未確定の場合はnull。
       */
      estimatedTime?: string | null
      /**
       * Format: date-time
       * @description ウェイティングリストに参加した日時。
       */
      joinedAt?: string
      /**
       * Format: date-time
       * @description 待機権が失効する日時。無期限の場合はnull。
       */
      expiresAt?: string | null
      /**
       * Format: date-time
       * @description 呼び出し通知を送信した日時。未通知の場合はnull。
       */
      notifiedAt?: string | null
      /** @description 希望スタッフID。指名なしの場合はnull。 */
      preferredStaffId?:
        | (string & components['schemas']['Models.StaffId'])
        | null
      /** @description 希望サービスID。サービスを指定していない場合はnull。 */
      preferredServiceId?:
        | (string & components['schemas']['Models.ServiceId'])
        | null
      /** @description 追加メモ。メモがない場合はnull。 */
      notes?: string | null
    }
    /**
     * Format: double
     * @description 税率や金額計算で用いる汎用小数型。
     */
    'Models.decimal': number
    /** @description 監査ログ1件分の詳細を保持するモデルです。誰がいつどのような変更を行ったかを記録します。 */
    'Operations.AuditEntry': {
      /** @description Audit entry ID */
      id: string
      /** @description Entity ID */
      entityId: string
      /** @description Entity type */
      entity: string
      /**
       * @description Operation performed
       * @enum {string}
       */
      operation: 'create' | 'update' | 'delete' | 'restore'
      /** @description User who performed the operation */
      userId: string
      /** @description User display name */
      userName?: string
      /** @description IP address */
      ipAddress?: string
      /** @description User agent */
      userAgent?: string
      /**
       * Format: date-time
       * @description Timestamp of the operation
       */
      timestamp: string
      /** @description Changes made */
      changes?: components['schemas']['Operations.ChangeSet'][]
      /** @description Entity snapshot before change */
      before?: unknown
      /** @description Entity snapshot after change */
      after?: unknown
      /** @description Additional metadata */
      metadata?: {
        [key: string]: unknown
      }
    }
    'Operations.ChangeSet': {
      /** @description Field that was changed */
      field: string
      /** @description Previous value */
      oldValue?: unknown
      /** @description New value */
      newValue?: unknown
    }
  }
  responses: never
  parameters: {
    /** @description レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。 */
    'Models.AdvancedSearchParams.exclude': string
    /** @description 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。 */
    'Models.AdvancedSearchParams.facetFields': string[]
    /** @description ファセット集計を有効化するかどうか。true で各項目の件数を集計する。 */
    'Models.AdvancedSearchParams.facets': boolean
    /** @description レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。 */
    'Models.AdvancedSearchParams.fields': string
    /** @description フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。 */
    'Models.AdvancedSearchParams.filter': string
    /** @description 全文検索キーワード。名称や説明文を横断的に検索する。 */
    'Models.AdvancedSearchParams.q': string
    /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
    'Models.CursorPaginationParams.cursor': string
    /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
    'Models.CursorPaginationParams.limit': number
    /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
    'Models.CursorPaginationParams.sortBy': string
    /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
    'Models.CursorPaginationParams.sortOrder': 'asc' | 'desc'
    /** @description ロイヤルティティアでフィルタ */
    'Models.CustomerSearchRequest.loyaltyTier': components['schemas']['Models.LoyaltyTierType']
    /** @description 登録日開始でフィルタ */
    'Models.CustomerSearchRequest.registeredFrom': string
    /** @description 登録日終了でフィルタ */
    'Models.CustomerSearchRequest.registeredTo': string
    /** @description 顧客名、メール、または電話番号で検索 */
    'Models.CustomerSearchRequest.search': string
    /** @description 顧客ステータスでフィルタ */
    'Models.CustomerSearchRequest.status': components['schemas']['Models.CustomerStatusType']
    /** @description 顧客タグでフィルタ */
    'Models.CustomerSearchRequest.tags': string[]
    /** @description 検索対象期間の終了日時。 */
    'Models.DateRangeFilter.endDate': string
    /** @description 検索対象期間の開始日時。 */
    'Models.DateRangeFilter.startDate': string
    /** @description 更新対象フィールドをカンマ区切りで列挙した文字列。例: `name,address.street`。 */
    'Models.FieldMask': string
    /** @description カテゴリでの絞り込み */
    'Models.InventorySearchRequest.category': string
    /** @description 期限切れ間近の在庫を取得するか */
    'Models.InventorySearchRequest.expiringSoon': boolean
    /** @description 最低在庫を下回るもののみ取得するか */
    'Models.InventorySearchRequest.lowStock': boolean
    /** @description 検索対象のサロン ID */
    'Models.InventorySearchRequest.salonId': components['schemas']['Models.SalonId']
    /** @description 在庫状態での絞り込み */
    'Models.InventorySearchRequest.status': components['schemas']['Models.InventoryStatusType']
    /** @description 1ページあたりの取得件数。省略時は20件。 */
    'Models.PaginationParams.limit': number
    /** @description 取得開始位置を表すオフセット。省略時は0。 */
    'Models.PaginationParams.offset': number
    /** @description 集計粒度（日/週/月） */
    'Models.SalesReportQuery.groupBy': 'day' | 'week' | 'month'
    /** @description 返金取引を集計に含めるかどうか */
    'Models.SalesReportQuery.includeRefunds': boolean
    /** @description 集計対象のサロン ID */
    'Models.SalesReportQuery.salonId': components['schemas']['Models.SalonId']
    /** @description サービスカテゴリ（カット・カラー等）による絞り込み */
    'Models.SalonSearchRequest.categories': components['schemas']['Models.ServiceCategoryType'][]
    /** @description 市区町村名による絞り込み */
    'Models.SalonSearchRequest.city': string
    /** @description 設備やこだわり条件などの特徴タグによる絞り込み */
    'Models.SalonSearchRequest.features': string[]
    /** @description 営業中サロンのみを対象にするかどうか */
    'Models.SalonSearchRequest.isActive': boolean
    /** @description 検索キーワード。qパラメータのエイリアス */
    'Models.SalonSearchRequest.keyword': string
    /** @description 距離計算に使用する基準緯度 */
    'Models.SalonSearchRequest.lat': number
    /** @description 距離計算に使用する基準経度 */
    'Models.SalonSearchRequest.lon': number
    /** @description 検索基点からの最大距離（km） */
    'Models.SalonSearchRequest.maxDistance': number
    /** @description 最低評価値による絞り込み */
    'Models.SalonSearchRequest.minRating': number
    /** @description 特定日時に営業しているサロンを探すための基準日時 */
    'Models.SalonSearchRequest.openAt': string
    /** @description 現在営業中かどうかで絞り込むフラグ */
    'Models.SalonSearchRequest.openNow': boolean
    /** @description 都道府県名による絞り込み */
    'Models.SalonSearchRequest.prefecture': string
    /** @description フリーワード検索用キーワード。 */
    'Models.SearchParams.q': string
    /** @description 並び替え対象カラム名。 */
    'Models.SearchParams.sortBy': string
    /** @description 昇順ascまたは降順descの指定。 */
    'Models.SearchParams.sortOrder': 'asc' | 'desc'
  }
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AccessControlOperations_checkAccess: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AccessCheck']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.AccessResult']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_checkPermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PermissionCheckRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PermissionCheckResult']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_getResourceAccess: {
    parameters: {
      query?: {
        action?: string
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        resource: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  userId: string
                  userName?: string
                  hasAccess: boolean
                  grantedBy: string[]
                }[]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_getUserPermissions: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  userId: string
                  permissions: string[]
                  roles: {
                    roleId: components['schemas']['Models.RoleId']
                    roleName: string
                    permissions: string[]
                  }[]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_validatePermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          roleId: components['schemas']['Models.RoleId']
          requiredPermissions: string[]
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  isValid: boolean
                  missingPermissions: string[]
                  extraPermissions: string[]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SystemOperations_alive: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @enum {boolean} */
            alive: true
          }
        }
      }
    }
  }
  SystemOperations_health: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.HealthStatus']
        }
      }
      /** @description Service unavailable. */
      503: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.HealthStatus']
        }
      }
    }
  }
  SystemOperations_metrics: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SystemOperations_ready: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            ready: boolean
          }
        }
      }
      /** @description Service unavailable. */
      503: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            ready: boolean
            reason?: string
          }
        }
      }
    }
  }
  SystemOperations_version: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            version: string
            /** Format: date-time */
            buildTime: string
            gitCommit?: string
            gitBranch?: string
            environment?: string
          }
        }
      }
    }
  }
  AdminAuthOperations_addTrustedIp: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ipAddress: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AdminAuthOperations_removeTrustedIp: {
    parameters: {
      query: {
        ipAddress: string
      }
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AdminAuthOperations_unlockAccount: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_list: {
    parameters: {
      query?: {
        salonId?: string
        page?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.PaginatedAttachments']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_deleteShareLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        shareLinkId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AttachmentOperations_uploadFile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AttachmentCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_getUploadUrl: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AttachmentUploadUrlGetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.AttachmentUploadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AttachmentOperations_getDownloadUrl: {
    parameters: {
      query?: {
        inline?: boolean
      }
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.AttachmentDownloadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_listShareLinks: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.ShareLink'][]
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_createShareLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.ShareLinkCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.ShareLink']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_generateBackupCodes: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthTwoFactorVerifyRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            backupCodes: string[]
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_disableTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthTwoFactorDisableRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_enableTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthTwoFactorEnableRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthTwoFactorSetupResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getTwoFactorQRCode: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthTwoFactorSetupResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_verifyTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthTwoFactorVerifyRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_changePassword: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthPasswordChangeRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_forgotPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthPasswordResetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthLoginRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthLoginResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_logout: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_logoutAll: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getCurrentUser: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.User']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_refreshToken: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthTokenRefreshRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthLoginResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_register: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthRegisterRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.User']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_resetPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthPasswordResetConfirmRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_verifyResetToken: {
    parameters: {
      query: {
        token: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getSessions: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSessionListResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_revokeSession: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        sessionId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_confirmEmailVerification: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AuthEmailVerificationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_sendEmailVerification: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        status?: components['schemas']['Models.BookingStatusCodeType']
        from?: string
        to?: string
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.BookingDetail'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  BookingOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateBookingRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.BookingDetail']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.BookingUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_cancel: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason?: string
          cancelReservations?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_confirm: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_processPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          paymentMethod: components['schemas']['Models.PaymentMethodType']
          amount: components['schemas']['Models.Money']
          transactionId?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            booking: components['schemas']['Models.Booking']
            paymentId: components['schemas']['Models.PaymentId']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_addReservation: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reservationId: components['schemas']['Models.ReservationId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_removeReservation: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
        reservationId: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerCrud_list: {
    parameters: {
      query?: {
        /** @description 顧客名、メール、または電話番号で検索 */
        search?: components['parameters']['Models.CustomerSearchRequest.search']
        /** @description 顧客タグでフィルタ */
        tags?: components['parameters']['Models.CustomerSearchRequest.tags']
        /** @description 登録日開始でフィルタ */
        registeredFrom?: components['parameters']['Models.CustomerSearchRequest.registeredFrom']
        /** @description 登録日終了でフィルタ */
        registeredTo?: components['parameters']['Models.CustomerSearchRequest.registeredTo']
        /** @description 顧客ステータスでフィルタ */
        status?: components['parameters']['Models.CustomerSearchRequest.status']
        /** @description ロイヤルティティアでフィルタ */
        loyaltyTier?: components['parameters']['Models.CustomerSearchRequest.loyaltyTier']
        /** @description 全文検索キーワード。名称や説明文を横断的に検索する。 */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。 */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。 */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。 */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description ファセット集計を有効化するかどうか。true で各項目の件数を集計する。 */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。 */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          /** @description 一定期間内に許可されるリクエスト上限値。 */
          'X-RateLimit-Limit': number
          /** @description 現在のウィンドウで残っているリクエスト回数。 */
          'X-RateLimit-Remaining': number
          /** @description リミットがリセットされる時刻 (UNIX 時間)。 */
          'X-RateLimit-Reset': number
          /** @description レート制限に達した際に再試行可能となるまでの秒数。制限に達していない場合はnull */
          'Retry-After': number | null
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Models.Customer'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          /** @description 一定期間内に許可されるリクエスト上限値。 */
          'X-RateLimit-Limit': number
          /** @description 現在のウィンドウで残っているリクエスト回数。 */
          'X-RateLimit-Remaining': number
          /** @description リミットがリセットされる時刻 (UNIX 時間)。 */
          'X-RateLimit-Reset': number
          /** @description レート制限に達した際に再試行可能となるまでの秒数。制限に達していない場合はnull */
          'Retry-After': number | null
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_create: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CustomerCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_batchGet: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.BatchGetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer'][]
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_bulkUpdate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 処理対象となるアイテムの配列。1件以上100件以下に制限する。 */
          items: {
            /** @description 顧客氏名。フルネームまたは通称名 */
            name?: string
            /** @description 連絡先情報。メール、電話番号等の連絡手段 */
            contactInfo?: components['schemas']['Models.ContactInfo']
            /** @description 顧客の好みや要望。カスタム設定情報 */
            preferences?: {
              [key: string]: unknown
            }
            /** @description 内部メモ。スタッフ用の顧客に関する備考。null指定でリセット可能 */
            notes?: string | null
            /** @description 分類用タグ。顧客をグループ化するためのラベル */
            tags?: string[]
            /**
             * Format: date
             * @description 生年月日。年齢計算や誕生日特典に使用。null指定でリセット可能
             */
            birthDate?: string | null
            id: components['schemas']['Models.CustomerId']
          }[]
          /**
           * @description 途中でエラーが発生しても処理を継続するかどうか。既定は false。
           * @default false
           */
          continueOnError: boolean
          /**
           * @description トランザクション内で一括処理を行うかどうか。既定は true。
           * @default true
           */
          transactional: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 正常に処理されたアイテムの一覧。ビジネス結果を含む。 */
            succeeded: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 処理後のビジネス結果。ID 付与や更新後の値などを含む。 */
              result: components['schemas']['Models.Customer']
            }[]
            /** @description エラーとなったアイテムの一覧。問題の詳細を確認できる。 */
            failed: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 発生したエラー詳細。既定では `ProblemDetails` を使用する。 */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description 処理件数や所要時間をまとめた統計情報。 */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_bulkCreate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 処理対象となるアイテムの配列。1件以上100件以下に制限する。 */
          items: components['schemas']['Models.CustomerCreateRequest'][]
          /**
           * @description 途中でエラーが発生しても処理を継続するかどうか。既定は false。
           * @default false
           */
          continueOnError: boolean
          /**
           * @description トランザクション内で一括処理を行うかどうか。既定は true。
           * @default true
           */
          transactional: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 正常に処理されたアイテムの一覧。ビジネス結果を含む。 */
            succeeded: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 処理後のビジネス結果。ID 付与や更新後の値などを含む。 */
              result: components['schemas']['Models.Customer']
            }[]
            /** @description エラーとなったアイテムの一覧。問題の詳細を確認できる。 */
            failed: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 発生したエラー詳細。既定では `ProblemDetails` を使用する。 */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description 処理件数や所要時間をまとめた統計情報。 */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_bulkDelete: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ids: components['schemas']['Models.CustomerId'][]
          permanent?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 正常に処理されたアイテムの一覧。ビジネス結果を含む。 */
            succeeded: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 処理後のビジネス結果。ID 付与や更新後の値などを含む。 */
              result: {
                id: components['schemas']['Models.CustomerId']
                deleted: boolean
              }
            }[]
            /** @description エラーとなったアイテムの一覧。問題の詳細を確認できる。 */
            failed: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 発生したエラー詳細。既定では `ProblemDetails` を使用する。 */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description 処理件数や所要時間をまとめた統計情報。 */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_export: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 顧客名、メール、または電話番号で検索 */
          search?: string
          /** @description 顧客タグでフィルタ */
          tags?: string[]
          /**
           * Format: date-time
           * @description 登録日開始でフィルタ
           */
          registeredFrom?: string
          /**
           * Format: date-time
           * @description 登録日終了でフィルタ
           */
          registeredTo?: string
          /**
           * @description 顧客ステータスでフィルタ
           * @enum {string}
           */
          status?:
            | 'active'
            | 'inactive'
            | 'suspended'
            | 'deleted'
            | 'blacklisted'
          /**
           * @description ロイヤルティティアでフィルタ
           * @enum {string}
           */
          loyaltyTier?: 'bronze' | 'silver' | 'gold' | 'platinum'
          /** @description 全文検索キーワード。名称や説明文を横断的に検索する。 */
          q?: string
          /** @description フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。 */
          filter?: string
          /** @description レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。 */
          fields?: string
          /** @description レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。 */
          exclude?: string
          /**
           * @description ファセット集計を有効化するかどうか。true で各項目の件数を集計する。
           * @default false
           */
          facets?: boolean
          /** @description 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。 */
          facetFields?: string[]
          /**
           * Format: int32
           * @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。
           * @default 20
           */
          limit?: number
          /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
          cursor?: string
          /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
          sortBy?: string
          /**
           * @description ソート順序。`asc` は昇順、`desc` は降順を表す。
           * @default asc
           * @enum {string}
           */
          sortOrder?: 'asc' | 'desc'
          /** @enum {string} */
          format: 'csv' | 'json' | 'excel'
          exportFields?: string[]
        }
      }
    }
    responses: {
      /** @description The request has been accepted for processing, but processing has not yet completed. */
      202: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            jobId: string
            /** @enum {string} */
            status: 'pending'
            /** Format: int32 */
            estimatedTime?: number
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_merge: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 統合後も残すメイン顧客ID */
          primaryCustomerId: components['schemas']['Models.CustomerId']
          /** @description 統合して削除するサブ顧客ID */
          secondaryCustomerId: components['schemas']['Models.CustomerId']
          /**
           * @description 重複データの優先ルール
           * @enum {string}
           */
          conflictResolution?: 'keep_primary' | 'keep_secondary' | 'keep_newest'
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_search: {
    parameters: {
      query?: {
        /** @description 顧客名、メール、または電話番号で検索 */
        search?: components['parameters']['Models.CustomerSearchRequest.search']
        /** @description 顧客タグでフィルタ */
        tags?: components['parameters']['Models.CustomerSearchRequest.tags']
        /** @description 登録日開始でフィルタ */
        registeredFrom?: components['parameters']['Models.CustomerSearchRequest.registeredFrom']
        /** @description 登録日終了でフィルタ */
        registeredTo?: components['parameters']['Models.CustomerSearchRequest.registeredTo']
        /** @description 顧客ステータスでフィルタ */
        status?: components['parameters']['Models.CustomerSearchRequest.status']
        /** @description ロイヤルティティアでフィルタ */
        loyaltyTier?: components['parameters']['Models.CustomerSearchRequest.loyaltyTier']
        /** @description 全文検索キーワード。名称や説明文を横断的に検索する。 */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。 */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。 */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。 */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description ファセット集計を有効化するかどうか。true で各項目の件数を集計する。 */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。 */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 検索でヒットした結果一覧。サロンカードやメニュー一覧に利用。 */
            results: components['schemas']['Models.Customer'][]
            /** @description 検索条件や件数などのメタ情報。ページングやログ解析に活用する。 */
            meta: components['schemas']['Models.SearchMeta']
            /** @description ファセット集計結果。各フィールドごとの件数分布を保持する。 */
            facets: {
              [key: string]: components['schemas']['Models.Facet'][]
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_get: {
    parameters: {
      query?: {
        fields?: string
      }
      header?: {
        Authorization?: string
        'If-None-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          'Last-Modified': string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The client has made a conditional request and the resource has not been modified. */
      304: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_update: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CustomerUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_delete: {
    parameters: {
      query?: {
        permanent?: boolean
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_patch: {
    parameters: {
      query?: {
        /** @description 更新対象フィールドをカンマ区切りで列挙した文字列。例: `name,address.street`。 */
        updateMask?: components['parameters']['Models.FieldMask']
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CustomerUpdateRequestUpdate']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getBookings: {
    parameters: {
      query?: {
        status?: components['schemas']['Models.BookingStatusCodeType']
        /** @description 取得対象期間の開始日時 */
        from?: string
        /** @description 取得対象期間の終了日時 */
        to?: string
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Models.BookingDetail'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_requestDeletion: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 削除を希望する理由 */
          reason: string
          /** @description 削除に伴う影響を理解しているか */
          confirmed: boolean
        }
      }
    }
    responses: {
      /** @description The request has been accepted for processing, but processing has not yet completed. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: {
              /** @description 削除リクエストID */
              requestId: string
              /**
               * Format: date-time
               * @description 予定される削除日
               */
              scheduledDate: string
              /**
               * Format: int32
               * @description 猶予期間（日数）
               */
              gracePeriodDays: number
            }
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_exportData: {
    parameters: {
      query?: {
        /** @description エクスポート形式 */
        format?: 'json' | 'csv' | 'pdf'
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          'Content-Disposition': string
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_getHistory: {
    parameters: {
      query?: {
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Operations.AuditEntry'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_addLoyaltyPoints: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: int32
           * @description 加算するポイント数
           */
          points: number
          /** @description ポイント加算の理由 */
          reason: string
          /** @description 関連する参照ID（例: 予約ID） */
          referenceId?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: {
              /**
               * Format: int32
               * @description 更新後のポイント残高
               */
              balance: number
              /** @description トランザクションID */
              transactionId: string
            }
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_updatePreferences: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CustomerPreferencesUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.CustomerPreferences']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getProfile: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.CustomerProfile']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getReservations: {
    parameters: {
      query?: {
        status?: components['schemas']['Models.ReservationStatusType']
        /** @description 取得対象期間の開始日時 */
        from?: string
        /** @description 取得対象期間の終了日時 */
        to?: string
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Models.ReservationDetail'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_restore: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getStatistics: {
    parameters: {
      query?: {
        /** @description 集計対象期間（例: '7d', '1m', '3m', '1y'） */
        period?: string
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.CustomerStatistics']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_getVersion: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
        version: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Customer']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  ReservationOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        staffId?: components['schemas']['Models.StaffId']
        status?: components['schemas']['Models.ReservationStatusType']
        from?: string
        to?: string
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.ReservationDetail'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  ReservationOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateReservationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReservationDetail']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateReservationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_cancel: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_complete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_reschedule: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: date-time */
          newStartTime: string
          staffId?: components['schemas']['Models.StaffId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        bookingId?: components['schemas']['Models.BookingId']
        staffId?: components['schemas']['Models.StaffId']
        minRating?: number
        isVerified?: boolean
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.Review'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  ReviewOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.ReviewCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.ReviewUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_markHelpful: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** Format: int32 */
            helpfulCount: number
          }
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_report: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
          details?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            reportId: string
          }
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  SalonCrud_list: {
    parameters: {
      query?: {
        /** @description 検索キーワード。qパラメータのエイリアス */
        keyword?: components['parameters']['Models.SalonSearchRequest.keyword']
        /** @description 市区町村名による絞り込み */
        city?: components['parameters']['Models.SalonSearchRequest.city']
        /** @description 都道府県名による絞り込み */
        prefecture?: components['parameters']['Models.SalonSearchRequest.prefecture']
        /** @description サービスカテゴリ（カット・カラー等）による絞り込み */
        categories?: components['parameters']['Models.SalonSearchRequest.categories']
        /** @description 設備やこだわり条件などの特徴タグによる絞り込み */
        features?: components['parameters']['Models.SalonSearchRequest.features']
        /** @description 営業中サロンのみを対象にするかどうか */
        isActive?: components['parameters']['Models.SalonSearchRequest.isActive']
        /** @description 最低評価値による絞り込み */
        minRating?: components['parameters']['Models.SalonSearchRequest.minRating']
        /** @description 検索基点からの最大距離（km） */
        maxDistance?: components['parameters']['Models.SalonSearchRequest.maxDistance']
        /** @description 距離計算に使用する基準緯度 */
        lat?: components['parameters']['Models.SalonSearchRequest.lat']
        /** @description 距離計算に使用する基準経度 */
        lon?: components['parameters']['Models.SalonSearchRequest.lon']
        /** @description 現在営業中かどうかで絞り込むフラグ */
        openNow?: components['parameters']['Models.SalonSearchRequest.openNow']
        /** @description 特定日時に営業しているサロンを探すための基準日時 */
        openAt?: components['parameters']['Models.SalonSearchRequest.openAt']
        /** @description 全文検索キーワード。名称や説明文を横断的に検索する。 */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。 */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。 */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。 */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description ファセット集計を有効化するかどうか。true で各項目の件数を集計する。 */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。 */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          /** @description 一定期間内に許可されるリクエスト上限値。 */
          'X-RateLimit-Limit': number
          /** @description 現在のウィンドウで残っているリクエスト回数。 */
          'X-RateLimit-Remaining': number
          /** @description リミットがリセットされる時刻 (UNIX 時間)。 */
          'X-RateLimit-Reset': number
          /** @description レート制限に達した際に再試行可能となるまでの秒数。制限に達していない場合はnull */
          'Retry-After': number | null
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Models.Salon'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          /** @description 一定期間内に許可されるリクエスト上限値。 */
          'X-RateLimit-Limit': number
          /** @description 現在のウィンドウで残っているリクエスト回数。 */
          'X-RateLimit-Remaining': number
          /** @description リミットがリセットされる時刻 (UNIX 時間)。 */
          'X-RateLimit-Reset': number
          /** @description レート制限に達した際に再試行可能となるまでの秒数。制限に達していない場合はnull */
          'Retry-After': number | null
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_create: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateSalonRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Salon']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_batchGet: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.BatchGetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Salon'][]
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_bulkUpdate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 処理対象となるアイテムの配列。1件以上100件以下に制限する。 */
          items: {
            /** @description 名称変更を行う場合に指定 */
            name?: string
            /** @description 紹介文を更新する場合に指定（null指定で初期化可能） */
            description?: string | null
            /** @description 住所情報の差し替えが必要な場合に指定 */
            address?: components['schemas']['Models.Address']
            /** @description 電話番号やメールアドレス等の連絡先を更新する場合に指定 */
            contactInfo?: components['schemas']['Models.ContactInfo']
            /** @description 通常営業時間の更新が必要な場合に指定 */
            openingHours?: components['schemas']['Models.OpeningHours'][]
            /** @description 特別営業時間やシフト設定の更新に利用（null指定で初期化可能） */
            businessHours?:
              | components['schemas']['Models.BusinessHours'][]
              | null
            /** @description 画像URLリストを更新する場合に指定 */
            imageUrls?: string[]
            /** @description 特徴タグの追加・削除を行う場合に指定 */
            features?: string[]
            id: components['schemas']['Models.SalonId']
          }[]
          /**
           * @description 途中でエラーが発生しても処理を継続するかどうか。既定は false。
           * @default false
           */
          continueOnError: boolean
          /**
           * @description トランザクション内で一括処理を行うかどうか。既定は true。
           * @default true
           */
          transactional: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 正常に処理されたアイテムの一覧。ビジネス結果を含む。 */
            succeeded: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 処理後のビジネス結果。ID 付与や更新後の値などを含む。 */
              result: components['schemas']['Models.Salon']
            }[]
            /** @description エラーとなったアイテムの一覧。問題の詳細を確認できる。 */
            failed: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 発生したエラー詳細。既定では `ProblemDetails` を使用する。 */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description 処理件数や所要時間をまとめた統計情報。 */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_bulkCreate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 処理対象となるアイテムの配列。1件以上100件以下に制限する。 */
          items: components['schemas']['Models.CreateSalonRequest'][]
          /**
           * @description 途中でエラーが発生しても処理を継続するかどうか。既定は false。
           * @default false
           */
          continueOnError: boolean
          /**
           * @description トランザクション内で一括処理を行うかどうか。既定は true。
           * @default true
           */
          transactional: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 正常に処理されたアイテムの一覧。ビジネス結果を含む。 */
            succeeded: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 処理後のビジネス結果。ID 付与や更新後の値などを含む。 */
              result: components['schemas']['Models.Salon']
            }[]
            /** @description エラーとなったアイテムの一覧。問題の詳細を確認できる。 */
            failed: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 発生したエラー詳細。既定では `ProblemDetails` を使用する。 */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description 処理件数や所要時間をまとめた統計情報。 */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_bulkDelete: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ids: components['schemas']['Models.SalonId'][]
          permanent?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 正常に処理されたアイテムの一覧。ビジネス結果を含む。 */
            succeeded: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 処理後のビジネス結果。ID 付与や更新後の値などを含む。 */
              result: {
                id: components['schemas']['Models.SalonId']
                deleted: boolean
              }
            }[]
            /** @description エラーとなったアイテムの一覧。問題の詳細を確認できる。 */
            failed: {
              /**
               * Format: int32
               * @description 元リクエスト内でのインデックス。0 始まり。
               */
              index: number
              /** @description 発生したエラー詳細。既定では `ProblemDetails` を使用する。 */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description 処理件数や所要時間をまとめた統計情報。 */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_export: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description 検索キーワード。qパラメータのエイリアス */
          keyword?: string
          /** @description 市区町村名による絞り込み */
          city?: string
          /** @description 都道府県名による絞り込み */
          prefecture?: string
          /** @description サービスカテゴリ（カット・カラー等）による絞り込み */
          categories?: components['schemas']['Models.ServiceCategoryType'][]
          /** @description 設備やこだわり条件などの特徴タグによる絞り込み */
          features?: string[]
          /** @description 営業中サロンのみを対象にするかどうか */
          isActive?: boolean
          /**
           * Format: float
           * @description 最低評価値による絞り込み
           */
          minRating?: number
          /**
           * Format: float
           * @description 検索基点からの最大距離（km）
           */
          maxDistance?: number
          /**
           * Format: double
           * @description 距離計算に使用する基準緯度
           */
          lat?: number
          /**
           * Format: double
           * @description 距離計算に使用する基準経度
           */
          lon?: number
          /** @description 現在営業中かどうかで絞り込むフラグ */
          openNow?: boolean
          /**
           * Format: date-time
           * @description 特定日時に営業しているサロンを探すための基準日時
           */
          openAt?: string
          /** @description 全文検索キーワード。名称や説明文を横断的に検索する。 */
          q?: string
          /** @description フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。 */
          filter?: string
          /** @description レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。 */
          fields?: string
          /** @description レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。 */
          exclude?: string
          /**
           * @description ファセット集計を有効化するかどうか。true で各項目の件数を集計する。
           * @default false
           */
          facets?: boolean
          /** @description 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。 */
          facetFields?: string[]
          /**
           * Format: int32
           * @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。
           * @default 20
           */
          limit?: number
          /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
          cursor?: string
          /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
          sortBy?: string
          /**
           * @description ソート順序。`asc` は昇順、`desc` は降順を表す。
           * @default asc
           * @enum {string}
           */
          sortOrder?: 'asc' | 'desc'
          /** @enum {string} */
          format: 'csv' | 'json' | 'excel'
          exportFields?: string[]
        }
      }
    }
    responses: {
      /** @description The request has been accepted for processing, but processing has not yet completed. */
      202: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            jobId: string
            /** @enum {string} */
            status: 'pending'
            /** Format: int32 */
            estimatedTime?: number
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_getNearby: {
    parameters: {
      query: {
        /** @description 緯度 */
        lat: number
        /** @description 経度 */
        lon: number
        /** @description 検索半径（キロメートル） */
        radius?: number
        /** @description 対象サービスカテゴリのフィルター */
        categories?: components['schemas']['Models.ServiceCategoryType'][]
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Models.SalonWithDistance'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_getRecommendations: {
    parameters: {
      query?: {
        /** @description パーソナライズ対象となる顧客ID */
        customerId?: components['schemas']['Models.CustomerId']
        /** @description 興味のあるサービスカテゴリ */
        categories?: components['schemas']['Models.ServiceCategoryType'][]
        /** @description 希望する価格帯 */
        priceRange?: 'budget' | 'medium' | 'premium'
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Models.SalonRecommendation'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_search: {
    parameters: {
      query?: {
        /** @description 検索キーワード。qパラメータのエイリアス */
        keyword?: components['parameters']['Models.SalonSearchRequest.keyword']
        /** @description 市区町村名による絞り込み */
        city?: components['parameters']['Models.SalonSearchRequest.city']
        /** @description 都道府県名による絞り込み */
        prefecture?: components['parameters']['Models.SalonSearchRequest.prefecture']
        /** @description サービスカテゴリ（カット・カラー等）による絞り込み */
        categories?: components['parameters']['Models.SalonSearchRequest.categories']
        /** @description 設備やこだわり条件などの特徴タグによる絞り込み */
        features?: components['parameters']['Models.SalonSearchRequest.features']
        /** @description 営業中サロンのみを対象にするかどうか */
        isActive?: components['parameters']['Models.SalonSearchRequest.isActive']
        /** @description 最低評価値による絞り込み */
        minRating?: components['parameters']['Models.SalonSearchRequest.minRating']
        /** @description 検索基点からの最大距離（km） */
        maxDistance?: components['parameters']['Models.SalonSearchRequest.maxDistance']
        /** @description 距離計算に使用する基準緯度 */
        lat?: components['parameters']['Models.SalonSearchRequest.lat']
        /** @description 距離計算に使用する基準経度 */
        lon?: components['parameters']['Models.SalonSearchRequest.lon']
        /** @description 現在営業中かどうかで絞り込むフラグ */
        openNow?: components['parameters']['Models.SalonSearchRequest.openNow']
        /** @description 特定日時に営業しているサロンを探すための基準日時 */
        openAt?: components['parameters']['Models.SalonSearchRequest.openAt']
        /** @description 全文検索キーワード。名称や説明文を横断的に検索する。 */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description フィルター式。例: `status:active AND category:premium`。属性条件を組み合わせた絞り込みに使用。 */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description レスポンスに含めるフィールドのカンマ区切りリスト。データ転送量の最適化に活用。 */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description レスポンスから除外したいフィールドのカンマ区切りリスト。不要情報を除く場合に利用。 */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description ファセット集計を有効化するかどうか。true で各項目の件数を集計する。 */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description 集計対象とするファセットフィールドの一覧。カテゴリや価格帯などを指定する。 */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 検索でヒットした結果一覧。サロンカードやメニュー一覧に利用。 */
            results: components['schemas']['Models.Salon'][]
            /** @description 検索条件や件数などのメタ情報。ページングやログ解析に活用する。 */
            meta: components['schemas']['Models.SearchMeta']
            /** @description ファセット集計結果。各フィールドごとの件数分布を保持する。 */
            facets: {
              [key: string]: components['schemas']['Models.Facet'][]
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_get: {
    parameters: {
      query?: {
        fields?: string
      }
      header?: {
        Authorization?: string
        'If-None-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          'Last-Modified': string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Salon']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The client has made a conditional request and the resource has not been modified. */
      304: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_update: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateSalonRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Salon']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_delete: {
    parameters: {
      query?: {
        permanent?: boolean
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_patch: {
    parameters: {
      query?: {
        /** @description 更新対象フィールドをカンマ区切りで列挙した文字列。例: `name,address.street`。 */
        updateMask?: components['parameters']['Models.FieldMask']
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateSalonRequestUpdate']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Salon']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_checkAvailability: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.SalonAvailabilityRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.SalonAvailabilityResponse']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_getHistory: {
    parameters: {
      query?: {
        /** @description 1ページあたりの取得件数上限 (1〜100)。指定が無い場合は既定値 20 を適用。 */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description 次ページを指し示すカーソル。前回レスポンスの `meta.nextCursor` を設定する。 */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description ソート対象フィールド。予約日時や作成日時など業務軸を指定する。 */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description ソート順序。`asc` は昇順、`desc` は降順を表す。 */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 現在ページで取得したデータ配列。サロン一覧や予約履歴の実データを格納する。 */
            data: components['schemas']['Operations.AuditEntry'][]
            /** @description ページング状態を示すメタ情報。次ページの有無やカーソル値を含む。 */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description 関連するページ遷移リンク。HATEOAS 連携や外部連携向けに利用する。 */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_deleteImage: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
        imageId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_restore: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Salon']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_updateStaffSchedule: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StaffScheduleUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.StaffScheduleManagement']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_getStatistics: {
    parameters: {
      query?: {
        /** @description 集計期間（例: '7d', '1m', '3m'） */
        period?: string
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.SalonStatistics']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_subscribe: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.SalonSubscriptionRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.SalonSubscriptionResponse']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_getVersion: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
        version: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description レスポンスの主体となるビジネスデータ。 */
            data: components['schemas']['Models.Salon']
            /** @description リクエスト識別子やバージョン情報など共通メタデータ。メタ情報が不要な場合はnull */
            meta: components['schemas']['Models.ResponseMeta'] | null
            /** @description 関連リソースや次アクションへのリンク情報。リンクがない場合はnull */
            links: {
              [key: string]: string
            } | null
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  AvailabilityOperations_getAvailableSlots: {
    parameters: {
      query: {
        staffId?: components['schemas']['Models.StaffId']
        serviceId: components['schemas']['Models.ServiceId']
        date: string
        duration?: number
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AvailableSlot'][]
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AvailabilityOperations_checkAvailability: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          staffId: components['schemas']['Models.StaffId']
          serviceId: components['schemas']['Models.ServiceId']
          /** Format: date-time */
          startTime: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            isAvailable: boolean
            conflicts?: components['schemas']['Models.ReservationId'][]
          }
        }
      }
    }
  }
  SalonReviewOperations_getSalonReviews: {
    parameters: {
      query?: {
        sortBy?: 'recent' | 'rating' | 'helpful'
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.Review'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  SalonReviewOperations_getSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReviewSummary']
        }
      }
    }
  }
  ServiceOperations_list: {
    parameters: {
      query?: {
        category?: components['schemas']['Models.ServiceCategoryType']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.Service'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  ServiceOperations_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateServiceRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_bulkUpdate: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          serviceIds?: components['schemas']['Models.ServiceId'][]
          updates?: components['schemas']['Models.UpdateServiceRequestUpdate']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            updated: components['schemas']['Models.ServiceId'][]
            failed: {
              serviceId: components['schemas']['Models.ServiceId']
              error: string
            }[]
          }
        }
      }
    }
  }
  ServiceOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateServiceRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_list: {
    parameters: {
      query?: {
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.Staff'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  StaffOperations_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateStaffRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateStaffRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_getAvailability: {
    parameters: {
      query: {
        date: string
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.StaffAvailability'][]
        }
      }
    }
  }
  StaffOperations_updateAvailability: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StaffAvailability'][]
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.StaffAvailability'][]
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CategoryOperations_listCategories: {
    parameters: {
      query?: {
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.CategoryModel'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  CategoryOperations_createCategory: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          description: string
          parentId?: components['schemas']['Models.CategoryId']
          /** Format: int32 */
          displayOrder: number
        }
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.CategoryModel']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CategoryOperations_updateCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CategoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name?: string
          description?: string
          parentId?: components['schemas']['Models.CategoryId']
          /** Format: int32 */
          displayOrder?: number
          isActive?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.CategoryModel']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CategoryOperations_deleteCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CategoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ShareOperations_getSharedFile: {
    parameters: {
      query?: {
        password?: string
      }
      header?: never
      path: {
        shareToken: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  ShareOperations_downloadSharedFile: {
    parameters: {
      query?: {
        password?: string
      }
      header?: never
      path: {
        shareToken: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.AttachmentDownloadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  GlobalStaffOperations_searchStaff: {
    parameters: {
      query?: {
        specialty?: string
        city?: string
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.Staff'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  StaffReviewOperations_getStaffReviews: {
    parameters: {
      query?: {
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description 取得した要素の配列。 */
            data: components['schemas']['Models.Review'][]
            /**
             * Format: int32
             * @description 条件に一致する全件数。
             */
            total: number
            /**
             * Format: int32
             * @description 1ページあたりの件数。
             */
            limit: number
            /**
             * Format: int32
             * @description 取得開始位置のオフセット。
             */
            offset: number
          }
        }
      }
    }
  }
  StaffReviewOperations_getStaffSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReviewSummary']
        }
      }
    }
  }
  InventoryOperations_listInventoryItems: {
    parameters: {
      query: {
        /** @description 検索対象のサロン ID */
        salonId: components['parameters']['Models.InventorySearchRequest.salonId']
        /** @description カテゴリでの絞り込み */
        category?: components['parameters']['Models.InventorySearchRequest.category']
        /** @description 在庫状態での絞り込み */
        status?: components['parameters']['Models.InventorySearchRequest.status']
        /** @description 最低在庫を下回るもののみ取得するか */
        lowStock?: components['parameters']['Models.InventorySearchRequest.lowStock']
        /** @description 期限切れ間近の在庫を取得するか */
        expiringSoon?: components['parameters']['Models.InventorySearchRequest.expiringSoon']
        /** @description フリーワード検索用キーワード。 */
        q?: components['parameters']['Models.SearchParams.q']
        /** @description 並び替え対象カラム名。 */
        sortBy?: components['parameters']['Models.SearchParams.sortBy']
        /** @description 昇順ascまたは降順descの指定。 */
        sortOrder?: components['parameters']['Models.SearchParams.sortOrder']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.InventoryItem'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_createInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.InventoryItemCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_getActiveAlerts: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        type?: 'low_stock' | 'expiring' | 'expired' | 'overstock'
        severity?: 'info' | 'warning' | 'critical'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.InventoryAlert'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_getAlertSummary: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** Format: int32 */
                  totalAlerts: number
                  /** Format: int32 */
                  criticalAlerts: number
                  /** Format: int32 */
                  warningAlerts: number
                  /** Format: int32 */
                  infoAlerts: number
                  /** Format: int32 */
                  unacknowledged: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_acknowledgeAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        inventoryId: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          acknowledgedBy: components['schemas']['Models.StaffId']
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.InventoryAlert']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getExpiringItems: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        days?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.InventoryItem'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getLowStockItems: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        threshold?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.InventoryItem'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_recordStockMovement: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StockMovementCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.StockMovement']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_performStockCount: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          salonId: components['schemas']['Models.SalonId']
          items: {
            inventoryId: components['schemas']['Models.InventoryId']
            /** Format: float */
            countedQuantity: number
          }[]
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  adjustments: components['schemas']['Models.StockMovement'][]
                  discrepancies: {
                    inventoryId: components['schemas']['Models.InventoryId']
                    /** Format: float */
                    expected: number
                    /** Format: float */
                    counted: number
                    /** Format: float */
                    difference: number
                  }[]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getInventoryValueReport: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        category?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** Format: float */
                  totalValue: number
                  /** Format: int32 */
                  totalItems: number
                  categories: {
                    category: string
                    /** Format: float */
                    value: number
                    /** Format: int32 */
                    itemCount: number
                  }[]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_deleteInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: Record<string, never>
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_updateInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.InventoryItemUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getStockMovements: {
    parameters: {
      query?: {
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.StockMovement'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_searchMedicalCharts: {
    parameters: {
      query?: {
        search?: string
        hasAllergies?: boolean
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.MedicalChart'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_createMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.MedicalChartCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_getCustomerMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_getCustomerAllergies: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  customerId: components['schemas']['Models.CustomerId']
                  allergies: string[]
                  avoidProducts: string[]
                  /** Format: date-time */
                  lastUpdated: string
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_updateMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.MedicalChartId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.MedicalChartUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_listPayments: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        status?: components['schemas']['Models.PaymentStatusCodeType']
        method?: components['schemas']['Models.PaymentMethodType']
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.Payment'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_createPayment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PaymentCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Payment']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_calculatePayment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          services: components['schemas']['Models.ServiceId'][]
          discountCode?: string
          /** Format: int32 */
          pointsToUse?: number
          customerId?: components['schemas']['Models.CustomerId']
          bookingId?: components['schemas']['Models.BookingId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PaymentPreview']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getCustomerPayments: {
    parameters: {
      query?: {
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.Payment'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Payment']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_updatePayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PaymentUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Payment']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_cancelPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Payment']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_processPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Payment']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getReceipt: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  receiptNumber: string
                  payment: components['schemas']['Models.Payment']
                  items: {
                    [key: string]: unknown
                  }[]
                  /** Format: date-time */
                  issuedAt: string
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_processRefund: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RefundCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Payment']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_listPermissions: {
    parameters: {
      query?: {
        resource?: string
        action?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Permission'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_getPermissionsByResource: {
    parameters: {
      query?: never
      header?: never
      path: {
        resource: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Permission'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_getPermissionGroups: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  resource: string
                  permissions: components['schemas']['Models.Permission'][]
                }[]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_adjustPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getPointBalance: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PointInfo']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getExpiringPoints: {
    parameters: {
      query?: {
        days?: number
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  customerId: components['schemas']['Models.CustomerId']
                  /** Format: int32 */
                  expiringPoints: number
                  /** Format: date-time */
                  expirationDate: string
                  transactions: components['schemas']['Models.PointTransaction'][]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getPointTransactions: {
    parameters: {
      query?: {
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.PointTransaction'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_earnPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_processExpiredPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          customerId?: components['schemas']['Models.CustomerId']
          /** Format: date-time */
          processBefore?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** Format: int32 */
                  processedCount: number
                  /** Format: int32 */
                  totalPoints: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_usePoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_listPurchaseOrders: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        status?: components['schemas']['Models.OrderStatusType']
        supplier?: string
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.PurchaseOrder'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_createPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PurchaseOrderCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_getReorderSuggestions: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  inventoryId: components['schemas']['Models.InventoryId']
                  productName: string
                  /** Format: float */
                  currentStock: number
                  /** Format: float */
                  minimumStock: number
                  /** Format: float */
                  suggestedQuantity: number
                  supplier?: string
                  /** Format: date-time */
                  lastOrderDate?: string
                }[]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_getPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_updatePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PurchaseOrderUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_approvePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          approvedBy: components['schemas']['Models.StaffId']
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_cancelPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_receivePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          receivedItems: {
            inventoryId: components['schemas']['Models.InventoryId']
            /** Format: float */
            receivedQuantity: number
            notes?: string
          }[]
          deliveryNotes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_listRoles: {
    parameters: {
      query?: {
        isSystem?: boolean
        isActive?: boolean
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.Role'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_createRole: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RoleCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Role']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_getSystemRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Role'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_getRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Role']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_deleteRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: Record<string, never>
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_updateRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RoleUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Role']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_cloneRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          displayName: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.Role']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesReport: {
    parameters: {
      query: {
        /** @description 集計対象のサロン ID */
        salonId: components['parameters']['Models.SalesReportQuery.salonId']
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 集計粒度（日/週/月） */
        groupBy?: components['parameters']['Models.SalesReportQuery.groupBy']
        /** @description 返金取引を集計に含めるかどうか */
        includeRefunds?: components['parameters']['Models.SalesReportQuery.includeRefunds']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.SalesReport']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesByCategory: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.SalesByCategory'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesByStaff: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.StaffPerformance'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getDailySales: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        date: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** Format: date */
                  date: string
                  sales: components['schemas']['Models.Money']
                  /** Format: int32 */
                  transactions: number
                  refunds: components['schemas']['Models.Money']
                  net: components['schemas']['Models.Money']
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_exportSalesReport: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          salonId: components['schemas']['Models.SalonId']
          /** Format: date-time */
          startDate: string
          /** Format: date-time */
          endDate: string
          /** @enum {string} */
          format: 'csv' | 'excel' | 'pdf'
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  downloadUrl: string
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesTrends: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        period: 'daily' | 'weekly' | 'monthly'
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  labels: string[]
                  sales: components['schemas']['Models.Money'][]
                  transactions: number[]
                  average: components['schemas']['Models.Money'][]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_listTreatments: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        staffId?: components['schemas']['Models.StaffId']
        treatment?: components['schemas']['Models.TreatmentType']
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_createTreatment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TreatmentRecordCreateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getCustomerTreatmentHistory: {
    parameters: {
      query?: {
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getStaffTreatments: {
    parameters: {
      query?: {
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getTreatmentStatistics: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        /** @description 検索対象期間の開始日時。 */
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        /** @description 検索対象期間の終了日時。 */
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** Format: int32 */
                  totalTreatments: number
                  treatmentsBy: {
                    [key: string]: number
                  }
                  /** Format: float */
                  averageDuration: number
                  topServices: components['schemas']['Models.ServiceId'][]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_deleteTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: Record<string, never>
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_updateTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TreatmentRecordUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_addTreatmentPhotos: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AttachmentId'][]
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_assignUserRoleType: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UserRoleAssignRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.UserRoleType']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_bulkAssignRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          userIds: string[]
          roleIds: components['schemas']['Models.RoleId'][]
          salonId?: components['schemas']['Models.SalonId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** Format: int32 */
                  assigned: number
                  /** Format: int32 */
                  failed: number
                  errors?: string[]
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_getUsersByRole: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        /** @description 1ページあたりの取得件数。省略時は20件。 */
        limit?: components['parameters']['Models.PaginationParams.limit']
        /** @description 取得開始位置を表すオフセット。省略時は0。 */
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: {
                  /** @description 取得した要素の配列。 */
                  data: {
                    userId: string
                    userName?: string
                    /** Format: date-time */
                    assignedAt: string
                    /** Format: date-time */
                    expiresAt?: string
                  }[]
                  /**
                   * Format: int32
                   * @description 条件に一致する全件数。
                   */
                  total: number
                  /**
                   * Format: int32
                   * @description 1ページあたりの件数。
                   */
                  limit: number
                  /**
                   * Format: int32
                   * @description 取得開始位置のオフセット。
                   */
                  offset: number
                }
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_getUserRoleTypes: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.UserRoleType'][]
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_revokeUserRoleType: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: Record<string, never>
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_updateUserRoleType: {
    parameters: {
      query?: never
      header?: never
      path: {
        userId: string
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: date-time */
          expiresAt?: string
          isActive?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /**
                 * @description 固定値success。成功結果であることを示す。
                 * @enum {string}
                 */
                status: 'success'
                /** @description 成功時に返却するドメインデータ。 */
                data: components['schemas']['Models.UserRoleType']
              }
            | {
                /**
                 * @description 固定値error。エラー結果であることを示す。
                 * @enum {string}
                 */
                status: 'error'
                /** @description 失敗時に返却するエラー情報。 */
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
}
