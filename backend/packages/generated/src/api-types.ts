// Generated from TypeSpec/OpenAPI using openapi-typescript
// DO NOT EDIT MANUALLY
// Last generated: 2025-09-21T16:04:05.935Z

// Base types from OpenAPI
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/access-control/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Check user access */
    post: operations['AccessControlOperations_checkAccess']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/check-permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Check multiple permissions */
    post: operations['AccessControlOperations_checkPermissions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/resource/{resource}/access': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get resource access list */
    get: operations['AccessControlOperations_getResourceAccess']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/user/{userId}/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get user effective permissions */
    get: operations['AccessControlOperations_getUserPermissions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access-control/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Validate role permissions */
    post: operations['AccessControlOperations_validatePermissions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/alive': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check API liveness
     * @description Liveness check for Kubernetes
     */
    get: operations['SystemOperations_alive']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check API health
     * @description Health check endpoint
     */
    get: operations['SystemOperations_health']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/metrics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get API metrics
     * @description Get API metrics
     */
    get: operations['SystemOperations_metrics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/ready': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check API readiness
     * @description Readiness check for Kubernetes
     */
    get: operations['SystemOperations_ready']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get API version
     * @description Get API version and build information
     */
    get: operations['SystemOperations_version']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/admin/auth/trusted-ip/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add trusted IP address for a user */
    post: operations['AdminAuthOperations_addTrustedIp']
    /** @description Remove trusted IP address for a user */
    delete: operations['AdminAuthOperations_removeTrustedIp']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/admin/auth/unlock/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Unlock a locked user account */
    post: operations['AdminAuthOperations_unlockAccount']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 添付ファイルの一覧取得 */
    get: operations['AttachmentOperations_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/share-links/{shareLinkId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description 共有リンクの削除 */
    delete: operations['AttachmentOperations_deleteShareLink']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description ファイルの直接アップロード
     *     JSONでファイル情報をアップロード */
    post: operations['AttachmentOperations_uploadFile']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/upload-url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description 署名付きアップロードURLの取得
     *     クライアントが直接ストレージにアップロードするためのURL */
    post: operations['AttachmentOperations_getUploadUrl']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 添付ファイル情報の取得 */
    get: operations['AttachmentOperations_get']
    put?: never
    post?: never
    /** @description 添付ファイルの削除 */
    delete: operations['AttachmentOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}/download-url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 署名付きダウンロードURLの取得 */
    get: operations['AttachmentOperations_getDownloadUrl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/attachments/{attachmentId}/share-links': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンクの一覧取得 */
    get: operations['AttachmentOperations_listShareLinks']
    put?: never
    /** @description 共有リンクの作成 */
    post: operations['AttachmentOperations_createShareLink']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/backup-codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Generate new backup codes for 2FA */
    post: operations['AuthOperations_generateBackupCodes']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/disable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Disable two-factor authentication */
    post: operations['AuthOperations_disableTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/enable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Enable two-factor authentication */
    post: operations['AuthOperations_enableTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/qr-code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get QR code for 2FA setup */
    get: operations['AuthOperations_getTwoFactorQRCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/2fa/verify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Verify two-factor authentication code */
    post: operations['AuthOperations_verifyTwoFactor']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/change-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Change password */
    post: operations['AuthOperations_changePassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/forgot-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Request password reset */
    post: operations['AuthOperations_forgotPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Login with email and password */
    post: operations['AuthOperations_login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Logout and invalidate session */
    post: operations['AuthOperations_logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/logout-all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Logout from all sessions */
    post: operations['AuthOperations_logoutAll']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get current user information */
    get: operations['AuthOperations_getCurrentUser']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Refresh access token */
    post: operations['AuthOperations_refreshToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Register a new user account */
    post: operations['AuthOperations_register']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Reset password with token */
    post: operations['AuthOperations_resetPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/reset-password/verify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Verify password reset token */
    get: operations['AuthOperations_verifyResetToken']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/sessions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get active sessions */
    get: operations['AuthOperations_getSessions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/sessions/{sessionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description Revoke a specific session */
    delete: operations['AuthOperations_revokeSession']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/verify-email/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Confirm email verification */
    post: operations['AuthOperations_confirmEmailVerification']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/auth/verify-email/send': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Send email verification */
    post: operations['AuthOperations_sendEmailVerification']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List bookings */
    get: operations['BookingOperations_list']
    put?: never
    /** Create booking */
    post: operations['BookingOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get booking */
    get: operations['BookingOperations_get']
    put?: never
    post?: never
    /** Delete booking */
    delete: operations['BookingOperations_delete']
    options?: never
    head?: never
    /** Update booking */
    patch: operations['BookingOperations_update']
    trace?: never
  }
  '/api/v1/bookings/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cancel booking */
    post: operations['BookingOperations_cancel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/confirm': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Confirm booking */
    post: operations['BookingOperations_confirm']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/payment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Process payment */
    post: operations['BookingOperations_processPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Add reservation to booking */
    post: operations['BookingOperations_addReservation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bookings/{id}/reservations/{reservationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Remove reservation from booking */
    delete: operations['BookingOperations_removeReservation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List {Name} resources
     * @description List resources with pagination and filtering
     */
    get: operations['CustomerCrud_list']
    put?: never
    /**
     * Create new {Name}
     * @description Create a new resource
     */
    post: operations['CustomerCrud_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/batch/get': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Batch get {Name} resources
     * @description Batch get multiple resources
     */
    post: operations['CustomerCrud_batchGet']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/bulk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update {Name} resources
     * @description Bulk update resources
     */
    put: operations['CustomerCrud_bulkUpdate']
    /**
     * Bulk create {Name} resources
     * @description Bulk create resources
     */
    post: operations['CustomerCrud_bulkCreate']
    /**
     * Bulk delete {Name} resources
     * @description Bulk delete resources
     */
    delete: operations['CustomerCrud_bulkDelete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Export {Name} search results
     * @description Export search results
     */
    post: operations['CustomerCrud_export']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/merge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Merge customer records
     * @description Merge customer records
     */
    post: operations['CustomerOperations_merge']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search {Name} resources
     * @description Advanced search with facets
     */
    get: operations['CustomerCrud_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} by ID
     * @description Get a single resource by ID
     */
    get: operations['CustomerCrud_get']
    /**
     * Update {Name}
     * @description Update a resource (full update)
     */
    put: operations['CustomerCrud_update']
    post?: never
    /**
     * Delete {Name}
     * @description Delete a resource (soft delete by default)
     */
    delete: operations['CustomerCrud_delete']
    options?: never
    head?: never
    /**
     * Partially update {Name}
     * @description Partially update a resource
     */
    patch: operations['CustomerCrud_patch']
    trace?: never
  }
  '/api/v1/customers/{id}/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer bookings
     * @description Get customer bookings
     */
    get: operations['CustomerOperations_getBookings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/deletion-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Request customer data deletion
     * @description Request customer data deletion (GDPR compliance)
     */
    post: operations['CustomerOperations_requestDeletion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Export customer data
     * @description Export customer data (GDPR compliance)
     */
    get: operations['CustomerOperations_exportData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} audit history
     * @description Get audit history for a resource
     */
    get: operations['CustomerCrud_getHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/loyalty-points': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add loyalty points
     * @description Add loyalty points
     */
    post: operations['CustomerOperations_addLoyaltyPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/preferences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update customer preferences
     * @description Update customer preferences
     */
    put: operations['CustomerOperations_updatePreferences']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer profile
     * @description Get customer profile with extended information
     */
    get: operations['CustomerOperations_getProfile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer reservations
     * @description Get customer reservations
     */
    get: operations['CustomerOperations_getReservations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/restore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Restore deleted {Name}
     * @description Restore a deleted resource
     */
    post: operations['CustomerCrud_restore']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get customer statistics
     * @description Get customer statistics
     */
    get: operations['CustomerOperations_getStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/customers/{id}/versions/{version}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} version
     * @description Get specific version of a resource
     */
    get: operations['CustomerCrud_getVersion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List reservations */
    get: operations['ReservationOperations_list']
    put?: never
    /** Create reservation */
    post: operations['ReservationOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get reservation */
    get: operations['ReservationOperations_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Update reservation */
    patch: operations['ReservationOperations_update']
    trace?: never
  }
  '/api/v1/reservations/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cancel reservation */
    post: operations['ReservationOperations_cancel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}/complete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Complete reservation */
    post: operations['ReservationOperations_complete']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reservations/{id}/reschedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Reschedule reservation */
    post: operations['ReservationOperations_reschedule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List reviews */
    get: operations['ReviewOperations_list']
    put?: never
    /** Create review */
    post: operations['ReviewOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get review */
    get: operations['ReviewOperations_get']
    put?: never
    post?: never
    /** Delete review */
    delete: operations['ReviewOperations_delete']
    options?: never
    head?: never
    /** Update review */
    patch: operations['ReviewOperations_update']
    trace?: never
  }
  '/api/v1/reviews/{id}/helpful': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark review as helpful */
    post: operations['ReviewOperations_markHelpful']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/reviews/{id}/report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Report review */
    post: operations['ReviewOperations_report']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List {Name} resources
     * @description List resources with pagination and filtering
     */
    get: operations['SalonCrud_list']
    put?: never
    /**
     * Create new {Name}
     * @description Create a new resource
     */
    post: operations['SalonCrud_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/batch/get': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Batch get {Name} resources
     * @description Batch get multiple resources
     */
    post: operations['SalonCrud_batchGet']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/bulk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update {Name} resources
     * @description Bulk update resources
     */
    put: operations['SalonCrud_bulkUpdate']
    /**
     * Bulk create {Name} resources
     * @description Bulk create resources
     */
    post: operations['SalonCrud_bulkCreate']
    /**
     * Bulk delete {Name} resources
     * @description Bulk delete resources
     */
    delete: operations['SalonCrud_bulkDelete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Export {Name} search results
     * @description Export search results
     */
    post: operations['SalonCrud_export']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/nearby': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get nearby salons
     * @description Get nearby salons
     */
    get: operations['SalonOperations_getNearby']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/recommendations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get personalized salon recommendations
     * @description Get salon recommendations
     */
    get: operations['SalonOperations_getRecommendations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search {Name} resources
     * @description Advanced search with facets
     */
    get: operations['SalonCrud_search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} by ID
     * @description Get a single resource by ID
     */
    get: operations['SalonCrud_get']
    /**
     * Update {Name}
     * @description Update a resource (full update)
     */
    put: operations['SalonCrud_update']
    post?: never
    /**
     * Delete {Name}
     * @description Delete a resource (soft delete by default)
     */
    delete: operations['SalonCrud_delete']
    options?: never
    head?: never
    /**
     * Partially update {Name}
     * @description Partially update a resource
     */
    patch: operations['SalonCrud_patch']
    trace?: never
  }
  '/api/v1/salons/{id}/availability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Check salon availability
     * @description Check salon availability
     */
    post: operations['SalonOperations_checkAvailability']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} audit history
     * @description Get audit history for a resource
     */
    get: operations['SalonCrud_getHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/images/{imageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete salon image
     * @description Delete salon image
     */
    delete: operations['SalonOperations_deleteImage']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/restore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Restore deleted {Name}
     * @description Restore a deleted resource
     */
    post: operations['SalonCrud_restore']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/staff/{staffId}/schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update staff schedule
     * @description Manage salon staff schedule
     */
    put: operations['SalonOperations_updateStaffSchedule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get salon statistics
     * @description Get salon statistics
     */
    get: operations['SalonOperations_getStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/subscribe': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Subscribe to salon updates
     * @description Subscribe to salon updates
     */
    post: operations['SalonOperations_subscribe']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{id}/versions/{version}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get {Name} version
     * @description Get specific version of a resource
     */
    get: operations['SalonCrud_getVersion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/available-slots': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get available slots */
    get: operations['AvailabilityOperations_getAvailableSlots']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/available-slots/check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Check availability */
    post: operations['AvailabilityOperations_checkAvailability']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get salon reviews */
    get: operations['SalonReviewOperations_getSalonReviews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/reviews/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get salon reviews summary */
    get: operations['SalonReviewOperations_getSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/services': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List salon services */
    get: operations['ServiceOperations_list']
    put?: never
    /** Create service */
    post: operations['ServiceOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/services/bulk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Bulk update services */
    patch: operations['ServiceOperations_bulkUpdate']
    trace?: never
  }
  '/api/v1/salons/{salonId}/services/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get service */
    get: operations['ServiceOperations_get']
    /** Update service */
    put: operations['ServiceOperations_update']
    post?: never
    /** Delete service */
    delete: operations['ServiceOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List staff members */
    get: operations['StaffOperations_list']
    put?: never
    /** Create staff member */
    post: operations['StaffOperations_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff member */
    get: operations['StaffOperations_get']
    /** Update staff member */
    put: operations['StaffOperations_update']
    post?: never
    /** Delete staff member */
    delete: operations['StaffOperations_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salons/{salonId}/staff/{id}/availability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff availability */
    get: operations['StaffOperations_getAvailability']
    /** Update staff availability */
    put: operations['StaffOperations_updateAvailability']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/service-categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List service categories */
    get: operations['CategoryOperations_listCategories']
    put?: never
    /** Create service category */
    post: operations['CategoryOperations_createCategory']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/service-categories/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update service category */
    put: operations['CategoryOperations_updateCategory']
    post?: never
    /** Delete service category */
    delete: operations['CategoryOperations_deleteCategory']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/share/{shareToken}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンクからファイル情報を取得 */
    get: operations['ShareOperations_getSharedFile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/share/{shareToken}/download': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description 共有リンクからダウンロードURLを取得 */
    get: operations['ShareOperations_downloadSharedFile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search staff across all salons */
    get: operations['GlobalStaffOperations_searchStaff']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/{staffId}/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff reviews */
    get: operations['StaffReviewOperations_getStaffReviews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/staff/{staffId}/reviews/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get staff reviews summary */
    get: operations['StaffReviewOperations_getStaffSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List inventory items with filters */
    get: operations['InventoryOperations_listInventoryItems']
    put?: never
    /** @description Create new inventory item */
    post: operations['InventoryOperations_createInventoryItem']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get active inventory alerts */
    get: operations['InventoryAlertOperations_getActiveAlerts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get alert summary */
    get: operations['InventoryAlertOperations_getAlertSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory-alerts/{inventoryId}/acknowledge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Acknowledge alert */
    post: operations['InventoryAlertOperations_acknowledgeAlert']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/expiring': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get expiring items */
    get: operations['InventoryOperations_getExpiringItems']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/low-stock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get low stock items */
    get: operations['InventoryOperations_getLowStockItems']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/movement': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Record stock movement */
    post: operations['InventoryOperations_recordStockMovement']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/stock-count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Perform stock count */
    post: operations['InventoryOperations_performStockCount']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/value-report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get inventory value report */
    get: operations['InventoryOperations_getInventoryValueReport']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/inventory/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get inventory item by ID */
    get: operations['InventoryOperations_getInventoryItem']
    put?: never
    post?: never
    /** @description Delete inventory item */
    delete: operations['InventoryOperations_deleteInventoryItem']
    options?: never
    head?: never
    /** @description Update inventory item */
    patch: operations['InventoryOperations_updateInventoryItem']
    trace?: never
  }
  '/inventory/{id}/movements': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get stock movement history */
    get: operations['InventoryOperations_getStockMovements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Search medical charts */
    get: operations['MedicalChartOperations_searchMedicalCharts']
    put?: never
    /** @description Create medical chart for customer */
    post: operations['MedicalChartOperations_createMedicalChart']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/customer/{customerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get medical chart by customer ID */
    get: operations['MedicalChartOperations_getCustomerMedicalChart']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/customer/{customerId}/allergies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get allergy warnings for customer */
    get: operations['MedicalChartOperations_getCustomerAllergies']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/medical-charts/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update medical chart */
    patch: operations['MedicalChartOperations_updateMedicalChart']
    trace?: never
  }
  '/payments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List payments with filters */
    get: operations['PaymentOperations_listPayments']
    put?: never
    /** @description Create new payment */
    post: operations['PaymentOperations_createPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/calculate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Calculate payment summary */
    post: operations['PaymentOperations_calculatePayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/customer/{customerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get customer payment history */
    get: operations['PaymentOperations_getCustomerPayments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get payment by ID */
    get: operations['PaymentOperations_getPayment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update payment status */
    patch: operations['PaymentOperations_updatePayment']
    trace?: never
  }
  '/payments/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Cancel payment */
    post: operations['PaymentOperations_cancelPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/process': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process payment */
    post: operations['PaymentOperations_processPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/receipt': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get payment receipt */
    get: operations['PaymentOperations_getReceipt']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/payments/{id}/refund': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process refund */
    post: operations['PaymentOperations_processRefund']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List all permissions */
    get: operations['PermissionOperations_listPermissions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions/by-resource/{resource}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get permissions by resource */
    get: operations['PermissionOperations_getPermissionsByResource']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/permissions/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get permission groups */
    get: operations['PermissionOperations_getPermissionGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/adjust': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Adjust customer points */
    post: operations['PointOperations_adjustPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/balance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get customer point balance */
    get: operations['PointOperations_getPointBalance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/expiring': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get expiring points */
    get: operations['PointOperations_getExpiringPoints']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/customer/{customerId}/transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get point transaction history */
    get: operations['PointOperations_getPointTransactions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/earn': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add points to customer */
    post: operations['PointOperations_earnPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/expire': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Process expired points */
    post: operations['PointOperations_processExpiredPoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/points/use': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Use customer points */
    post: operations['PointOperations_usePoints']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List purchase orders */
    get: operations['PurchaseOrderOperations_listPurchaseOrders']
    put?: never
    /** @description Create purchase order */
    post: operations['PurchaseOrderOperations_createPurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/reorder-suggestions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Generate reorder suggestions */
    get: operations['PurchaseOrderOperations_getReorderSuggestions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get purchase order by ID */
    get: operations['PurchaseOrderOperations_getPurchaseOrder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update purchase order */
    patch: operations['PurchaseOrderOperations_updatePurchaseOrder']
    trace?: never
  }
  '/purchase-orders/{id}/approve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Approve purchase order */
    post: operations['PurchaseOrderOperations_approvePurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Cancel purchase order */
    post: operations['PurchaseOrderOperations_cancelPurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/purchase-orders/{id}/receive': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Receive purchase order */
    post: operations['PurchaseOrderOperations_receivePurchaseOrder']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List all roles */
    get: operations['RoleOperations_listRoles']
    put?: never
    /** @description Create new role */
    post: operations['RoleOperations_createRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/system': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get system roles */
    get: operations['RoleOperations_getSystemRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/roles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get role by ID */
    get: operations['RoleOperations_getRole']
    put?: never
    post?: never
    /** @description Delete role */
    delete: operations['RoleOperations_deleteRole']
    options?: never
    head?: never
    /** @description Update role */
    patch: operations['RoleOperations_updateRole']
    trace?: never
  }
  '/roles/{id}/clone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Clone role */
    post: operations['RoleOperations_cloneRole']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales report for a period */
    get: operations['SalesReportOperations_getSalesReport']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/by-category': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales by service category */
    get: operations['SalesReportOperations_getSalesByCategory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/by-staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales by staff */
    get: operations['SalesReportOperations_getSalesByStaff']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/daily': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get daily sales summary */
    get: operations['SalesReportOperations_getDailySales']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Export sales report */
    post: operations['SalesReportOperations_exportSalesReport']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sales-reports/trends': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get sales trends */
    get: operations['SalesReportOperations_getSalesTrends']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description List treatment records with filters */
    get: operations['TreatmentOperations_listTreatments']
    put?: never
    /** @description Create new treatment record */
    post: operations['TreatmentOperations_createTreatment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/customer/{customerId}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment history for a customer */
    get: operations['TreatmentOperations_getCustomerTreatmentHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/staff/{staffId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatments by staff member */
    get: operations['TreatmentOperations_getStaffTreatments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment statistics */
    get: operations['TreatmentOperations_getTreatmentStatistics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/treatments/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get treatment record by ID */
    get: operations['TreatmentOperations_getTreatment']
    put?: never
    post?: never
    /** @description Delete treatment record */
    delete: operations['TreatmentOperations_deleteTreatment']
    options?: never
    head?: never
    /** @description Update treatment record */
    patch: operations['TreatmentOperations_updateTreatment']
    trace?: never
  }
  '/treatments/{id}/photos': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Add photos to treatment record */
    post: operations['TreatmentOperations_addTreatmentPhotos']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Assign role to user */
    post: operations['UserRoleTypeOperations_assignUserRoleType']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/bulk-assign': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Bulk assign roles */
    post: operations['UserRoleTypeOperations_bulkAssignRoles']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/role/{roleId}/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get users by role */
    get: operations['UserRoleTypeOperations_getUsersByRole']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/user/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get user roles */
    get: operations['UserRoleTypeOperations_getUserRoleTypes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user-roles/user/{userId}/role/{roleId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description Revoke user role */
    delete: operations['UserRoleTypeOperations_revokeUserRoleType']
    options?: never
    head?: never
    /** @description Update user role */
    patch: operations['UserRoleTypeOperations_updateUserRoleType']
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Access control check */
    'Models.AccessCheck': {
      userId: string
      resource: string
      action: string
      salonId?: components['schemas']['Models.SalonId']
      resourceId?: string
    }
    /** @description Access control result */
    'Models.AccessResult': {
      allowed: boolean
      reason?: string
      requiredPermissions?: string[]
      userPermissions?: string[]
    }
    /** @description 共有リンクアクセスリクエスト */
    'Models.AccessShareLinkRequest': {
      /** @description パスワード（パスワード保護されている場合） */
      password?: string
    }
    'Models.Address': {
      street: string
      city: string
      prefecture: string
      postalCode: string | null
      /** @default Japan */
      country: string
    }
    'Models.AddressUpdate': {
      street?: string
      city?: string
      prefecture?: string
      postalCode?: string | null
      /** @default Japan */
      country: string
    }
    'Models.AllergyInfo': {
      type: components['schemas']['Models.AllergyType']
      substances: string[] | null
      fragrances: string[] | null
      metals: string[] | null
      plants: string[] | null
      description: string | null
      severity: components['schemas']['Models.AllergySeverityType']
    }
    /** @enum {string} */
    'Models.AllergySeverityType': 'mild' | 'moderate' | 'severe'
    /** @enum {string} */
    'Models.AllergyType':
      | 'chemical'
      | 'fragrance'
      | 'metal'
      | 'latex'
      | 'plant'
      | 'other'
    /** @description 添付ファイル情報 */
    'Models.Attachment': {
      /** @description 添付ファイルID (UUID) */
      id: string
      /** @description ストレージキー */
      key: string
      /** @description オリジナルファイル名 */
      filename: string
      /** @description Content-Type */
      content: string
      /**
       * Format: int32
       * @description ファイルサイズ（バイト）
       */
      size: number
      /**
       * A file in an HTTP request, response, or multipart payload.
       * @description ファイルタイプ
       */
      file: {
        /**
         * The allowed media (MIME) types of the file contents.
         * @description The allowed media (MIME) types of the file contents.
         *
         *     In file bodies, this value comes from the `Content-Type` header of the request or response. In JSON bodies,
         *     this value is serialized as a field in the response.
         *
         *     NOTE: this is not _necessarily_ the same as the `Content-Type` header of the request or response, but
         *     it will be for file bodies. It may be different if the file is serialized as a JSON object. It always refers to the
         *     _contents_ of the file, and not necessarily the way the file itself is transmitted or serialized.
         */
        contentType?: string
        /**
         * The name of the file, if any.
         * @description The name of the file, if any.
         *
         *     In file bodies, this value comes from the `filename` parameter of the `Content-Disposition` header of the response
         *     or multipart payload. In JSON bodies, this value is serialized as a field in the response.
         *
         *     NOTE: By default, `filename` cannot be sent in request payloads and can only be sent in responses and multipart
         *     payloads, as the `Content-Disposition` header is not valid in requests. If you want to send the `filename` in a request,
         *     you must extend the `File` model and override the `filename` property with a different location defined by HTTP metadata
         *     decorators.
         */
        filename?: string
        /**
         * The contents of the file.
         * Format: byte
         * @description The contents of the file.
         *
         *     In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
         *     this value is serialized as a field in the response.
         */
        contents: string
      }
      /** @description アップロードしたユーザーID */
      uploadedBy: string
      /** @description 関連するサロンID（オプション） */
      salonId?: string
      /** @description メタデータ */
      metadata?: {
        [key: string]: unknown
      }
      /** @description タグ */
      tags?: {
        [key: string]: string
      }
      /**
       * Format: date-time
       * @description アップロード日時
       */
      uploadedAt: string
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Attachment ID
     */
    'Models.AttachmentId': string
    'Models.AuditInfo': {
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    /** @description Complete audit information */
    'Models.AuditTrail': {
      /**
       * Format: date-time
       * @description Record creation timestamp
       */
      createdAt: string
      /** @description User who created the record */
      createdBy: string
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt: string
      /** @description User who last updated the record */
      updatedBy: string
      /**
       * Format: int32
       * @description Version number for optimistic locking
       */
      version: number
      /**
       * @description Whether the record is deleted
       * @default false
       */
      isDeleted: boolean
      /**
       * Format: date-time
       * @description Deletion timestamp
       */
      deletedAt?: string
      /** @description User who deleted the record */
      deletedBy?: string
      /** @description Deletion reason */
      deletionReason?: string
    }
    /** @description Generic auth success response */
    'Models.AuthSuccessResponse': {
      /** @description Success message */
      message: string
    }
    /**
     * @description User roles in the system
     * @enum {string}
     */
    'Models.AuthUserRoleType': 'customer' | 'staff' | 'admin'
    'Models.AuthenticationStateDetail': {
      type: components['schemas']['Models.AuthenticationStateType']
      sessionId?: components['schemas']['Models.SessionId']
      /** Format: date-time */
      expiresAt?: string
      tempToken?: string
      /** Format: date-time */
      until?: string
      /** Format: int32 */
      attempts?: number
      reason?: string
    }
    /** @enum {string} */
    'Models.AuthenticationStateType':
      | 'unauthenticated'
      | 'authenticated'
      | 'pending_two_factor'
      | 'locked'
    'Models.AvailableSlot': {
      staffId: components['schemas']['Models.StaffId']
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
    }
    /** @description Available time slot details */
    'Models.AvailableTimeSlot': {
      /**
       * Format: date-time
       * @description Start time
       */
      startTime: string
      /**
       * Format: date-time
       * @description End time
       */
      endTime: string
      /** @description Available staff members */
      availableStaff: components['schemas']['Models.StaffSummary'][]
      /**
       * Format: int32
       * @description Availability percentage
       */
      availability: number
    }
    /** @description Request for batch retrieval */
    'Models.BatchGetRequest': {
      /** @description Array of IDs to retrieve */
      ids: string[]
      /** @description Fields to include in response */
      fields?: string
    }
    'Models.Booking': {
      id: components['schemas']['Models.BookingId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      reservationIds: components['schemas']['Models.ReservationId'][]
      status: components['schemas']['Models.BookingStatus']
      statusCode: components['schemas']['Models.BookingStatusCodeType']
      waitlistEntry?: components['schemas']['Models.WaitlistEntry']
      deposit?: components['schemas']['Models.BookingDeposit']
      totalAmount: components['schemas']['Models.Money']
      discountAmount?: components['schemas']['Models.Money']
      finalAmount: components['schemas']['Models.Money']
      balanceDue?: components['schemas']['Models.Money']
      paymentMethod?: components['schemas']['Models.PaymentMethodType']
      paymentStatus?: components['schemas']['Models.PaymentStatusCodeType']
      notes?: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.BookingDeposit': {
      amount: components['schemas']['Models.Money']
      /** @enum {string} */
      status: 'pending' | 'paid' | 'refunded' | 'forfeited'
      /** Format: date-time */
      dueDate?: string
      /** Format: date-time */
      paidAt?: string
      /** Format: date-time */
      refundedAt?: string
      paymentId?: components['schemas']['Models.PaymentId']
      notes?: string
    }
    'Models.BookingDepositUpdate': {
      amount?: components['schemas']['Models.MoneyUpdate']
      /** @enum {string} */
      status?: 'pending' | 'paid' | 'refunded' | 'forfeited'
      /** Format: date-time */
      dueDate?: string
      /** Format: date-time */
      paidAt?: string
      /** Format: date-time */
      refundedAt?: string
      paymentId?: components['schemas']['Models.PaymentId']
      notes?: string
    }
    'Models.BookingDetail': {
      reservations: components['schemas']['Models.ReservationDetail'][]
      customerName: string
      salonName: string
      paymentHistory?: components['schemas']['Models.PaymentHistory'][]
      waitlistHistory?: components['schemas']['Models.WaitlistEntry'][]
    } & components['schemas']['Models.Booking']
    /**
     * Format: uuid
     * @description Branded UUID type for Booking ID
     */
    'Models.BookingId': string
    'Models.BookingLimit': {
      /** @enum {string} */
      period: 'day' | 'week' | 'month'
      /** Format: int32 */
      count: number
    }
    'Models.BookingRequirementDetail': {
      type: components['schemas']['Models.BookingRequirementType']
      /** Format: int32 */
      amount?: number
      /** Format: int32 */
      percentage?: number
      required?: boolean
      /** Format: int32 */
      duration?: number
      /** Format: int32 */
      daysInAdvance?: number
      /** Format: int32 */
      minAge?: number
      /** Format: int32 */
      maxAge?: number
      allowedGenders?: string[]
      requiredTier?: string
      instructions?: string[]
    }
    /** @enum {string} */
    'Models.BookingRequirementType':
      | 'deposit'
      | 'consultation'
      | 'patch_test'
      | 'age_restriction'
      | 'gender_restriction'
      | 'membership'
      | 'preparation'
    'Models.BookingStatus':
      | components['schemas']['Models.DraftBookingStatus']
      | components['schemas']['Models.PendingBookingStatus']
      | components['schemas']['Models.ConfirmedBookingStatus']
      | components['schemas']['Models.InProgressBookingStatus']
      | components['schemas']['Models.CompletedBookingStatus']
      | components['schemas']['Models.CancelledBookingStatus']
      | components['schemas']['Models.NoShowBookingStatus']
    /** @enum {string} */
    'Models.BookingStatusCodeType':
      | 'draft'
      | 'pending'
      | 'confirmed'
      | 'in_progress'
      | 'completed'
      | 'cancelled'
      | 'no_show'
    'Models.BookingStatusUpdate':
      | components['schemas']['Models.DraftBookingStatusUpdate']
      | components['schemas']['Models.PendingBookingStatusUpdate']
      | components['schemas']['Models.ConfirmedBookingStatusUpdate']
      | components['schemas']['Models.InProgressBookingStatusUpdate']
      | components['schemas']['Models.CompletedBookingStatusUpdate']
      | components['schemas']['Models.CancelledBookingStatusUpdate']
      | components['schemas']['Models.NoShowBookingStatusUpdate']
    'Models.BulkSummary': {
      /**
       * Format: int32
       * @description Total items processed
       */
      total: number
      /**
       * Format: int32
       * @description Number of successful items
       */
      succeeded: number
      /**
       * Format: int32
       * @description Number of failed items
       */
      failed: number
      /**
       * Format: int32
       * @description Processing duration in milliseconds
       */
      duration: number
    }
    'Models.BusinessHours': {
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      operatingSlots: components['schemas']['Models.TimeSlot'][]
      breakSlots: components['schemas']['Models.TimeSlot'][] | null
      /** @default false */
      isClosed: boolean
      effectivePeriod: components['schemas']['Models.DateRange'] | null
      timezone: string | null
    }
    'Models.CancellationFee': {
      /** Format: int32 */
      hours: number
      /** Format: int32 */
      percentage: number
      /** Format: int32 */
      fixedAmount?: number
    }
    'Models.CancelledBookingStatus': {
      /** @enum {string} */
      type: 'cancelled'
      /** Format: date-time */
      cancelledAt: string
      reason?: string
      /** @enum {string} */
      cancelledBy: 'customer' | 'salon' | 'system'
    }
    'Models.CancelledBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'cancelled'
      /** Format: date-time */
      cancelledAt?: string
      reason?: string
      /** @enum {string} */
      cancelledBy?: 'customer' | 'salon' | 'system'
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Category ID
     */
    'Models.CategoryId': string
    'Models.CategoryModel': {
      id: components['schemas']['Models.CategoryId']
      name: string
      description: string
      parentId?: components['schemas']['Models.CategoryId']
      /** Format: int32 */
      displayOrder: number
      isActive: boolean
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    /** @enum {string} */
    'Models.ColorSubCategoryType':
      | 'full_color'
      | 'root_touch'
      | 'highlights'
      | 'lowlights'
      | 'balayage'
      | 'ombre'
      | 'bleach'
      | 'color_correction'
    'Models.CompletedBookingStatus': {
      /** @enum {string} */
      type: 'completed'
      /** Format: date-time */
      completedAt: string
      paymentId?: components['schemas']['Models.PaymentId']
      serviceSummary?: string
    }
    'Models.CompletedBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'completed'
      /** Format: date-time */
      completedAt?: string
      paymentId?: components['schemas']['Models.PaymentId']
      serviceSummary?: string
    }
    'Models.CompletedPaymentStatus': {
      /** @enum {string} */
      type: 'completed'
      /** Format: date-time */
      completedAt: string
      paidAmount: components['schemas']['Models.Money']
      receiptNumber?: string
    }
    'Models.CompletedPaymentStatusUpdate': {
      /** @enum {string} */
      type?: 'completed'
      /** Format: date-time */
      completedAt?: string
      paidAmount?: components['schemas']['Models.MoneyUpdate']
      receiptNumber?: string
    }
    'Models.ConfirmedBookingStatus': {
      /** @enum {string} */
      type: 'confirmed'
      /** Format: date-time */
      confirmedAt: string
      staffId: components['schemas']['Models.StaffId']
      /** Format: date-time */
      expectedStart: string
    }
    'Models.ConfirmedBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'confirmed'
      /** Format: date-time */
      confirmedAt?: string
      staffId?: components['schemas']['Models.StaffId']
      /** Format: date-time */
      expectedStart?: string
    }
    'Models.ContactInfo': {
      email: string
      phoneNumber: string
      alternativePhone: string | null
      websiteUrl: string | null
    }
    'Models.ContactInfoUpdate': {
      email?: string
      phoneNumber?: string
      alternativePhone?: string | null
      websiteUrl?: string | null
    }
    /**
     * @description Contact method enum
     * @enum {string}
     */
    'Models.ContactMethodType': 'email' | 'sms' | 'phone' | 'push'
    'Models.CreateBookingRequest': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      reservationIds: components['schemas']['Models.ReservationId'][]
      waitlistEntry?: components['schemas']['Models.WaitlistEntry']
      deposit?: components['schemas']['Models.BookingDeposit']
      discountAmount?: components['schemas']['Models.Money']
      paymentMethod?: components['schemas']['Models.PaymentMethodType']
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description Customer creation request with required and optional fields */
    'Models.CreateCustomerRequest': {
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      preferences?: string
      notes?: string
      tags?: string[]
      /** Format: date */
      birthDate?: string
    }
    'Models.CreateReservationRequest': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      serviceId: components['schemas']['Models.ServiceId']
      /** Format: date-time */
      startTime: string
      notes?: string
    }
    'Models.CreateReviewRequest': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId: components['schemas']['Models.BookingId']
      staffId?: components['schemas']['Models.StaffId']
      /** Format: int32 */
      overallRating: number
      comment?: string
      title?: string
      /** Format: int32 */
      serviceRating?: number
      /** Format: int32 */
      staffRating?: number
      /** Format: int32 */
      cleanlinessRating?: number
      /** Format: int32 */
      valueRating?: number
      imageUrls?: string[]
    }
    /** @description Salon creation request - all keys required, values nullable where appropriate */
    'Models.CreateSalonRequest': {
      name: string
      description: string | null
      address: components['schemas']['Models.Address']
      contactInfo: components['schemas']['Models.ContactInfo']
      openingHours: components['schemas']['Models.OpeningHours'][]
      businessHours: components['schemas']['Models.BusinessHours'][] | null
      imageUrls: string[] | null
      features: string[] | null
    }
    'Models.CreateServiceRequest': {
      salonId: components['schemas']['Models.SalonId']
      name: string
      description: string
      /** Format: int32 */
      duration: number
      /** Format: int32 */
      price: number
      category: components['schemas']['Models.ServiceCategoryType']
      categoryId?: components['schemas']['Models.CategoryId']
      imageUrl?: string
      /** Format: int32 */
      requiredStaffLevel?: number
      /** Format: int32 */
      depositAmount?: number
      isActive?: boolean
      /** Format: int32 */
      maxAdvanceBookingDays?: number
      /** Format: int32 */
      minAdvanceBookingHours?: number
    }
    /** @description 共有リンク作成リクエスト */
    'Models.CreateShareLinkRequest': {
      /**
       * Format: date-time
       * @description 有効期限（オプション）
       */
      expiresAt?: string
      /**
       * Format: int32
       * @description 最大ダウンロード数（オプション）
       */
      maxDownloads?: number
      /** @description パスワード（オプション） */
      password?: string
      /** @description 許可されたメールアドレス（オプション） */
      allowedEmails?: string[]
    }
    'Models.CreateStaffRequest': {
      salonId: components['schemas']['Models.SalonId']
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      specialties: string[]
      imageUrl?: string
      bio?: string
      /** Format: int32 */
      yearsOfExperience?: number
      certifications?: string[]
      qualifications?: components['schemas']['Models.StaffQualification'][]
      schedules?: components['schemas']['Models.StaffSchedule'][]
      permissions?: components['schemas']['Models.StaffPermission'][]
    }
    /** @enum {string} */
    'Models.CurrencyCodeType':
      | 'JPY'
      | 'USD'
      | 'EUR'
      | 'GBP'
      | 'AUD'
      | 'CAD'
      | 'CNY'
      | 'KRW'
      | 'SGD'
      | 'TWD'
    'Models.Customer': {
      id: components['schemas']['Models.CustomerId']
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      /** @description Customer gender */
      gender: components['schemas']['Models.CustomerGenderType'] | null
      /**
       * Format: date
       * @description Birth date
       */
      birthDate: string | null
      /** @description Address */
      address: components['schemas']['Models.Address'] | null
      /** @description Preferences and requirements */
      preferences: string | null
      /** @description Internal notes */
      notes: string | null
      /** @description Tags for categorization */
      tags: string[] | null
      /**
       * Format: int32
       * @description Current loyalty points
       */
      loyaltyPoints: number | null
      /** @description Membership information */
      membership: components['schemas']['Models.MembershipInfo'] | null
      /** @description NotificationType settings */
      notificationSettings:
        | components['schemas']['Models.NotificationSettings']
        | null
      /** @description Health information */
      health: components['schemas']['Models.CustomerHealth'] | null
      /** @description Customer preferences */
      customerPreferences:
        | components['schemas']['Models.CustomerPreferences']
        | null
      /** @description Visit history */
      history: components['schemas']['Models.CustomerHistory'] | null
      /** @description Customer associations */
      associations: components['schemas']['Models.CustomerAssociations'] | null
      /** @description Customer status */
      status: components['schemas']['Models.CustomerStatusDetail'] | null
      /** @description Customer metadata */
      metadata: components['schemas']['Models.CustomerMetadata'] | null
      /** @description Medical chart ID */
      medicalChartId:
        | (string & components['schemas']['Models.MedicalChartId'])
        | null
      /**
       * @description Is active customer
       * @default true
       */
      isActive: boolean
      /**
       * @description Registration source
       * @enum {string|null}
       */
      registrationSource: 'walk_in' | 'online' | 'phone' | 'referral' | null
      /** @description Referrer customer ID */
      referredBy: (string & components['schemas']['Models.CustomerId']) | null
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.CustomerAssociations': {
      primarySalonId: (string & components['schemas']['Models.SalonId']) | null
      visitedSalonIds: components['schemas']['Models.SalonId'][]
      familyMemberIds: components['schemas']['Models.CustomerId'][] | null
      referredBy: (string & components['schemas']['Models.CustomerId']) | null
      referredCustomerIds: components['schemas']['Models.CustomerId'][] | null
      groupId: string | null
    }
    /** @enum {string} */
    'Models.CustomerGenderType':
      | 'male'
      | 'female'
      | 'other'
      | 'prefer_not_to_say'
    'Models.CustomerHealth': {
      allergies: components['schemas']['Models.AllergyInfo'][]
      hairInfo: components['schemas']['Models.HairInfo'] | null
      scalpInfo: components['schemas']['Models.ScalpInfo'] | null
      medicalConditions: string[] | null
      medications: string[] | null
      pregnancyStatus: boolean | null
      specialNeeds: string | null
    }
    'Models.CustomerHistory': {
      visits: components['schemas']['Models.VisitHistory']
      lastServiceId: (string & components['schemas']['Models.ServiceId']) | null
      lastStaffId: (string & components['schemas']['Models.StaffId']) | null
      favoriteServiceIds: components['schemas']['Models.ServiceId'][]
      favoriteStaffIds: components['schemas']['Models.StaffId'][]
      pastTreatments: string[] | null
      notes: string[] | null
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Customer ID
     */
    'Models.CustomerId': string
    'Models.CustomerMetadata': {
      /** @enum {string|null} */
      source:
        | 'walk_in'
        | 'online'
        | 'phone'
        | 'referral'
        | 'social_media'
        | 'advertisement'
        | null
      campaign: string | null
      tags: string[] | null
      customFields: {
        [key: string]: unknown
      } | null
      internalNotes: string[] | null
      /** Format: int32 */
      riskScore: number | null
      /** Format: int32 */
      lifetimeValue: number | null
      lastUpdatedBy: string | null
    }
    'Models.CustomerPreferences': {
      stylePreferences: components['schemas']['Models.StylePreference'] | null
      servicePreferences:
        | components['schemas']['Models.ServicePreference']
        | null
      communicationPreferences:
        | components['schemas']['Models.NotificationSettings']
        | null
      preferredStaff: components['schemas']['Models.StaffId'][] | null
      avoidStaff: components['schemas']['Models.StaffId'][] | null
      preferredDayOfWeek: components['schemas']['Models.DayOfWeekType'][] | null
      preferredTimeSlots: components['schemas']['Models.TimeSlot'][] | null
      specialRequests: string | null
      language: string | null
    }
    /** @description Customer preferences update model */
    'Models.CustomerPreferencesUpdate': {
      /** @description Preferred contact method */
      contactMethod: components['schemas']['Models.ContactMethodType']
      /** @description NotificationType preferences */
      notifications: components['schemas']['Models.NotificationPreferences']
      /** @description Marketing opt-in status */
      marketingOptIn: boolean
      /** @description Preferred language */
      preferredLanguage?: string
      /** @description Accessibility requirements */
      accessibilityRequirements?: string[]
      /** @description Allergies or sensitivities */
      allergies?: string[]
      /** @description Preferred appointment times */
      preferredTimes?: components['schemas']['Models.TimePreference'][]
    }
    'Models.CustomerProfile': {
      /** Format: int32 */
      visitCount: number
      /** Format: date-time */
      lastVisitDate: string | null
      favoriteStaffIds: components['schemas']['Models.StaffId'][] | null
      favoriteServiceIds: components['schemas']['Models.ServiceId'][] | null
      /** Format: int32 */
      totalSpent: number
    } & components['schemas']['Models.Customer']
    /** @description Customer statistics response */
    'Models.CustomerStatistics': {
      /**
       * Format: int32
       * @description Total bookings
       */
      totalBookings: number
      /** @description Total spent */
      totalSpent: components['schemas']['Models.Money']
      /** @description Average booking value */
      averageBookingValue: components['schemas']['Models.Money']
      /**
       * Format: date-time
       * @description Last visit date
       */
      lastVisit?: string
      /** @description Favorite services */
      favoriteServices: components['schemas']['Models.ServiceSummary'][]
      /** @description Favorite staff */
      favoriteStaff: components['schemas']['Models.StaffSummary'][]
      /**
       * Format: int32
       * @description Loyalty points
       */
      loyaltyPoints: number
      /**
       * Format: date-time
       * @description Customer since
       */
      customerSince: string
      /**
       * Format: float
       * @description Cancellation rate
       */
      cancellationRate: number
      /**
       * Format: float
       * @description No-show rate
       */
      noShowRate: number
    }
    'Models.CustomerStatusDetail': {
      type: components['schemas']['Models.CustomerStatusType']
      reason: string | null
      /** Format: date-time */
      since: string | null
      /** Format: date-time */
      until: string | null
      by: string | null
      /** Format: date-time */
      deletedAt: string | null
    }
    /** @enum {string} */
    'Models.CustomerStatusType':
      | 'active'
      | 'inactive'
      | 'suspended'
      | 'deleted'
      | 'blacklisted'
    /** @enum {string} */
    'Models.CutSubCategoryType':
      | 'mens_cut'
      | 'womens_cut'
      | 'kids_cut'
      | 'bang_trim'
      | 'beard_trim'
    'Models.DateRange': {
      /** Format: date-time */
      startDate: string
      /** Format: date-time */
      endDate: string
    }
    /** @enum {string} */
    'Models.DayOfWeekType':
      | 'monday'
      | 'tuesday'
      | 'wednesday'
      | 'thursday'
      | 'friday'
      | 'saturday'
      | 'sunday'
    /** @description Domain error details for internal error handling */
    'Models.DomainErrorDetails': {
      /** @description Error classification type */
      type: components['schemas']['Models.DomainErrorType']
      /** @description Human-readable error message */
      message: string
      /** @description Machine-readable error code */
      code: string
      /** @description Additional error context */
      details?: {
        [key: string]: unknown
      }
      /** @description Related entity information */
      entity?: string
      /** @description Related field information */
      field?: string
      /** @description Related value information */
      value?: string
      /** @description Service name for external service errors */
      service?: string
    }
    /** @description Standard domain error factory configuration */
    'Models.DomainErrorFactory': {
      /** @description Validation error factory */
      validation: {
        /** @enum {string} */
        type: 'VALIDATION_ERROR'
        /** @enum {string} */
        defaultCode: 'VALIDATION_FAILED'
        /** @enum {number} */
        httpStatus: 400
      }
      /** @description Not found error factory */
      notFound: {
        /** @enum {string} */
        type: 'NOT_FOUND'
        /** @enum {string} */
        defaultCode: 'RESOURCE_NOT_FOUND'
        /** @enum {number} */
        httpStatus: 404
      }
      /** @description Already exists error factory */
      alreadyExists: {
        /** @enum {string} */
        type: 'ALREADY_EXISTS'
        /** @enum {string} */
        defaultCode: 'RESOURCE_ALREADY_EXISTS'
        /** @enum {number} */
        httpStatus: 409
      }
      /** @description Business rule violation factory */
      businessRule: {
        /** @enum {string} */
        type: 'BUSINESS_RULE_VIOLATION'
        /** @enum {string} */
        defaultCode: 'BUSINESS_RULE_VIOLATION'
        /** @enum {number} */
        httpStatus: 422
      }
      /** @description Unauthorized error factory */
      unauthorized: {
        /** @enum {string} */
        type: 'UNAUTHORIZED'
        /** @enum {string} */
        defaultCode: 'AUTHENTICATION_REQUIRED'
        /** @enum {number} */
        httpStatus: 401
      }
      /** @description Forbidden error factory */
      forbidden: {
        /** @enum {string} */
        type: 'FORBIDDEN'
        /** @enum {string} */
        defaultCode: 'INSUFFICIENT_PERMISSIONS'
        /** @enum {number} */
        httpStatus: 403
      }
      /** @description Internal error factory */
      internal: {
        /** @enum {string} */
        type: 'INTERNAL_ERROR'
        /** @enum {string} */
        defaultCode: 'INTERNAL_SERVER_ERROR'
        /** @enum {number} */
        httpStatus: 500
      }
      /** @description Database error factory */
      database: {
        /** @enum {string} */
        type: 'DATABASE_ERROR'
        /** @enum {string} */
        defaultCode: 'DATABASE_ERROR'
        /** @enum {number} */
        httpStatus: 500
      }
      /** @description External service error factory */
      externalService: {
        /** @enum {string} */
        type: 'EXTERNAL_SERVICE_ERROR'
        /** @enum {string} */
        defaultCode: 'EXTERNAL_SERVICE_ERROR'
        /** @enum {number} */
        httpStatus: 502
      }
    }
    /** @description Mapping between domain error types and error codes */
    'Models.DomainErrorMapping': {
      /** @description Domain error type */
      domainType: components['schemas']['Models.DomainErrorType']
      /** @description Corresponding error code */
      errorCode: components['schemas']['Models.ErrorCodeType']
      /**
       * Format: int32
       * @description HTTP status code
       */
      httpStatus: number
    }
    /**
     * @description Domain error type classification
     * @enum {string}
     */
    'Models.DomainErrorType':
      | 'VALIDATION_ERROR'
      | 'NOT_FOUND'
      | 'ALREADY_EXISTS'
      | 'BUSINESS_RULE_VIOLATION'
      | 'UNAUTHORIZED'
      | 'FORBIDDEN'
      | 'INTERNAL_ERROR'
      | 'DATABASE_ERROR'
      | 'EXTERNAL_SERVICE_ERROR'
    /** @description Error context for domain operations */
    'Models.DomainOperationError': {
      /** @description Domain error details */
      domainError: components['schemas']['Models.DomainErrorDetails']
      /** @description Problem details for HTTP response */
      problemDetails: components['schemas']['Models.ProblemDetails']
      /**
       * Format: date-time
       * @description Occurred at timestamp
       */
      occurredAt: string
      /** @description Operation context */
      operation?: string
      /** @description Stack trace for debugging (only in development) */
      stackTrace?: string
    }
    /** @description 署名付きダウンロードURL取得レスポンス */
    'Models.DownloadUrlResponse': {
      /** @description 署名付きダウンロードURL */
      downloadUrl: string
      /**
       * Format: date-time
       * @description URL有効期限
       */
      expiresAt: string
    }
    'Models.DraftBookingStatus': {
      /** @enum {string} */
      type: 'draft'
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      expiresAt?: string
    }
    'Models.DraftBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'draft'
      /** Format: date-time */
      createdAt?: string
      /** Format: date-time */
      expiresAt?: string
    }
    /** @description Email verification request */
    'Models.EmailVerificationRequest': {
      /** @description Email verification token */
      token: string
    }
    'Models.EmailVerificationStateDetail': {
      type: components['schemas']['Models.EmailVerificationStateType']
      /** Format: date-time */
      verifiedAt?: string
      token?: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      sentAt?: string
    }
    /** @enum {string} */
    'Models.EmailVerificationStateType': 'verified' | 'unverified' | 'pending'
    'Models.Error': {
      code: string
      message: string
      details?: {
        [key: string]: unknown
      }
    }
    /**
     * @description Standardized error codes for consistent error handling
     * @enum {string}
     */
    'Models.ErrorCodeType':
      | '1001'
      | '1002'
      | '1003'
      | '1004'
      | '1005'
      | '1006'
      | '1007'
      | '2001'
      | '2002'
      | '2003'
      | '2004'
      | '2005'
      | '3001'
      | '3002'
      | '3003'
      | '3004'
      | '3005'
      | '3006'
      | '3007'
      | '4001'
      | '4002'
      | '4003'
      | '4004'
      | '4005'
    'Models.Facet': {
      /** @description Facet value */
      value: string
      /**
       * Format: int32
       * @description Number of items with this value
       */
      count: number
    }
    'Models.FailedPaymentStatus': {
      /** @enum {string} */
      type: 'failed'
      /** Format: date-time */
      failedAt: string
      reason: string
      /** @default false */
      retryable: boolean
    }
    'Models.FailedPaymentStatusUpdate': {
      /** @enum {string} */
      type?: 'failed'
      /** Format: date-time */
      failedAt?: string
      reason?: string
      /** @default false */
      retryable: boolean
    }
    /**
     * @description ファイルタイプ
     * @enum {string}
     */
    'Models.FileType': 'image' | 'document' | 'other'
    /** @description Customer bookings filter parameters */
    'Models.GetCustomerBookingsRequest': {
      status?: components['schemas']['Models.BookingStatusCodeType']
    }
    /** @description Customer reservations filter parameters */
    'Models.GetCustomerReservationsRequest': {
      status?: components['schemas']['Models.ReservationStatusType']
      /** Format: date-time */
      from?: string
      /** Format: date-time */
      to?: string
    }
    /** @description 署名付きアップロードURL取得リクエスト */
    'Models.GetUploadUrlRequest': {
      /** @description ファイル名 */
      filename: string
      /** @description Content-Type */
      content: string
      /**
       * Format: int32
       * @description ファイルサイズ（バイト）
       */
      size: number
      /** @description サロンID（オプション） */
      salonId?: string
    }
    'Models.HairInfo': {
      type: components['schemas']['Models.HairType']
      thickness: components['schemas']['Models.HairThicknessType']
      condition: string[]
      chemicalHistory: string[]
      notes: string | null
    }
    /** @enum {string} */
    'Models.HairThicknessType': 'fine' | 'medium' | 'thick'
    /** @enum {string} */
    'Models.HairType': 'straight' | 'wavy' | 'curly' | 'coily'
    'Models.HealthCheck': {
      /** @description Service name */
      name: string
      /**
       * @description Service status
       * @enum {string}
       */
      status: 'up' | 'down' | 'degraded'
      /**
       * Format: int32
       * @description Response time in milliseconds
       */
      responseTime?: number
      /** @description Error message if service is down */
      error?: string
      /** @description Additional details */
      details?: {
        [key: string]: unknown
      }
    }
    /** @description API health status */
    'Models.HealthStatus': {
      /**
       * @description Overall health status
       * @enum {string}
       */
      status: 'healthy' | 'degraded' | 'unhealthy'
      /** @description API version */
      version: string
      /**
       * Format: date-time
       * @description Server timestamp
       */
      timestamp: string
      /** @description Individual service health checks */
      checks: components['schemas']['Models.HealthCheck'][]
      /** @description Additional metadata */
      metadata?: {
        [key: string]: unknown
      }
    }
    'Models.InProgressBookingStatus': {
      /** @enum {string} */
      type: 'in_progress'
      /** Format: date-time */
      startedAt: string
      stationName?: string
    }
    'Models.InProgressBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'in_progress'
      /** Format: date-time */
      startedAt?: string
      stationName?: string
    }
    /** @description Inventory alert */
    'Models.InventoryAlert': {
      itemId: components['schemas']['Models.InventoryId']
      /** Format: float */
      threshold: number
      /** Format: float */
      currentStock: number
      /** Format: date-time */
      triggeredAt: string
      inventoryId: components['schemas']['Models.InventoryId']
      /** @enum {string} */
      alert: 'low_stock' | 'expiring' | 'expired' | 'overstock'
      message: string
      /** @enum {string} */
      severity: 'info' | 'warning' | 'critical'
      acknowledged?: boolean
      acknowledgedBy?: components['schemas']['Models.StaffId']
      /** Format: date-time */
      acknowledgedAt?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Inventory ID
     */
    'Models.InventoryId': string
    /** @description Inventory item */
    'Models.InventoryItem': {
      id: components['schemas']['Models.InventoryId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Product code/SKU */
      productCode: string
      /** @description Product name */
      productName: string
      /** @description Product description */
      description?: string
      /** @description Category */
      category: string
      /** @description Brand */
      brand?: string
      /** @description Supplier information */
      supplier?: string
      /**
       * Format: float
       * @description Current stock quantity
       */
      currentStock: number
      /**
       * Format: float
       * @description Minimum stock level
       */
      minimumStock: number
      /**
       * Format: float
       * @description Maximum stock level
       */
      maximumStock?: number
      /** @description Unit of measurement */
      unit: string
      /**
       * Format: float
       * @description Unit cost
       */
      unitCost: number
      /**
       * Format: float
       * @description Selling price (if sold to customers)
       */
      sellingPrice?: number
      /** @description Stock status */
      status: components['schemas']['Models.InventoryStatusType']
      /** @description Location in salon */
      location?: string
      /**
       * Format: date-time
       * @description Expiration date
       */
      expirationDate?: string
      /**
       * Format: date-time
       * @description Last restocked date
       */
      lastRestocked?: string
      /** @description Notes */
      notes?: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.InventoryItemCreateInput': {
      salonId: components['schemas']['Models.SalonId']
      productCode: string
      productName: string
      description?: string
      category: string
      brand?: string
      supplier?: string
      /** Format: float */
      currentStock: number
      /** Format: float */
      minimumStock: number
      /** Format: float */
      maximumStock?: number
      unit: string
      /** Format: float */
      unitCost: number
      /** Format: float */
      sellingPrice?: number
      location?: string
      /** Format: date-time */
      expirationDate?: string
      notes?: string
    }
    'Models.InventoryItemUpdateInput': {
      productName?: string
      description?: string
      category?: string
      brand?: string
      supplier?: string
      /** Format: float */
      minimumStock?: number
      /** Format: float */
      maximumStock?: number
      /** Format: float */
      unitCost?: number
      /** Format: float */
      sellingPrice?: number
      location?: string
      /** Format: date-time */
      expirationDate?: string
      status?: components['schemas']['Models.InventoryStatusType']
      notes?: string
    }
    /** @enum {string} */
    'Models.InventoryStatusType':
      | 'in_stock'
      | 'low_stock'
      | 'out_of_stock'
      | 'ordered'
      | 'discontinued'
    'Models.InventoryTransaction': {
      id: string
      itemId: components['schemas']['Models.InventoryId']
      salonId: components['schemas']['Models.SalonId']
      /** @enum {string} */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /** Format: float */
      quantity: number
      reason: string
      performedBy: components['schemas']['Models.StaffId']
      /** Format: date-time */
      occurredAt: string
      referenceId?: string
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description Login request */
    'Models.LoginRequest': {
      /** @description User's email address */
      email: string
      /** @description User's password */
      password: string
      /**
       * @description Remember me flag for extended session
       * @default false
       */
      rememberMe: boolean
      /** @description Two-factor authentication code (if 2FA is enabled) */
      twoFactorCode?: string
    }
    /** @description Login response */
    'Models.LoginResponse': {
      /** @description Access token for API requests */
      accessToken: string
      /** @description Refresh token for obtaining new access tokens */
      refreshToken: string
      /**
       * @description Token type (always 'Bearer')
       * @default Bearer
       */
      token: string
      /**
       * Format: int32
       * @description Access token expiry in seconds
       */
      expiresIn: number
      /** @description Logged in user information */
      user: components['schemas']['Models.User']
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Loyalty Tier ID
     */
    'Models.LoyaltyTierId': string
    /**
     * @description Loyalty tier enum
     * @enum {string}
     */
    'Models.LoyaltyTierType': 'bronze' | 'silver' | 'gold' | 'platinum'
    /** @enum {string} */
    'Models.MakeupSubCategoryType':
      | 'everyday_makeup'
      | 'event_makeup'
      | 'bridal_makeup'
      | 'photoshoot_makeup'
    /** @description Material usage record */
    'Models.MaterialUsage': {
      inventoryId: components['schemas']['Models.InventoryId']
      productName: string
      /** Format: float */
      quantity: number
      unit: string
      notes?: string
    }
    /** @description Medical chart for customer */
    'Models.MedicalChart': {
      id: components['schemas']['Models.MedicalChartId']
      customerId: components['schemas']['Models.CustomerId']
      /** @description Allergies and sensitivities */
      allergies?: string[]
      /** @description Scalp condition */
      scalpCondition?: string
      /** @description Hair condition */
      hairCondition?: string
      /** @description Previous chemical treatments */
      previousTreatments?: components['schemas']['Models.PreviousTreatment'][]
      /** @description Medical conditions to be aware of */
      medicalConditions?: string
      /** @description Preferred products */
      preferredProducts?: string[]
      /** @description Products to avoid */
      avoidProducts?: string[]
      /** @description General notes */
      notes?: string
      /**
       * Format: date-time
       * @description Last updated date
       */
      lastUpdated: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.MedicalChartCreateInput': {
      customerId: components['schemas']['Models.CustomerId']
      allergies?: string[]
      scalpCondition?: string
      hairCondition?: string
      previousTreatments?: components['schemas']['Models.PreviousTreatment'][]
      medicalConditions?: string
      preferredProducts?: string[]
      avoidProducts?: string[]
      notes?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Medical Chart ID
     */
    'Models.MedicalChartId': string
    'Models.MedicalChartUpdateInput': {
      allergies?: string[]
      scalpCondition?: string
      hairCondition?: string
      previousTreatments?: components['schemas']['Models.PreviousTreatment'][]
      medicalConditions?: string
      preferredProducts?: string[]
      avoidProducts?: string[]
      notes?: string
    }
    'Models.MembershipBenefitDetail': {
      type: components['schemas']['Models.MembershipBenefitType']
      /** Format: int32 */
      percentage: number | null
      multiplier: (number & components['schemas']['Models.decimal']) | null
      service: string | null
      /** @enum {string|null} */
      frequency: 'monthly' | 'quarterly' | 'yearly' | null
      /** Format: int32 */
      value: number | null
      description: string | null
    }
    /** @enum {string} */
    'Models.MembershipBenefitType':
      | 'discount_rate'
      | 'point_multiplier'
      | 'priority_booking'
      | 'free_service'
      | 'birthday_special'
      | 'exclusive_access'
    'Models.MembershipInfo': {
      tier: components['schemas']['Models.MembershipTierType']
      /** Format: date-time */
      since: string
      benefits: components['schemas']['Models.MembershipBenefitDetail'][]
      dedicatedManager: string | null
      /** Format: int32 */
      points: number
      /** Format: int32 */
      totalPointsEarned: number
      /** Format: int32 */
      totalPointsUsed: number
      /** Format: int32 */
      expiringPoints: number | null
      /** Format: date-time */
      pointsExpireAt: string | null
    }
    /** @enum {string} */
    'Models.MembershipTierType':
      | 'regular'
      | 'silver'
      | 'gold'
      | 'platinum'
      | 'vip'
    'Models.Money': {
      /** Format: int64 */
      value: number
      currency: components['schemas']['Models.CurrencyCodeType']
      taxRate?: components['schemas']['Models.decimal']
    }
    'Models.MoneyUpdate': {
      /** Format: int64 */
      value?: number
      currency?: components['schemas']['Models.CurrencyCodeType']
      taxRate?: components['schemas']['Models.decimal']
    }
    /** @enum {string} */
    'Models.NailSubCategoryType':
      | 'manicure'
      | 'pedicure'
      | 'gel_nail'
      | 'nail_art'
      | 'nail_removal'
    'Models.NoShowBookingStatus': {
      /** @enum {string} */
      type: 'no_show'
      /** Format: date-time */
      recordedAt: string
      /** @default false */
      penaltyApplied: boolean
    }
    'Models.NoShowBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'no_show'
      /** Format: date-time */
      recordedAt?: string
      /** @default false */
      penaltyApplied: boolean
    }
    /** @description Notification preferences model */
    'Models.NotificationPreferences': {
      /** @description Email notifications enabled */
      email: boolean
      /** @description SMS notifications enabled */
      sms: boolean
      /** @description Push notifications enabled */
      push: boolean
      /**
       * Format: int32
       * @description Reminder timing (hours before appointment)
       */
      reminderHours: number
    }
    'Models.NotificationSettings': {
      types: components['schemas']['Models.NotificationType'][]
      reminderTimings: components['schemas']['Models.ReminderTimingType'][]
      enabled: boolean
    }
    /** @enum {string} */
    'Models.NotificationType': 'email' | 'sms' | 'push' | 'line'
    /** @description Offset-based pagination parameters */
    'Models.OffsetPaginationParams': {
      /**
       * Format: int32
       * @description Maximum number of items to return (1-100)
       * @default 20
       */
      limit: number
      /**
       * Format: int32
       * @description Number of items to skip
       * @default 0
       */
      offset: number
      /** @description Field to sort by */
      sortBy?: string
      /**
       * @description Sort order
       * @default asc
       * @enum {string}
       */
      sortOrder: 'asc' | 'desc'
    }
    'Models.OpeningHours': {
      dayOfWeek: components['schemas']['Models.DayOfWeekType'] | null
      /** Format: date */
      date: string | null
      openTime: string | null
      closeTime: string | null
      isHoliday: boolean
      holidayName: string | null
      notes: string | null
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Order ID
     */
    'Models.OrderId': string
    /** @description Order item detail */
    'Models.OrderItem': {
      inventoryId: components['schemas']['Models.InventoryId']
      productCode: string
      productName: string
      /** Format: float */
      quantity: number
      unit: string
      /** Format: float */
      unitPrice: number
      /** Format: float */
      totalPrice: number
      notes?: string
    }
    /** @enum {string} */
    'Models.OrderStatusType':
      | 'draft'
      | 'pending'
      | 'approved'
      | 'ordered'
      | 'shipped'
      | 'delivered'
      | 'cancelled'
    /** @description ページネーション付き添付ファイル一覧 */
    'Models.PaginatedAttachments': {
      /** @description 添付ファイル一覧 */
      items: components['schemas']['Models.Attachment'][]
      /**
       * Format: int32
       * @description 合計件数
       */
      total: number
      /**
       * Format: int32
       * @description 現在のページ
       */
      page: number
      /**
       * Format: int32
       * @description ページあたりの件数
       */
      limit: number
      /**
       * Format: int32
       * @description 総ページ数
       */
      totalPages: number
    }
    'Models.PaginationLinks': {
      /** @description Link to current page */
      self: string
      /** @description Link to first page */
      first: string | null
      /** @description Link to last page */
      last: string | null
      /** @description Link to next page */
      next: string | null
      /** @description Link to previous page */
      prev: string | null
    }
    'Models.PaginationMeta': {
      /**
       * Format: int32
       * @description Total number of items
       */
      total: number | null
      /**
       * Format: int32
       * @description Number of items per page
       */
      limit: number
      /** @description Whether there are more pages */
      hasMore: boolean
      /** @description Current cursor position */
      cursor: string | null
      /** @description Next cursor for pagination */
      nextCursor: string | null
      /** @description Previous cursor for pagination */
      prevCursor: string | null
    }
    'Models.PartialRefundPaymentStatus': {
      /** @enum {string} */
      type: 'partial_refund'
      /** Format: date-time */
      refundedAt: string
      refundAmount: components['schemas']['Models.Money']
      remainingAmount: components['schemas']['Models.Money']
      refundId: components['schemas']['Models.RefundId']
    }
    'Models.PartialRefundPaymentStatusUpdate': {
      /** @enum {string} */
      type?: 'partial_refund'
      /** Format: date-time */
      refundedAt?: string
      refundAmount?: components['schemas']['Models.MoneyUpdate']
      remainingAmount?: components['schemas']['Models.MoneyUpdate']
      refundId?: components['schemas']['Models.RefundId']
    }
    /** @description Password change request */
    'Models.PasswordChangeRequest': {
      /** @description Current password for verification */
      currentPassword: string
      /** @description New password */
      newPassword: string
    }
    /** @description Password reset confirmation */
    'Models.PasswordResetConfirmRequest': {
      /** @description Password reset token from email */
      token: string
      /** @description New password */
      newPassword: string
    }
    /** @description Password reset request */
    'Models.PasswordResetRequest': {
      /** @description Email address of the account */
      email: string
    }
    'Models.PasswordResetStateDetail': {
      type: components['schemas']['Models.PasswordResetStateType']
      token?: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      completedAt?: string
    }
    /** @enum {string} */
    'Models.PasswordResetStateType': 'none' | 'requested' | 'completed'
    /** @description Payment record for services */
    'Models.Payment': {
      id: components['schemas']['Models.PaymentId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId?: components['schemas']['Models.BookingId']
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      method: components['schemas']['Models.PaymentMethodType']
      status: components['schemas']['Models.PaymentStatus']
      amounts: components['schemas']['Models.PaymentAmounts']
      /** Format: int32 */
      pointsUsed?: number
      depositApplied?: components['schemas']['Models.Money']
      outstandingAmount?: components['schemas']['Models.Money']
      externalReference?: string
      receiptNumber?: string
      history: components['schemas']['Models.PaymentHistory'][]
      refunds?: components['schemas']['Models.Refund'][]
      metadata?: {
        [key: string]: unknown
      }
      notes?: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.PaymentAmounts': {
      billed: components['schemas']['Models.Money']
      tax?: components['schemas']['Models.Money']
      discount?: components['schemas']['Models.Money']
      tip?: components['schemas']['Models.Money']
      totalPayable: components['schemas']['Models.Money']
    }
    'Models.PaymentBreakdown': {
      subtotal: components['schemas']['Models.Money']
      tax: components['schemas']['Models.Money']
      discount: components['schemas']['Models.Money']
      pointsDiscount?: components['schemas']['Models.Money']
      total: components['schemas']['Models.Money']
    }
    'Models.PaymentCreateInput': {
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId?: components['schemas']['Models.BookingId']
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      method: components['schemas']['Models.PaymentMethodType']
      amounts: components['schemas']['Models.PaymentAmounts']
      /** Format: int32 */
      pointsUsed?: number
      depositApplied?: components['schemas']['Models.Money']
      externalReference?: string
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    'Models.PaymentHistory': {
      eventId: string
      paymentId: components['schemas']['Models.PaymentId']
      status: components['schemas']['Models.PaymentStatus']
      /** Format: date-time */
      occurredAt: string
      /** @enum {string} */
      actor?: 'system' | 'staff' | 'customer'
      actorId?: string
      note?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Payment ID
     */
    'Models.PaymentId': string
    /** @enum {string} */
    'Models.PaymentMethodType':
      | 'cash'
      | 'credit_card'
      | 'debit_card'
      | 'e_money'
      | 'qr_payment'
      | 'bank_transfer'
      | 'point'
    'Models.PaymentPreview': {
      salonId: components['schemas']['Models.SalonId']
      customerId?: components['schemas']['Models.CustomerId']
      bookingId?: components['schemas']['Models.BookingId']
      breakdown: components['schemas']['Models.PaymentBreakdown']
      recommendedMethods: components['schemas']['Models.PaymentMethodType'][]
      notes?: string
    }
    'Models.PaymentStatus':
      | components['schemas']['Models.PendingPaymentStatus']
      | components['schemas']['Models.ProcessingPaymentStatus']
      | components['schemas']['Models.CompletedPaymentStatus']
      | components['schemas']['Models.FailedPaymentStatus']
      | components['schemas']['Models.RefundedPaymentStatus']
      | components['schemas']['Models.PartialRefundPaymentStatus']
    /** @enum {string} */
    'Models.PaymentStatusCodeType':
      | 'pending'
      | 'processing'
      | 'completed'
      | 'failed'
      | 'refunded'
      | 'partial_refund'
    'Models.PaymentStatusUpdate':
      | components['schemas']['Models.PendingPaymentStatusUpdate']
      | components['schemas']['Models.ProcessingPaymentStatusUpdate']
      | components['schemas']['Models.CompletedPaymentStatusUpdate']
      | components['schemas']['Models.FailedPaymentStatusUpdate']
      | components['schemas']['Models.RefundedPaymentStatusUpdate']
      | components['schemas']['Models.PartialRefundPaymentStatusUpdate']
    'Models.PaymentUpdateInput': {
      method?: components['schemas']['Models.PaymentMethodType']
      status?: components['schemas']['Models.PaymentStatusUpdate']
      outstandingAmount?: components['schemas']['Models.MoneyUpdate']
      depositApplied?: components['schemas']['Models.MoneyUpdate'] | null
      externalReference?: string | null
      receiptNumber?: string | null
      notes?: string | null
      metadata?: {
        [key: string]: unknown
      } | null
    }
    'Models.PendingBookingStatus': {
      /** @enum {string} */
      type: 'pending'
      /** Format: date-time */
      requestedAt: string
      /** Format: date-time */
      holdExpiresAt?: string
      assignedStaffId?: components['schemas']['Models.StaffId']
    }
    'Models.PendingBookingStatusUpdate': {
      /** @enum {string} */
      type?: 'pending'
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      holdExpiresAt?: string
      assignedStaffId?: components['schemas']['Models.StaffId']
    }
    'Models.PendingPaymentStatus': {
      /** @enum {string} */
      type: 'pending'
      /** Format: date-time */
      createdAt: string
    }
    'Models.PendingPaymentStatusUpdate': {
      /** @enum {string} */
      type?: 'pending'
      /** Format: date-time */
      createdAt?: string
    }
    /** @enum {string} */
    'Models.PermSubCategoryType':
      | 'regular_perm'
      | 'digital_perm'
      | 'spiral_perm'
      | 'body_wave'
      | 'straightening'
    /** @description Permission definition */
    'Models.Permission': {
      id: components['schemas']['Models.PermissionId']
      /** @description Permission key (e.g., 'booking.create') */
      key: string
      /** @description Permission name */
      name: string
      /** @description Permission description */
      description?: string
      /** @description Resource type */
      resource: string
      /** @description Action type */
      action: string
      /**
       * @description Scope (own, salon, all)
       * @enum {string}
       */
      scope?: 'own' | 'salon' | 'all'
    }
    'Models.PermissionCheckInput': {
      userId: string
      permissions: string[]
      salonId?: components['schemas']['Models.SalonId']
    }
    'Models.PermissionCheckResult': {
      userId: string
      permissions: components['schemas']['Models.PermissionStatus'][]
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Permission ID
     */
    'Models.PermissionId': string
    'Models.PermissionStatus': {
      permission: string
      granted: boolean
      source?: string
    }
    'Models.PointInfo': {
      /** Format: int32 */
      currentPoints: number
      /** Format: int32 */
      totalEarnedPoints: number
      /** Format: int32 */
      totalUsedPoints: number
      /** Format: int32 */
      expiringPoints: number | null
      /** Format: date-time */
      expirationDate: string | null
    }
    /** @description Point transaction record */
    'Models.PointTransaction': {
      id: components['schemas']['Models.PointTransactionId']
      customerId: components['schemas']['Models.CustomerId']
      /**
       * @description Transaction type: earn or use
       * @enum {string}
       */
      type: 'earn' | 'use' | 'expire' | 'adjust'
      /**
       * Format: int32
       * @description Points amount (positive for earn, negative for use)
       */
      points: number
      /**
       * Format: int32
       * @description Balance after transaction
       */
      balanceAfter: number
      /** @description Related payment or booking */
      paymentId?: components['schemas']['Models.PaymentId']
      bookingId?: components['schemas']['Models.BookingId']
      /** @description Transaction description */
      description: string
      /**
       * Format: date-time
       * @description Expiration date for earned points
       */
      expiresAt?: string
      /**
       * Format: date-time
       * @description Transaction timestamp
       */
      transactedAt: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.PointTransactionCreateInput': {
      customerId: components['schemas']['Models.CustomerId']
      /** @enum {string} */
      type: 'earn' | 'use' | 'expire' | 'adjust'
      /** Format: int32 */
      points: number
      paymentId?: components['schemas']['Models.PaymentId']
      bookingId?: components['schemas']['Models.BookingId']
      description: string
      /** Format: date-time */
      expiresAt?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Point Transaction ID
     */
    'Models.PointTransactionId': string
    /** @description Previous treatment history */
    'Models.PreviousTreatment': {
      treatment: components['schemas']['Models.TreatmentType']
      /** Format: date-time */
      date: string
      salonName?: string
      notes?: string
    }
    'Models.PriceRangeFilter': {
      /** Format: float */
      minPrice?: number
      /** Format: float */
      maxPrice?: number
    }
    'Models.PriceTier': {
      name: string
      description?: string
      /** Format: int32 */
      price: number
      /** Format: int32 */
      duration?: number
      conditions?: string[]
    }
    'Models.PricingFactor': {
      /** @enum {string} */
      type: 'day_of_week' | 'time_of_day' | 'staff_level' | 'demand' | 'season'
      multipliers?: {
        [key: string]: components['schemas']['Models.decimal']
      }
      peakHours?: string[]
      peakMultiplier?: components['schemas']['Models.decimal']
      /** Format: int32 */
      threshold?: number
      seasons?: components['schemas']['Models.Season'][]
    }
    'Models.PricingStrategyDetail': {
      type: components['schemas']['Models.PricingStrategyType']
      /** Format: int32 */
      amount?: number
      tiers?: components['schemas']['Models.PriceTier'][]
      /** Format: int32 */
      basePrice?: number
      factors?: components['schemas']['Models.PricingFactor'][]
      services?: components['schemas']['Models.ServiceId'][]
      discountRate?: components['schemas']['Models.decimal']
      /** Format: int32 */
      memberPrice?: number
      /** Format: int32 */
      nonMemberPrice?: number
      description?: string
    }
    /** @enum {string} */
    'Models.PricingStrategyType':
      | 'fixed'
      | 'tiered'
      | 'dynamic'
      | 'package'
      | 'membership'
      | 'custom'
    /** @description Standardized error response following RFC 7807 */
    'Models.ProblemDetails': {
      /** @description URI reference that identifies the problem type */
      type: string
      /** @description Short, human-readable summary of the problem */
      title: string
      /**
       * Format: int32
       * @description HTTP status code
       */
      status: number
      /** @description Human-readable explanation specific to this occurrence */
      detail?: string
      /** @description URI reference that identifies the specific occurrence */
      instance?: string
      /** @description Machine-readable error code for programmatic handling */
      code: components['schemas']['Models.ErrorCodeType']
      /** @description Additional error context and validation details */
      errors?: components['schemas']['Models.ValidationError'][]
      /** @description Correlation ID for tracing */
      correlationId?: string
      /**
       * Format: date-time
       * @description Timestamp of the error
       */
      timestamp: string
    }
    'Models.ProcessingPaymentStatus': {
      /** @enum {string} */
      type: 'processing'
      /** Format: date-time */
      startedAt: string
      processorId?: components['schemas']['Models.StaffId']
    }
    'Models.ProcessingPaymentStatusUpdate': {
      /** @enum {string} */
      type?: 'processing'
      /** Format: date-time */
      startedAt?: string
      processorId?: components['schemas']['Models.StaffId']
    }
    /** @description Purchase order */
    'Models.PurchaseOrder': {
      id: components['schemas']['Models.OrderId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Order number */
      orderNumber: string
      /** @description Supplier name */
      supplier: string
      /** @description Order status */
      status: components['schemas']['Models.OrderStatusType']
      /** @description Order items */
      items: components['schemas']['Models.OrderItem'][]
      /**
       * Format: float
       * @description Subtotal amount
       */
      subtotal: number
      /**
       * Format: float
       * @description Tax amount
       */
      taxAmount: number
      /**
       * Format: float
       * @description Shipping cost
       */
      shippingCost?: number
      /**
       * Format: float
       * @description Total amount
       */
      totalAmount: number
      /**
       * Format: date-time
       * @description Order date
       */
      orderDate: string
      /**
       * Format: date-time
       * @description Expected delivery date
       */
      expectedDelivery?: string
      /**
       * Format: date-time
       * @description Actual delivery date
       */
      actualDelivery?: string
      /** @description Delivery notes */
      deliveryNotes?: string
      /** @description Payment terms */
      paymentTerms?: string
      /** @description Order notes */
      notes?: string
      /** @description Approved by */
      approvedBy?: components['schemas']['Models.StaffId']
      /**
       * Format: date-time
       * @description Approved date
       */
      approvedAt?: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.PurchaseOrderCreateInput': {
      supplier: string
      items: components['schemas']['Models.OrderItem'][]
      /** Format: float */
      taxAmount: number
      /** Format: float */
      shippingCost?: number
      /** Format: date-time */
      expectedDelivery?: string
      paymentTerms?: string
      notes?: string
    }
    'Models.PurchaseOrderUpdateInput': {
      status?: components['schemas']['Models.OrderStatusType']
      /** Format: date-time */
      expectedDelivery?: string
      /** Format: date-time */
      actualDelivery?: string
      deliveryNotes?: string
      notes?: string
    }
    /** @description Rate limiting information */
    'Models.RateLimitInfo': Record<string, never>
    'Models.Refund': {
      id: components['schemas']['Models.RefundId']
      paymentId: components['schemas']['Models.PaymentId']
      amount: components['schemas']['Models.Money']
      reason: string
      /** Format: date-time */
      refundedAt: string
      /** @enum {string} */
      status: 'requested' | 'processing' | 'completed' | 'failed'
      processedBy?: components['schemas']['Models.StaffId']
      method?: components['schemas']['Models.PaymentMethodType']
      referenceCode?: string
      notes?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Refund ID
     */
    'Models.RefundId': string
    'Models.RefundInput': {
      paymentId: components['schemas']['Models.PaymentId']
      amount: components['schemas']['Models.Money']
      reason: string
      referenceCode?: string
      processedBy?: components['schemas']['Models.StaffId']
      notes?: string
    }
    'Models.RefundedPaymentStatus': {
      /** @enum {string} */
      type: 'refunded'
      /** Format: date-time */
      refundedAt: string
      refundAmount: components['schemas']['Models.Money']
      refundId?: components['schemas']['Models.RefundId']
    }
    'Models.RefundedPaymentStatusUpdate': {
      /** @enum {string} */
      type?: 'refunded'
      /** Format: date-time */
      refundedAt?: string
      refundAmount?: components['schemas']['Models.MoneyUpdate']
      refundId?: components['schemas']['Models.RefundId']
    }
    /** @description Registration request */
    'Models.RegisterRequest': {
      /** @description User's email address */
      email: string
      /** @description User's password (must meet security requirements) */
      password: string
      /** @description User's display name */
      name: string
      /**
       * @description User's role (defaults to customer)
       * @default customer
       */
      role: components['schemas']['Models.AuthUserRoleType']
    }
    /** @enum {string} */
    'Models.ReminderTimingType':
      | 'one_day_before'
      | 'three_hours_before'
      | 'one_hour_before'
      | 'thirty_minutes_before'
    'Models.Reservation': {
      id: components['schemas']['Models.ReservationId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      serviceId: components['schemas']['Models.ServiceId']
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
      status: components['schemas']['Models.ReservationStatusType']
      notes?: string
      /** Format: int32 */
      totalAmount: number
      /** Format: int32 */
      depositAmount?: number
      isPaid: boolean
      cancellationReason?: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.ReservationDetail': {
      customerName: string
      staffName: string
      serviceName: string
      serviceCategory: components['schemas']['Models.ServiceCategoryType']
      /** Format: int32 */
      serviceDuration: number
    } & components['schemas']['Models.Reservation']
    /**
     * Format: uuid
     * @description Branded UUID type for Reservation ID
     */
    'Models.ReservationId': string
    /** @enum {string} */
    'Models.ReservationStatusType':
      | 'pending'
      | 'confirmed'
      | 'cancelled'
      | 'completed'
      | 'no_show'
    'Models.ResponseMeta': {
      /** @description Request correlation ID */
      correlationId: string
      /**
       * Format: date-time
       * @description Response timestamp
       */
      timestamp: string
      /** @description API version */
      version: string
    } & {
      [key: string]: unknown
    }
    'Models.Review': {
      id: components['schemas']['Models.ReviewId']
      salonId: components['schemas']['Models.SalonId']
      customerId: components['schemas']['Models.CustomerId']
      bookingId: components['schemas']['Models.BookingId']
      staffId?: components['schemas']['Models.StaffId']
      /** Format: int32 */
      overallRating: number
      comment?: string
      title?: string
      /** Format: int32 */
      serviceRating?: number
      /** Format: int32 */
      staffRating?: number
      /** Format: int32 */
      cleanlinessRating?: number
      /** Format: int32 */
      valueRating?: number
      imageUrls?: string[]
      isVerified: boolean
      /**
       * Format: int32
       * @default 0
       */
      helpfulCount: number
      /**
       * Format: int32
       * @default 0
       */
      reportCount: number
      ownerResponse?: string
      /** Format: date-time */
      ownerRespondedAt?: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Review ID
     */
    'Models.ReviewId': string
    'Models.ReviewSummary': {
      /** Format: float */
      averageRating: number
      /** Format: int32 */
      totalReviews: number
      ratingDistribution: {
        [key: string]: number
      }
    }
    /** @description Role definition for access control */
    'Models.Role': {
      id: components['schemas']['Models.RoleId']
      /** @description Role name */
      name: string
      /** @description Role display name */
      displayName: string
      /** @description Role description */
      description?: string
      /** @description Permissions assigned to this role */
      permissions: components['schemas']['Models.Permission'][]
      /** @description Is this a system role */
      isSystem: boolean
      /** @description Is role active */
      isActive: boolean
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.RoleCreateInput': {
      name: string
      displayName: string
      description?: string
      permissions: components['schemas']['Models.PermissionId'][]
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Role ID
     */
    'Models.RoleId': string
    'Models.RoleUpdateInput': {
      displayName?: string
      description?: string
      permissions?: components['schemas']['Models.PermissionId'][]
      isActive?: boolean
    }
    /** @description Sales breakdown by category */
    'Models.SalesByCategory': {
      category: components['schemas']['Models.ServiceCategoryType']
      amount: components['schemas']['Models.Money']
      /** Format: int32 */
      count: number
      /** Format: float */
      percentage: number
    }
    /** @description Sales breakdown by payment method */
    'Models.SalesByMethod': {
      method: components['schemas']['Models.PaymentMethodType']
      amount: components['schemas']['Models.Money']
      /** Format: int32 */
      count: number
      /** Format: float */
      percentage: number
    }
    /** @description Sales report summary */
    'Models.SalesReport': {
      salonId: components['schemas']['Models.SalonId']
      /** Format: date-time */
      periodStart: string
      /** Format: date-time */
      periodEnd: string
      totalSales: components['schemas']['Models.Money']
      totalTax: components['schemas']['Models.Money']
      totalDiscounts: components['schemas']['Models.Money']
      totalRefunds: components['schemas']['Models.Money']
      netSales: components['schemas']['Models.Money']
      /** Format: int32 */
      transactionCount: number
      averageTransactionValue: components['schemas']['Models.Money']
      salesByMethod: components['schemas']['Models.SalesByMethod'][]
      salesByCategory: components['schemas']['Models.SalesByCategory'][]
      topStaff: components['schemas']['Models.StaffPerformance'][]
    }
    'Models.SalesReportQuery': {
      salonId: components['schemas']['Models.SalonId']
    }
    'Models.Salon': {
      id: components['schemas']['Models.SalonId']
      name: string
      description: string | null
      address: components['schemas']['Models.Address']
      contactInfo: components['schemas']['Models.ContactInfo']
      openingHours: components['schemas']['Models.OpeningHours'][]
      businessHours: components['schemas']['Models.BusinessHours'][] | null
      imageUrls: string[] | null
      features: string[] | null
      /** Format: float */
      rating: number | null
      /** Format: int32 */
      reviewCount: number | null
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    /** @description Salon availability check request */
    'Models.SalonAvailabilityRequest': {
      /** @description Service ID to check availability for */
      serviceId: components['schemas']['Models.ServiceId']
      /**
       * Format: date
       * @description Preferred date
       */
      date: string
      /** @description Preferred time slot */
      timeSlot?: components['schemas']['Models.TimeSlot']
      /** @description Preferred staff ID */
      staffId?: components['schemas']['Models.StaffId']
      /**
       * Format: int32
       * @description Number of slots needed
       * @default 1
       */
      slots: number
    }
    /** @description Salon availability check response */
    'Models.SalonAvailabilityResponse': {
      /** @description Available time slots */
      availableSlots: components['schemas']['Models.AvailableTimeSlot'][]
      /**
       * Format: date
       * @description Next available date if requested date is full
       */
      nextAvailableDate?: string
      /** @description Waitlist available */
      waitlistAvailable: boolean
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Salon ID
     */
    'Models.SalonId': string
    /** @description Salon recommendation with scoring */
    'Models.SalonRecommendation': {
      /**
       * Format: int32
       * @description Recommendation score (0-100)
       */
      score: number
      /** @description Reasons for recommendation */
      reasons: string[]
      /** @description Matching services */
      matchingServices: components['schemas']['Models.ServiceSummary'][]
    } & components['schemas']['Models.SalonSummary']
    /** @description Salon statistics response */
    'Models.SalonStatistics': {
      /**
       * Format: int32
       * @description Total number of services
       */
      totalServices: number
      /**
       * Format: int32
       * @description Total number of staff
       */
      totalStaff: number
      /**
       * Format: float
       * @description Average rating
       */
      averageRating?: number
      /**
       * Format: int32
       * @description Total reviews
       */
      totalReviews: number
      /**
       * Format: int32
       * @description Total bookings this month
       */
      monthlyBookings: number
      /** @description Revenue this month */
      monthlyRevenue?: components['schemas']['Models.Money']
      /** @description Popular services */
      popularServices: components['schemas']['Models.ServiceSummary'][]
      /** @description Busy hours */
      busyHours: components['schemas']['Models.TimeSlot'][]
    }
    /** @description Subscription request for salon updates */
    'Models.SalonSubscriptionRequest': {
      customerId: components['schemas']['Models.CustomerId']
      notificationTypes: components['schemas']['Models.NotificationType'][]
      categories?: components['schemas']['Models.ServiceCategoryType'][]
    }
    /** @description Subscription response */
    'Models.SalonSubscriptionResponse': {
      subscriptionId: string
      /** @enum {string} */
      status: 'active'
      /** Format: date-time */
      expiresAt?: string
    }
    'Models.SalonSummary': {
      id: components['schemas']['Models.SalonId']
      name: string
      address: components['schemas']['Models.Address']
      /** Format: float */
      rating: number | null
      /** Format: int32 */
      reviewCount: number | null
    }
    /** @description Salon with distance information */
    'Models.SalonWithDistance': {
      /**
       * Format: float
       * @description Distance from reference point in kilometers
       */
      distance: number
      /**
       * Format: int32
       * @description Estimated travel time in minutes
       */
      travelTime?: number
    } & components['schemas']['Models.Salon']
    /** @enum {string} */
    'Models.ScalpConditionType':
      | 'normal'
      | 'dry'
      | 'oily'
      | 'sensitive'
      | 'dandruff'
    'Models.ScalpInfo': {
      condition: components['schemas']['Models.ScalpConditionType']
      sensitivities: string[]
      notes: string | null
    }
    /** @description Schedule exception for staff */
    'Models.ScheduleException': {
      /** Format: date */
      date: string
      /** @enum {string} */
      type: 'holiday' | 'sick_leave' | 'vacation' | 'training' | 'other'
      description?: string
      alternativeStaffId?: components['schemas']['Models.StaffId']
    }
    'Models.ScoreRange': {
      /**
       * Format: float
       * @description Minimum relevance score
       */
      min: number
      /**
       * Format: float
       * @description Maximum relevance score
       */
      max: number
    }
    'Models.SearchMeta': {
      /**
       * Format: int32
       * @description Total matching results
       */
      total: number
      /** @description Search query used */
      query?: string
      /** @description Applied filters */
      filters?: string[]
      /**
       * Format: int32
       * @description Search duration in milliseconds
       */
      duration: number
      /** @description Search relevance score range */
      scoreRange?: components['schemas']['Models.ScoreRange']
    }
    'Models.Season': {
      name: string
      /** Format: int32 */
      startMonth: number
      /** Format: int32 */
      endMonth: number
      multiplier: components['schemas']['Models.decimal']
    }
    'Models.Service': {
      id: components['schemas']['Models.ServiceId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Service basic information */
      info: components['schemas']['Models.ServiceInfo']
      /** @description Service category and sub-category */
      category: components['schemas']['Models.ServiceCategoryType']
      categoryId?: components['schemas']['Models.CategoryId']
      /** @description Pricing information */
      pricing: components['schemas']['Models.ServicePricing']
      /** @description Duration settings */
      duration: components['schemas']['Models.ServiceDuration']
      /** @description Availability settings */
      availability?: components['schemas']['Models.ServiceAvailabilityDetail']
      /** @description Booking requirements */
      requirements?: components['schemas']['Models.BookingRequirementDetail'][]
      /** @description Service options and addons */
      options?: components['schemas']['Models.ServiceOptionDetail'][]
      /** @description Service restrictions */
      restrictions?: components['schemas']['Models.ServiceRestrictions']
      /** @description Performance metrics */
      performance?: components['schemas']['Models.ServicePerformance']
      /** @description Service associations */
      associations?: components['schemas']['Models.ServiceAssociations']
      /** @description Service metadata */
      metadata?: components['schemas']['Models.ServiceMetadata']
      /** @description Service status */
      status: components['schemas']['Models.ServiceStatusDetail']
      /** @description Legacy fields for compatibility */
      name: string
      description: string
      /** Format: int32 */
      price: number
      imageUrl?: string
      /** Format: int32 */
      requiredStaffLevel?: number
      isActive: boolean
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.ServiceAssociations': {
      categoryId: components['schemas']['Models.CategoryId']
      parentServiceId?: components['schemas']['Models.ServiceId']
      childServiceIds?: components['schemas']['Models.ServiceId'][]
      requiredServiceIds?: components['schemas']['Models.ServiceId'][]
      recommendedServiceIds?: components['schemas']['Models.ServiceId'][]
      qualifiedStaffIds?: components['schemas']['Models.StaffId'][]
      preferredStaffIds?: components['schemas']['Models.StaffId'][]
    }
    'Models.ServiceAvailabilityDetail': {
      type: components['schemas']['Models.ServiceAvailabilityType']
      schedule?: components['schemas']['Models.ServiceSchedule'][]
      requiresApproval?: boolean
      seasons?: components['schemas']['Models.Season'][]
      /** Format: int32 */
      maxPerDay?: number
      /** Format: int32 */
      maxPerWeek?: number
    }
    /** @enum {string} */
    'Models.ServiceAvailabilityType':
      | 'always'
      | 'scheduled'
      | 'by_appointment'
      | 'seasonal'
      | 'limited'
    /**
     * @description Service category types
     * @enum {string}
     */
    'Models.ServiceCategoryType':
      | 'cut'
      | 'color'
      | 'perm'
      | 'treatment'
      | 'spa'
      | 'other'
    'Models.ServiceDuration': {
      /** Format: int32 */
      standard: number
      /** Format: int32 */
      minimum?: number
      /** Format: int32 */
      maximum?: number
      /** Format: int32 */
      bufferBefore?: number
      /** Format: int32 */
      bufferAfter?: number
      includesConsultation: boolean
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Service ID
     */
    'Models.ServiceId': string
    'Models.ServiceInfo': {
      name: string
      nameKana?: string
      description: string
      shortDescription?: string
      benefits?: string[]
      targetCustomer?: string
      imageUrls?: string[]
      videoUrl?: string
    }
    'Models.ServiceMetadata': {
      tags?: string[]
      keywords?: string[]
      seoTitle?: string
      seoDescription?: string
      internalNotes?: string
      /** Format: int32 */
      sortOrder?: number
      featured?: boolean
      hideFromMenu?: boolean
    }
    'Models.ServiceOptionDetail': {
      type: components['schemas']['Models.ServiceOptionType']
      name?: string
      /** Format: int32 */
      price?: number
      /** Format: int32 */
      duration?: number
      description?: string
      fromLevel?: string
      toLevel?: string
      /** Format: int32 */
      additionalPrice?: number
      /** Format: int32 */
      extension?: number
      productId?: string
      required?: boolean
      withService?: components['schemas']['Models.ServiceId']
      /** Format: int32 */
      discountAmount?: number
    }
    /** @enum {string} */
    'Models.ServiceOptionType':
      | 'addon'
      | 'upgrade'
      | 'duration'
      | 'product'
      | 'combo'
    'Models.ServicePerformance': {
      /** Format: int32 */
      bookingCount: number
      completionRate: components['schemas']['Models.decimal']
      averageRating?: components['schemas']['Models.decimal']
      /** Format: int32 */
      reviewCount: number
      /** Format: int64 */
      revenue: number
      popularityScore?: components['schemas']['Models.decimal']
      repeatRate?: components['schemas']['Models.decimal']
    }
    'Models.ServicePreference': {
      favoriteServices: components['schemas']['Models.ServiceId'][] | null
      avoidServices: components['schemas']['Models.ServiceId'][] | null
      /** Format: int32 */
      preferredDuration: number | null
      preferredPriceRange:
        | components['schemas']['Models.PriceRangeFilter']
        | null
    }
    'Models.ServicePricing': {
      strategy: components['schemas']['Models.PricingStrategyDetail']
      taxIncluded: boolean
      currency: components['schemas']['Models.CurrencyCodeType']
      /** Format: int32 */
      minimumPrice?: number
      /** Format: int32 */
      maximumPrice?: number
      depositRequired: boolean
      /** Format: int32 */
      depositAmount?: number
      cancellationFee?: components['schemas']['Models.CancellationFee']
    }
    'Models.ServiceRestrictions': {
      requiredStaffLevel?: components['schemas']['Models.StaffLevelType']
      requiredCertifications?: string[]
      /** Format: int32 */
      maxConcurrent?: number
      /** Format: int32 */
      minIntervalDays?: number
      maxBookingsPerCustomer?: components['schemas']['Models.BookingLimit']
      blackoutDates?: string[]
    }
    'Models.ServiceSchedule': {
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      startTime: string
      endTime: string
      /** Format: int32 */
      maxBookings?: number
    }
    'Models.ServiceStatusDetail': {
      type: components['schemas']['Models.ServiceStatusType']
      reason?: string
      /** Format: date-time */
      since?: string
      availableMonths?: number[]
      /** Format: date-time */
      availableUntil?: string
      /** Format: int32 */
      remainingSlots?: number
      /** Format: date-time */
      discontinuedAt?: string
      replacementId?: components['schemas']['Models.ServiceId']
      /** Format: date-time */
      launchDate?: string
    }
    /** @enum {string} */
    'Models.ServiceStatusType':
      | 'active'
      | 'inactive'
      | 'seasonal'
      | 'limited'
      | 'discontinued'
      | 'coming_soon'
    /** @description Service summary for various contexts */
    'Models.ServiceSummary': {
      id: components['schemas']['Models.ServiceId']
      name: string
      /** Format: int32 */
      bookingCount: number | null
    }
    /** @description Session information */
    'Models.Session': {
      /** @description Unique session identifier */
      id: string
      /** @description User ID associated with this session */
      userId: components['schemas']['Models.UserId']
      /** @description Refresh token for this session */
      refreshToken: string
      /** @description IP address from which the session was created */
      ipAddress: string
      /** @description User agent string */
      userAgent: string
      /**
       * Format: date-time
       * @description Session expiry time
       */
      expiresAt: string
      /**
       * @description Remember me flag
       * @default false
       */
      rememberMe: boolean
      /**
       * Format: date-time
       * @description Session creation timestamp
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Last activity timestamp
       */
      lastActivityAt: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Session ID
     */
    'Models.SessionId': string
    /** @description Session list response */
    'Models.SessionListResponse': {
      /** @description Active sessions */
      sessions: components['schemas']['Models.Session'][]
      /**
       * Format: int32
       * @description Total number of sessions
       */
      total: number
    }
    /** @description 共有リンク */
    'Models.ShareLink': {
      /** @description 共有リンクID */
      id: string
      /** @description 共有トークン */
      token: string
      /** @description 添付ファイルID */
      attachmentId: string
      /**
       * Format: date-time
       * @description 有効期限（オプション）
       */
      expiresAt?: string
      /**
       * Format: int32
       * @description 最大ダウンロード数（オプション）
       */
      maxDownloads?: number
      /**
       * Format: int32
       * @description 現在のダウンロード数
       */
      downloadCount: number
      /** @description パスワード保護 */
      hasPassword: boolean
      /** @description 許可されたメールアドレス（オプション） */
      allowedEmails?: string[]
      /** @description 作成者ID */
      createdBy: string
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string
    }
    /** @description Soft delete information */
    'Models.SoftDelete': {
      /**
       * @description Whether the record is deleted
       * @default false
       */
      isDeleted: boolean
      /**
       * Format: date-time
       * @description Deletion timestamp
       */
      deletedAt?: string
      /** @description User who deleted the record */
      deletedBy?: string
      /** @description Deletion reason */
      deletionReason?: string
    }
    /** @enum {string} */
    'Models.SpaSubCategoryType':
      | 'head_spa'
      | 'scalp_massage'
      | 'aromatherapy'
      | 'relaxation'
    'Models.Staff': {
      id: components['schemas']['Models.StaffId']
      salonId: components['schemas']['Models.SalonId']
      name: string
      contactInfo: components['schemas']['Models.ContactInfo']
      specialties: string[]
      imageUrl?: string
      bio?: string
      /** Format: int32 */
      yearsOfExperience?: number
      certifications?: string[]
      qualifications?: components['schemas']['Models.StaffQualification'][]
      schedules?: components['schemas']['Models.StaffSchedule'][]
      isActive: boolean
      permissions?: components['schemas']['Models.StaffPermission'][]
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.StaffAvailability': {
      staffId: components['schemas']['Models.StaffId']
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      startTime: string
      endTime: string
      breakStart?: string
      breakEnd?: string
    }
    /**
     * Format: uuid
     * @description Branded UUID type for Staff ID
     */
    'Models.StaffId': string
    /** @enum {string} */
    'Models.StaffLevelType':
      | 'junior'
      | 'stylist'
      | 'senior'
      | 'expert'
      | 'director'
    /** @description Staff performance metrics */
    'Models.StaffPerformance': {
      staffId: components['schemas']['Models.StaffId']
      staffName: string
      totalSales: components['schemas']['Models.Money']
      /** Format: int32 */
      serviceCount: number
      averageServiceValue: components['schemas']['Models.Money']
      /** Format: float */
      customerSatisfaction?: number
    }
    'Models.StaffPermission': {
      resource: string
      actions: string[]
      scope?: string
      /** Format: date-time */
      expiresAt?: string
    }
    'Models.StaffQualification': {
      name: string
      /** Format: date */
      certificationDate: string
      /** Format: date */
      expiryDate?: string
      issuer?: string
      credentialId?: string
    }
    'Models.StaffSchedule': {
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      startTime: string
      endTime: string
      breakTime?: components['schemas']['Models.TimeSlot'][]
      effectivePeriod?: components['schemas']['Models.DateRange']
    }
    /** @description Staff schedule management information */
    'Models.StaffScheduleManagement': {
      staffId: components['schemas']['Models.StaffId']
      salonId: components['schemas']['Models.SalonId']
      regularHours: components['schemas']['Models.BusinessHours'][]
      exceptions: components['schemas']['Models.ScheduleException'][]
      /** Format: date-time */
      effectiveFrom: string
      /** Format: date-time */
      effectiveTo?: string
      /**
       * Format: date-time
       * @description Record creation timestamp
       */
      createdAt: string
      /** @description User who created the record */
      createdBy: string
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updatedAt: string
      /** @description User who last updated the record */
      updatedBy: string
      /**
       * Format: int32
       * @description Version number for optimistic locking
       */
      version: number
      /**
       * @description Whether the record is deleted
       * @default false
       */
      isDeleted: boolean
      /**
       * Format: date-time
       * @description Deletion timestamp
       */
      deletedAt?: string
      /** @description User who deleted the record */
      deletedBy?: string
      /** @description Deletion reason */
      deletionReason?: string
    }
    /** @description Staff schedule update request */
    'Models.StaffScheduleUpdateRequest': {
      regularHours: components['schemas']['Models.BusinessHours'][]
      exceptions?: components['schemas']['Models.ScheduleException'][]
      /** Format: date-time */
      effectiveFrom: string
      /** Format: date-time */
      effectiveTo?: string
    }
    /** @description Staff summary for various contexts */
    'Models.StaffSummary': {
      id: components['schemas']['Models.StaffId']
      name: string
      /** Format: float */
      rating: number | null
      /** Format: int32 */
      bookingCount: number | null
    }
    'Models.StockAlert': {
      itemId: components['schemas']['Models.InventoryId']
      /** Format: float */
      threshold: number
      /** Format: float */
      currentStock: number
      /** Format: date-time */
      triggeredAt: string
    }
    /** @description Stock movement record */
    'Models.StockMovement': {
      id: string
      itemId: components['schemas']['Models.InventoryId']
      salonId: components['schemas']['Models.SalonId']
      /** @enum {string} */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /** Format: float */
      quantity: number
      reason: string
      performedBy: components['schemas']['Models.StaffId']
      /** Format: date-time */
      occurredAt: string
      referenceId?: string
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
      inventoryId: components['schemas']['Models.InventoryId']
      /**
       * Format: float
       * @description Stock level after movement
       */
      stockAfter: number
      /** @description Reason for movement */
      orderId?: components['schemas']['Models.OrderId']
      /** @description Related treatment */
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      /**
       * Format: date-time
       * @description Movement timestamp
       */
      movedAt: string
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.StockMovementInput': {
      inventoryId: components['schemas']['Models.InventoryId']
      /** @enum {string} */
      type: 'in' | 'out' | 'adjustment' | 'transfer'
      /** Format: float */
      quantity: number
      reason: string
      orderId?: components['schemas']['Models.OrderId']
      treatmentRecordId?: components['schemas']['Models.TreatmentRecordId']
      notes?: string
    }
    'Models.StylePreference': {
      preferredLength: string | null
      preferredColors: string[] | null
      avoidStyles: string[] | null
      inspirationImages: string[] | null
    }
    /** @enum {string} */
    'Models.StylingSubCategoryType':
      | 'blowout'
      | 'updo'
      | 'braiding'
      | 'extensions'
      | 'event_styling'
    /** @enum {string} */
    'Models.SystemRoleType':
      | 'super_admin'
      | 'salon_owner'
      | 'salon_manager'
      | 'senior_staff'
      | 'staff'
      | 'receptionist'
      | 'customer'
      | 'guest'
    /** @description Time preference model */
    'Models.TimePreference': {
      /** @description Day of week */
      dayOfWeek: components['schemas']['Models.DayOfWeekType']
      /** @description Preferred time slots */
      timeSlots: components['schemas']['Models.TimeSlot'][]
    }
    'Models.TimeSlot': {
      startTime: string
      endTime: string
    }
    /** @description Token refresh request */
    'Models.TokenRefreshRequest': {
      /** @description Refresh token */
      refreshToken: string
    }
    /** @description TreatmentType record for customer visit */
    'Models.TreatmentRecord': {
      id: components['schemas']['Models.TreatmentRecordId']
      bookingId: components['schemas']['Models.BookingId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      salonId: components['schemas']['Models.SalonId']
      /** @description Type of treatment performed */
      treatment: components['schemas']['Models.TreatmentType']
      /** @description Services performed during this treatment */
      serviceIds: components['schemas']['Models.ServiceId'][]
      /**
       * Format: date-time
       * @description TreatmentType start time
       */
      startTime: string
      /**
       * Format: date-time
       * @description TreatmentType end time
       */
      endTime: string
      /** @description Detailed notes about the treatment */
      notes?: string
      /** @description Materials and products used */
      usedMaterials?: components['schemas']['Models.MaterialUsage'][]
      /** @description Before/after photos */
      photos?: components['schemas']['Models.AttachmentId'][]
      /** @description Customer feedback and notes */
      customerFeedback?: string
      /** @description Recommendations for next visit */
      nextRecommendations?: string
      /**
       * Format: float
       * @description Total amount charged
       */
      totalAmount: number
      /**
       * Format: float
       * @description Discount applied
       */
      discountAmount?: number
      /**
       * Format: int32
       * @description Points earned
       */
      pointsEarned?: number
      /** Format: date-time */
      createdAt: string
      createdBy: string | null
      /** Format: date-time */
      updatedAt: string
      updatedBy: string | null
    }
    'Models.TreatmentRecordCreateInput': {
      bookingId: components['schemas']['Models.BookingId']
      customerId: components['schemas']['Models.CustomerId']
      staffId: components['schemas']['Models.StaffId']
      treatment: components['schemas']['Models.TreatmentType']
      serviceIds: components['schemas']['Models.ServiceId'][]
      /** Format: date-time */
      startTime: string
      /** Format: date-time */
      endTime: string
      notes?: string
      usedMaterials?: components['schemas']['Models.MaterialUsage'][]
      customerFeedback?: string
      nextRecommendations?: string
      /** Format: float */
      totalAmount: number
      /** Format: float */
      discountAmount?: number
      /** Format: int32 */
      pointsEarned?: number
    }
    /**
     * Format: uuid
     * @description Branded UUID type for TreatmentType Record ID
     */
    'Models.TreatmentRecordId': string
    'Models.TreatmentRecordUpdateInput': {
      notes?: string
      usedMaterials?: components['schemas']['Models.MaterialUsage'][]
      customerFeedback?: string
      nextRecommendations?: string
      photos?: components['schemas']['Models.AttachmentId'][]
    }
    /** @enum {string} */
    'Models.TreatmentSubCategoryType':
      | 'deep_conditioning'
      | 'protein_treatment'
      | 'scalp_treatment'
      | 'keratin_treatment'
      | 'olaplex'
    /** @enum {string} */
    'Models.TreatmentType':
      | 'cut'
      | 'color'
      | 'perm'
      | 'treatment'
      | 'head_spa'
      | 'styling'
      | 'extension'
      | 'nail'
      | 'eyelash'
      | 'other'
    /** @description Two-factor authentication disable request */
    'Models.TwoFactorDisableRequest': {
      /** @description Current password for verification */
      password: string
      /** @description Current TOTP code for verification */
      code: string
    }
    /** @description Two-factor authentication enable request */
    'Models.TwoFactorEnableRequest': {
      /** @description Current password for verification */
      password: string
    }
    /** @description Two-factor authentication setup response */
    'Models.TwoFactorSetupResponse': {
      /** @description QR code URL for authenticator app */
      qrCodeUrl: string
      /** @description Manual entry secret */
      secret: string
      /** @description Backup codes for recovery */
      backupCodes: string[]
    }
    /**
     * @description Two-factor authentication status
     * @enum {string}
     */
    'Models.TwoFactorStatusType': 'disabled' | 'pending' | 'enabled'
    /** @description Two-factor authentication verify request */
    'Models.TwoFactorVerifyRequest': {
      /** @description TOTP code from authenticator app */
      code: string
    }
    'Models.UnauthorizedError': {
      /** @enum {string} */
      code: 'UNAUTHORIZED'
      message: string
    }
    /** @description Booking update request with optional fields for partial updates */
    'Models.UpdateBookingRequest': {
      status?: components['schemas']['Models.BookingStatusUpdate']
      statusCode?: components['schemas']['Models.BookingStatusCodeType']
      waitlistEntry?: components['schemas']['Models.WaitlistEntryUpdate']
      deposit?: components['schemas']['Models.BookingDepositUpdate']
      paymentMethod?: components['schemas']['Models.PaymentMethodType']
      paymentStatus?: components['schemas']['Models.PaymentStatusCodeType']
      discountAmount?: components['schemas']['Models.MoneyUpdate']
      finalAmount?: components['schemas']['Models.MoneyUpdate']
      balanceDue?: components['schemas']['Models.MoneyUpdate']
      notes?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    /** @description Booking update request with reset capability */
    'Models.UpdateBookingRequestWithReset': {
      status?: components['schemas']['Models.BookingStatus']
      statusCode?: components['schemas']['Models.BookingStatusCodeType']
      waitlistEntry?: components['schemas']['Models.WaitlistEntry'] | null
      deposit?: components['schemas']['Models.BookingDeposit'] | null
      paymentMethod?: components['schemas']['Models.PaymentMethodType'] | null
      paymentStatus?:
        | components['schemas']['Models.PaymentStatusCodeType']
        | null
      discountAmount?: components['schemas']['Models.Money'] | null
      finalAmount?: components['schemas']['Models.Money'] | null
      balanceDue?: components['schemas']['Models.Money'] | null
      notes?: string | null
      metadata?: {
        [key: string]: unknown
      } | null
    }
    /** @description Customer update request with optional fields for partial updates */
    'Models.UpdateCustomerRequest': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      preferences?: string
      notes?: string
      tags?: string[]
      /** Format: date */
      birthDate?: string
    }
    /** @description Customer update request with optional fields for partial updates */
    'Models.UpdateCustomerRequestUpdate': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfoUpdate']
      preferences?: string
      notes?: string
      tags?: string[]
      /** Format: date */
      birthDate?: string
    }
    /** @description Customer update request with reset capability */
    'Models.UpdateCustomerRequestWithReset': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      preferences?: string | null
      notes?: string | null
      tags?: string[] | null
      /** Format: date */
      birthDate?: string | null
    }
    /** @description Reservation update request with optional fields for partial updates */
    'Models.UpdateReservationRequest': {
      status?: components['schemas']['Models.ReservationStatusType']
      notes?: string
      /** Format: date-time */
      startTime?: string
      staffId?: components['schemas']['Models.StaffId']
    }
    /** @description Reservation update request with reset capability */
    'Models.UpdateReservationRequestWithReset': {
      status?: components['schemas']['Models.ReservationStatusType']
      notes?: string | null
      /** Format: date-time */
      startTime?: string
      staffId?: components['schemas']['Models.StaffId']
    }
    /** @description Review update request with optional fields for partial updates */
    'Models.UpdateReviewRequest': {
      /** Format: int32 */
      overallRating?: number
      comment?: string
      title?: string
      /** Format: int32 */
      serviceRating?: number
      /** Format: int32 */
      staffRating?: number
      /** Format: int32 */
      cleanlinessRating?: number
      /** Format: int32 */
      valueRating?: number
      imageUrls?: string[]
    }
    /** @description Review update request with reset capability */
    'Models.UpdateReviewRequestWithReset': {
      /** Format: int32 */
      overallRating?: number
      comment?: string | null
      title?: string | null
      /** Format: int32 */
      serviceRating?: number | null
      /** Format: int32 */
      staffRating?: number | null
      /** Format: int32 */
      cleanlinessRating?: number | null
      /** Format: int32 */
      valueRating?: number | null
      imageUrls?: string[] | null
    }
    /** @description Salon update request with optional fields for partial updates */
    'Models.UpdateSalonRequest': {
      name?: string
      description?: string
      address?: components['schemas']['Models.Address']
      contactInfo?: components['schemas']['Models.ContactInfo']
      openingHours?: components['schemas']['Models.OpeningHours'][]
      businessHours?: components['schemas']['Models.BusinessHours'][]
      imageUrls?: string[]
      features?: string[]
    }
    /** @description Salon update request with optional fields for partial updates */
    'Models.UpdateSalonRequestUpdate': {
      name?: string
      description?: string
      address?: components['schemas']['Models.AddressUpdate']
      contactInfo?: components['schemas']['Models.ContactInfoUpdate']
      openingHours?: components['schemas']['Models.OpeningHours'][]
      businessHours?: components['schemas']['Models.BusinessHours'][]
      imageUrls?: string[]
      features?: string[]
    }
    /** @description Salon update request with reset capability */
    'Models.UpdateSalonRequestWithReset': {
      name?: string | null
      description?: string | null
      address?: components['schemas']['Models.Address'] | null
      contactInfo?: components['schemas']['Models.ContactInfo'] | null
      openingHours?: components['schemas']['Models.OpeningHours'][] | null
      businessHours?: components['schemas']['Models.BusinessHours'][] | null
      imageUrls?: string[] | null
      features?: string[] | null
    }
    /** @description Service update request with optional fields for partial updates */
    'Models.UpdateServiceRequest': {
      name?: string
      description?: string
      /** Format: int32 */
      duration?: number
      /** Format: int32 */
      price?: number
      category?: components['schemas']['Models.ServiceCategoryType']
      categoryId?: components['schemas']['Models.CategoryId']
      imageUrl?: string
      /** Format: int32 */
      requiredStaffLevel?: number
      /** Format: int32 */
      depositAmount?: number
      isActive?: boolean
      /** Format: int32 */
      maxAdvanceBookingDays?: number
      /** Format: int32 */
      minAdvanceBookingHours?: number
    }
    /** @description Service update request with reset capability */
    'Models.UpdateServiceRequestWithReset': {
      name?: string
      description?: string
      /** Format: int32 */
      duration?: number
      /** Format: int32 */
      price?: number
      category?: components['schemas']['Models.ServiceCategoryType']
      categoryId?: (string & components['schemas']['Models.CategoryId']) | null
      imageUrl?: string | null
      /** Format: int32 */
      requiredStaffLevel?: number | null
      /** Format: int32 */
      depositAmount?: number | null
      isActive?: boolean
      /** Format: int32 */
      maxAdvanceBookingDays?: number | null
      /** Format: int32 */
      minAdvanceBookingHours?: number | null
    }
    /** @description Staff update request with optional fields for partial updates */
    'Models.UpdateStaffRequest': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      specialties?: string[]
      imageUrl?: string
      bio?: string
      /** Format: int32 */
      yearsOfExperience?: number
      certifications?: string[]
      qualifications?: components['schemas']['Models.StaffQualification'][]
      schedules?: components['schemas']['Models.StaffSchedule'][]
      permissions?: components['schemas']['Models.StaffPermission'][]
      isActive?: boolean
    }
    /** @description Staff update request with reset capability */
    'Models.UpdateStaffRequestWithReset': {
      name?: string
      contactInfo?: components['schemas']['Models.ContactInfo']
      specialties?: string[]
      imageUrl?: string | null
      bio?: string | null
      /** Format: int32 */
      yearsOfExperience?: number | null
      certifications?: string[] | null
      qualifications?:
        | components['schemas']['Models.StaffQualification'][]
        | null
      schedules?: components['schemas']['Models.StaffSchedule'][] | null
      permissions?: components['schemas']['Models.StaffPermission'][] | null
      isActive?: boolean
    }
    /** @description ファイルアップロードリクエスト（マルチパート） */
    'Models.UploadAttachmentRequest': {
      /**
       * Format: byte
       * @description ファイル本体
       */
      file: string
      /** @description ファイル名 */
      filename: string
      /** @description Content-Type */
      content: string
      /** @description サロンID（オプション） */
      salonId?: string
      /** @description タグ（オプション） */
      tags?: string
    }
    /** @description 署名付きアップロードURLレスポンス */
    'Models.UploadUrlResponse': {
      /** @description 署名付きアップロードURL */
      uploadUrl: string
      /** @description ストレージキー */
      key: string
      /**
       * Format: date-time
       * @description URL有効期限
       */
      expiresAt: string
    }
    /** @description User authentication information */
    'Models.User': {
      /** @description Unique identifier for the user */
      id: string
      /** @description User's email address (unique) */
      email: string
      /** @description User's display name */
      name: string
      /** @description User's role in the system */
      role: components['schemas']['Models.AuthUserRoleType']
      /** @description Account status */
      status: components['schemas']['Models.UserAccountStatusType']
      /** @description Email verification status */
      emailVerified: boolean
      /** @description Email verification token (internal use) */
      emailVerificationToken?: string
      /**
       * Format: date-time
       * @description Email verification token expiry
       */
      emailVerificationTokenExpiry?: string
      /** @description Two-factor authentication status */
      twoFactorStatus: components['schemas']['Models.TwoFactorStatusType']
      /** @description Two-factor authentication secret (encrypted) */
      twoFactorSecret?: string
      /** @description Backup codes for 2FA recovery */
      backupCodes?: string[]
      /**
       * Format: int32
       * @description Number of failed login attempts
       * @default 0
       */
      failedLoginAttempts: number
      /**
       * Format: date-time
       * @description Time when the account was locked
       */
      lockedAt?: string
      /** @description Password reset token (internal use) */
      passwordResetToken?: string
      /**
       * Format: date-time
       * @description Password reset token expiry
       */
      passwordResetTokenExpiry?: string
      /**
       * Format: date-time
       * @description Last password change timestamp
       */
      lastPasswordChangeAt?: string
      /** @description Previous password hashes for history check */
      passwordHistory?: string[]
      /** @description Trusted IP addresses for this user */
      trustedIpAddresses?: string[]
      /** @description Reference to customer profile if user is a customer */
      customerId?: components['schemas']['Models.CustomerId']
      /** @description Reference to staff profile if user is staff */
      staffId?: components['schemas']['Models.StaffId']
      /** @description Extended role information */
      roleDetail?: components['schemas']['Models.UserRoleDetail']
      /** @description Authentication state */
      authState?: components['schemas']['Models.AuthenticationStateType']
      /** @description Email verification state */
      emailVerificationState?: components['schemas']['Models.EmailVerificationStateType']
      /** @description Password reset state */
      passwordResetState?: components['schemas']['Models.PasswordResetStateType']
      /**
       * Format: date-time
       * @description Timestamp when the user was created
       */
      createdAt: string
      /**
       * Format: date-time
       * @description Timestamp when the user was last updated
       */
      updatedAt: string
      /**
       * Format: date-time
       * @description Last login timestamp
       */
      lastLoginAt?: string
      /** @description Last login IP address */
      lastLoginIp?: string
    }
    /**
     * @description User account status
     * @enum {string}
     */
    'Models.UserAccountStatusType':
      | 'active'
      | 'unverified'
      | 'locked'
      | 'suspended'
      | 'deleted'
    /**
     * Format: uuid
     * @description Branded UUID type for User ID
     */
    'Models.UserId': string
    'Models.UserRoleAssignInput': {
      userId: string
      roleId: components['schemas']['Models.RoleId']
      salonId?: components['schemas']['Models.SalonId']
      /** Format: date-time */
      expiresAt?: string
    }
    /** @description User role assignment */
    'Models.UserRoleAssignment': {
      userId: string
      roleId: components['schemas']['Models.RoleId']
      salonId?: components['schemas']['Models.SalonId']
      /**
       * Format: date-time
       * @description Assignment date
       */
      assignedAt: string
      /** @description Assigned by */
      assignedBy: string
      /**
       * Format: date-time
       * @description Expiration date
       */
      expiresAt?: string
      /** @description Is active */
      isActive: boolean
    }
    'Models.UserRoleDetail': {
      type: components['schemas']['Models.UserRoleType']
      salonId?: components['schemas']['Models.SalonId']
      level?: components['schemas']['Models.StaffLevelType']
    }
    /** @enum {string} */
    'Models.UserRoleType': 'customer' | 'staff' | 'manager' | 'admin' | 'owner'
    /** @description Validation error details */
    'Models.ValidationError': {
      /** @description Field path that failed validation */
      field: string
      /** @description Validation rule that failed */
      rule: string
      /** @description Human-readable error message */
      message: string
      /** @description Actual value that failed validation */
      value?: unknown
      /** @description Expected value or constraint */
      constraint?: unknown
    }
    /** @description Version information for optimistic locking */
    'Models.Versioned': {
      /**
       * Format: int32
       * @description Version number
       */
      version: number
      /**
       * Format: date-time
       * @description Last modification timestamp
       */
      lastModified: string
    }
    'Models.VisitHistory': {
      /** Format: int32 */
      visitCount: number
      /** Format: date-time */
      firstVisitDate: string | null
      /** Format: date-time */
      lastVisitDate: string | null
      /** Format: int32 */
      averageSpendPerVisit: number | null
      /** Format: int32 */
      totalSpent: number
      /** Format: int32 */
      cancelCount: number
      /** Format: int32 */
      noShowCount: number
      /** Format: int32 */
      completedServices: number
    }
    'Models.WaitlistEntry': {
      /** Format: int32 */
      position: number
      /** Format: date-time */
      estimatedTime?: string
      /** Format: date-time */
      joinedAt: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      notifiedAt?: string
      preferredStaffId?: components['schemas']['Models.StaffId']
      preferredServiceId?: components['schemas']['Models.ServiceId']
      notes?: string
    }
    'Models.WaitlistEntryUpdate': {
      /** Format: int32 */
      position?: number
      /** Format: date-time */
      estimatedTime?: string
      /** Format: date-time */
      joinedAt?: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: date-time */
      notifiedAt?: string
      preferredStaffId?: components['schemas']['Models.StaffId']
      preferredServiceId?: components['schemas']['Models.ServiceId']
      notes?: string
    }
    /** Format: double */
    'Models.decimal': number
    /** @description Audit entry model */
    'Operations.AuditEntry': {
      /** @description Audit entry ID */
      id: string
      /** @description Entity ID */
      entityId: string
      /** @description Entity type */
      entity: string
      /**
       * @description Operation performed
       * @enum {string}
       */
      operation: 'create' | 'update' | 'delete' | 'restore'
      /** @description User who performed the operation */
      userId: string
      /** @description User display name */
      userName?: string
      /** @description IP address */
      ipAddress?: string
      /** @description User agent */
      userAgent?: string
      /**
       * Format: date-time
       * @description Timestamp of the operation
       */
      timestamp: string
      /** @description Changes made */
      changes?: components['schemas']['Operations.ChangeSet'][]
      /** @description Entity snapshot before change */
      before?: unknown
      /** @description Entity snapshot after change */
      after?: unknown
      /** @description Additional metadata */
      metadata?: {
        [key: string]: unknown
      }
    }
    'Operations.ChangeSet': {
      /** @description Field that was changed */
      field: string
      /** @description Previous value */
      oldValue?: unknown
      /** @description New value */
      newValue?: unknown
    }
  }
  responses: never
  parameters: {
    /** @description Fields to exclude from response */
    'Models.AdvancedSearchParams.exclude': string
    /** @description Facet fields to aggregate */
    'Models.AdvancedSearchParams.facetFields': string[]
    /** @description Enable faceted search results */
    'Models.AdvancedSearchParams.facets': boolean
    /** @description Fields to include in response */
    'Models.AdvancedSearchParams.fields': string
    /** @description Filter expression (e.g., 'status:active AND category:premium') */
    'Models.AdvancedSearchParams.filter': string
    /** @description Full-text search query */
    'Models.AdvancedSearchParams.q': string
    /** @description Cursor for the next page */
    'Models.CursorPaginationParams.cursor': string
    /** @description Maximum number of items to return (1-100) */
    'Models.CursorPaginationParams.limit': number
    /** @description Field to sort by */
    'Models.CursorPaginationParams.sortBy': string
    /** @description Sort order */
    'Models.CursorPaginationParams.sortOrder': 'asc' | 'desc'
    'Models.DateRangeFilter.endDate': string
    'Models.DateRangeFilter.startDate': string
    /** @description Comma-separated list of field paths to update */
    'Models.FieldMask': string
    'Models.PaginationParams.limit': number
    'Models.PaginationParams.offset': number
    'Models.SalesReportQuery.groupBy': 'day' | 'week' | 'month'
    'Models.SalesReportQuery.includeRefunds': boolean
    /** @description Filter by loyalty tier */
    'Models.SearchCustomerRequest.loyaltyTier': components['schemas']['Models.LoyaltyTierType']
    /** @description Filter by registration date from */
    'Models.SearchCustomerRequest.registeredFrom': string
    /** @description Filter by registration date to */
    'Models.SearchCustomerRequest.registeredTo': string
    /** @description Search in customer name, email, or phone */
    'Models.SearchCustomerRequest.search': string
    /** @description Filter by customer status */
    'Models.SearchCustomerRequest.status': components['schemas']['Models.CustomerStatusType']
    /** @description Filter by customer tags */
    'Models.SearchCustomerRequest.tags': string[]
    'Models.SearchInventoryRequest.category': string
    'Models.SearchInventoryRequest.expiringSoon': boolean
    'Models.SearchInventoryRequest.lowStock': boolean
    'Models.SearchInventoryRequest.salonId': components['schemas']['Models.SalonId']
    'Models.SearchInventoryRequest.status': components['schemas']['Models.InventoryStatusType']
    'Models.SearchParams.q': string
    'Models.SearchParams.sortBy': string
    'Models.SearchParams.sortOrder': 'asc' | 'desc'
    /** @description Filter by service categories */
    'Models.SearchSalonRequest.categories': components['schemas']['Models.ServiceCategoryType'][]
    /** @description Filter by city name */
    'Models.SearchSalonRequest.city': string
    /** @description Filter by features (array) */
    'Models.SearchSalonRequest.features': string[]
    /** @description Filter by active status */
    'Models.SearchSalonRequest.isActive': boolean
    /** @description Search keyword (alias for q) */
    'Models.SearchSalonRequest.keyword': string
    /** @description Reference latitude for distance calculation */
    'Models.SearchSalonRequest.lat': number
    /** @description Reference longitude for distance calculation */
    'Models.SearchSalonRequest.lon': number
    /** @description Maximum distance in kilometers */
    'Models.SearchSalonRequest.maxDistance': number
    /** @description Filter by minimum rating */
    'Models.SearchSalonRequest.minRating': number
    /** @description Filter by specific day and time */
    'Models.SearchSalonRequest.openAt': string
    /** @description Filter by opening hours */
    'Models.SearchSalonRequest.openNow': boolean
    /** @description Filter by prefecture name */
    'Models.SearchSalonRequest.prefecture': string
  }
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AccessControlOperations_checkAccess: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AccessCheck']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.AccessResult']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_checkPermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PermissionCheckInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PermissionCheckResult']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_getResourceAccess: {
    parameters: {
      query?: {
        action?: string
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        resource: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  userId: string
                  userName?: string
                  hasAccess: boolean
                  grantedBy: string[]
                }[]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_getUserPermissions: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  userId: string
                  permissions: string[]
                  roles: {
                    roleId: components['schemas']['Models.RoleId']
                    roleName: string
                    permissions: string[]
                  }[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  AccessControlOperations_validatePermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          roleId: components['schemas']['Models.RoleId']
          requiredPermissions: string[]
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  isValid: boolean
                  missingPermissions: string[]
                  extraPermissions: string[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SystemOperations_alive: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @enum {boolean} */
            alive: true
          }
        }
      }
    }
  }
  SystemOperations_health: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.HealthStatus']
        }
      }
      /** @description Service unavailable. */
      503: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.HealthStatus']
        }
      }
    }
  }
  SystemOperations_metrics: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SystemOperations_ready: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            ready: boolean
          }
        }
      }
      /** @description Service unavailable. */
      503: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            ready: boolean
            reason?: string
          }
        }
      }
    }
  }
  SystemOperations_version: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            version: string
            /** Format: date-time */
            buildTime: string
            gitCommit?: string
            gitBranch?: string
            environment?: string
          }
        }
      }
    }
  }
  AdminAuthOperations_addTrustedIp: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ipAddress: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AdminAuthOperations_removeTrustedIp: {
    parameters: {
      query: {
        ipAddress: string
      }
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AdminAuthOperations_unlockAccount: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_list: {
    parameters: {
      query?: {
        salonId?: string
        page?: number
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.PaginatedAttachments']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_deleteShareLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        shareLinkId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AttachmentOperations_uploadFile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UploadAttachmentRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_getUploadUrl: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.GetUploadUrlRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.UploadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AttachmentOperations_getDownloadUrl: {
    parameters: {
      query?: {
        inline?: boolean
      }
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.DownloadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_listShareLinks: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.ShareLink'][]
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AttachmentOperations_createShareLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        attachmentId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateShareLinkRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.ShareLink']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_generateBackupCodes: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorVerifyRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            backupCodes: string[]
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_disableTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorDisableRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_enableTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorEnableRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.TwoFactorSetupResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getTwoFactorQRCode: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.TwoFactorSetupResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_verifyTwoFactor: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TwoFactorVerifyRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_changePassword: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PasswordChangeRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_forgotPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PasswordResetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.LoginRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.LoginResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_logout: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_logoutAll: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getCurrentUser: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.User']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_refreshToken: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TokenRefreshRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.LoginResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_register: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RegisterRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.User']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_resetPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PasswordResetConfirmRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_verifyResetToken: {
    parameters: {
      query: {
        token: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_getSessions: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.SessionListResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_revokeSession: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path: {
        sessionId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_confirmEmailVerification: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.EmailVerificationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AuthOperations_sendEmailVerification: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AuthSuccessResponse']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        status?: components['schemas']['Models.BookingStatusCodeType']
        from?: string
        to?: string
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.BookingDetail'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  BookingOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateBookingRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.BookingDetail']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateBookingRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_cancel: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason?: string
          cancelReservations?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_confirm: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_processPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          paymentMethod: components['schemas']['Models.PaymentMethodType']
          amount: components['schemas']['Models.Money']
          transactionId?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            booking: components['schemas']['Models.Booking']
            paymentId: components['schemas']['Models.PaymentId']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_addReservation: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reservationId: components['schemas']['Models.ReservationId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  BookingOperations_removeReservation: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.BookingId']
        reservationId: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Booking']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CustomerCrud_list: {
    parameters: {
      query?: {
        /** @description Search in customer name, email, or phone */
        search?: components['parameters']['Models.SearchCustomerRequest.search']
        /** @description Filter by customer tags */
        tags?: components['parameters']['Models.SearchCustomerRequest.tags']
        /** @description Filter by registration date from */
        registeredFrom?: components['parameters']['Models.SearchCustomerRequest.registeredFrom']
        /** @description Filter by registration date to */
        registeredTo?: components['parameters']['Models.SearchCustomerRequest.registeredTo']
        /** @description Filter by customer status */
        status?: components['parameters']['Models.SearchCustomerRequest.status']
        /** @description Filter by loyalty tier */
        loyaltyTier?: components['parameters']['Models.SearchCustomerRequest.loyaltyTier']
        /** @description Full-text search query */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description Filter expression (e.g., 'status:active AND category:premium') */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description Fields to include in response */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description Fields to exclude from response */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description Enable faceted search results */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description Facet fields to aggregate */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          /** @description Request limit per window */
          'X-RateLimit-Limit': number
          /** @description Remaining requests in current window */
          'X-RateLimit-Remaining': number
          /** @description Window reset timestamp */
          'X-RateLimit-Reset': number
          /** @description Retry after (seconds) when rate limited */
          'Retry-After'?: number
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Models.Customer'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          /** @description Request limit per window */
          'X-RateLimit-Limit': number
          /** @description Remaining requests in current window */
          'X-RateLimit-Remaining': number
          /** @description Window reset timestamp */
          'X-RateLimit-Reset': number
          /** @description Retry after (seconds) when rate limited */
          'Retry-After'?: number
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_create: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateCustomerRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_batchGet: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.BatchGetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer'][]
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_bulkUpdate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Array of items to process */
          items: {
            name?: string
            contactInfo?: components['schemas']['Models.ContactInfo']
            preferences?: string
            notes?: string
            tags?: string[]
            /** Format: date */
            birthDate?: string
            id: components['schemas']['Models.CustomerId']
          }[]
          /**
           * @description Whether to continue on error
           * @default false
           */
          continueOnError?: boolean
          /**
           * @description Whether to process in transaction
           * @default true
           */
          transactional?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Successfully processed items */
            succeeded: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Processed result */
              result: components['schemas']['Models.Customer']
            }[]
            /** @description Failed items */
            failed: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Error details */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description Summary statistics */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_bulkCreate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Array of items to process */
          items: components['schemas']['Models.CreateCustomerRequest'][]
          /**
           * @description Whether to continue on error
           * @default false
           */
          continueOnError?: boolean
          /**
           * @description Whether to process in transaction
           * @default true
           */
          transactional?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Successfully processed items */
            succeeded: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Processed result */
              result: components['schemas']['Models.Customer']
            }[]
            /** @description Failed items */
            failed: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Error details */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description Summary statistics */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_bulkDelete: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ids: components['schemas']['Models.CustomerId'][]
          permanent?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Successfully processed items */
            succeeded: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Processed result */
              result: {
                id: components['schemas']['Models.CustomerId']
                deleted: boolean
              }
            }[]
            /** @description Failed items */
            failed: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Error details */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description Summary statistics */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_export: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Search in customer name, email, or phone */
          search?: string
          /** @description Filter by customer tags */
          tags?: string[]
          /**
           * Format: date-time
           * @description Filter by registration date from
           */
          registeredFrom?: string
          /**
           * Format: date-time
           * @description Filter by registration date to
           */
          registeredTo?: string
          /**
           * @description Filter by customer status
           * @enum {string}
           */
          status?:
            | 'active'
            | 'inactive'
            | 'suspended'
            | 'deleted'
            | 'blacklisted'
          /**
           * @description Filter by loyalty tier
           * @enum {string}
           */
          loyaltyTier?: 'bronze' | 'silver' | 'gold' | 'platinum'
          /** @description Full-text search query */
          q?: string
          /** @description Filter expression (e.g., 'status:active AND category:premium') */
          filter?: string
          /** @description Fields to include in response */
          fields?: string
          /** @description Fields to exclude from response */
          exclude?: string
          /**
           * @description Enable faceted search results
           * @default false
           */
          facets?: boolean
          /** @description Facet fields to aggregate */
          facetFields?: string[]
          /**
           * Format: int32
           * @description Maximum number of items to return (1-100)
           * @default 20
           */
          limit?: number
          /** @description Cursor for the next page */
          cursor?: string
          /** @description Field to sort by */
          sortBy?: string
          /**
           * @description Sort order
           * @default asc
           * @enum {string}
           */
          sortOrder?: 'asc' | 'desc'
          /** @enum {string} */
          format: 'csv' | 'json' | 'excel'
          exportFields?: string[]
        }
      }
    }
    responses: {
      /** @description The request has been accepted for processing, but processing has not yet completed. */
      202: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            jobId: string
            /** @enum {string} */
            status: 'pending'
            /** Format: int32 */
            estimatedTime?: number
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_merge: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Primary customer ID to keep */
          primaryCustomerId: components['schemas']['Models.CustomerId']
          /** @description Secondary customer ID to merge and delete */
          secondaryCustomerId: components['schemas']['Models.CustomerId']
          /**
           * @description Strategy for handling conflicts
           * @enum {string}
           */
          conflictResolution?: 'keep_primary' | 'keep_secondary' | 'keep_newest'
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_search: {
    parameters: {
      query?: {
        /** @description Search in customer name, email, or phone */
        search?: components['parameters']['Models.SearchCustomerRequest.search']
        /** @description Filter by customer tags */
        tags?: components['parameters']['Models.SearchCustomerRequest.tags']
        /** @description Filter by registration date from */
        registeredFrom?: components['parameters']['Models.SearchCustomerRequest.registeredFrom']
        /** @description Filter by registration date to */
        registeredTo?: components['parameters']['Models.SearchCustomerRequest.registeredTo']
        /** @description Filter by customer status */
        status?: components['parameters']['Models.SearchCustomerRequest.status']
        /** @description Filter by loyalty tier */
        loyaltyTier?: components['parameters']['Models.SearchCustomerRequest.loyaltyTier']
        /** @description Full-text search query */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description Filter expression (e.g., 'status:active AND category:premium') */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description Fields to include in response */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description Fields to exclude from response */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description Enable faceted search results */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description Facet fields to aggregate */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Search results */
            results: components['schemas']['Models.Customer'][]
            /** @description Search metadata */
            meta: components['schemas']['Models.SearchMeta']
            /** @description Faceted aggregations */
            facets?: {
              [key: string]: components['schemas']['Models.Facet'][]
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_get: {
    parameters: {
      query?: {
        fields?: string
      }
      header?: {
        Authorization?: string
        'If-None-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          'Last-Modified': string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The client has made a conditional request and the resource has not been modified. */
      304: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_update: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateCustomerRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_delete: {
    parameters: {
      query?: {
        permanent?: boolean
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_patch: {
    parameters: {
      query?: {
        /** @description Comma-separated list of field paths to update */
        updateMask?: components['parameters']['Models.FieldMask']
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateCustomerRequestUpdate']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getBookings: {
    parameters: {
      query?: {
        status?: components['schemas']['Models.BookingStatusCodeType']
        from?: string
        to?: string
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Models.BookingDetail'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_requestDeletion: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Reason for deletion */
          reason: string
          /** @description Confirm understanding of consequences */
          confirmed: boolean
        }
      }
    }
    responses: {
      /** @description The request has been accepted for processing, but processing has not yet completed. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: {
              /** @description Deletion request ID */
              requestId: string
              /**
               * Format: date-time
               * @description Scheduled deletion date
               */
              scheduledDate: string
              /**
               * Format: int32
               * @description Grace period in days
               */
              gracePeriodDays: number
            }
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_exportData: {
    parameters: {
      query?: {
        /** @description Export format */
        format?: 'json' | 'csv' | 'pdf'
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          'Content-Disposition': string
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_getHistory: {
    parameters: {
      query?: {
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Operations.AuditEntry'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_addLoyaltyPoints: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: int32
           * @description Points to add
           */
          points: number
          /** @description Reason for adding points */
          reason: string
          /** @description Reference ID (e.g., booking ID) */
          referenceId?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: {
              /**
               * Format: int32
               * @description New points balance
               */
              balance: number
              /** @description Transaction ID */
              transactionId: string
            }
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_updatePreferences: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CustomerPreferencesUpdate']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.CustomerPreferences']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getProfile: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.CustomerProfile']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getReservations: {
    parameters: {
      query?: {
        status?: components['schemas']['Models.ReservationStatusType']
        from?: string
        to?: string
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Models.ReservationDetail'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_restore: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerOperations_getStatistics: {
    parameters: {
      query?: {
        /** @description Period for statistics (e.g., '7d', '1m', '3m', '1y') */
        period?: string
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.CustomerStatistics']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  CustomerCrud_getVersion: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.CustomerId']
        version: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Customer']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  ReservationOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        staffId?: components['schemas']['Models.StaffId']
        status?: components['schemas']['Models.ReservationStatusType']
        from?: string
        to?: string
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.ReservationDetail'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ReservationOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateReservationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReservationDetail']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateReservationRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_cancel: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_complete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReservationOperations_reschedule: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReservationId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: date-time */
          newStartTime: string
          staffId?: components['schemas']['Models.StaffId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Reservation']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_list: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        bookingId?: components['schemas']['Models.BookingId']
        staffId?: components['schemas']['Models.StaffId']
        minRating?: number
        isVerified?: boolean
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Review'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ReviewOperations_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateReviewRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateReviewRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Review']
        }
      }
      /** @description Access is forbidden. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_markHelpful: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** Format: int32 */
            helpfulCount: number
          }
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ReviewOperations_report: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.ReviewId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
          details?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            reportId: string
          }
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  SalonCrud_list: {
    parameters: {
      query?: {
        /** @description Search keyword (alias for q) */
        keyword?: components['parameters']['Models.SearchSalonRequest.keyword']
        /** @description Filter by city name */
        city?: components['parameters']['Models.SearchSalonRequest.city']
        /** @description Filter by prefecture name */
        prefecture?: components['parameters']['Models.SearchSalonRequest.prefecture']
        /** @description Filter by service categories */
        categories?: components['parameters']['Models.SearchSalonRequest.categories']
        /** @description Filter by features (array) */
        features?: components['parameters']['Models.SearchSalonRequest.features']
        /** @description Filter by active status */
        isActive?: components['parameters']['Models.SearchSalonRequest.isActive']
        /** @description Filter by minimum rating */
        minRating?: components['parameters']['Models.SearchSalonRequest.minRating']
        /** @description Maximum distance in kilometers */
        maxDistance?: components['parameters']['Models.SearchSalonRequest.maxDistance']
        /** @description Reference latitude for distance calculation */
        lat?: components['parameters']['Models.SearchSalonRequest.lat']
        /** @description Reference longitude for distance calculation */
        lon?: components['parameters']['Models.SearchSalonRequest.lon']
        /** @description Filter by opening hours */
        openNow?: components['parameters']['Models.SearchSalonRequest.openNow']
        /** @description Filter by specific day and time */
        openAt?: components['parameters']['Models.SearchSalonRequest.openAt']
        /** @description Full-text search query */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description Filter expression (e.g., 'status:active AND category:premium') */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description Fields to include in response */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description Fields to exclude from response */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description Enable faceted search results */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description Facet fields to aggregate */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          /** @description Request limit per window */
          'X-RateLimit-Limit': number
          /** @description Remaining requests in current window */
          'X-RateLimit-Remaining': number
          /** @description Window reset timestamp */
          'X-RateLimit-Reset': number
          /** @description Retry after (seconds) when rate limited */
          'Retry-After'?: number
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Models.Salon'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      429: {
        headers: {
          /** @description Request limit per window */
          'X-RateLimit-Limit': number
          /** @description Remaining requests in current window */
          'X-RateLimit-Remaining': number
          /** @description Window reset timestamp */
          'X-RateLimit-Reset': number
          /** @description Retry after (seconds) when rate limited */
          'Retry-After'?: number
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_create: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateSalonRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Salon']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_batchGet: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.BatchGetRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Salon'][]
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_bulkUpdate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Array of items to process */
          items: {
            name?: string
            description?: string
            address?: components['schemas']['Models.Address']
            contactInfo?: components['schemas']['Models.ContactInfo']
            openingHours?: components['schemas']['Models.OpeningHours'][]
            businessHours?: components['schemas']['Models.BusinessHours'][]
            imageUrls?: string[]
            features?: string[]
            id: components['schemas']['Models.SalonId']
          }[]
          /**
           * @description Whether to continue on error
           * @default false
           */
          continueOnError?: boolean
          /**
           * @description Whether to process in transaction
           * @default true
           */
          transactional?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Successfully processed items */
            succeeded: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Processed result */
              result: components['schemas']['Models.Salon']
            }[]
            /** @description Failed items */
            failed: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Error details */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description Summary statistics */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_bulkCreate: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'Idempotency-Key'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Array of items to process */
          items: components['schemas']['Models.CreateSalonRequest'][]
          /**
           * @description Whether to continue on error
           * @default false
           */
          continueOnError?: boolean
          /**
           * @description Whether to process in transaction
           * @default true
           */
          transactional?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Successfully processed items */
            succeeded: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Processed result */
              result: components['schemas']['Models.Salon']
            }[]
            /** @description Failed items */
            failed: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Error details */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description Summary statistics */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_bulkDelete: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ids: components['schemas']['Models.SalonId'][]
          permanent?: boolean
        }
      }
    }
    responses: {
      /** @description Successful */
      207: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Successfully processed items */
            succeeded: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Processed result */
              result: {
                id: components['schemas']['Models.SalonId']
                deleted: boolean
              }
            }[]
            /** @description Failed items */
            failed: {
              /**
               * Format: int32
               * @description Index in the original request
               */
              index: number
              /** @description Error details */
              error: components['schemas']['Models.ProblemDetails']
            }[]
            /** @description Summary statistics */
            summary: components['schemas']['Models.BulkSummary']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_export: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** @description Search keyword (alias for q) */
          keyword?: string
          /** @description Filter by city name */
          city?: string
          /** @description Filter by prefecture name */
          prefecture?: string
          /** @description Filter by service categories */
          categories?: components['schemas']['Models.ServiceCategoryType'][]
          /** @description Filter by features (array) */
          features?: string[]
          /** @description Filter by active status */
          isActive?: boolean
          /**
           * Format: float
           * @description Filter by minimum rating
           */
          minRating?: number
          /**
           * Format: float
           * @description Maximum distance in kilometers
           */
          maxDistance?: number
          /**
           * Format: double
           * @description Reference latitude for distance calculation
           */
          lat?: number
          /**
           * Format: double
           * @description Reference longitude for distance calculation
           */
          lon?: number
          /** @description Filter by opening hours */
          openNow?: boolean
          /**
           * Format: date-time
           * @description Filter by specific day and time
           */
          openAt?: string
          /** @description Full-text search query */
          q?: string
          /** @description Filter expression (e.g., 'status:active AND category:premium') */
          filter?: string
          /** @description Fields to include in response */
          fields?: string
          /** @description Fields to exclude from response */
          exclude?: string
          /**
           * @description Enable faceted search results
           * @default false
           */
          facets?: boolean
          /** @description Facet fields to aggregate */
          facetFields?: string[]
          /**
           * Format: int32
           * @description Maximum number of items to return (1-100)
           * @default 20
           */
          limit?: number
          /** @description Cursor for the next page */
          cursor?: string
          /** @description Field to sort by */
          sortBy?: string
          /**
           * @description Sort order
           * @default asc
           * @enum {string}
           */
          sortOrder?: 'asc' | 'desc'
          /** @enum {string} */
          format: 'csv' | 'json' | 'excel'
          exportFields?: string[]
        }
      }
    }
    responses: {
      /** @description The request has been accepted for processing, but processing has not yet completed. */
      202: {
        headers: {
          Location: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            jobId: string
            /** @enum {string} */
            status: 'pending'
            /** Format: int32 */
            estimatedTime?: number
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_getNearby: {
    parameters: {
      query: {
        /** @description Latitude */
        lat: number
        /** @description Longitude */
        lon: number
        /** @description Radius in kilometers */
        radius?: number
        /** @description Filter by service categories */
        categories?: components['schemas']['Models.ServiceCategoryType'][]
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Models.SalonWithDistance'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_getRecommendations: {
    parameters: {
      query?: {
        /** @description Customer ID for personalization */
        customerId?: components['schemas']['Models.CustomerId']
        /** @description Service categories of interest */
        categories?: components['schemas']['Models.ServiceCategoryType'][]
        /** @description Price range preference */
        priceRange?: 'budget' | 'medium' | 'premium'
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Models.SalonRecommendation'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_search: {
    parameters: {
      query?: {
        /** @description Search keyword (alias for q) */
        keyword?: components['parameters']['Models.SearchSalonRequest.keyword']
        /** @description Filter by city name */
        city?: components['parameters']['Models.SearchSalonRequest.city']
        /** @description Filter by prefecture name */
        prefecture?: components['parameters']['Models.SearchSalonRequest.prefecture']
        /** @description Filter by service categories */
        categories?: components['parameters']['Models.SearchSalonRequest.categories']
        /** @description Filter by features (array) */
        features?: components['parameters']['Models.SearchSalonRequest.features']
        /** @description Filter by active status */
        isActive?: components['parameters']['Models.SearchSalonRequest.isActive']
        /** @description Filter by minimum rating */
        minRating?: components['parameters']['Models.SearchSalonRequest.minRating']
        /** @description Maximum distance in kilometers */
        maxDistance?: components['parameters']['Models.SearchSalonRequest.maxDistance']
        /** @description Reference latitude for distance calculation */
        lat?: components['parameters']['Models.SearchSalonRequest.lat']
        /** @description Reference longitude for distance calculation */
        lon?: components['parameters']['Models.SearchSalonRequest.lon']
        /** @description Filter by opening hours */
        openNow?: components['parameters']['Models.SearchSalonRequest.openNow']
        /** @description Filter by specific day and time */
        openAt?: components['parameters']['Models.SearchSalonRequest.openAt']
        /** @description Full-text search query */
        q?: components['parameters']['Models.AdvancedSearchParams.q']
        /** @description Filter expression (e.g., 'status:active AND category:premium') */
        filter?: components['parameters']['Models.AdvancedSearchParams.filter']
        /** @description Fields to include in response */
        fields?: components['parameters']['Models.AdvancedSearchParams.fields']
        /** @description Fields to exclude from response */
        exclude?: components['parameters']['Models.AdvancedSearchParams.exclude']
        /** @description Enable faceted search results */
        facets?: components['parameters']['Models.AdvancedSearchParams.facets']
        /** @description Facet fields to aggregate */
        facetFields?: components['parameters']['Models.AdvancedSearchParams.facetFields']
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Search results */
            results: components['schemas']['Models.Salon'][]
            /** @description Search metadata */
            meta: components['schemas']['Models.SearchMeta']
            /** @description Faceted aggregations */
            facets?: {
              [key: string]: components['schemas']['Models.Facet'][]
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_get: {
    parameters: {
      query?: {
        fields?: string
      }
      header?: {
        Authorization?: string
        'If-None-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          'Last-Modified': string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Salon']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The client has made a conditional request and the resource has not been modified. */
      304: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_update: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateSalonRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Salon']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_delete: {
    parameters: {
      query?: {
        permanent?: boolean
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_patch: {
    parameters: {
      query?: {
        /** @description Comma-separated list of field paths to update */
        updateMask?: components['parameters']['Models.FieldMask']
      }
      header?: {
        Authorization?: string
        'If-Match'?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateSalonRequestUpdate']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          ETag: string
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Salon']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Client error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_checkAvailability: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.SalonAvailabilityRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.SalonAvailabilityResponse']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_getHistory: {
    parameters: {
      query?: {
        /** @description Maximum number of items to return (1-100) */
        limit?: components['parameters']['Models.CursorPaginationParams.limit']
        /** @description Cursor for the next page */
        cursor?: components['parameters']['Models.CursorPaginationParams.cursor']
        /** @description Field to sort by */
        sortBy?: components['parameters']['Models.CursorPaginationParams.sortBy']
        /** @description Sort order */
        sortOrder?: components['parameters']['Models.CursorPaginationParams.sortOrder']
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Array of items for current page */
            data: components['schemas']['Operations.AuditEntry'][]
            /** @description Pagination metadata */
            meta: components['schemas']['Models.PaginationMeta']
            /** @description Navigation links */
            links: components['schemas']['Models.PaginationLinks']
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_deleteImage: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
        imageId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_restore: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Salon']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_updateStaffSchedule: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StaffScheduleUpdateRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.StaffScheduleManagement']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_getStatistics: {
    parameters: {
      query?: {
        /** @description Period for statistics (e.g., '7d', '1m', '3m') */
        period?: string
      }
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.SalonStatistics']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonOperations_subscribe: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.SalonSubscriptionRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.SalonSubscriptionResponse']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  SalonCrud_getVersion: {
    parameters: {
      query?: never
      header?: {
        Authorization?: string
      }
      path: {
        id: components['schemas']['Models.SalonId']
        version: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Response data */
            data: components['schemas']['Models.Salon']
            /** @description Response metadata */
            meta?: components['schemas']['Models.ResponseMeta']
            /** @description Related links */
            links?: {
              [key: string]: string
            }
          }
        }
      }
      /** @description Access is unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ProblemDetails']
        }
      }
    }
  }
  AvailabilityOperations_getAvailableSlots: {
    parameters: {
      query: {
        staffId?: components['schemas']['Models.StaffId']
        serviceId: components['schemas']['Models.ServiceId']
        date: string
        duration?: number
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.AvailableSlot'][]
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  AvailabilityOperations_checkAvailability: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          staffId: components['schemas']['Models.StaffId']
          serviceId: components['schemas']['Models.ServiceId']
          /** Format: date-time */
          startTime: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            isAvailable: boolean
            conflicts?: components['schemas']['Models.ReservationId'][]
          }
        }
      }
    }
  }
  SalonReviewOperations_getSalonReviews: {
    parameters: {
      query?: {
        sortBy?: 'recent' | 'rating' | 'helpful'
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Review'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  SalonReviewOperations_getSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReviewSummary']
        }
      }
    }
  }
  ServiceOperations_list: {
    parameters: {
      query?: {
        category?: components['schemas']['Models.ServiceCategoryType']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Service'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  ServiceOperations_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateServiceRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_bulkUpdate: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          serviceIds?: components['schemas']['Models.ServiceId'][]
          updates?: components['schemas']['Models.UpdateServiceRequest']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            updated: components['schemas']['Models.ServiceId'][]
            failed: {
              serviceId: components['schemas']['Models.ServiceId']
              error: string
            }[]
          }
        }
      }
    }
  }
  ServiceOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateServiceRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Service']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ServiceOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.ServiceId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_list: {
    parameters: {
      query?: {
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Staff'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  StaffOperations_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.CreateStaffRequest']
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          location: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_get: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UpdateStaffRequest']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Staff']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  StaffOperations_getAvailability: {
    parameters: {
      query: {
        date: string
      }
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.StaffAvailability'][]
        }
      }
    }
  }
  StaffOperations_updateAvailability: {
    parameters: {
      query?: never
      header?: never
      path: {
        salonId: components['schemas']['Models.SalonId']
        id: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StaffAvailability'][]
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.StaffAvailability'][]
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CategoryOperations_listCategories: {
    parameters: {
      query?: {
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.CategoryModel'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  CategoryOperations_createCategory: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          description: string
          parentId?: components['schemas']['Models.CategoryId']
          /** Format: int32 */
          displayOrder: number
        }
      }
    }
    responses: {
      /** @description The request has succeeded and a new resource has been created as a result. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.CategoryModel']
        }
      }
      /** @description The server could not understand the request due to invalid syntax. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CategoryOperations_updateCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CategoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name?: string
          description?: string
          parentId?: components['schemas']['Models.CategoryId']
          /** Format: int32 */
          displayOrder?: number
          isActive?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.CategoryModel']
        }
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  CategoryOperations_deleteCategory: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.CategoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The server cannot find the requested resource. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
      /** @description The request conflicts with the current state of the server. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.Error']
        }
      }
    }
  }
  ShareOperations_getSharedFile: {
    parameters: {
      query?: {
        password?: string
      }
      header?: never
      path: {
        shareToken: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.Attachment']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  ShareOperations_downloadSharedFile: {
    parameters: {
      query?: {
        password?: string
      }
      header?: never
      path: {
        shareToken: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | components['schemas']['Models.DownloadUrlResponse']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
            | components['schemas']['Models.Error']
        }
      }
    }
  }
  GlobalStaffOperations_searchStaff: {
    parameters: {
      query?: {
        specialty?: string
        city?: string
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Staff'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  StaffReviewOperations_getStaffReviews: {
    parameters: {
      query?: {
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: components['schemas']['Models.Review'][]
            /** Format: int32 */
            total: number
            /** Format: int32 */
            limit: number
            /** Format: int32 */
            offset: number
          }
        }
      }
    }
  }
  StaffReviewOperations_getStaffSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Models.ReviewSummary']
        }
      }
    }
  }
  InventoryOperations_listInventoryItems: {
    parameters: {
      query: {
        salonId: components['parameters']['Models.SearchInventoryRequest.salonId']
        category?: components['parameters']['Models.SearchInventoryRequest.category']
        status?: components['parameters']['Models.SearchInventoryRequest.status']
        lowStock?: components['parameters']['Models.SearchInventoryRequest.lowStock']
        expiringSoon?: components['parameters']['Models.SearchInventoryRequest.expiringSoon']
        q?: components['parameters']['Models.SearchParams.q']
        sortBy?: components['parameters']['Models.SearchParams.sortBy']
        sortOrder?: components['parameters']['Models.SearchParams.sortOrder']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.InventoryItem'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_createInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.InventoryItemCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_getActiveAlerts: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        type?: 'low_stock' | 'expiring' | 'expired' | 'overstock'
        severity?: 'info' | 'warning' | 'critical'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryAlert'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_getAlertSummary: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  totalAlerts: number
                  /** Format: int32 */
                  criticalAlerts: number
                  /** Format: int32 */
                  warningAlerts: number
                  /** Format: int32 */
                  infoAlerts: number
                  /** Format: int32 */
                  unacknowledged: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryAlertOperations_acknowledgeAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        inventoryId: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          acknowledgedBy: components['schemas']['Models.StaffId']
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryAlert']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getExpiringItems: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        days?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getLowStockItems: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        threshold?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_recordStockMovement: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.StockMovementInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.StockMovement']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_performStockCount: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          salonId: components['schemas']['Models.SalonId']
          items: {
            inventoryId: components['schemas']['Models.InventoryId']
            /** Format: float */
            countedQuantity: number
          }[]
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  adjustments: components['schemas']['Models.StockMovement'][]
                  discrepancies: {
                    inventoryId: components['schemas']['Models.InventoryId']
                    /** Format: float */
                    expected: number
                    /** Format: float */
                    counted: number
                    /** Format: float */
                    difference: number
                  }[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getInventoryValueReport: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        category?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: float */
                  totalValue: number
                  /** Format: int32 */
                  totalItems: number
                  categories: {
                    category: string
                    /** Format: float */
                    value: number
                    /** Format: int32 */
                    itemCount: number
                  }[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_deleteInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_updateInventoryItem: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.InventoryItemUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.InventoryItem']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  InventoryOperations_getStockMovements: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        id: components['schemas']['Models.InventoryId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.StockMovement'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_searchMedicalCharts: {
    parameters: {
      query?: {
        search?: string
        hasAllergies?: boolean
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.MedicalChart'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_createMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.MedicalChartCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_getCustomerMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_getCustomerAllergies: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  customerId: components['schemas']['Models.CustomerId']
                  allergies: string[]
                  avoidProducts: string[]
                  /** Format: date-time */
                  lastUpdated: string
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  MedicalChartOperations_updateMedicalChart: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.MedicalChartId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.MedicalChartUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.MedicalChart']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_listPayments: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        status?: components['schemas']['Models.PaymentStatusCodeType']
        method?: components['schemas']['Models.PaymentMethodType']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.Payment'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_createPayment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PaymentCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_calculatePayment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          services: components['schemas']['Models.ServiceId'][]
          discountCode?: string
          /** Format: int32 */
          pointsToUse?: number
          customerId?: components['schemas']['Models.CustomerId']
          bookingId?: components['schemas']['Models.BookingId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PaymentPreview']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getCustomerPayments: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.Payment'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_updatePayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PaymentUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_cancelPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_processPayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_getReceipt: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  receiptNumber: string
                  payment: components['schemas']['Models.Payment']
                  items: {
                    [key: string]: unknown
                  }[]
                  /** Format: date-time */
                  issuedAt: string
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PaymentOperations_processRefund: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RefundInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Payment']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_listPermissions: {
    parameters: {
      query?: {
        resource?: string
        action?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Permission'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_getPermissionsByResource: {
    parameters: {
      query?: never
      header?: never
      path: {
        resource: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Permission'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PermissionOperations_getPermissionGroups: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  resource: string
                  permissions: components['schemas']['Models.Permission'][]
                }[]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_adjustPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getPointBalance: {
    parameters: {
      query?: never
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointInfo']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getExpiringPoints: {
    parameters: {
      query?: {
        days?: number
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  customerId: components['schemas']['Models.CustomerId']
                  /** Format: int32 */
                  expiringPoints: number
                  /** Format: date-time */
                  expirationDate: string
                  transactions: components['schemas']['Models.PointTransaction'][]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_getPointTransactions: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.PointTransaction'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_earnPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_processExpiredPoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          customerId?: components['schemas']['Models.CustomerId']
          /** Format: date-time */
          processBefore?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  processedCount: number
                  /** Format: int32 */
                  totalPoints: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PointOperations_usePoints: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PointTransactionCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PointTransaction']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_listPurchaseOrders: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        status?: components['schemas']['Models.OrderStatusType']
        supplier?: string
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.PurchaseOrder'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_createPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PurchaseOrderCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_getReorderSuggestions: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  inventoryId: components['schemas']['Models.InventoryId']
                  productName: string
                  /** Format: float */
                  currentStock: number
                  /** Format: float */
                  minimumStock: number
                  /** Format: float */
                  suggestedQuantity: number
                  supplier?: string
                  /** Format: date-time */
                  lastOrderDate?: string
                }[]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_getPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_updatePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.PurchaseOrderUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_approvePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          approvedBy: components['schemas']['Models.StaffId']
          notes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_cancelPurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          reason: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  PurchaseOrderOperations_receivePurchaseOrder: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.OrderId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          receivedItems: {
            inventoryId: components['schemas']['Models.InventoryId']
            /** Format: float */
            receivedQuantity: number
            notes?: string
          }[]
          deliveryNotes?: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.PurchaseOrder']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_listRoles: {
    parameters: {
      query?: {
        isSystem?: boolean
        isActive?: boolean
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.Role'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_createRole: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RoleCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_getSystemRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_getRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_deleteRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_updateRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.RoleUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  RoleOperations_cloneRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          name: string
          displayName: string
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.Role']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesReport: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        groupBy?: components['parameters']['Models.SalesReportQuery.groupBy']
        includeRefunds?: components['parameters']['Models.SalesReportQuery.includeRefunds']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.SalesReportQuery']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.SalesReport']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesByCategory: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.SalesByCategory'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesByStaff: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.StaffPerformance'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getDailySales: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        date: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: date */
                  date: string
                  sales: components['schemas']['Models.Money']
                  /** Format: int32 */
                  transactions: number
                  refunds: components['schemas']['Models.Money']
                  net: components['schemas']['Models.Money']
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_exportSalesReport: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          salonId: components['schemas']['Models.SalonId']
          /** Format: date-time */
          startDate: string
          /** Format: date-time */
          endDate: string
          /** @enum {string} */
          format: 'csv' | 'excel' | 'pdf'
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  downloadUrl: string
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  SalesReportOperations_getSalesTrends: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        period: 'daily' | 'weekly' | 'monthly'
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  labels: string[]
                  sales: components['schemas']['Models.Money'][]
                  transactions: number[]
                  average: components['schemas']['Models.Money'][]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_listTreatments: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        customerId?: components['schemas']['Models.CustomerId']
        staffId?: components['schemas']['Models.StaffId']
        treatment?: components['schemas']['Models.TreatmentType']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_createTreatment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TreatmentRecordCreateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getCustomerTreatmentHistory: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        customerId: components['schemas']['Models.CustomerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getStaffTreatments: {
    parameters: {
      query?: {
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        staffId: components['schemas']['Models.StaffId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: components['schemas']['Models.TreatmentRecord'][]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getTreatmentStatistics: {
    parameters: {
      query: {
        salonId: components['schemas']['Models.SalonId']
        startDate?: components['parameters']['Models.DateRangeFilter.startDate']
        endDate?: components['parameters']['Models.DateRangeFilter.endDate']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  totalTreatments: number
                  treatmentsBy: {
                    [key: string]: number
                  }
                  /** Format: float */
                  averageDuration: number
                  topServices: components['schemas']['Models.ServiceId'][]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_getTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_deleteTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_updateTreatment: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.TreatmentRecordUpdateInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  TreatmentOperations_addTreatmentPhotos: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components['schemas']['Models.TreatmentRecordId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.AttachmentId'][]
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.TreatmentRecord']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_assignUserRoleType: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Models.UserRoleAssignInput']
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.UserRoleType']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_bulkAssignRoles: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          userIds: string[]
          roleIds: components['schemas']['Models.RoleId'][]
          salonId?: components['schemas']['Models.SalonId']
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  /** Format: int32 */
                  assigned: number
                  /** Format: int32 */
                  failed: number
                  errors?: string[]
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_getUsersByRole: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
        limit?: components['parameters']['Models.PaginationParams.limit']
        offset?: components['parameters']['Models.PaginationParams.offset']
      }
      header?: never
      path: {
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: {
                  data: {
                    userId: string
                    userName?: string
                    /** Format: date-time */
                    assignedAt: string
                    /** Format: date-time */
                    expiresAt?: string
                  }[]
                  /** Format: int32 */
                  total: number
                  /** Format: int32 */
                  limit: number
                  /** Format: int32 */
                  offset: number
                }
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_getUserRoleTypes: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.UserRoleType'][]
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_revokeUserRoleType: {
    parameters: {
      query?: {
        salonId?: components['schemas']['Models.SalonId']
      }
      header?: never
      path: {
        userId: string
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: Record<string, never>
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
  UserRoleTypeOperations_updateUserRoleType: {
    parameters: {
      query?: never
      header?: never
      path: {
        userId: string
        roleId: components['schemas']['Models.RoleId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          /** Format: date-time */
          expiresAt?: string
          isActive?: boolean
        }
      }
    }
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json':
            | {
                /** @enum {string} */
                status: 'success'
                data: components['schemas']['Models.UserRoleType']
              }
            | {
                /** @enum {string} */
                status: 'error'
                error: components['schemas']['Models.Error']
              }
        }
      }
    }
  }
}
