import { createApp } from '@beauty-salon-backend/api'
import { env, environment, validateEnv } from '@beauty-salon-backend/config'
import { getDb } from '@beauty-salon-backend/infrastructure'

async function startServer() {
  try {
    // Validate environment variables
    validateEnv()

    // Áí∞Â¢ÉÊÉÖÂ†±„ÅÆ„É≠„Ç∞Âá∫Âäõ
    console.log('========================================')
    console.log(
      `Starting server in ${env.NODE_ENV.value.toUpperCase()} environment`,
    )
    console.log(`Environment: ${environment}`)
    console.log(`API Version: ${env.API_VERSION.value}`)
    console.log(`API Prefix: ${env.API_PREFIX.value}`)
    console.log('========================================')

    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÅÆÂèñÂæó
    const database = getDb()
    console.log('Database connection obtained')

    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÅÆ„ÉÜ„Çπ„Éà
    try {
      await database.execute('SELECT 1')
      console.log('Database connection test successful')
    } catch (dbError) {
      console.error('Database connection test failed:', dbError)
      throw dbError
    }

    // Express„Ç¢„Éó„É™„ÅÆ‰ΩúÊàê
    const app = createApp({ database })
    console.log('Express app created')

    // „Çµ„Éº„Éê„Éº„ÅÆËµ∑Âãï
    const port = env.PORT.value
    const server = app.listen(port, () => {
      console.log('========================================')
      console.log(`üöÄ API server is running`)
      console.log(`üìç Environment: ${environment}`)
      console.log(`üîó URL: http://localhost:${port}`)
      console.log(`üè• Health: http://localhost:${port}/health`)
      console.log(
        `üìö API Base: http://localhost:${port}${env.API_PREFIX.value}/${env.API_VERSION.value}`,
      )
      console.log('========================================')
    })

    // „Ç∞„É¨„Éº„Çπ„Éï„É´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥
    const shutdown = () => {
      console.log('Shutting down server...')
      server.close(() => {
        console.log('HTTP server closed')
        process.exit(0)
      })
    }

    process.on('SIGTERM', shutdown)
    process.on('SIGINT', shutdown)
  } catch (error) {
    console.error('Failed to start server:', error)
    process.exit(1)
  }
}

// „Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï
startServer()
