services:
  postgres:
    image: postgres:16-alpine
    container_name: beauty-salon-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-beauty_salon}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - beauty-salon-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: beauty-salon-backend
    env_file:
      - .env
    environment:
      # Override specific values for Docker networking
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-beauty_salon}
      
      # Email - Use Docker service names
      MAILHOG_HOST: mailhog
      
      # Storage - Use Docker service names
      MINIO_ENDPOINT: http://minio:9000
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./backend:/app/backend:cached
      - backend_node_modules:/app/backend/node_modules
      - pnpm_store:/root/.local/share/pnpm/store
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - beauty-salon-network
    command: pnpm --filter @beauty-salon-backend/server dev

  migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: beauty-salon-migration
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-beauty_salon}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - beauty-salon-network
    command: pnpm --filter @beauty-salon-backend/database run migrate

  mailhog:
    image: mailhog/mailhog:latest
    container_name: beauty-salon-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    restart: unless-stopped
    networks:
      - beauty-salon-network

  minio:
    image: minio/minio:latest
    container_name: beauty-salon-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_ACCESS_KEY:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - beauty-salon-network
    command: server /data --console-address ":9001"

  minio-init:
    image: minio/mc:latest
    container_name: beauty-salon-minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_ACCESS_KEY:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-beauty-salon-dev}
    networks:
      - beauty-salon-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb myminio/$$MINIO_BUCKET --ignore-existing;
      /usr/bin/mc anonymous set download myminio/$$MINIO_BUCKET;
      exit 0;
      "

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: beauty-salon-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - beauty-salon-network

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: beauty-salon-grafana
    ports:
      - "${GRAFANA_PORT:-3100}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - beauty-salon-network
    depends_on:
      - prometheus

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-beauty_salon}?sslmode=disable"
      PG_EXPORTER_WEB_LISTEN_ADDRESS: ":9187"
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    networks:
      - beauty-salon-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  beauty-salon-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  backend_node_modules:
  pnpm_store:
  prometheus_data:
  grafana_data: