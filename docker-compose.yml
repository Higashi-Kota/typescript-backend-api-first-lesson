services:
  postgres:
    image: postgres:16-alpine
    container_name: beauty-salon-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-beauty_salon}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - beauty-salon-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: beauty-salon-backend
    environment:
      NODE_ENV: development
      PORT: ${PORT:-3000}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-beauty_salon}
      JWT_SECRET: ${JWT_SECRET:-development-secret-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_FROM: ${SMTP_FROM:-noreply@beauty-salon.local}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-beauty-salon}
      S3_REGION: ${S3_REGION:-us-east-1}
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./backend:/app/backend:cached
      - backend_node_modules:/app/backend/node_modules
      - pnpm_store:/root/.local/share/pnpm/store
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - beauty-salon-network
    command: pnpm --filter @beauty-salon-backend/server dev

  migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: beauty-salon-migration
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-beauty_salon}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - beauty-salon-network
    command: pnpm --filter @beauty-salon-backend/migration run migrate

  mailhog:
    image: mailhog/mailhog:latest
    container_name: beauty-salon-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    restart: unless-stopped
    networks:
      - beauty-salon-network

  minio:
    image: minio/minio:latest
    container_name: beauty-salon-minio
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - beauty-salon-network
    command: server /data --console-address ":9001"

  minio-init:
    image: minio/mc:latest
    container_name: beauty-salon-minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-beauty-salon}
    networks:
      - beauty-salon-network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb myminio/$$S3_BUCKET --ignore-existing;
      /usr/bin/mc anonymous set download myminio/$$S3_BUCKET;
      exit 0;
      "

networks:
  beauty-salon-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  backend_node_modules:
  pnpm_store: